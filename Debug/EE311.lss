
EE311.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000150e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ec  00800060  0000150e  000015a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  0080014c  0080014c  0000168e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000168e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fd4  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000882  00000000  00000000  000027d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa0  00000000  00000000  00003056  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00003af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057a  00000000  00000000  00003cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a2  00000000  00000000  0000423e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000045e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	4d c1       	rjmp	.+666    	; 0x2a2 <__vector_3>
       8:	7a c1       	rjmp	.+756    	; 0x2fe <__vector_4>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	59 c0       	rjmp	.+178    	; 0xc0 <__vector_6>
       e:	99 c0       	rjmp	.+306    	; 0x142 <__vector_7>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	23 c0       	rjmp	.+70     	; 0x5e <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	11 e0       	ldi	r17, 0x01	; 1
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	ee e0       	ldi	r30, 0x0E	; 14
      3a:	f5 e1       	ldi	r31, 0x15	; 21
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ac 34       	cpi	r26, 0x4C	; 76
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	21 e0       	ldi	r18, 0x01	; 1
      4a:	ac e4       	ldi	r26, 0x4C	; 76
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a1 37       	cpi	r26, 0x71	; 113
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	85 d1       	rcall	.+778    	; 0x364 <main>
      5a:	57 ca       	rjmp	.-2898   	; 0xfffff50a <__eeprom_end+0xff7ef50a>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_11>:
 *  Author: sshe325
 */ 

#include "interrupts.h"

ISR(USART_RXC_vect){
      5e:	1f 92       	push	r1
      60:	0f 92       	push	r0
      62:	0f b6       	in	r0, 0x3f	; 63
      64:	0f 92       	push	r0
      66:	11 24       	eor	r1, r1
      68:	cf 93       	push	r28
      6a:	df 93       	push	r29
      6c:	00 d0       	rcall	.+0      	; 0x6e <__vector_11+0x10>
      6e:	cd b7       	in	r28, 0x3d	; 61
      70:	de b7       	in	r29, 0x3e	; 62
	//dynamically allocate and reallocate space for string
	str_buffer = calloc(1,sizeof(char));
      72:	61 e0       	ldi	r22, 0x01	; 1
      74:	70 e0       	ldi	r23, 0x00	; 0
      76:	81 e0       	ldi	r24, 0x01	; 1
      78:	90 e0       	ldi	r25, 0x00	; 0
      7a:	e6 d3       	rcall	.+1996   	; 0x848 <calloc>
      7c:	8c 01       	movw	r16, r24
      7e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <str_buffer+0x1>
      82:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <str_buffer>
	char* buffer_ptr = str_buffer;
	int size = 1;
	*str_buffer = uart_receive();
      86:	af d3       	rcall	.+1886   	; 0x7e6 <uart_receive>
      88:	f8 01       	movw	r30, r16
      8a:	80 83       	st	Z, r24

ISR(USART_RXC_vect){
	//dynamically allocate and reallocate space for string
	str_buffer = calloc(1,sizeof(char));
	char* buffer_ptr = str_buffer;
	int size = 1;
      8c:	01 e0       	ldi	r16, 0x01	; 1
      8e:	10 e0       	ldi	r17, 0x00	; 0
	*str_buffer = uart_receive();
	//only end receive when we receive a newline
	while ((*buffer_ptr != '\n') || (*buffer_ptr != '\r')){
		str_buffer = realloc(str_buffer,(++size)*sizeof(char));
      90:	0f 5f       	subi	r16, 0xFF	; 255
      92:	1f 4f       	sbci	r17, 0xFF	; 255
      94:	b8 01       	movw	r22, r16
      96:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <str_buffer>
      9a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <str_buffer+0x1>
      9e:	0f d5       	rcall	.+2590   	; 0xabe <realloc>
      a0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <str_buffer+0x1>
      a4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <str_buffer>
		//make a null terminated string for strcat()
		char uart_char[2];
		uart_char[0] = uart_receive();
      a8:	9e d3       	rcall	.+1852   	; 0x7e6 <uart_receive>
      aa:	89 83       	std	Y+1, r24	; 0x01
		uart_char[1] = '\0';
      ac:	1a 82       	std	Y+2, r1	; 0x02
		strcat(str_buffer,uart_char);
      ae:	be 01       	movw	r22, r28
      b0:	6f 5f       	subi	r22, 0xFF	; 255
      b2:	7f 4f       	sbci	r23, 0xFF	; 255
      b4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <str_buffer>
      b8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <str_buffer+0x1>
      bc:	ec d6       	rcall	.+3544   	; 0xe96 <strcat>
      be:	e8 cf       	rjmp	.-48     	; 0x90 <__vector_11+0x32>

000000c0 <__vector_6>:
	//set flag to indicate received data
	data_received = 1;
}

//interrupt to handle T/4 or 3T/4 time crossing
ISR(TIMER1_COMPA_vect){
      c0:	1f 92       	push	r1
      c2:	0f 92       	push	r0
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	0f 92       	push	r0
      c8:	11 24       	eor	r1, r1
      ca:	8f 93       	push	r24
      cc:	9f 93       	push	r25
		//turn off PWM timer
		TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
      ce:	85 b5       	in	r24, 0x25	; 37
      d0:	88 7f       	andi	r24, 0xF8	; 248
      d2:	85 bd       	out	0x25, r24	; 37
		//PORTD &= ~(1<<PD7);
		//turn on right NMOS
		//PORTB &= ~(1<<PB0);
		
		//indicate that RHS/LHS voltage are both off
		voltage_right_on = 0;
      d4:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <voltage_right_on+0x1>
      d8:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <voltage_right_on>
		voltage_left_on = 0;
      dc:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <voltage_left_on+0x1>
      e0:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <voltage_left_on>
		
		//since we have stopped pulsing PWM, stop reading current ADC
		readadci = 0;
      e4:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <readadci+0x1>
      e8:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <readadci>
		//disable PWM signals
		if (!t2){
      ec:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <t2>
      f0:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <t2+0x1>
      f4:	89 2b       	or	r24, r25
      f6:	79 f4       	brne	.+30     	; 0x116 <__vector_6+0x56>
			//right to left current
			//turn off PMOSes, turn on left NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
      f8:	c2 98       	cbi	0x18, 2	; 24
			//turn on left NMOS
			PORTB &= ~(1<<PB1);
      fa:	c1 98       	cbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
      fc:	97 98       	cbi	0x12, 7	; 18
			//turn off right NMOS
			PORTB |= (1<<PB0);
      fe:	c0 9a       	sbi	0x18, 0	; 24
			//indicate that we are ready to start reading motor LHS back emf
			readadc = 1;
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <readadc+0x1>
     108:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <readadc>
			readadcmotorleft = 1;
     10c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <readadcmotorleft+0x1>
     110:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <readadcmotorleft>
     114:	0e c0       	rjmp	.+28     	; 0x132 <__vector_6+0x72>
		}
		else{
			//left to right current
			//turn off PMOSes, turn on right NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
     116:	c2 98       	cbi	0x18, 2	; 24
			//turn off left NMOS
			PORTB |= (1<<PB1);
     118:	c1 9a       	sbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     11a:	97 98       	cbi	0x12, 7	; 18
			//turn on right NMOS
			PORTB &= ~(1<<PB0);
     11c:	c0 98       	cbi	0x18, 0	; 24
			//indicate that we are ready to start reading motor RHS back emf
			readadc = 1;
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <readadc+0x1>
     126:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <readadc>
			readadcmotorright = 1;
     12a:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <readadcmotorright+0x1>
     12e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <readadcmotorright>
		}
			
		//reset PWM timer counter
		TCNT2 = 0;
     132:	14 bc       	out	0x24, r1	; 36
}
     134:	9f 91       	pop	r25
     136:	8f 91       	pop	r24
     138:	0f 90       	pop	r0
     13a:	0f be       	out	0x3f, r0	; 63
     13c:	0f 90       	pop	r0
     13e:	1f 90       	pop	r1
     140:	18 95       	reti

00000142 <__vector_7>:

//interrupt to handle T or T/2 time crossing
ISR(TIMER1_COMPB_vect){
     142:	1f 92       	push	r1
     144:	0f 92       	push	r0
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	0f 92       	push	r0
     14a:	11 24       	eor	r1, r1
     14c:	8f 93       	push	r24
     14e:	9f 93       	push	r25
		TCCR1B |= (1<<CS12);
		TCCR1B &= ~((1<<CS11) | (1<<CS10));
		stop_counter = 0;
	}*/

		if (t2){
     150:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <t2>
     154:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <t2+0x1>
     158:	89 2b       	or	r24, r25
     15a:	09 f4       	brne	.+2      	; 0x15e <__vector_7+0x1c>
     15c:	4d c0       	rjmp	.+154    	; 0x1f8 <__vector_7+0xb6>
			//T time crossing has been handled, T/2 is next
			t2 = 0;
     15e:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <t2+0x1>
     162:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <t2>
			//turn off timer1
			TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     166:	8e b5       	in	r24, 0x2e	; 46
     168:	88 7f       	andi	r24, 0xF8	; 248
     16a:	8e bd       	out	0x2e, r24	; 46
			//turn off PWM
			TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     16c:	85 b5       	in	r24, 0x25	; 37
     16e:	88 7f       	andi	r24, 0xF8	; 248
     170:	85 bd       	out	0x25, r24	; 37
			//reset timer1 counter
			TCNT1 = 0;
     172:	1d bc       	out	0x2d, r1	; 45
     174:	1c bc       	out	0x2c, r1	; 44
			//reset PWM timer counter
			TCNT2 = 0;
     176:	14 bc       	out	0x24, r1	; 36
			//turn on timer 1 again (prescaler /256)
			TCCR1B |= (1<<CS12);
     178:	8e b5       	in	r24, 0x2e	; 46
     17a:	84 60       	ori	r24, 0x04	; 4
     17c:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &= ~((1<<CS11) | (1<<CS10));
     17e:	8e b5       	in	r24, 0x2e	; 46
     180:	8c 7f       	andi	r24, 0xFC	; 252
     182:	8e bd       	out	0x2e, r24	; 46
			//turn on PWM signals
			if (t2){
     184:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <t2>
     188:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <t2+0x1>
     18c:	89 2b       	or	r24, r25
     18e:	b9 f0       	breq	.+46     	; 0x1be <__vector_7+0x7c>
				//right to left current
				//turn off left PMOS
				PORTB &= ~(1<<PB2);
     190:	c2 98       	cbi	0x18, 2	; 24
				//turn on left NMOS
				PORTB &= ~(1<<PB1);
     192:	c1 98       	cbi	0x18, 1	; 24
				//turn on right PMOS
				PORTD |= (1<<PD7);
     194:	97 9a       	sbi	0x12, 7	; 18
				//turn off right NMOS
				PORTB |= (1<<PB0);
     196:	c0 9a       	sbi	0x18, 0	; 24
				//indicate that we are ready to read adc from motor RHS to measure voltage and current
				readadc = 1;
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <readadc+0x1>
     1a0:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <readadc>
				readadcv = 1;
     1a4:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <readadcv+0x1>
     1a8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <readadcv>
				readadci = 1;
     1ac:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <readadci+0x1>
     1b0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <readadci>
				//indicate that RHS voltage is on
				voltage_right_on = 1;
     1b4:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <voltage_right_on+0x1>
     1b8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <voltage_right_on>
     1bc:	16 c0       	rjmp	.+44     	; 0x1ea <__vector_7+0xa8>
			}
			else{
				//left to right current
				//turn on left PMOS
				PORTB |= (1<<PB2);
     1be:	c2 9a       	sbi	0x18, 2	; 24
				//turn off left NMOS
				PORTB |= (1<<PB1);
     1c0:	c1 9a       	sbi	0x18, 1	; 24
				//turn off right PMOS
				PORTD &= ~(1<<PD7);
     1c2:	97 98       	cbi	0x12, 7	; 18
				//turn on right NMOS
				PORTB &= ~(1<<PB0);
     1c4:	c0 98       	cbi	0x18, 0	; 24
				//indicate that we are ready to read adc from motor LHS to measure voltage and current
				readadc = 1;
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <readadc+0x1>
     1ce:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <readadc>
				readadcv = 1;
     1d2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <readadcv+0x1>
     1d6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <readadcv>
				readadci = 1;
     1da:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <readadci+0x1>
     1de:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <readadci>
				//indicate that LHS voltage is on
				voltage_left_on = 1;
     1e2:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <voltage_left_on+0x1>
     1e6:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <voltage_left_on>
			}
			//turn on PWM timer counter (prescaler /256)
			TCCR2 |= ((1<<CS22) | (1<<CS21));
     1ea:	85 b5       	in	r24, 0x25	; 37
     1ec:	86 60       	ori	r24, 0x06	; 6
     1ee:	85 bd       	out	0x25, r24	; 37
			TCCR2 &= ~((1<<CS20));
     1f0:	85 b5       	in	r24, 0x25	; 37
     1f2:	8e 7f       	andi	r24, 0xFE	; 254
     1f4:	85 bd       	out	0x25, r24	; 37
     1f6:	4e c0       	rjmp	.+156    	; 0x294 <__vector_7+0x152>
			
		}
		else{
			t2 = 1;
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <t2+0x1>
     200:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <t2>
			//turn off timer1
			TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     204:	8e b5       	in	r24, 0x2e	; 46
     206:	88 7f       	andi	r24, 0xF8	; 248
     208:	8e bd       	out	0x2e, r24	; 46
			//turn off PWM
			TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     20a:	85 b5       	in	r24, 0x25	; 37
     20c:	88 7f       	andi	r24, 0xF8	; 248
     20e:	85 bd       	out	0x25, r24	; 37
			//reset timer1 counter
			TCNT1 = 0;
     210:	1d bc       	out	0x2d, r1	; 45
     212:	1c bc       	out	0x2c, r1	; 44
			//reset PWM timer counter
			TCNT2 = 0;
     214:	14 bc       	out	0x24, r1	; 36
			//turn on timer 1 again (prescaler /256)
			TCCR1B |= (1<<CS12);
     216:	8e b5       	in	r24, 0x2e	; 46
     218:	84 60       	ori	r24, 0x04	; 4
     21a:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &= ~((1<<CS11) | (1<<CS10));
     21c:	8e b5       	in	r24, 0x2e	; 46
     21e:	8c 7f       	andi	r24, 0xFC	; 252
     220:	8e bd       	out	0x2e, r24	; 46
			//turn on PWM timer counter (prescaler /64)
			//turn on PWM signals
			if (t2){
     222:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <t2>
     226:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <t2+0x1>
     22a:	89 2b       	or	r24, r25
     22c:	b9 f0       	breq	.+46     	; 0x25c <__vector_7+0x11a>
				//right to left current
				//turn off left PMOS
				PORTB &= ~(1<<PB2);
     22e:	c2 98       	cbi	0x18, 2	; 24
				//turn on left NMOS
				PORTB &= ~(1<<PB1);
     230:	c1 98       	cbi	0x18, 1	; 24
				//turn on right PMOS
				PORTD |= (1<<PD7);
     232:	97 9a       	sbi	0x12, 7	; 18
				//turn off right NMOS
				PORTB |= (1<<PB0);
     234:	c0 9a       	sbi	0x18, 0	; 24
				//indicate that we are ready to read adc from motor RHS to measure voltage and current
				readadc = 1;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <readadc+0x1>
     23e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <readadc>
				readadcv = 1;
     242:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <readadcv+0x1>
     246:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <readadcv>
				readadci = 1;
     24a:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <readadci+0x1>
     24e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <readadci>
				//indicate that RHS voltage is on
				voltage_right_on = 1;
     252:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <voltage_right_on+0x1>
     256:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <voltage_right_on>
     25a:	16 c0       	rjmp	.+44     	; 0x288 <__vector_7+0x146>
			}
			else{
				//left to right current
				//turn on left PMOS
				PORTB |= (1<<PB2);
     25c:	c2 9a       	sbi	0x18, 2	; 24
				//turn off left NMOS
				PORTB |= (1<<PB1);
     25e:	c1 9a       	sbi	0x18, 1	; 24
				//turn off right PMOS
				PORTD &= ~(1<<PD7);
     260:	97 98       	cbi	0x12, 7	; 18
				//turn on right NMOS
				PORTB &= ~(1<<PB0);
     262:	c0 98       	cbi	0x18, 0	; 24
				//indicate that we are ready to read adc from motor LHS to measure voltage and current
				readadc = 1;
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <readadc+0x1>
     26c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <readadc>
				readadcv = 1;
     270:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <readadcv+0x1>
     274:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <readadcv>
				readadci = 1;
     278:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <readadci+0x1>
     27c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <readadci>
				//indicate that LHS voltage is on
				voltage_left_on = 1;
     280:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <voltage_left_on+0x1>
     284:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <voltage_left_on>
			}
			//turn on PWM timer counter (prescaler /256)
			TCCR2 |= ((1<<CS22) | (1<<CS21));
     288:	85 b5       	in	r24, 0x25	; 37
     28a:	86 60       	ori	r24, 0x06	; 6
     28c:	85 bd       	out	0x25, r24	; 37
			TCCR2 &= ~((1<<CS20));
     28e:	85 b5       	in	r24, 0x25	; 37
     290:	8e 7f       	andi	r24, 0xFE	; 254
     292:	85 bd       	out	0x25, r24	; 37
			
		}
		//++stop_counter;
		
}
     294:	9f 91       	pop	r25
     296:	8f 91       	pop	r24
     298:	0f 90       	pop	r0
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	0f 90       	pop	r0
     29e:	1f 90       	pop	r1
     2a0:	18 95       	reti

000002a2 <__vector_3>:

//PWM duty cycle expired, shut off PWM signals
ISR(TIMER2_COMP_vect){
     2a2:	1f 92       	push	r1
     2a4:	0f 92       	push	r0
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	0f 92       	push	r0
     2aa:	11 24       	eor	r1, r1
     2ac:	8f 93       	push	r24
     2ae:	9f 93       	push	r25
		PORTD &= ~(1<<PD7);
		//turn off right NMOS
		PORTB |= (1<<PB0);
	}*/
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     2b0:	85 b5       	in	r24, 0x25	; 37
     2b2:	88 7f       	andi	r24, 0xF8	; 248
     2b4:	85 bd       	out	0x25, r24	; 37
	
	if (t2){
     2b6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <t2>
     2ba:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <t2+0x1>
     2be:	89 2b       	or	r24, r25
     2c0:	49 f0       	breq	.+18     	; 0x2d4 <__vector_3+0x32>
		//right to left current
		//turn off PMOSes, turn on left NMOS so motor brakes
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     2c2:	c2 98       	cbi	0x18, 2	; 24
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     2c4:	c1 98       	cbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     2c6:	97 98       	cbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     2c8:	c0 9a       	sbi	0x18, 0	; 24
		//indicate that RHS voltage is off
		voltage_right_on = 0;
     2ca:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <voltage_right_on+0x1>
     2ce:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <voltage_right_on>
     2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <__vector_3+0x42>
	}
	else{
		//left to right current
		//turn off PMOSes, turn on right NMOS so motor brakes?!
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     2d4:	c2 98       	cbi	0x18, 2	; 24
		//turn off left NMOS
		PORTB |= (1<<PB1);
     2d6:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     2d8:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     2da:	c0 98       	cbi	0x18, 0	; 24
		//indicate that LHS voltage is off
		voltage_left_on = 0;
     2dc:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <voltage_left_on+0x1>
     2e0:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <voltage_left_on>
	}
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     2e4:	85 b5       	in	r24, 0x25	; 37
     2e6:	86 60       	ori	r24, 0x06	; 6
     2e8:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     2ea:	85 b5       	in	r24, 0x25	; 37
     2ec:	8e 7f       	andi	r24, 0xFE	; 254
     2ee:	85 bd       	out	0x25, r24	; 37
}
     2f0:	9f 91       	pop	r25
     2f2:	8f 91       	pop	r24
     2f4:	0f 90       	pop	r0
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	0f 90       	pop	r0
     2fa:	1f 90       	pop	r1
     2fc:	18 95       	reti

000002fe <__vector_4>:

//PWM restarted, change switches according to current current direction
ISR(TIMER2_OVF_vect){
     2fe:	1f 92       	push	r1
     300:	0f 92       	push	r0
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	0f 92       	push	r0
     306:	11 24       	eor	r1, r1
     308:	8f 93       	push	r24
     30a:	9f 93       	push	r25
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     30c:	85 b5       	in	r24, 0x25	; 37
     30e:	88 7f       	andi	r24, 0xF8	; 248
     310:	85 bd       	out	0x25, r24	; 37
	TCCR2 = 0;
     312:	15 bc       	out	0x25, r1	; 37
	if (t2){
     314:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <t2>
     318:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <t2+0x1>
     31c:	89 2b       	or	r24, r25
     31e:	59 f0       	breq	.+22     	; 0x336 <__vector_4+0x38>
		//right to left current
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     320:	c2 98       	cbi	0x18, 2	; 24
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     322:	c1 98       	cbi	0x18, 1	; 24
		//turn on right PMOS
		PORTD |= (1<<PD7);
     324:	97 9a       	sbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     326:	c0 9a       	sbi	0x18, 0	; 24
		//indicate that RHS voltage is on
		voltage_right_on = 1;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <voltage_right_on+0x1>
     330:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <voltage_right_on>
     334:	0a c0       	rjmp	.+20     	; 0x34a <__vector_4+0x4c>
	}
	else{
		//left to right current
		//turn on left PMOS
		PORTB |= (1<<PB2);
     336:	c2 9a       	sbi	0x18, 2	; 24
		//turn off left NMOS
		PORTB |= (1<<PB1);
     338:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     33a:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     33c:	c0 98       	cbi	0x18, 0	; 24
		//indicate that LHS voltage is on
		voltage_left_on = 1;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <voltage_left_on+0x1>
     346:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <voltage_left_on>
	}
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     34a:	85 b5       	in	r24, 0x25	; 37
     34c:	86 60       	ori	r24, 0x06	; 6
     34e:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     350:	85 b5       	in	r24, 0x25	; 37
     352:	8e 7f       	andi	r24, 0xFE	; 254
     354:	85 bd       	out	0x25, r24	; 37
     356:	9f 91       	pop	r25
     358:	8f 91       	pop	r24
     35a:	0f 90       	pop	r0
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	0f 90       	pop	r0
     360:	1f 90       	pop	r1
     362:	18 95       	reti

00000364 <main>:
volatile unsigned int voltleft = 12;
volatile unsigned int voltright = 21;
volatile unsigned int resonant_done = 1;

int main(void)
{
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	c6 5d       	subi	r28, 0xD6	; 214
     36e:	d1 09       	sbc	r29, r1
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
	t2 = 0; //flag for if T/2 time crossing is next to be handled
     37a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <t2+0x1>
     37e:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <t2>
	stop_counter = 0; //counter to stop PWM every STOPCYCLE/2 number of cycles
     382:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <stop_counter+0x1>
     386:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <stop_counter>
	data_received = 0; //set data received flag to 0 initially
     38a:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <data_received+0x1>
     38e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <data_received>
	readadc = 0;
     392:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <readadc+0x1>
     396:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <readadc>
	readadcv = 0;
     39a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <readadcv+0x1>
     39e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <readadcv>
	readadci = 0;
     3a2:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <readadci+0x1>
     3a6:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <readadci>
	voltagereference = 5000;
     3aa:	88 e8       	ldi	r24, 0x88	; 136
     3ac:	93 e1       	ldi	r25, 0x13	; 19
     3ae:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <voltagereference+0x1>
     3b2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <voltagereference>
	//set PWM ports as output
	DDRB |= ((1<<PB2)|(1<<PB1)|(1<<PB0));
     3b6:	87 b3       	in	r24, 0x17	; 23
     3b8:	87 60       	ori	r24, 0x07	; 7
     3ba:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<PD7);
     3bc:	8f 9a       	sbi	0x11, 7	; 17
	
	//set normal timer mode
	TCCR2 &= ~(1<<WGM20);
     3be:	85 b5       	in	r24, 0x25	; 37
     3c0:	8f 7b       	andi	r24, 0xBF	; 191
     3c2:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(1<<WGM21);
     3c4:	85 b5       	in	r24, 0x25	; 37
     3c6:	87 7f       	andi	r24, 0xF7	; 247
     3c8:	85 bd       	out	0x25, r24	; 37
	
	//disconnect OC2 port
	TCCR2 &= ~((1<<COM21) | (1<<COM20));
     3ca:	85 b5       	in	r24, 0x25	; 37
     3cc:	8f 7c       	andi	r24, 0xCF	; 207
     3ce:	85 bd       	out	0x25, r24	; 37
	
	//set output compare value for timer 2 between 0-255 (OCR2/255 % duty cycle)
	duty_request = 128;
     3d0:	80 e8       	ldi	r24, 0x80	; 128
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <duty_request+0x1>
     3d8:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <duty_request>
	OCR2 = duty_request;
     3dc:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <duty_request>
     3e0:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <duty_request+0x1>
     3e4:	83 bd       	out	0x23, r24	; 35
	
	//set prescaler of 64 (gives effective PWM frequency of 980Hz)
	//TCCR2 |= (1<<CS22);
	//TCCR2 &= ~((1<<CS21) | (1<<CS20));
	//set prescaler of 256 (gives effective PWM frequency of 245Hz)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     3e6:	85 b5       	in	r24, 0x25	; 37
     3e8:	86 60       	ori	r24, 0x06	; 6
     3ea:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     3ec:	85 b5       	in	r24, 0x25	; 37
     3ee:	8e 7f       	andi	r24, 0xFE	; 254
     3f0:	85 bd       	out	0x25, r24	; 37
	
	//turn off PMOSes, turn on NMOSes so motor brakes?!
	//turn off left PMOS
	PORTB &= ~(1<<PB2);
     3f2:	c2 98       	cbi	0x18, 2	; 24
	//turn on left NMOS
	PORTB &= ~(1<<PB1);
     3f4:	c1 98       	cbi	0x18, 1	; 24
	//turn off right PMOS
	PORTD &= ~(1<<PD7);
     3f6:	97 98       	cbi	0x12, 7	; 18
	//turn on right NMOS
	PORTB &= ~(1<<PB0);
     3f8:	c0 98       	cbi	0x18, 0	; 24
	
	//set timer 1 to normal mode
	TCCR1B &= ~((1<<WGM13) | (1<<WGM12));
     3fa:	8e b5       	in	r24, 0x2e	; 46
     3fc:	87 7e       	andi	r24, 0xE7	; 231
     3fe:	8e bd       	out	0x2e, r24	; 46
	TCCR1A &= ~((1<<WGM11) | (1<<WGM10));
     400:	8f b5       	in	r24, 0x2f	; 47
     402:	8c 7f       	andi	r24, 0xFC	; 252
     404:	8f bd       	out	0x2f, r24	; 47
	
	//set prescaler to /256
	TCCR1B |= (1<<CS12);
     406:	8e b5       	in	r24, 0x2e	; 46
     408:	84 60       	ori	r24, 0x04	; 4
     40a:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1<<CS11) | (1<<CS10));
     40c:	8e b5       	in	r24, 0x2e	; 46
     40e:	8c 7f       	andi	r24, 0xFC	; 252
     410:	8e bd       	out	0x2e, r24	; 46
	
	//set timer 1 overflow A and B compare values
	OCR1A = 1150; //for T/4
     412:	8e e7       	ldi	r24, 0x7E	; 126
     414:	94 e0       	ldi	r25, 0x04	; 4
     416:	9b bd       	out	0x2b, r25	; 43
     418:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 2300; //for 12.5Hz resonant frequency (for T/2)
     41a:	8c ef       	ldi	r24, 0xFC	; 252
     41c:	98 e0       	ldi	r25, 0x08	; 8
     41e:	99 bd       	out	0x29, r25	; 41
     420:	88 bd       	out	0x28, r24	; 40
	//enable timer 2 compare match interrupt and overflow interrupt
	TIMSK |= ((1<<OCIE2) | (1<<TOIE2));
     422:	89 b7       	in	r24, 0x39	; 57
     424:	80 6c       	ori	r24, 0xC0	; 192
     426:	89 bf       	out	0x39, r24	; 57
	//enable timer 1 compare match A and B interrupts
	TIMSK |= ((1<<OCIE1A) | (1<<OCIE1B));
     428:	89 b7       	in	r24, 0x39	; 57
     42a:	88 61       	ori	r24, 0x18	; 24
     42c:	89 bf       	out	0x39, r24	; 57
	//mark T PWM pulse to be handled next
	t2 = 0;
     42e:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <t2+0x1>
     432:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <t2>
	
	//enable and initialise UART
	uart_init();
     436:	b4 d1       	rcall	.+872    	; 0x7a0 <uart_init>
	//enable and initialise ADC
	//adc_init();
	//enable global interrupts
	sei();
     438:	78 94       	sei
		if (OCR2 != duty_request)
			OCR2 = duty_request; //if the duty cycle has been changed, set it to the newly received value
		
		//if data has been received, parse json
		if (data_received){
			const char left_bracket[2] = "{";
     43a:	0f 2e       	mov	r0, r31
     43c:	fb e7       	ldi	r31, 0x7B	; 123
     43e:	6f 2e       	mov	r6, r31
     440:	71 2c       	mov	r7, r1
     442:	f0 2d       	mov	r31, r0
				}
			}
			//we have processed everything
			//free memory, and continue to next iteration
			data_received = 0;
			transmit_data = 1;
     444:	aa 24       	eor	r10, r10
     446:	a3 94       	inc	r10
     448:	b1 2c       	mov	r11, r1
					memcpy(check_req, &splitstrings[2][1], 3);
					check_req[3] = '\0';
					if (strcmp(check_req,"req") == 0){
						//if true, check mass flow request value
						char check_reqval[8];
						memcpy(check_reqval, &splitstrings[2][8], 7);
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	2c 01       	movw	r4, r24
		}
		if (transmit_data){
			//disable receiver while transmitting to avoid echo-back
			UCSRB &= ~(1<<RXEN);
			char transmit_buffer[200];
			sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3d\",\n%11s\"cur\": \"%3d\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%d.%dW\",\n%11s\"freq\": \"%d.%dHz\",\n%11s\"curr\": \"%dmA\",\n%11s\"volt\": \"%d.%dV\",\n%7s}\n%3s}\n}", "", "", "", "", "", duty_request, "", OCR2, "", "", "", "", "", powerleft, powerright, "", freqleft, freqright, "", current, "", voltleft, voltright, "", "");
     450:	09 e7       	ldi	r16, 0x79	; 121
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	0f 2e       	mov	r0, r31
     456:	fe e7       	ldi	r31, 0x7E	; 126
     458:	2f 2e       	mov	r2, r31
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	3f 2e       	mov	r3, r31
     45e:	f0 2d       	mov	r31, r0
	//enable global interrupts
	sei();
    while (1)
    {
		//add gradual increase logic to couple with resonant frequency detection module
		if (OCR2 != duty_request)
     460:	83 b5       	in	r24, 0x23	; 35
     462:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <duty_request>
     466:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <duty_request+0x1>
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	82 17       	cp	r24, r18
     46e:	93 07       	cpc	r25, r19
     470:	29 f0       	breq	.+10     	; 0x47c <__stack+0x1d>
			OCR2 = duty_request; //if the duty cycle has been changed, set it to the newly received value
     472:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <duty_request>
     476:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <duty_request+0x1>
     47a:	83 bd       	out	0x23, r24	; 35
		
		//if data has been received, parse json
		if (data_received){
     47c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <data_received>
     480:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <data_received+0x1>
     484:	89 2b       	or	r24, r25
     486:	09 f4       	brne	.+2      	; 0x48a <__stack+0x2b>
     488:	dd c0       	rjmp	.+442    	; 0x644 <__stack+0x1e5>
			const char left_bracket[2] = "{";
     48a:	cb 52       	subi	r28, 0x2B	; 43
     48c:	df 4f       	sbci	r29, 0xFF	; 255
     48e:	79 82       	std	Y+1, r7	; 0x01
     490:	68 82       	st	Y, r6
     492:	c5 5d       	subi	r28, 0xD5	; 213
     494:	d0 40       	sbci	r29, 0x00	; 0
			char** splitstrings; //pointer to hold arrays of c-strings
			unsigned int k = 1; //iterator for array of c-strings
			
			splitstrings = (char**)malloc(10*sizeof(char*));
     496:	84 e1       	ldi	r24, 0x14	; 20
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	f0 d1       	rcall	.+992    	; 0x87c <malloc>
     49c:	4c 01       	movw	r8, r24
     49e:	7c 01       	movw	r14, r24
     4a0:	6c 01       	movw	r12, r24
     4a2:	94 e1       	ldi	r25, 0x14	; 20
     4a4:	c9 0e       	add	r12, r25
     4a6:	d1 1c       	adc	r13, r1
			
			for (int j = 0; j < 10; ++j){
				splitstrings[j] = (char*) malloc(10);
     4a8:	8a e0       	ldi	r24, 0x0A	; 10
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	e7 d1       	rcall	.+974    	; 0x87c <malloc>
     4ae:	d7 01       	movw	r26, r14
     4b0:	8d 93       	st	X+, r24
     4b2:	9d 93       	st	X+, r25
     4b4:	7d 01       	movw	r14, r26
			char** splitstrings; //pointer to hold arrays of c-strings
			unsigned int k = 1; //iterator for array of c-strings
			
			splitstrings = (char**)malloc(10*sizeof(char*));
			
			for (int j = 0; j < 10; ++j){
     4b6:	ac 15       	cp	r26, r12
     4b8:	bd 05       	cpc	r27, r13
     4ba:	b1 f7       	brne	.-20     	; 0x4a8 <__stack+0x49>
				splitstrings[j] = (char*) malloc(10);
			}
			
			splitstrings[0] = strtok(str_buffer,left_bracket);
     4bc:	be 01       	movw	r22, r28
     4be:	6b 52       	subi	r22, 0x2B	; 43
     4c0:	7f 4f       	sbci	r23, 0xFF	; 255
     4c2:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <str_buffer>
     4c6:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <str_buffer+0x1>
     4ca:	d1 d4       	rcall	.+2466   	; 0xe6e <strtok>
     4cc:	f4 01       	movw	r30, r8
     4ce:	91 83       	std	Z+1, r25	; 0x01
     4d0:	80 83       	st	Z, r24
			
			while (splitstrings[k-1] != NULL){
     4d2:	89 2b       	or	r24, r25
     4d4:	81 f0       	breq	.+32     	; 0x4f6 <__stack+0x97>
     4d6:	74 01       	movw	r14, r8
     4d8:	f2 e0       	ldi	r31, 0x02	; 2
     4da:	ef 0e       	add	r14, r31
     4dc:	f1 1c       	adc	r15, r1
				splitstrings[k] = strtok(NULL,left_bracket);
     4de:	be 01       	movw	r22, r28
     4e0:	6b 52       	subi	r22, 0x2B	; 43
     4e2:	7f 4f       	sbci	r23, 0xFF	; 255
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	c2 d4       	rcall	.+2436   	; 0xe6e <strtok>
     4ea:	d7 01       	movw	r26, r14
     4ec:	8d 93       	st	X+, r24
     4ee:	9d 93       	st	X+, r25
     4f0:	7d 01       	movw	r14, r26
				splitstrings[j] = (char*) malloc(10);
			}
			
			splitstrings[0] = strtok(str_buffer,left_bracket);
			
			while (splitstrings[k-1] != NULL){
     4f2:	89 2b       	or	r24, r25
     4f4:	a1 f7       	brne	.-24     	; 0x4de <__stack+0x7f>
				++k;
			}
			
			//extract and validate data from JSON
			//check if id == 3
			if (splitstrings[0][1] == '3'){
     4f6:	d4 01       	movw	r26, r8
     4f8:	ed 91       	ld	r30, X+
     4fa:	fc 91       	ld	r31, X
     4fc:	11 97       	sbiw	r26, 0x01	; 1
     4fe:	81 81       	ldd	r24, Z+1	; 0x01
     500:	83 33       	cpi	r24, 0x33	; 51
     502:	09 f0       	breq	.+2      	; 0x506 <__stack+0xa7>
     504:	90 c0       	rjmp	.+288    	; 0x626 <__stack+0x1c7>
				//if true, check mfc key
				char check_mfc[4];
				memcpy(check_mfc, &splitstrings[1][1], 3);
     506:	12 96       	adiw	r26, 0x02	; 2
     508:	ed 91       	ld	r30, X+
     50a:	fc 91       	ld	r31, X
     50c:	13 97       	sbiw	r26, 0x03	; 3
     50e:	81 81       	ldd	r24, Z+1	; 0x01
     510:	92 81       	ldd	r25, Z+2	; 0x02
     512:	cf 52       	subi	r28, 0x2F	; 47
     514:	df 4f       	sbci	r29, 0xFF	; 255
     516:	99 83       	std	Y+1, r25	; 0x01
     518:	88 83       	st	Y, r24
     51a:	c1 5d       	subi	r28, 0xD1	; 209
     51c:	d0 40       	sbci	r29, 0x00	; 0
     51e:	83 81       	ldd	r24, Z+3	; 0x03
     520:	cd 52       	subi	r28, 0x2D	; 45
     522:	df 4f       	sbci	r29, 0xFF	; 255
     524:	88 83       	st	Y, r24
     526:	c3 5d       	subi	r28, 0xD3	; 211
     528:	d0 40       	sbci	r29, 0x00	; 0
				check_mfc[3] = '\0';
     52a:	cc 52       	subi	r28, 0x2C	; 44
     52c:	df 4f       	sbci	r29, 0xFF	; 255
     52e:	18 82       	st	Y, r1
     530:	c4 5d       	subi	r28, 0xD4	; 212
     532:	d0 40       	sbci	r29, 0x00	; 0
				//check for valid MFC key
				if (strcmp(check_mfc,"mfc") == 0){
     534:	66 e7       	ldi	r22, 0x76	; 118
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	ce 01       	movw	r24, r28
     53a:	8f 52       	subi	r24, 0x2F	; 47
     53c:	9f 4f       	sbci	r25, 0xFF	; 255
     53e:	c1 d4       	rcall	.+2434   	; 0xec2 <strcmp>
     540:	89 2b       	or	r24, r25
     542:	09 f0       	breq	.+2      	; 0x546 <__stack+0xe7>
     544:	70 c0       	rjmp	.+224    	; 0x626 <__stack+0x1c7>
					//if true, check if req key is present
					char check_req[4];
					memcpy(check_req, &splitstrings[2][1], 3);
     546:	f4 01       	movw	r30, r8
     548:	e4 80       	ldd	r14, Z+4	; 0x04
     54a:	f5 80       	ldd	r15, Z+5	; 0x05
     54c:	d7 01       	movw	r26, r14
     54e:	11 96       	adiw	r26, 0x01	; 1
     550:	8d 91       	ld	r24, X+
     552:	9c 91       	ld	r25, X
     554:	12 97       	sbiw	r26, 0x02	; 2
     556:	c3 53       	subi	r28, 0x33	; 51
     558:	df 4f       	sbci	r29, 0xFF	; 255
     55a:	99 83       	std	Y+1, r25	; 0x01
     55c:	88 83       	st	Y, r24
     55e:	cd 5c       	subi	r28, 0xCD	; 205
     560:	d0 40       	sbci	r29, 0x00	; 0
     562:	13 96       	adiw	r26, 0x03	; 3
     564:	8c 91       	ld	r24, X
     566:	c1 53       	subi	r28, 0x31	; 49
     568:	df 4f       	sbci	r29, 0xFF	; 255
     56a:	88 83       	st	Y, r24
     56c:	cf 5c       	subi	r28, 0xCF	; 207
     56e:	d0 40       	sbci	r29, 0x00	; 0
					check_req[3] = '\0';
     570:	c0 53       	subi	r28, 0x30	; 48
     572:	df 4f       	sbci	r29, 0xFF	; 255
     574:	18 82       	st	Y, r1
     576:	c0 5d       	subi	r28, 0xD0	; 208
     578:	d0 40       	sbci	r29, 0x00	; 0
					if (strcmp(check_req,"req") == 0){
     57a:	6a e7       	ldi	r22, 0x7A	; 122
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	ce 01       	movw	r24, r28
     580:	83 53       	subi	r24, 0x33	; 51
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	9e d4       	rcall	.+2364   	; 0xec2 <strcmp>
     586:	89 2b       	or	r24, r25
     588:	09 f0       	breq	.+2      	; 0x58c <__stack+0x12d>
     58a:	4d c0       	rjmp	.+154    	; 0x626 <__stack+0x1c7>
						//if true, check mass flow request value
						char check_reqval[8];
						memcpy(check_reqval, &splitstrings[2][8], 7);
     58c:	f7 01       	movw	r30, r14
     58e:	38 96       	adiw	r30, 0x08	; 8
     590:	87 e0       	ldi	r24, 0x07	; 7
     592:	d2 01       	movw	r26, r4
     594:	01 90       	ld	r0, Z+
     596:	0d 92       	st	X+, r0
     598:	8a 95       	dec	r24
     59a:	e1 f7       	brne	.-8      	; 0x594 <__stack+0x135>
						//isolate value from key-value pair using apostrophe as the delimiter
						check_reqval[7] = '\0';
     59c:	18 86       	std	Y+8, r1	; 0x08
						char check_val[4];
						char* commapos = strchr(check_reqval, '"');
     59e:	62 e2       	ldi	r22, 0x22	; 34
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	c2 01       	movw	r24, r4
     5a4:	83 d4       	rcall	.+2310   	; 0xeac <strchr>
						memcpy(check_val, check_reqval, (commapos - check_reqval));
     5a6:	7c 01       	movw	r14, r24
     5a8:	e4 18       	sub	r14, r4
     5aa:	f5 08       	sbc	r15, r5
     5ac:	a7 01       	movw	r20, r14
     5ae:	b2 01       	movw	r22, r4
     5b0:	ce 01       	movw	r24, r28
     5b2:	87 53       	subi	r24, 0x37	; 55
     5b4:	9f 4f       	sbci	r25, 0xFF	; 255
     5b6:	5f d4       	rcall	.+2238   	; 0xe76 <memcpy>
						check_val[commapos - check_reqval] = '\0';
     5b8:	e9 ec       	ldi	r30, 0xC9	; 201
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	ec 0f       	add	r30, r28
     5be:	fd 1f       	adc	r31, r29
     5c0:	ee 0d       	add	r30, r14
     5c2:	ff 1d       	adc	r31, r15
     5c4:	10 82       	st	Z, r1
						if (check_val[0] != '\0'){
     5c6:	c7 53       	subi	r28, 0x37	; 55
     5c8:	df 4f       	sbci	r29, 0xFF	; 255
     5ca:	88 81       	ld	r24, Y
     5cc:	c9 5c       	subi	r28, 0xC9	; 201
     5ce:	d0 40       	sbci	r29, 0x00	; 0
     5d0:	88 23       	and	r24, r24
     5d2:	49 f1       	breq	.+82     	; 0x626 <__stack+0x1c7>
							//if value was not empty
							unsigned int notzero = 0;
							//check if value is 0
							//we need to check if we received a 0 since strtol() returns a 0 on invalid inputs as well
							for (int n = 0; n < (commapos - check_reqval);++n){
     5d4:	1e 14       	cp	r1, r14
     5d6:	1f 04       	cpc	r1, r15
     5d8:	14 f5       	brge	.+68     	; 0x61e <__stack+0x1bf>
     5da:	fe 01       	movw	r30, r28
     5dc:	e7 53       	subi	r30, 0x37	; 55
     5de:	ff 4f       	sbci	r31, 0xFF	; 255
     5e0:	ee 0e       	add	r14, r30
     5e2:	ff 1e       	adc	r15, r31
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
								if (check_val[n] != '0'){
     5e8:	81 91       	ld	r24, Z+
     5ea:	80 33       	cpi	r24, 0x30	; 48
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <__stack+0x191>
									notzero = 1;
     5ee:	95 01       	movw	r18, r10
						if (check_val[0] != '\0'){
							//if value was not empty
							unsigned int notzero = 0;
							//check if value is 0
							//we need to check if we received a 0 since strtol() returns a 0 on invalid inputs as well
							for (int n = 0; n < (commapos - check_reqval);++n){
     5f0:	ee 15       	cp	r30, r14
     5f2:	ff 05       	cpc	r31, r15
     5f4:	c9 f7       	brne	.-14     	; 0x5e8 <__stack+0x189>
								if (check_val[n] != '0'){
									notzero = 1;
								}
							}
							if (notzero == 1){
     5f6:	21 30       	cpi	r18, 0x01	; 1
     5f8:	31 05       	cpc	r19, r1
     5fa:	89 f4       	brne	.+34     	; 0x61e <__stack+0x1bf>
								int duty_received = strtol(check_val,NULL,10); //turn duty cycle into a base 10 value
     5fc:	4a e0       	ldi	r20, 0x0A	; 10
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	ce 01       	movw	r24, r28
     606:	87 53       	subi	r24, 0x37	; 55
     608:	9f 4f       	sbci	r25, 0xFF	; 255
     60a:	18 d3       	rcall	.+1584   	; 0xc3c <strtol>
								if ((duty_received >= 0) && (duty_received <= 255)){
     60c:	6f 3f       	cpi	r22, 0xFF	; 255
     60e:	71 05       	cpc	r23, r1
     610:	09 f0       	breq	.+2      	; 0x614 <__stack+0x1b5>
     612:	48 f4       	brcc	.+18     	; 0x626 <__stack+0x1c7>
									//if true, duty request value is valid
									duty_request = duty_received;
     614:	70 93 6a 01 	sts	0x016A, r23	; 0x80016a <duty_request+0x1>
     618:	60 93 69 01 	sts	0x0169, r22	; 0x800169 <duty_request>
     61c:	04 c0       	rjmp	.+8      	; 0x626 <__stack+0x1c7>
								}
							}
							else{
								duty_request = 0; //stop the motor
     61e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <duty_request+0x1>
     622:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <duty_request>
					}
				}
			}
			//we have processed everything
			//free memory, and continue to next iteration
			data_received = 0;
     626:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <data_received+0x1>
     62a:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <data_received>
			transmit_data = 1;
     62e:	b0 92 4f 01 	sts	0x014F, r11	; 0x80014f <transmit_data+0x1>
     632:	a0 92 4e 01 	sts	0x014E, r10	; 0x80014e <transmit_data>
			//DONT FORGET TO FREE MEMORY
			free(str_buffer);
     636:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <str_buffer>
     63a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <str_buffer+0x1>
     63e:	b6 d1       	rcall	.+876    	; 0x9ac <free>
			free(splitstrings);
     640:	c4 01       	movw	r24, r8
     642:	b4 d1       	rcall	.+872    	; 0x9ac <free>
		}
		if (transmit_data){
     644:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <transmit_data>
     648:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <transmit_data+0x1>
     64c:	89 2b       	or	r24, r25
     64e:	09 f4       	brne	.+2      	; 0x652 <__stack+0x1f3>
     650:	67 c0       	rjmp	.+206    	; 0x720 <__stack+0x2c1>
			//disable receiver while transmitting to avoid echo-back
			UCSRB &= ~(1<<RXEN);
     652:	54 98       	cbi	0x0a, 4	; 10
			char transmit_buffer[200];
			sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3d\",\n%11s\"cur\": \"%3d\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%d.%dW\",\n%11s\"freq\": \"%d.%dHz\",\n%11s\"curr\": \"%dmA\",\n%11s\"volt\": \"%d.%dV\",\n%7s}\n%3s}\n}", "", "", "", "", "", duty_request, "", OCR2, "", "", "", "", "", powerleft, powerright, "", freqleft, freqright, "", current, "", voltleft, voltright, "", "");
     654:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <voltright>
     658:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <voltright+0x1>
     65c:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <voltleft>
     660:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <voltleft+0x1>
     664:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <current>
     668:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <current+0x1>
     66c:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <freqright>
     670:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <freqright+0x1>
     674:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <freqleft>
     678:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <freqleft+0x1>
     67c:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <powerright>
     680:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <powerright+0x1>
     684:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <powerleft>
     688:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <powerleft+0x1>
     68c:	93 b4       	in	r9, 0x23	; 35
     68e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <duty_request>
     692:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <duty_request+0x1>
     696:	1f 93       	push	r17
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	0f 93       	push	r16
     69e:	df 92       	push	r13
     6a0:	cf 92       	push	r12
     6a2:	ff 92       	push	r15
     6a4:	ef 92       	push	r14
     6a6:	1f 93       	push	r17
     6a8:	0f 93       	push	r16
     6aa:	bf 93       	push	r27
     6ac:	af 93       	push	r26
     6ae:	1f 93       	push	r17
     6b0:	0f 93       	push	r16
     6b2:	ff 93       	push	r31
     6b4:	ef 93       	push	r30
     6b6:	7f 93       	push	r23
     6b8:	6f 93       	push	r22
     6ba:	1f 93       	push	r17
     6bc:	0f 93       	push	r16
     6be:	5f 93       	push	r21
     6c0:	4f 93       	push	r20
     6c2:	3f 93       	push	r19
     6c4:	2f 93       	push	r18
     6c6:	1f 93       	push	r17
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	0f 93       	push	r16
     6da:	1f 92       	push	r1
     6dc:	9f 92       	push	r9
     6de:	1f 93       	push	r17
     6e0:	0f 93       	push	r16
     6e2:	9f 93       	push	r25
     6e4:	8f 93       	push	r24
     6e6:	1f 93       	push	r17
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	0f 93       	push	r16
     6fa:	3f 92       	push	r3
     6fc:	2f 92       	push	r2
     6fe:	5f 92       	push	r5
     700:	4f 92       	push	r4
     702:	0f d4       	rcall	.+2078   	; 0xf22 <sprintf>
			//TODO: add code to detect and report errors/error messages
			//TODO: also add code to re-transmit errors if detected
			uart_transmit_string(transmit_buffer);
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	f8 94       	cli
     708:	de bf       	out	0x3e, r29	; 62
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	c2 01       	movw	r24, r4
     710:	5c d0       	rcall	.+184    	; 0x7ca <uart_transmit_string>
			//wait for last transmission to fully complete
			while (UDREMPTY == 0);
     712:	5d 9b       	sbis	0x0b, 5	; 11
     714:	fe cf       	rjmp	.-4      	; 0x712 <__stack+0x2b3>
			//reenable receiver after transmission is complete
			UCSRB |= (1<<RXEN);
     716:	54 9a       	sbi	0x0a, 4	; 10
			transmit_data = 0;
     718:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <transmit_data+0x1>
     71c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <transmit_data>
		}
		
		//if adc has to be read
		if (readadc){
     720:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <readadc>
     724:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <readadc+0x1>
     728:	89 2b       	or	r24, r25
     72a:	09 f4       	brne	.+2      	; 0x72e <__stack+0x2cf>
     72c:	99 ce       	rjmp	.-718    	; 0x460 <__stack+0x1>
			if (readadcmotorleft){
     72e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <readadcmotorleft>
     732:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <readadcmotorleft+0x1>
     736:	89 2b       	or	r24, r25
     738:	29 f0       	breq	.+10     	; 0x744 <__stack+0x2e5>
				resonant_done = 0;
     73a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <resonant_done+0x1>
     73e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <resonant_done>
     742:	8e ce       	rjmp	.-740    	; 0x460 <__stack+0x1>
				//left side motor back emf is ready to be read, start timer and keep reading (and storing current and previous timer value each time) until max value stabilises
				//possibly enable ADC interrupt and write a separate function to do non-blocking ADC converts and timer stores to not block other code 
				//once max has stabilised and corresponding time has been obtained, calculate resonant frequency and adjust duty cycle on next while () iteration (if required) and do resonant_done = 1;
			}
			else if (readadcmotorright){
     744:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <readadcmotorright>
     748:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <readadcmotorright+0x1>
     74c:	89 2b       	or	r24, r25
     74e:	09 f0       	breq	.+2      	; 0x752 <__stack+0x2f3>
     750:	87 ce       	rjmp	.-754    	; 0x460 <__stack+0x1>
				//left side motor back emf is ready to be read, start timer and keep reading (and storing current and previous timer value each time) until max value stabilises
				//possibly enable ADC interrupt and write a separate function to do non-blocking ADC converts and timer stores to not block other code
				//once max has stabilised and corresponding time has been obtained, calculate resonant frequency and adjust duty cycle on next while () iteration (if required) and do resonant_done = 1;
			}
			else{//resonant frequency calculation has priority, so do everything else in this else block
				if (readadcv){
     752:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <readadcv>
     756:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <readadcv+0x1>
     75a:	89 2b       	or	r24, r25
     75c:	71 f0       	breq	.+28     	; 0x77a <__stack+0x31b>
					if (voltage_left_on){
     75e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <voltage_left_on>
     762:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <voltage_left_on+0x1>
     766:	89 2b       	or	r24, r25
     768:	21 f4       	brne	.+8      	; 0x772 <__stack+0x313>
						//read motor_left for VCC
					}
					else if (voltage_right_on){
     76a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <voltage_right_on>
     76e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <voltage_right_on+0x1>
						//read motor_right for VCC
					}
					//we have read voltage value (only need to do this once because assuming Vcc remains constant between PWM pulses), turn off flag
					readadcv = 0;
     772:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <readadcv+0x1>
     776:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <readadcv>
				}
				if (readadci){
     77a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <readadci>
     77e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <readadci+0x1>
     782:	89 2b       	or	r24, r25
     784:	09 f4       	brne	.+2      	; 0x788 <__stack+0x329>
     786:	6c ce       	rjmp	.-808    	; 0x460 <__stack+0x1>
					if ((voltage_left_on) || (voltage_right_on)){
     788:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <voltage_left_on>
     78c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <voltage_left_on+0x1>
     790:	89 2b       	or	r24, r25
     792:	09 f0       	breq	.+2      	; 0x796 <__stack+0x337>
     794:	65 ce       	rjmp	.-822    	; 0x460 <__stack+0x1>
     796:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <voltage_right_on>
     79a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <voltage_right_on+0x1>
     79e:	60 ce       	rjmp	.-832    	; 0x460 <__stack+0x1>

000007a0 <uart_init>:
 */ 

#include "uart.h"

void uart_init(){
	UCSRB |= ((1<<TXEN)|(1<<RXEN)); //set transmit and receive bit
     7a0:	8a b1       	in	r24, 0x0a	; 10
     7a2:	88 61       	ori	r24, 0x18	; 24
     7a4:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1<<RXCIE);
     7a6:	57 9a       	sbi	0x0a, 7	; 10
	UBRRH = (ubrrvalue >> 8); //load baud rate register with calculated value
     7a8:	10 bc       	out	0x20, r1	; 32
	UBRRL = ubrrvalue;
     7aa:	87 e6       	ldi	r24, 0x67	; 103
     7ac:	89 b9       	out	0x09, r24	; 9
	UCSRC |= ((1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0)); //set 8 bit character size
     7ae:	80 b5       	in	r24, 0x20	; 32
     7b0:	86 68       	ori	r24, 0x86	; 134
     7b2:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1<<UMSEL); //Set Asynchronous operation
     7b4:	80 b5       	in	r24, 0x20	; 32
     7b6:	8f 7b       	andi	r24, 0xBF	; 191
     7b8:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1<<UCSZ2); //set 8 bit character size
     7ba:	80 b5       	in	r24, 0x20	; 32
     7bc:	8b 7f       	andi	r24, 0xFB	; 251
     7be:	80 bd       	out	0x20, r24	; 32
     7c0:	08 95       	ret

000007c2 <uart_transmit>:
		stringtransmit++;
	}
}

void uart_transmit(uint8_t data){
	while (UDREMPTY == 0){ //wait for buffer to empty
     7c2:	5d 9b       	sbis	0x0b, 5	; 11
     7c4:	fe cf       	rjmp	.-4      	; 0x7c2 <uart_transmit>
	}
	UDR = data; //load data register with data byte
     7c6:	8c b9       	out	0x0c, r24	; 12
     7c8:	08 95       	ret

000007ca <uart_transmit_string>:
	UCSRC &= ~(1<<UMSEL); //Set Asynchronous operation
	UCSRC &= ~(1<<UCSZ2); //set 8 bit character size
}

//Transmitter
void uart_transmit_string(char* stringtransmit){
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	ec 01       	movw	r28, r24
	while (*stringtransmit != 0x00){
     7d0:	88 81       	ld	r24, Y
     7d2:	88 23       	and	r24, r24
     7d4:	29 f0       	breq	.+10     	; 0x7e0 <uart_transmit_string+0x16>
     7d6:	21 96       	adiw	r28, 0x01	; 1
		uart_transmit(*stringtransmit);
     7d8:	f4 df       	rcall	.-24     	; 0x7c2 <uart_transmit>
	UCSRC &= ~(1<<UCSZ2); //set 8 bit character size
}

//Transmitter
void uart_transmit_string(char* stringtransmit){
	while (*stringtransmit != 0x00){
     7da:	89 91       	ld	r24, Y+
     7dc:	81 11       	cpse	r24, r1
     7de:	fc cf       	rjmp	.-8      	; 0x7d8 <uart_transmit_string+0xe>
		uart_transmit(*stringtransmit);
		stringtransmit++;
	}
}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <uart_receive>:
	UDR = data; //load data register with data byte
}

//Receiver
char uart_receive(){
	while (RXCOMP == 0){ //wait for receive to be completed
     7e6:	8b b1       	in	r24, 0x0b	; 11
	}
	return UDR; //load data register with data byte
     7e8:	8c b1       	in	r24, 0x0c	; 12
     7ea:	08 95       	ret

000007ec <__udivmodsi4>:
     7ec:	a1 e2       	ldi	r26, 0x21	; 33
     7ee:	1a 2e       	mov	r1, r26
     7f0:	aa 1b       	sub	r26, r26
     7f2:	bb 1b       	sub	r27, r27
     7f4:	fd 01       	movw	r30, r26
     7f6:	0d c0       	rjmp	.+26     	; 0x812 <__udivmodsi4_ep>

000007f8 <__udivmodsi4_loop>:
     7f8:	aa 1f       	adc	r26, r26
     7fa:	bb 1f       	adc	r27, r27
     7fc:	ee 1f       	adc	r30, r30
     7fe:	ff 1f       	adc	r31, r31
     800:	a2 17       	cp	r26, r18
     802:	b3 07       	cpc	r27, r19
     804:	e4 07       	cpc	r30, r20
     806:	f5 07       	cpc	r31, r21
     808:	20 f0       	brcs	.+8      	; 0x812 <__udivmodsi4_ep>
     80a:	a2 1b       	sub	r26, r18
     80c:	b3 0b       	sbc	r27, r19
     80e:	e4 0b       	sbc	r30, r20
     810:	f5 0b       	sbc	r31, r21

00000812 <__udivmodsi4_ep>:
     812:	66 1f       	adc	r22, r22
     814:	77 1f       	adc	r23, r23
     816:	88 1f       	adc	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	1a 94       	dec	r1
     81c:	69 f7       	brne	.-38     	; 0x7f8 <__udivmodsi4_loop>
     81e:	60 95       	com	r22
     820:	70 95       	com	r23
     822:	80 95       	com	r24
     824:	90 95       	com	r25
     826:	9b 01       	movw	r18, r22
     828:	ac 01       	movw	r20, r24
     82a:	bd 01       	movw	r22, r26
     82c:	cf 01       	movw	r24, r30
     82e:	08 95       	ret

00000830 <__umulhisi3>:
     830:	a2 9f       	mul	r26, r18
     832:	b0 01       	movw	r22, r0
     834:	b3 9f       	mul	r27, r19
     836:	c0 01       	movw	r24, r0
     838:	a3 9f       	mul	r26, r19
     83a:	01 d0       	rcall	.+2      	; 0x83e <__umulhisi3+0xe>
     83c:	b2 9f       	mul	r27, r18
     83e:	70 0d       	add	r23, r0
     840:	81 1d       	adc	r24, r1
     842:	11 24       	eor	r1, r1
     844:	91 1d       	adc	r25, r1
     846:	08 95       	ret

00000848 <calloc>:
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	86 9f       	mul	r24, r22
     852:	80 01       	movw	r16, r0
     854:	87 9f       	mul	r24, r23
     856:	10 0d       	add	r17, r0
     858:	96 9f       	mul	r25, r22
     85a:	10 0d       	add	r17, r0
     85c:	11 24       	eor	r1, r1
     85e:	c8 01       	movw	r24, r16
     860:	0d d0       	rcall	.+26     	; 0x87c <malloc>
     862:	ec 01       	movw	r28, r24
     864:	00 97       	sbiw	r24, 0x00	; 0
     866:	21 f0       	breq	.+8      	; 0x870 <calloc+0x28>
     868:	a8 01       	movw	r20, r16
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	0c d3       	rcall	.+1560   	; 0xe88 <memset>
     870:	ce 01       	movw	r24, r28
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	08 95       	ret

0000087c <malloc>:
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	82 30       	cpi	r24, 0x02	; 2
     886:	91 05       	cpc	r25, r1
     888:	10 f4       	brcc	.+4      	; 0x88e <malloc+0x12>
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <__flp>
     892:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <__flp+0x1>
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	a0 e0       	ldi	r26, 0x00	; 0
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	30 97       	sbiw	r30, 0x00	; 0
     8a0:	19 f1       	breq	.+70     	; 0x8e8 <malloc+0x6c>
     8a2:	40 81       	ld	r20, Z
     8a4:	51 81       	ldd	r21, Z+1	; 0x01
     8a6:	02 81       	ldd	r16, Z+2	; 0x02
     8a8:	13 81       	ldd	r17, Z+3	; 0x03
     8aa:	48 17       	cp	r20, r24
     8ac:	59 07       	cpc	r21, r25
     8ae:	c8 f0       	brcs	.+50     	; 0x8e2 <malloc+0x66>
     8b0:	84 17       	cp	r24, r20
     8b2:	95 07       	cpc	r25, r21
     8b4:	69 f4       	brne	.+26     	; 0x8d0 <malloc+0x54>
     8b6:	10 97       	sbiw	r26, 0x00	; 0
     8b8:	31 f0       	breq	.+12     	; 0x8c6 <malloc+0x4a>
     8ba:	12 96       	adiw	r26, 0x02	; 2
     8bc:	0c 93       	st	X, r16
     8be:	12 97       	sbiw	r26, 0x02	; 2
     8c0:	13 96       	adiw	r26, 0x03	; 3
     8c2:	1c 93       	st	X, r17
     8c4:	27 c0       	rjmp	.+78     	; 0x914 <malloc+0x98>
     8c6:	00 93 6d 01 	sts	0x016D, r16	; 0x80016d <__flp>
     8ca:	10 93 6e 01 	sts	0x016E, r17	; 0x80016e <__flp+0x1>
     8ce:	22 c0       	rjmp	.+68     	; 0x914 <malloc+0x98>
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	19 f0       	breq	.+6      	; 0x8dc <malloc+0x60>
     8d6:	42 17       	cp	r20, r18
     8d8:	53 07       	cpc	r21, r19
     8da:	18 f4       	brcc	.+6      	; 0x8e2 <malloc+0x66>
     8dc:	9a 01       	movw	r18, r20
     8de:	bd 01       	movw	r22, r26
     8e0:	ef 01       	movw	r28, r30
     8e2:	df 01       	movw	r26, r30
     8e4:	f8 01       	movw	r30, r16
     8e6:	db cf       	rjmp	.-74     	; 0x89e <malloc+0x22>
     8e8:	21 15       	cp	r18, r1
     8ea:	31 05       	cpc	r19, r1
     8ec:	f9 f0       	breq	.+62     	; 0x92c <malloc+0xb0>
     8ee:	28 1b       	sub	r18, r24
     8f0:	39 0b       	sbc	r19, r25
     8f2:	24 30       	cpi	r18, 0x04	; 4
     8f4:	31 05       	cpc	r19, r1
     8f6:	80 f4       	brcc	.+32     	; 0x918 <malloc+0x9c>
     8f8:	8a 81       	ldd	r24, Y+2	; 0x02
     8fa:	9b 81       	ldd	r25, Y+3	; 0x03
     8fc:	61 15       	cp	r22, r1
     8fe:	71 05       	cpc	r23, r1
     900:	21 f0       	breq	.+8      	; 0x90a <malloc+0x8e>
     902:	fb 01       	movw	r30, r22
     904:	93 83       	std	Z+3, r25	; 0x03
     906:	82 83       	std	Z+2, r24	; 0x02
     908:	04 c0       	rjmp	.+8      	; 0x912 <malloc+0x96>
     90a:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <__flp+0x1>
     90e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__flp>
     912:	fe 01       	movw	r30, r28
     914:	32 96       	adiw	r30, 0x02	; 2
     916:	44 c0       	rjmp	.+136    	; 0x9a0 <malloc+0x124>
     918:	fe 01       	movw	r30, r28
     91a:	e2 0f       	add	r30, r18
     91c:	f3 1f       	adc	r31, r19
     91e:	81 93       	st	Z+, r24
     920:	91 93       	st	Z+, r25
     922:	22 50       	subi	r18, 0x02	; 2
     924:	31 09       	sbc	r19, r1
     926:	39 83       	std	Y+1, r19	; 0x01
     928:	28 83       	st	Y, r18
     92a:	3a c0       	rjmp	.+116    	; 0x9a0 <malloc+0x124>
     92c:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <__brkval>
     930:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <__brkval+0x1>
     934:	23 2b       	or	r18, r19
     936:	41 f4       	brne	.+16     	; 0x948 <malloc+0xcc>
     938:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
     93c:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
     940:	30 93 6c 01 	sts	0x016C, r19	; 0x80016c <__brkval+0x1>
     944:	20 93 6b 01 	sts	0x016B, r18	; 0x80016b <__brkval>
     948:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     94c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     950:	21 15       	cp	r18, r1
     952:	31 05       	cpc	r19, r1
     954:	41 f4       	brne	.+16     	; 0x966 <malloc+0xea>
     956:	2d b7       	in	r18, 0x3d	; 61
     958:	3e b7       	in	r19, 0x3e	; 62
     95a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
     95e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
     962:	24 1b       	sub	r18, r20
     964:	35 0b       	sbc	r19, r21
     966:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <__brkval>
     96a:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <__brkval+0x1>
     96e:	e2 17       	cp	r30, r18
     970:	f3 07       	cpc	r31, r19
     972:	a0 f4       	brcc	.+40     	; 0x99c <malloc+0x120>
     974:	2e 1b       	sub	r18, r30
     976:	3f 0b       	sbc	r19, r31
     978:	28 17       	cp	r18, r24
     97a:	39 07       	cpc	r19, r25
     97c:	78 f0       	brcs	.+30     	; 0x99c <malloc+0x120>
     97e:	ac 01       	movw	r20, r24
     980:	4e 5f       	subi	r20, 0xFE	; 254
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	24 17       	cp	r18, r20
     986:	35 07       	cpc	r19, r21
     988:	48 f0       	brcs	.+18     	; 0x99c <malloc+0x120>
     98a:	4e 0f       	add	r20, r30
     98c:	5f 1f       	adc	r21, r31
     98e:	50 93 6c 01 	sts	0x016C, r21	; 0x80016c <__brkval+0x1>
     992:	40 93 6b 01 	sts	0x016B, r20	; 0x80016b <__brkval>
     996:	81 93       	st	Z+, r24
     998:	91 93       	st	Z+, r25
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <malloc+0x124>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	cf 01       	movw	r24, r30
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	08 95       	ret

000009ac <free>:
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <free+0xa>
     9b4:	81 c0       	rjmp	.+258    	; 0xab8 <free+0x10c>
     9b6:	fc 01       	movw	r30, r24
     9b8:	32 97       	sbiw	r30, 0x02	; 2
     9ba:	13 82       	std	Z+3, r1	; 0x03
     9bc:	12 82       	std	Z+2, r1	; 0x02
     9be:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <__flp>
     9c2:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <__flp+0x1>
     9c6:	10 97       	sbiw	r26, 0x00	; 0
     9c8:	81 f4       	brne	.+32     	; 0x9ea <free+0x3e>
     9ca:	20 81       	ld	r18, Z
     9cc:	31 81       	ldd	r19, Z+1	; 0x01
     9ce:	82 0f       	add	r24, r18
     9d0:	93 1f       	adc	r25, r19
     9d2:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <__brkval>
     9d6:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <__brkval+0x1>
     9da:	28 17       	cp	r18, r24
     9dc:	39 07       	cpc	r19, r25
     9de:	51 f5       	brne	.+84     	; 0xa34 <free+0x88>
     9e0:	f0 93 6c 01 	sts	0x016C, r31	; 0x80016c <__brkval+0x1>
     9e4:	e0 93 6b 01 	sts	0x016B, r30	; 0x80016b <__brkval>
     9e8:	67 c0       	rjmp	.+206    	; 0xab8 <free+0x10c>
     9ea:	ed 01       	movw	r28, r26
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	ce 17       	cp	r28, r30
     9f2:	df 07       	cpc	r29, r31
     9f4:	40 f4       	brcc	.+16     	; 0xa06 <free+0x5a>
     9f6:	4a 81       	ldd	r20, Y+2	; 0x02
     9f8:	5b 81       	ldd	r21, Y+3	; 0x03
     9fa:	9e 01       	movw	r18, r28
     9fc:	41 15       	cp	r20, r1
     9fe:	51 05       	cpc	r21, r1
     a00:	f1 f0       	breq	.+60     	; 0xa3e <free+0x92>
     a02:	ea 01       	movw	r28, r20
     a04:	f5 cf       	rjmp	.-22     	; 0x9f0 <free+0x44>
     a06:	d3 83       	std	Z+3, r29	; 0x03
     a08:	c2 83       	std	Z+2, r28	; 0x02
     a0a:	40 81       	ld	r20, Z
     a0c:	51 81       	ldd	r21, Z+1	; 0x01
     a0e:	84 0f       	add	r24, r20
     a10:	95 1f       	adc	r25, r21
     a12:	c8 17       	cp	r28, r24
     a14:	d9 07       	cpc	r29, r25
     a16:	59 f4       	brne	.+22     	; 0xa2e <free+0x82>
     a18:	88 81       	ld	r24, Y
     a1a:	99 81       	ldd	r25, Y+1	; 0x01
     a1c:	84 0f       	add	r24, r20
     a1e:	95 1f       	adc	r25, r21
     a20:	02 96       	adiw	r24, 0x02	; 2
     a22:	91 83       	std	Z+1, r25	; 0x01
     a24:	80 83       	st	Z, r24
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	9b 81       	ldd	r25, Y+3	; 0x03
     a2a:	93 83       	std	Z+3, r25	; 0x03
     a2c:	82 83       	std	Z+2, r24	; 0x02
     a2e:	21 15       	cp	r18, r1
     a30:	31 05       	cpc	r19, r1
     a32:	29 f4       	brne	.+10     	; 0xa3e <free+0x92>
     a34:	f0 93 6e 01 	sts	0x016E, r31	; 0x80016e <__flp+0x1>
     a38:	e0 93 6d 01 	sts	0x016D, r30	; 0x80016d <__flp>
     a3c:	3d c0       	rjmp	.+122    	; 0xab8 <free+0x10c>
     a3e:	e9 01       	movw	r28, r18
     a40:	fb 83       	std	Y+3, r31	; 0x03
     a42:	ea 83       	std	Y+2, r30	; 0x02
     a44:	49 91       	ld	r20, Y+
     a46:	59 91       	ld	r21, Y+
     a48:	c4 0f       	add	r28, r20
     a4a:	d5 1f       	adc	r29, r21
     a4c:	ec 17       	cp	r30, r28
     a4e:	fd 07       	cpc	r31, r29
     a50:	61 f4       	brne	.+24     	; 0xa6a <free+0xbe>
     a52:	80 81       	ld	r24, Z
     a54:	91 81       	ldd	r25, Z+1	; 0x01
     a56:	84 0f       	add	r24, r20
     a58:	95 1f       	adc	r25, r21
     a5a:	02 96       	adiw	r24, 0x02	; 2
     a5c:	e9 01       	movw	r28, r18
     a5e:	99 83       	std	Y+1, r25	; 0x01
     a60:	88 83       	st	Y, r24
     a62:	82 81       	ldd	r24, Z+2	; 0x02
     a64:	93 81       	ldd	r25, Z+3	; 0x03
     a66:	9b 83       	std	Y+3, r25	; 0x03
     a68:	8a 83       	std	Y+2, r24	; 0x02
     a6a:	e0 e0       	ldi	r30, 0x00	; 0
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	12 96       	adiw	r26, 0x02	; 2
     a70:	8d 91       	ld	r24, X+
     a72:	9c 91       	ld	r25, X
     a74:	13 97       	sbiw	r26, 0x03	; 3
     a76:	00 97       	sbiw	r24, 0x00	; 0
     a78:	19 f0       	breq	.+6      	; 0xa80 <free+0xd4>
     a7a:	fd 01       	movw	r30, r26
     a7c:	dc 01       	movw	r26, r24
     a7e:	f7 cf       	rjmp	.-18     	; 0xa6e <free+0xc2>
     a80:	8d 91       	ld	r24, X+
     a82:	9c 91       	ld	r25, X
     a84:	11 97       	sbiw	r26, 0x01	; 1
     a86:	9d 01       	movw	r18, r26
     a88:	2e 5f       	subi	r18, 0xFE	; 254
     a8a:	3f 4f       	sbci	r19, 0xFF	; 255
     a8c:	82 0f       	add	r24, r18
     a8e:	93 1f       	adc	r25, r19
     a90:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <__brkval>
     a94:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <__brkval+0x1>
     a98:	28 17       	cp	r18, r24
     a9a:	39 07       	cpc	r19, r25
     a9c:	69 f4       	brne	.+26     	; 0xab8 <free+0x10c>
     a9e:	30 97       	sbiw	r30, 0x00	; 0
     aa0:	29 f4       	brne	.+10     	; 0xaac <free+0x100>
     aa2:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__flp+0x1>
     aa6:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <__flp>
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <free+0x104>
     aac:	13 82       	std	Z+3, r1	; 0x03
     aae:	12 82       	std	Z+2, r1	; 0x02
     ab0:	b0 93 6c 01 	sts	0x016C, r27	; 0x80016c <__brkval+0x1>
     ab4:	a0 93 6b 01 	sts	0x016B, r26	; 0x80016b <__brkval>
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <realloc>:
     abe:	a0 e0       	ldi	r26, 0x00	; 0
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	e4 e6       	ldi	r30, 0x64	; 100
     ac4:	f5 e0       	ldi	r31, 0x05	; 5
     ac6:	ee c4       	rjmp	.+2524   	; 0x14a4 <__prologue_saves__+0x8>
     ac8:	ec 01       	movw	r28, r24
     aca:	00 97       	sbiw	r24, 0x00	; 0
     acc:	19 f4       	brne	.+6      	; 0xad4 <realloc+0x16>
     ace:	cb 01       	movw	r24, r22
     ad0:	d5 de       	rcall	.-598    	; 0x87c <malloc>
     ad2:	b0 c0       	rjmp	.+352    	; 0xc34 <realloc+0x176>
     ad4:	fc 01       	movw	r30, r24
     ad6:	e6 0f       	add	r30, r22
     ad8:	f7 1f       	adc	r31, r23
     ada:	9c 01       	movw	r18, r24
     adc:	22 50       	subi	r18, 0x02	; 2
     ade:	31 09       	sbc	r19, r1
     ae0:	e2 17       	cp	r30, r18
     ae2:	f3 07       	cpc	r31, r19
     ae4:	08 f4       	brcc	.+2      	; 0xae8 <realloc+0x2a>
     ae6:	a4 c0       	rjmp	.+328    	; 0xc30 <realloc+0x172>
     ae8:	d9 01       	movw	r26, r18
     aea:	0d 91       	ld	r16, X+
     aec:	1c 91       	ld	r17, X
     aee:	11 97       	sbiw	r26, 0x01	; 1
     af0:	06 17       	cp	r16, r22
     af2:	17 07       	cpc	r17, r23
     af4:	a8 f0       	brcs	.+42     	; 0xb20 <realloc+0x62>
     af6:	05 30       	cpi	r16, 0x05	; 5
     af8:	11 05       	cpc	r17, r1
     afa:	08 f4       	brcc	.+2      	; 0xafe <realloc+0x40>
     afc:	97 c0       	rjmp	.+302    	; 0xc2c <realloc+0x16e>
     afe:	c8 01       	movw	r24, r16
     b00:	04 97       	sbiw	r24, 0x04	; 4
     b02:	86 17       	cp	r24, r22
     b04:	97 07       	cpc	r25, r23
     b06:	08 f4       	brcc	.+2      	; 0xb0a <realloc+0x4c>
     b08:	91 c0       	rjmp	.+290    	; 0xc2c <realloc+0x16e>
     b0a:	02 50       	subi	r16, 0x02	; 2
     b0c:	11 09       	sbc	r17, r1
     b0e:	06 1b       	sub	r16, r22
     b10:	17 0b       	sbc	r17, r23
     b12:	01 93       	st	Z+, r16
     b14:	11 93       	st	Z+, r17
     b16:	6d 93       	st	X+, r22
     b18:	7c 93       	st	X, r23
     b1a:	cf 01       	movw	r24, r30
     b1c:	47 df       	rcall	.-370    	; 0x9ac <free>
     b1e:	86 c0       	rjmp	.+268    	; 0xc2c <realloc+0x16e>
     b20:	5b 01       	movw	r10, r22
     b22:	a0 1a       	sub	r10, r16
     b24:	b1 0a       	sbc	r11, r17
     b26:	4c 01       	movw	r8, r24
     b28:	80 0e       	add	r8, r16
     b2a:	91 1e       	adc	r9, r17
     b2c:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <__flp>
     b30:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <__flp+0x1>
     b34:	61 2c       	mov	r6, r1
     b36:	71 2c       	mov	r7, r1
     b38:	e1 2c       	mov	r14, r1
     b3a:	f1 2c       	mov	r15, r1
     b3c:	10 97       	sbiw	r26, 0x00	; 0
     b3e:	09 f4       	brne	.+2      	; 0xb42 <realloc+0x84>
     b40:	46 c0       	rjmp	.+140    	; 0xbce <realloc+0x110>
     b42:	8d 91       	ld	r24, X+
     b44:	9c 91       	ld	r25, X
     b46:	11 97       	sbiw	r26, 0x01	; 1
     b48:	a8 15       	cp	r26, r8
     b4a:	b9 05       	cpc	r27, r9
     b4c:	b1 f5       	brne	.+108    	; 0xbba <realloc+0xfc>
     b4e:	6c 01       	movw	r12, r24
     b50:	42 e0       	ldi	r20, 0x02	; 2
     b52:	c4 0e       	add	r12, r20
     b54:	d1 1c       	adc	r13, r1
     b56:	ca 14       	cp	r12, r10
     b58:	db 04       	cpc	r13, r11
     b5a:	78 f1       	brcs	.+94     	; 0xbba <realloc+0xfc>
     b5c:	4c 01       	movw	r8, r24
     b5e:	8a 18       	sub	r8, r10
     b60:	9b 08       	sbc	r9, r11
     b62:	64 01       	movw	r12, r8
     b64:	42 e0       	ldi	r20, 0x02	; 2
     b66:	c4 0e       	add	r12, r20
     b68:	d1 1c       	adc	r13, r1
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	bc 90       	ld	r11, X
     b6e:	12 97       	sbiw	r26, 0x02	; 2
     b70:	13 96       	adiw	r26, 0x03	; 3
     b72:	ac 91       	ld	r26, X
     b74:	b5 e0       	ldi	r27, 0x05	; 5
     b76:	cb 16       	cp	r12, r27
     b78:	d1 04       	cpc	r13, r1
     b7a:	40 f0       	brcs	.+16     	; 0xb8c <realloc+0xce>
     b7c:	b2 82       	std	Z+2, r11	; 0x02
     b7e:	a3 83       	std	Z+3, r26	; 0x03
     b80:	91 82       	std	Z+1, r9	; 0x01
     b82:	80 82       	st	Z, r8
     b84:	d9 01       	movw	r26, r18
     b86:	6d 93       	st	X+, r22
     b88:	7c 93       	st	X, r23
     b8a:	09 c0       	rjmp	.+18     	; 0xb9e <realloc+0xe0>
     b8c:	0e 5f       	subi	r16, 0xFE	; 254
     b8e:	1f 4f       	sbci	r17, 0xFF	; 255
     b90:	80 0f       	add	r24, r16
     b92:	91 1f       	adc	r25, r17
     b94:	f9 01       	movw	r30, r18
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	80 83       	st	Z, r24
     b9a:	eb 2d       	mov	r30, r11
     b9c:	fa 2f       	mov	r31, r26
     b9e:	e1 14       	cp	r14, r1
     ba0:	f1 04       	cpc	r15, r1
     ba2:	31 f0       	breq	.+12     	; 0xbb0 <realloc+0xf2>
     ba4:	d7 01       	movw	r26, r14
     ba6:	13 96       	adiw	r26, 0x03	; 3
     ba8:	fc 93       	st	X, r31
     baa:	ee 93       	st	-X, r30
     bac:	12 97       	sbiw	r26, 0x02	; 2
     bae:	3e c0       	rjmp	.+124    	; 0xc2c <realloc+0x16e>
     bb0:	f0 93 6e 01 	sts	0x016E, r31	; 0x80016e <__flp+0x1>
     bb4:	e0 93 6d 01 	sts	0x016D, r30	; 0x80016d <__flp>
     bb8:	39 c0       	rjmp	.+114    	; 0xc2c <realloc+0x16e>
     bba:	68 16       	cp	r6, r24
     bbc:	79 06       	cpc	r7, r25
     bbe:	08 f4       	brcc	.+2      	; 0xbc2 <realloc+0x104>
     bc0:	3c 01       	movw	r6, r24
     bc2:	7d 01       	movw	r14, r26
     bc4:	12 96       	adiw	r26, 0x02	; 2
     bc6:	0d 90       	ld	r0, X+
     bc8:	bc 91       	ld	r27, X
     bca:	a0 2d       	mov	r26, r0
     bcc:	b7 cf       	rjmp	.-146    	; 0xb3c <realloc+0x7e>
     bce:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <__brkval>
     bd2:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <__brkval+0x1>
     bd6:	88 16       	cp	r8, r24
     bd8:	99 06       	cpc	r9, r25
     bda:	e1 f4       	brne	.+56     	; 0xc14 <realloc+0x156>
     bdc:	66 16       	cp	r6, r22
     bde:	77 06       	cpc	r7, r23
     be0:	c8 f4       	brcc	.+50     	; 0xc14 <realloc+0x156>
     be2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     be6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	41 f4       	brne	.+16     	; 0xbfe <realloc+0x140>
     bee:	8d b7       	in	r24, 0x3d	; 61
     bf0:	9e b7       	in	r25, 0x3e	; 62
     bf2:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
     bf6:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
     bfa:	84 1b       	sub	r24, r20
     bfc:	95 0b       	sbc	r25, r21
     bfe:	e8 17       	cp	r30, r24
     c00:	f9 07       	cpc	r31, r25
     c02:	b0 f4       	brcc	.+44     	; 0xc30 <realloc+0x172>
     c04:	f0 93 6c 01 	sts	0x016C, r31	; 0x80016c <__brkval+0x1>
     c08:	e0 93 6b 01 	sts	0x016B, r30	; 0x80016b <__brkval>
     c0c:	f9 01       	movw	r30, r18
     c0e:	71 83       	std	Z+1, r23	; 0x01
     c10:	60 83       	st	Z, r22
     c12:	0c c0       	rjmp	.+24     	; 0xc2c <realloc+0x16e>
     c14:	cb 01       	movw	r24, r22
     c16:	32 de       	rcall	.-924    	; 0x87c <malloc>
     c18:	7c 01       	movw	r14, r24
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	49 f0       	breq	.+18     	; 0xc30 <realloc+0x172>
     c1e:	a8 01       	movw	r20, r16
     c20:	be 01       	movw	r22, r28
     c22:	29 d1       	rcall	.+594    	; 0xe76 <memcpy>
     c24:	ce 01       	movw	r24, r28
     c26:	c2 de       	rcall	.-636    	; 0x9ac <free>
     c28:	c7 01       	movw	r24, r14
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <realloc+0x176>
     c2c:	ce 01       	movw	r24, r28
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <realloc+0x176>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	ee e0       	ldi	r30, 0x0E	; 14
     c3a:	50 c4       	rjmp	.+2208   	; 0x14dc <__epilogue_restores__+0x8>

00000c3c <strtol>:
     c3c:	a0 e0       	ldi	r26, 0x00	; 0
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e3 e2       	ldi	r30, 0x23	; 35
     c42:	f6 e0       	ldi	r31, 0x06	; 6
     c44:	2c c4       	rjmp	.+2136   	; 0x149e <__prologue_saves__+0x2>
     c46:	5c 01       	movw	r10, r24
     c48:	6b 01       	movw	r12, r22
     c4a:	7a 01       	movw	r14, r20
     c4c:	61 15       	cp	r22, r1
     c4e:	71 05       	cpc	r23, r1
     c50:	19 f0       	breq	.+6      	; 0xc58 <strtol+0x1c>
     c52:	fb 01       	movw	r30, r22
     c54:	91 83       	std	Z+1, r25	; 0x01
     c56:	80 83       	st	Z, r24
     c58:	e1 14       	cp	r14, r1
     c5a:	f1 04       	cpc	r15, r1
     c5c:	29 f0       	breq	.+10     	; 0xc68 <strtol+0x2c>
     c5e:	c7 01       	movw	r24, r14
     c60:	02 97       	sbiw	r24, 0x02	; 2
     c62:	83 97       	sbiw	r24, 0x23	; 35
     c64:	08 f0       	brcs	.+2      	; 0xc68 <strtol+0x2c>
     c66:	e2 c0       	rjmp	.+452    	; 0xe2c <strtol+0x1f0>
     c68:	e5 01       	movw	r28, r10
     c6a:	21 96       	adiw	r28, 0x01	; 1
     c6c:	f5 01       	movw	r30, r10
     c6e:	10 81       	ld	r17, Z
     c70:	81 2f       	mov	r24, r17
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	f4 d0       	rcall	.+488    	; 0xe5e <isspace>
     c76:	89 2b       	or	r24, r25
     c78:	11 f0       	breq	.+4      	; 0xc7e <strtol+0x42>
     c7a:	5e 01       	movw	r10, r28
     c7c:	f5 cf       	rjmp	.-22     	; 0xc68 <strtol+0x2c>
     c7e:	1d 32       	cpi	r17, 0x2D	; 45
     c80:	29 f4       	brne	.+10     	; 0xc8c <strtol+0x50>
     c82:	21 96       	adiw	r28, 0x01	; 1
     c84:	f5 01       	movw	r30, r10
     c86:	11 81       	ldd	r17, Z+1	; 0x01
     c88:	01 e0       	ldi	r16, 0x01	; 1
     c8a:	07 c0       	rjmp	.+14     	; 0xc9a <strtol+0x5e>
     c8c:	1b 32       	cpi	r17, 0x2B	; 43
     c8e:	21 f4       	brne	.+8      	; 0xc98 <strtol+0x5c>
     c90:	e5 01       	movw	r28, r10
     c92:	22 96       	adiw	r28, 0x02	; 2
     c94:	f5 01       	movw	r30, r10
     c96:	11 81       	ldd	r17, Z+1	; 0x01
     c98:	00 e0       	ldi	r16, 0x00	; 0
     c9a:	e1 14       	cp	r14, r1
     c9c:	f1 04       	cpc	r15, r1
     c9e:	09 f1       	breq	.+66     	; 0xce2 <strtol+0xa6>
     ca0:	f0 e1       	ldi	r31, 0x10	; 16
     ca2:	ef 16       	cp	r14, r31
     ca4:	f1 04       	cpc	r15, r1
     ca6:	29 f4       	brne	.+10     	; 0xcb2 <strtol+0x76>
     ca8:	3e c0       	rjmp	.+124    	; 0xd26 <strtol+0xea>
     caa:	10 e3       	ldi	r17, 0x30	; 48
     cac:	e1 14       	cp	r14, r1
     cae:	f1 04       	cpc	r15, r1
     cb0:	21 f1       	breq	.+72     	; 0xcfa <strtol+0xbe>
     cb2:	28 e0       	ldi	r18, 0x08	; 8
     cb4:	e2 16       	cp	r14, r18
     cb6:	f1 04       	cpc	r15, r1
     cb8:	01 f1       	breq	.+64     	; 0xcfa <strtol+0xbe>
     cba:	54 f4       	brge	.+20     	; 0xcd0 <strtol+0x94>
     cbc:	e2 e0       	ldi	r30, 0x02	; 2
     cbe:	ee 16       	cp	r14, r30
     cc0:	f1 04       	cpc	r15, r1
     cc2:	21 f5       	brne	.+72     	; 0xd0c <strtol+0xd0>
     cc4:	81 2c       	mov	r8, r1
     cc6:	91 2c       	mov	r9, r1
     cc8:	a1 2c       	mov	r10, r1
     cca:	b0 e4       	ldi	r27, 0x40	; 64
     ccc:	bb 2e       	mov	r11, r27
     cce:	3d c0       	rjmp	.+122    	; 0xd4a <strtol+0x10e>
     cd0:	fa e0       	ldi	r31, 0x0A	; 10
     cd2:	ef 16       	cp	r14, r31
     cd4:	f1 04       	cpc	r15, r1
     cd6:	39 f0       	breq	.+14     	; 0xce6 <strtol+0xaa>
     cd8:	20 e1       	ldi	r18, 0x10	; 16
     cda:	e2 16       	cp	r14, r18
     cdc:	f1 04       	cpc	r15, r1
     cde:	b1 f4       	brne	.+44     	; 0xd0c <strtol+0xd0>
     ce0:	2f c0       	rjmp	.+94     	; 0xd40 <strtol+0x104>
     ce2:	10 33       	cpi	r17, 0x30	; 48
     ce4:	11 f1       	breq	.+68     	; 0xd2a <strtol+0xee>
     ce6:	fa e0       	ldi	r31, 0x0A	; 10
     ce8:	ef 2e       	mov	r14, r31
     cea:	f1 2c       	mov	r15, r1
     cec:	ac ec       	ldi	r26, 0xCC	; 204
     cee:	8a 2e       	mov	r8, r26
     cf0:	98 2c       	mov	r9, r8
     cf2:	a8 2c       	mov	r10, r8
     cf4:	ac e0       	ldi	r26, 0x0C	; 12
     cf6:	ba 2e       	mov	r11, r26
     cf8:	28 c0       	rjmp	.+80     	; 0xd4a <strtol+0x10e>
     cfa:	78 e0       	ldi	r23, 0x08	; 8
     cfc:	e7 2e       	mov	r14, r23
     cfe:	f1 2c       	mov	r15, r1
     d00:	81 2c       	mov	r8, r1
     d02:	91 2c       	mov	r9, r1
     d04:	a1 2c       	mov	r10, r1
     d06:	e0 e1       	ldi	r30, 0x10	; 16
     d08:	be 2e       	mov	r11, r30
     d0a:	1f c0       	rjmp	.+62     	; 0xd4a <strtol+0x10e>
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e8       	ldi	r25, 0x80	; 128
     d14:	97 01       	movw	r18, r14
     d16:	0f 2c       	mov	r0, r15
     d18:	00 0c       	add	r0, r0
     d1a:	44 0b       	sbc	r20, r20
     d1c:	55 0b       	sbc	r21, r21
     d1e:	66 dd       	rcall	.-1332   	; 0x7ec <__udivmodsi4>
     d20:	49 01       	movw	r8, r18
     d22:	5a 01       	movw	r10, r20
     d24:	12 c0       	rjmp	.+36     	; 0xd4a <strtol+0x10e>
     d26:	10 33       	cpi	r17, 0x30	; 48
     d28:	59 f4       	brne	.+22     	; 0xd40 <strtol+0x104>
     d2a:	88 81       	ld	r24, Y
     d2c:	8f 7d       	andi	r24, 0xDF	; 223
     d2e:	88 35       	cpi	r24, 0x58	; 88
     d30:	09 f0       	breq	.+2      	; 0xd34 <strtol+0xf8>
     d32:	bb cf       	rjmp	.-138    	; 0xcaa <strtol+0x6e>
     d34:	19 81       	ldd	r17, Y+1	; 0x01
     d36:	22 96       	adiw	r28, 0x02	; 2
     d38:	02 60       	ori	r16, 0x02	; 2
     d3a:	80 e1       	ldi	r24, 0x10	; 16
     d3c:	e8 2e       	mov	r14, r24
     d3e:	f1 2c       	mov	r15, r1
     d40:	81 2c       	mov	r8, r1
     d42:	91 2c       	mov	r9, r1
     d44:	a1 2c       	mov	r10, r1
     d46:	68 e0       	ldi	r22, 0x08	; 8
     d48:	b6 2e       	mov	r11, r22
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	cb 01       	movw	r24, r22
     d52:	27 01       	movw	r4, r14
     d54:	0f 2c       	mov	r0, r15
     d56:	00 0c       	add	r0, r0
     d58:	66 08       	sbc	r6, r6
     d5a:	77 08       	sbc	r7, r7
     d5c:	fe 01       	movw	r30, r28
     d5e:	50 ed       	ldi	r21, 0xD0	; 208
     d60:	35 2e       	mov	r3, r21
     d62:	31 0e       	add	r3, r17
     d64:	29 e0       	ldi	r18, 0x09	; 9
     d66:	23 15       	cp	r18, r3
     d68:	70 f4       	brcc	.+28     	; 0xd86 <strtol+0x14a>
     d6a:	2f eb       	ldi	r18, 0xBF	; 191
     d6c:	21 0f       	add	r18, r17
     d6e:	2a 31       	cpi	r18, 0x1A	; 26
     d70:	18 f4       	brcc	.+6      	; 0xd78 <strtol+0x13c>
     d72:	39 ec       	ldi	r19, 0xC9	; 201
     d74:	33 2e       	mov	r3, r19
     d76:	06 c0       	rjmp	.+12     	; 0xd84 <strtol+0x148>
     d78:	2f e9       	ldi	r18, 0x9F	; 159
     d7a:	21 0f       	add	r18, r17
     d7c:	2a 31       	cpi	r18, 0x1A	; 26
     d7e:	10 f5       	brcc	.+68     	; 0xdc4 <strtol+0x188>
     d80:	29 ea       	ldi	r18, 0xA9	; 169
     d82:	32 2e       	mov	r3, r18
     d84:	31 0e       	add	r3, r17
     d86:	23 2d       	mov	r18, r3
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	2e 15       	cp	r18, r14
     d8c:	3f 05       	cpc	r19, r15
     d8e:	d4 f4       	brge	.+52     	; 0xdc4 <strtol+0x188>
     d90:	47 fd       	sbrc	r20, 7
     d92:	15 c0       	rjmp	.+42     	; 0xdbe <strtol+0x182>
     d94:	86 16       	cp	r8, r22
     d96:	97 06       	cpc	r9, r23
     d98:	a8 06       	cpc	r10, r24
     d9a:	b9 06       	cpc	r11, r25
     d9c:	68 f0       	brcs	.+26     	; 0xdb8 <strtol+0x17c>
     d9e:	a3 01       	movw	r20, r6
     da0:	92 01       	movw	r18, r4
     da2:	63 d3       	rcall	.+1734   	; 0x146a <__mulsi3>
     da4:	63 0d       	add	r22, r3
     da6:	71 1d       	adc	r23, r1
     da8:	81 1d       	adc	r24, r1
     daa:	91 1d       	adc	r25, r1
     dac:	61 30       	cpi	r22, 0x01	; 1
     dae:	71 05       	cpc	r23, r1
     db0:	81 05       	cpc	r24, r1
     db2:	20 e8       	ldi	r18, 0x80	; 128
     db4:	92 07       	cpc	r25, r18
     db6:	10 f0       	brcs	.+4      	; 0xdbc <strtol+0x180>
     db8:	4f ef       	ldi	r20, 0xFF	; 255
     dba:	01 c0       	rjmp	.+2      	; 0xdbe <strtol+0x182>
     dbc:	41 e0       	ldi	r20, 0x01	; 1
     dbe:	21 96       	adiw	r28, 0x01	; 1
     dc0:	10 81       	ld	r17, Z
     dc2:	cc cf       	rjmp	.-104    	; 0xd5c <strtol+0x120>
     dc4:	20 2f       	mov	r18, r16
     dc6:	21 70       	andi	r18, 0x01	; 1
     dc8:	c1 14       	cp	r12, r1
     dca:	d1 04       	cpc	r13, r1
     dcc:	71 f0       	breq	.+28     	; 0xdea <strtol+0x1ae>
     dce:	44 23       	and	r20, r20
     dd0:	29 f0       	breq	.+10     	; 0xddc <strtol+0x1a0>
     dd2:	21 97       	sbiw	r28, 0x01	; 1
     dd4:	f6 01       	movw	r30, r12
     dd6:	d1 83       	std	Z+1, r29	; 0x01
     dd8:	c0 83       	st	Z, r28
     dda:	07 c0       	rjmp	.+14     	; 0xdea <strtol+0x1ae>
     ddc:	01 ff       	sbrs	r16, 1
     dde:	19 c0       	rjmp	.+50     	; 0xe12 <strtol+0x1d6>
     de0:	22 97       	sbiw	r28, 0x02	; 2
     de2:	f6 01       	movw	r30, r12
     de4:	d1 83       	std	Z+1, r29	; 0x01
     de6:	c0 83       	st	Z, r28
     de8:	14 c0       	rjmp	.+40     	; 0xe12 <strtol+0x1d6>
     dea:	47 ff       	sbrs	r20, 7
     dec:	12 c0       	rjmp	.+36     	; 0xe12 <strtol+0x1d6>
     dee:	22 23       	and	r18, r18
     df0:	29 f0       	breq	.+10     	; 0xdfc <strtol+0x1c0>
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e8       	ldi	r25, 0x80	; 128
     dfa:	04 c0       	rjmp	.+8      	; 0xe04 <strtol+0x1c8>
     dfc:	6f ef       	ldi	r22, 0xFF	; 255
     dfe:	7f ef       	ldi	r23, 0xFF	; 255
     e00:	8f ef       	ldi	r24, 0xFF	; 255
     e02:	9f e7       	ldi	r25, 0x7F	; 127
     e04:	22 e2       	ldi	r18, 0x22	; 34
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <errno+0x1>
     e0c:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <errno>
     e10:	09 c0       	rjmp	.+18     	; 0xe24 <strtol+0x1e8>
     e12:	22 23       	and	r18, r18
     e14:	81 f0       	breq	.+32     	; 0xe36 <strtol+0x1fa>
     e16:	90 95       	com	r25
     e18:	80 95       	com	r24
     e1a:	70 95       	com	r23
     e1c:	61 95       	neg	r22
     e1e:	7f 4f       	sbci	r23, 0xFF	; 255
     e20:	8f 4f       	sbci	r24, 0xFF	; 255
     e22:	9f 4f       	sbci	r25, 0xFF	; 255
     e24:	46 2f       	mov	r20, r22
     e26:	37 2f       	mov	r19, r23
     e28:	28 2f       	mov	r18, r24
     e2a:	12 c0       	rjmp	.+36     	; 0xe50 <strtol+0x214>
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0d c0       	rjmp	.+26     	; 0xe50 <strtol+0x214>
     e36:	97 ff       	sbrs	r25, 7
     e38:	f5 cf       	rjmp	.-22     	; 0xe24 <strtol+0x1e8>
     e3a:	82 e2       	ldi	r24, 0x22	; 34
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <errno+0x1>
     e42:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <errno>
     e46:	6f ef       	ldi	r22, 0xFF	; 255
     e48:	7f ef       	ldi	r23, 0xFF	; 255
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	9f e7       	ldi	r25, 0x7F	; 127
     e4e:	ea cf       	rjmp	.-44     	; 0xe24 <strtol+0x1e8>
     e50:	64 2f       	mov	r22, r20
     e52:	73 2f       	mov	r23, r19
     e54:	82 2f       	mov	r24, r18
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	e1 e1       	ldi	r30, 0x11	; 17
     e5c:	3c c3       	rjmp	.+1656   	; 0x14d6 <__epilogue_restores__+0x2>

00000e5e <isspace>:
     e5e:	91 11       	cpse	r25, r1
     e60:	51 c2       	rjmp	.+1186   	; 0x1304 <__ctype_isfalse>
     e62:	80 32       	cpi	r24, 0x20	; 32
     e64:	19 f0       	breq	.+6      	; 0xe6c <isspace+0xe>
     e66:	89 50       	subi	r24, 0x09	; 9
     e68:	85 50       	subi	r24, 0x05	; 5
     e6a:	d0 f7       	brcc	.-12     	; 0xe60 <isspace+0x2>
     e6c:	08 95       	ret

00000e6e <strtok>:
     e6e:	4c e4       	ldi	r20, 0x4C	; 76
     e70:	51 e0       	ldi	r21, 0x01	; 1
     e72:	30 d0       	rcall	.+96     	; 0xed4 <strtok_r>
     e74:	08 95       	ret

00000e76 <memcpy>:
     e76:	fb 01       	movw	r30, r22
     e78:	dc 01       	movw	r26, r24
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <memcpy+0xa>
     e7c:	01 90       	ld	r0, Z+
     e7e:	0d 92       	st	X+, r0
     e80:	41 50       	subi	r20, 0x01	; 1
     e82:	50 40       	sbci	r21, 0x00	; 0
     e84:	d8 f7       	brcc	.-10     	; 0xe7c <memcpy+0x6>
     e86:	08 95       	ret

00000e88 <memset>:
     e88:	dc 01       	movw	r26, r24
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <memset+0x6>
     e8c:	6d 93       	st	X+, r22
     e8e:	41 50       	subi	r20, 0x01	; 1
     e90:	50 40       	sbci	r21, 0x00	; 0
     e92:	e0 f7       	brcc	.-8      	; 0xe8c <memset+0x4>
     e94:	08 95       	ret

00000e96 <strcat>:
     e96:	fb 01       	movw	r30, r22
     e98:	dc 01       	movw	r26, r24
     e9a:	0d 90       	ld	r0, X+
     e9c:	00 20       	and	r0, r0
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <strcat+0x4>
     ea0:	11 97       	sbiw	r26, 0x01	; 1
     ea2:	01 90       	ld	r0, Z+
     ea4:	0d 92       	st	X+, r0
     ea6:	00 20       	and	r0, r0
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <strcat+0xc>
     eaa:	08 95       	ret

00000eac <strchr>:
     eac:	fc 01       	movw	r30, r24
     eae:	81 91       	ld	r24, Z+
     eb0:	86 17       	cp	r24, r22
     eb2:	21 f0       	breq	.+8      	; 0xebc <strchr+0x10>
     eb4:	88 23       	and	r24, r24
     eb6:	d9 f7       	brne	.-10     	; 0xeae <strchr+0x2>
     eb8:	99 27       	eor	r25, r25
     eba:	08 95       	ret
     ebc:	31 97       	sbiw	r30, 0x01	; 1
     ebe:	cf 01       	movw	r24, r30
     ec0:	08 95       	ret

00000ec2 <strcmp>:
     ec2:	fb 01       	movw	r30, r22
     ec4:	dc 01       	movw	r26, r24
     ec6:	8d 91       	ld	r24, X+
     ec8:	01 90       	ld	r0, Z+
     eca:	80 19       	sub	r24, r0
     ecc:	01 10       	cpse	r0, r1
     ece:	d9 f3       	breq	.-10     	; 0xec6 <strcmp+0x4>
     ed0:	99 0b       	sbc	r25, r25
     ed2:	08 95       	ret

00000ed4 <strtok_r>:
     ed4:	fa 01       	movw	r30, r20
     ed6:	a1 91       	ld	r26, Z+
     ed8:	b0 81       	ld	r27, Z
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	19 f4       	brne	.+6      	; 0xee4 <strtok_r+0x10>
     ede:	10 97       	sbiw	r26, 0x00	; 0
     ee0:	e1 f0       	breq	.+56     	; 0xf1a <strtok_r+0x46>
     ee2:	cd 01       	movw	r24, r26
     ee4:	dc 01       	movw	r26, r24
     ee6:	cd 01       	movw	r24, r26
     ee8:	0d 90       	ld	r0, X+
     eea:	00 20       	and	r0, r0
     eec:	11 f4       	brne	.+4      	; 0xef2 <strtok_r+0x1e>
     eee:	c0 01       	movw	r24, r0
     ef0:	13 c0       	rjmp	.+38     	; 0xf18 <strtok_r+0x44>
     ef2:	fb 01       	movw	r30, r22
     ef4:	21 91       	ld	r18, Z+
     ef6:	22 23       	and	r18, r18
     ef8:	19 f0       	breq	.+6      	; 0xf00 <strtok_r+0x2c>
     efa:	20 15       	cp	r18, r0
     efc:	d9 f7       	brne	.-10     	; 0xef4 <strtok_r+0x20>
     efe:	f3 cf       	rjmp	.-26     	; 0xee6 <strtok_r+0x12>
     f00:	fb 01       	movw	r30, r22
     f02:	21 91       	ld	r18, Z+
     f04:	20 15       	cp	r18, r0
     f06:	19 f4       	brne	.+6      	; 0xf0e <strtok_r+0x3a>
     f08:	1e 92       	st	-X, r1
     f0a:	11 96       	adiw	r26, 0x01	; 1
     f0c:	06 c0       	rjmp	.+12     	; 0xf1a <strtok_r+0x46>
     f0e:	22 23       	and	r18, r18
     f10:	c1 f7       	brne	.-16     	; 0xf02 <strtok_r+0x2e>
     f12:	0d 90       	ld	r0, X+
     f14:	00 20       	and	r0, r0
     f16:	a1 f7       	brne	.-24     	; 0xf00 <strtok_r+0x2c>
     f18:	d0 01       	movw	r26, r0
     f1a:	fa 01       	movw	r30, r20
     f1c:	a1 93       	st	Z+, r26
     f1e:	b0 83       	st	Z, r27
     f20:	08 95       	ret

00000f22 <sprintf>:
     f22:	ae e0       	ldi	r26, 0x0E	; 14
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e6 e9       	ldi	r30, 0x96	; 150
     f28:	f7 e0       	ldi	r31, 0x07	; 7
     f2a:	c6 c2       	rjmp	.+1420   	; 0x14b8 <__prologue_saves__+0x1c>
     f2c:	0d 89       	ldd	r16, Y+21	; 0x15
     f2e:	1e 89       	ldd	r17, Y+22	; 0x16
     f30:	86 e0       	ldi	r24, 0x06	; 6
     f32:	8c 83       	std	Y+4, r24	; 0x04
     f34:	1a 83       	std	Y+2, r17	; 0x02
     f36:	09 83       	std	Y+1, r16	; 0x01
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	9f e7       	ldi	r25, 0x7F	; 127
     f3c:	9e 83       	std	Y+6, r25	; 0x06
     f3e:	8d 83       	std	Y+5, r24	; 0x05
     f40:	ae 01       	movw	r20, r28
     f42:	47 5e       	subi	r20, 0xE7	; 231
     f44:	5f 4f       	sbci	r21, 0xFF	; 255
     f46:	6f 89       	ldd	r22, Y+23	; 0x17
     f48:	78 8d       	ldd	r23, Y+24	; 0x18
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	08 d0       	rcall	.+16     	; 0xf60 <vfprintf>
     f50:	ef 81       	ldd	r30, Y+7	; 0x07
     f52:	f8 85       	ldd	r31, Y+8	; 0x08
     f54:	e0 0f       	add	r30, r16
     f56:	f1 1f       	adc	r31, r17
     f58:	10 82       	st	Z, r1
     f5a:	2e 96       	adiw	r28, 0x0e	; 14
     f5c:	e4 e0       	ldi	r30, 0x04	; 4
     f5e:	c8 c2       	rjmp	.+1424   	; 0x14f0 <__epilogue_restores__+0x1c>

00000f60 <vfprintf>:
     f60:	ab e0       	ldi	r26, 0x0B	; 11
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 eb       	ldi	r30, 0xB5	; 181
     f66:	f7 e0       	ldi	r31, 0x07	; 7
     f68:	99 c2       	rjmp	.+1330   	; 0x149c <__prologue_saves__>
     f6a:	6c 01       	movw	r12, r24
     f6c:	7b 01       	movw	r14, r22
     f6e:	8a 01       	movw	r16, r20
     f70:	fc 01       	movw	r30, r24
     f72:	17 82       	std	Z+7, r1	; 0x07
     f74:	16 82       	std	Z+6, r1	; 0x06
     f76:	83 81       	ldd	r24, Z+3	; 0x03
     f78:	81 ff       	sbrs	r24, 1
     f7a:	bf c1       	rjmp	.+894    	; 0x12fa <vfprintf+0x39a>
     f7c:	ce 01       	movw	r24, r28
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	3c 01       	movw	r6, r24
     f82:	f6 01       	movw	r30, r12
     f84:	93 81       	ldd	r25, Z+3	; 0x03
     f86:	f7 01       	movw	r30, r14
     f88:	93 fd       	sbrc	r25, 3
     f8a:	85 91       	lpm	r24, Z+
     f8c:	93 ff       	sbrs	r25, 3
     f8e:	81 91       	ld	r24, Z+
     f90:	7f 01       	movw	r14, r30
     f92:	88 23       	and	r24, r24
     f94:	09 f4       	brne	.+2      	; 0xf98 <vfprintf+0x38>
     f96:	ad c1       	rjmp	.+858    	; 0x12f2 <vfprintf+0x392>
     f98:	85 32       	cpi	r24, 0x25	; 37
     f9a:	39 f4       	brne	.+14     	; 0xfaa <vfprintf+0x4a>
     f9c:	93 fd       	sbrc	r25, 3
     f9e:	85 91       	lpm	r24, Z+
     fa0:	93 ff       	sbrs	r25, 3
     fa2:	81 91       	ld	r24, Z+
     fa4:	7f 01       	movw	r14, r30
     fa6:	85 32       	cpi	r24, 0x25	; 37
     fa8:	21 f4       	brne	.+8      	; 0xfb2 <vfprintf+0x52>
     faa:	b6 01       	movw	r22, r12
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	c3 d1       	rcall	.+902    	; 0x1336 <fputc>
     fb0:	e8 cf       	rjmp	.-48     	; 0xf82 <vfprintf+0x22>
     fb2:	91 2c       	mov	r9, r1
     fb4:	21 2c       	mov	r2, r1
     fb6:	31 2c       	mov	r3, r1
     fb8:	ff e1       	ldi	r31, 0x1F	; 31
     fba:	f3 15       	cp	r31, r3
     fbc:	d8 f0       	brcs	.+54     	; 0xff4 <vfprintf+0x94>
     fbe:	8b 32       	cpi	r24, 0x2B	; 43
     fc0:	79 f0       	breq	.+30     	; 0xfe0 <vfprintf+0x80>
     fc2:	38 f4       	brcc	.+14     	; 0xfd2 <vfprintf+0x72>
     fc4:	80 32       	cpi	r24, 0x20	; 32
     fc6:	79 f0       	breq	.+30     	; 0xfe6 <vfprintf+0x86>
     fc8:	83 32       	cpi	r24, 0x23	; 35
     fca:	a1 f4       	brne	.+40     	; 0xff4 <vfprintf+0x94>
     fcc:	23 2d       	mov	r18, r3
     fce:	20 61       	ori	r18, 0x10	; 16
     fd0:	1d c0       	rjmp	.+58     	; 0x100c <vfprintf+0xac>
     fd2:	8d 32       	cpi	r24, 0x2D	; 45
     fd4:	61 f0       	breq	.+24     	; 0xfee <vfprintf+0x8e>
     fd6:	80 33       	cpi	r24, 0x30	; 48
     fd8:	69 f4       	brne	.+26     	; 0xff4 <vfprintf+0x94>
     fda:	23 2d       	mov	r18, r3
     fdc:	21 60       	ori	r18, 0x01	; 1
     fde:	16 c0       	rjmp	.+44     	; 0x100c <vfprintf+0xac>
     fe0:	83 2d       	mov	r24, r3
     fe2:	82 60       	ori	r24, 0x02	; 2
     fe4:	38 2e       	mov	r3, r24
     fe6:	e3 2d       	mov	r30, r3
     fe8:	e4 60       	ori	r30, 0x04	; 4
     fea:	3e 2e       	mov	r3, r30
     fec:	2a c0       	rjmp	.+84     	; 0x1042 <vfprintf+0xe2>
     fee:	f3 2d       	mov	r31, r3
     ff0:	f8 60       	ori	r31, 0x08	; 8
     ff2:	1d c0       	rjmp	.+58     	; 0x102e <vfprintf+0xce>
     ff4:	37 fc       	sbrc	r3, 7
     ff6:	2d c0       	rjmp	.+90     	; 0x1052 <vfprintf+0xf2>
     ff8:	20 ed       	ldi	r18, 0xD0	; 208
     ffa:	28 0f       	add	r18, r24
     ffc:	2a 30       	cpi	r18, 0x0A	; 10
     ffe:	40 f0       	brcs	.+16     	; 0x1010 <vfprintf+0xb0>
    1000:	8e 32       	cpi	r24, 0x2E	; 46
    1002:	b9 f4       	brne	.+46     	; 0x1032 <vfprintf+0xd2>
    1004:	36 fc       	sbrc	r3, 6
    1006:	75 c1       	rjmp	.+746    	; 0x12f2 <vfprintf+0x392>
    1008:	23 2d       	mov	r18, r3
    100a:	20 64       	ori	r18, 0x40	; 64
    100c:	32 2e       	mov	r3, r18
    100e:	19 c0       	rjmp	.+50     	; 0x1042 <vfprintf+0xe2>
    1010:	36 fe       	sbrs	r3, 6
    1012:	06 c0       	rjmp	.+12     	; 0x1020 <vfprintf+0xc0>
    1014:	8a e0       	ldi	r24, 0x0A	; 10
    1016:	98 9e       	mul	r9, r24
    1018:	20 0d       	add	r18, r0
    101a:	11 24       	eor	r1, r1
    101c:	92 2e       	mov	r9, r18
    101e:	11 c0       	rjmp	.+34     	; 0x1042 <vfprintf+0xe2>
    1020:	ea e0       	ldi	r30, 0x0A	; 10
    1022:	2e 9e       	mul	r2, r30
    1024:	20 0d       	add	r18, r0
    1026:	11 24       	eor	r1, r1
    1028:	22 2e       	mov	r2, r18
    102a:	f3 2d       	mov	r31, r3
    102c:	f0 62       	ori	r31, 0x20	; 32
    102e:	3f 2e       	mov	r3, r31
    1030:	08 c0       	rjmp	.+16     	; 0x1042 <vfprintf+0xe2>
    1032:	8c 36       	cpi	r24, 0x6C	; 108
    1034:	21 f4       	brne	.+8      	; 0x103e <vfprintf+0xde>
    1036:	83 2d       	mov	r24, r3
    1038:	80 68       	ori	r24, 0x80	; 128
    103a:	38 2e       	mov	r3, r24
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <vfprintf+0xe2>
    103e:	88 36       	cpi	r24, 0x68	; 104
    1040:	41 f4       	brne	.+16     	; 0x1052 <vfprintf+0xf2>
    1042:	f7 01       	movw	r30, r14
    1044:	93 fd       	sbrc	r25, 3
    1046:	85 91       	lpm	r24, Z+
    1048:	93 ff       	sbrs	r25, 3
    104a:	81 91       	ld	r24, Z+
    104c:	7f 01       	movw	r14, r30
    104e:	81 11       	cpse	r24, r1
    1050:	b3 cf       	rjmp	.-154    	; 0xfb8 <vfprintf+0x58>
    1052:	98 2f       	mov	r25, r24
    1054:	9f 7d       	andi	r25, 0xDF	; 223
    1056:	95 54       	subi	r25, 0x45	; 69
    1058:	93 30       	cpi	r25, 0x03	; 3
    105a:	28 f4       	brcc	.+10     	; 0x1066 <vfprintf+0x106>
    105c:	0c 5f       	subi	r16, 0xFC	; 252
    105e:	1f 4f       	sbci	r17, 0xFF	; 255
    1060:	9f e3       	ldi	r25, 0x3F	; 63
    1062:	99 83       	std	Y+1, r25	; 0x01
    1064:	0d c0       	rjmp	.+26     	; 0x1080 <vfprintf+0x120>
    1066:	83 36       	cpi	r24, 0x63	; 99
    1068:	31 f0       	breq	.+12     	; 0x1076 <vfprintf+0x116>
    106a:	83 37       	cpi	r24, 0x73	; 115
    106c:	71 f0       	breq	.+28     	; 0x108a <vfprintf+0x12a>
    106e:	83 35       	cpi	r24, 0x53	; 83
    1070:	09 f0       	breq	.+2      	; 0x1074 <vfprintf+0x114>
    1072:	55 c0       	rjmp	.+170    	; 0x111e <vfprintf+0x1be>
    1074:	20 c0       	rjmp	.+64     	; 0x10b6 <vfprintf+0x156>
    1076:	f8 01       	movw	r30, r16
    1078:	80 81       	ld	r24, Z
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	0e 5f       	subi	r16, 0xFE	; 254
    107e:	1f 4f       	sbci	r17, 0xFF	; 255
    1080:	88 24       	eor	r8, r8
    1082:	83 94       	inc	r8
    1084:	91 2c       	mov	r9, r1
    1086:	53 01       	movw	r10, r6
    1088:	12 c0       	rjmp	.+36     	; 0x10ae <vfprintf+0x14e>
    108a:	28 01       	movw	r4, r16
    108c:	f2 e0       	ldi	r31, 0x02	; 2
    108e:	4f 0e       	add	r4, r31
    1090:	51 1c       	adc	r5, r1
    1092:	f8 01       	movw	r30, r16
    1094:	a0 80       	ld	r10, Z
    1096:	b1 80       	ldd	r11, Z+1	; 0x01
    1098:	36 fe       	sbrs	r3, 6
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <vfprintf+0x142>
    109c:	69 2d       	mov	r22, r9
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <vfprintf+0x146>
    10a2:	6f ef       	ldi	r22, 0xFF	; 255
    10a4:	7f ef       	ldi	r23, 0xFF	; 255
    10a6:	c5 01       	movw	r24, r10
    10a8:	3b d1       	rcall	.+630    	; 0x1320 <strnlen>
    10aa:	4c 01       	movw	r8, r24
    10ac:	82 01       	movw	r16, r4
    10ae:	f3 2d       	mov	r31, r3
    10b0:	ff 77       	andi	r31, 0x7F	; 127
    10b2:	3f 2e       	mov	r3, r31
    10b4:	15 c0       	rjmp	.+42     	; 0x10e0 <vfprintf+0x180>
    10b6:	28 01       	movw	r4, r16
    10b8:	22 e0       	ldi	r18, 0x02	; 2
    10ba:	42 0e       	add	r4, r18
    10bc:	51 1c       	adc	r5, r1
    10be:	f8 01       	movw	r30, r16
    10c0:	a0 80       	ld	r10, Z
    10c2:	b1 80       	ldd	r11, Z+1	; 0x01
    10c4:	36 fe       	sbrs	r3, 6
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <vfprintf+0x16e>
    10c8:	69 2d       	mov	r22, r9
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <vfprintf+0x172>
    10ce:	6f ef       	ldi	r22, 0xFF	; 255
    10d0:	7f ef       	ldi	r23, 0xFF	; 255
    10d2:	c5 01       	movw	r24, r10
    10d4:	1a d1       	rcall	.+564    	; 0x130a <strnlen_P>
    10d6:	4c 01       	movw	r8, r24
    10d8:	f3 2d       	mov	r31, r3
    10da:	f0 68       	ori	r31, 0x80	; 128
    10dc:	3f 2e       	mov	r3, r31
    10de:	82 01       	movw	r16, r4
    10e0:	33 fc       	sbrc	r3, 3
    10e2:	19 c0       	rjmp	.+50     	; 0x1116 <vfprintf+0x1b6>
    10e4:	82 2d       	mov	r24, r2
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	88 16       	cp	r8, r24
    10ea:	99 06       	cpc	r9, r25
    10ec:	a0 f4       	brcc	.+40     	; 0x1116 <vfprintf+0x1b6>
    10ee:	b6 01       	movw	r22, r12
    10f0:	80 e2       	ldi	r24, 0x20	; 32
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	20 d1       	rcall	.+576    	; 0x1336 <fputc>
    10f6:	2a 94       	dec	r2
    10f8:	f5 cf       	rjmp	.-22     	; 0x10e4 <vfprintf+0x184>
    10fa:	f5 01       	movw	r30, r10
    10fc:	37 fc       	sbrc	r3, 7
    10fe:	85 91       	lpm	r24, Z+
    1100:	37 fe       	sbrs	r3, 7
    1102:	81 91       	ld	r24, Z+
    1104:	5f 01       	movw	r10, r30
    1106:	b6 01       	movw	r22, r12
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	15 d1       	rcall	.+554    	; 0x1336 <fputc>
    110c:	21 10       	cpse	r2, r1
    110e:	2a 94       	dec	r2
    1110:	21 e0       	ldi	r18, 0x01	; 1
    1112:	82 1a       	sub	r8, r18
    1114:	91 08       	sbc	r9, r1
    1116:	81 14       	cp	r8, r1
    1118:	91 04       	cpc	r9, r1
    111a:	79 f7       	brne	.-34     	; 0x10fa <vfprintf+0x19a>
    111c:	e1 c0       	rjmp	.+450    	; 0x12e0 <vfprintf+0x380>
    111e:	84 36       	cpi	r24, 0x64	; 100
    1120:	11 f0       	breq	.+4      	; 0x1126 <vfprintf+0x1c6>
    1122:	89 36       	cpi	r24, 0x69	; 105
    1124:	39 f5       	brne	.+78     	; 0x1174 <vfprintf+0x214>
    1126:	f8 01       	movw	r30, r16
    1128:	37 fe       	sbrs	r3, 7
    112a:	07 c0       	rjmp	.+14     	; 0x113a <vfprintf+0x1da>
    112c:	60 81       	ld	r22, Z
    112e:	71 81       	ldd	r23, Z+1	; 0x01
    1130:	82 81       	ldd	r24, Z+2	; 0x02
    1132:	93 81       	ldd	r25, Z+3	; 0x03
    1134:	0c 5f       	subi	r16, 0xFC	; 252
    1136:	1f 4f       	sbci	r17, 0xFF	; 255
    1138:	08 c0       	rjmp	.+16     	; 0x114a <vfprintf+0x1ea>
    113a:	60 81       	ld	r22, Z
    113c:	71 81       	ldd	r23, Z+1	; 0x01
    113e:	07 2e       	mov	r0, r23
    1140:	00 0c       	add	r0, r0
    1142:	88 0b       	sbc	r24, r24
    1144:	99 0b       	sbc	r25, r25
    1146:	0e 5f       	subi	r16, 0xFE	; 254
    1148:	1f 4f       	sbci	r17, 0xFF	; 255
    114a:	f3 2d       	mov	r31, r3
    114c:	ff 76       	andi	r31, 0x6F	; 111
    114e:	3f 2e       	mov	r3, r31
    1150:	97 ff       	sbrs	r25, 7
    1152:	09 c0       	rjmp	.+18     	; 0x1166 <vfprintf+0x206>
    1154:	90 95       	com	r25
    1156:	80 95       	com	r24
    1158:	70 95       	com	r23
    115a:	61 95       	neg	r22
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	8f 4f       	sbci	r24, 0xFF	; 255
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	f0 68       	ori	r31, 0x80	; 128
    1164:	3f 2e       	mov	r3, r31
    1166:	2a e0       	ldi	r18, 0x0A	; 10
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	a3 01       	movw	r20, r6
    116c:	20 d1       	rcall	.+576    	; 0x13ae <__ultoa_invert>
    116e:	88 2e       	mov	r8, r24
    1170:	86 18       	sub	r8, r6
    1172:	44 c0       	rjmp	.+136    	; 0x11fc <vfprintf+0x29c>
    1174:	85 37       	cpi	r24, 0x75	; 117
    1176:	31 f4       	brne	.+12     	; 0x1184 <vfprintf+0x224>
    1178:	23 2d       	mov	r18, r3
    117a:	2f 7e       	andi	r18, 0xEF	; 239
    117c:	b2 2e       	mov	r11, r18
    117e:	2a e0       	ldi	r18, 0x0A	; 10
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	25 c0       	rjmp	.+74     	; 0x11ce <vfprintf+0x26e>
    1184:	93 2d       	mov	r25, r3
    1186:	99 7f       	andi	r25, 0xF9	; 249
    1188:	b9 2e       	mov	r11, r25
    118a:	8f 36       	cpi	r24, 0x6F	; 111
    118c:	c1 f0       	breq	.+48     	; 0x11be <vfprintf+0x25e>
    118e:	18 f4       	brcc	.+6      	; 0x1196 <vfprintf+0x236>
    1190:	88 35       	cpi	r24, 0x58	; 88
    1192:	79 f0       	breq	.+30     	; 0x11b2 <vfprintf+0x252>
    1194:	ae c0       	rjmp	.+348    	; 0x12f2 <vfprintf+0x392>
    1196:	80 37       	cpi	r24, 0x70	; 112
    1198:	19 f0       	breq	.+6      	; 0x11a0 <vfprintf+0x240>
    119a:	88 37       	cpi	r24, 0x78	; 120
    119c:	21 f0       	breq	.+8      	; 0x11a6 <vfprintf+0x246>
    119e:	a9 c0       	rjmp	.+338    	; 0x12f2 <vfprintf+0x392>
    11a0:	e9 2f       	mov	r30, r25
    11a2:	e0 61       	ori	r30, 0x10	; 16
    11a4:	be 2e       	mov	r11, r30
    11a6:	b4 fe       	sbrs	r11, 4
    11a8:	0d c0       	rjmp	.+26     	; 0x11c4 <vfprintf+0x264>
    11aa:	fb 2d       	mov	r31, r11
    11ac:	f4 60       	ori	r31, 0x04	; 4
    11ae:	bf 2e       	mov	r11, r31
    11b0:	09 c0       	rjmp	.+18     	; 0x11c4 <vfprintf+0x264>
    11b2:	34 fe       	sbrs	r3, 4
    11b4:	0a c0       	rjmp	.+20     	; 0x11ca <vfprintf+0x26a>
    11b6:	29 2f       	mov	r18, r25
    11b8:	26 60       	ori	r18, 0x06	; 6
    11ba:	b2 2e       	mov	r11, r18
    11bc:	06 c0       	rjmp	.+12     	; 0x11ca <vfprintf+0x26a>
    11be:	28 e0       	ldi	r18, 0x08	; 8
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <vfprintf+0x26e>
    11c4:	20 e1       	ldi	r18, 0x10	; 16
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <vfprintf+0x26e>
    11ca:	20 e1       	ldi	r18, 0x10	; 16
    11cc:	32 e0       	ldi	r19, 0x02	; 2
    11ce:	f8 01       	movw	r30, r16
    11d0:	b7 fe       	sbrs	r11, 7
    11d2:	07 c0       	rjmp	.+14     	; 0x11e2 <vfprintf+0x282>
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	0c 5f       	subi	r16, 0xFC	; 252
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	06 c0       	rjmp	.+12     	; 0x11ee <vfprintf+0x28e>
    11e2:	60 81       	ld	r22, Z
    11e4:	71 81       	ldd	r23, Z+1	; 0x01
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 5f       	subi	r16, 0xFE	; 254
    11ec:	1f 4f       	sbci	r17, 0xFF	; 255
    11ee:	a3 01       	movw	r20, r6
    11f0:	de d0       	rcall	.+444    	; 0x13ae <__ultoa_invert>
    11f2:	88 2e       	mov	r8, r24
    11f4:	86 18       	sub	r8, r6
    11f6:	fb 2d       	mov	r31, r11
    11f8:	ff 77       	andi	r31, 0x7F	; 127
    11fa:	3f 2e       	mov	r3, r31
    11fc:	36 fe       	sbrs	r3, 6
    11fe:	0d c0       	rjmp	.+26     	; 0x121a <vfprintf+0x2ba>
    1200:	23 2d       	mov	r18, r3
    1202:	2e 7f       	andi	r18, 0xFE	; 254
    1204:	a2 2e       	mov	r10, r18
    1206:	89 14       	cp	r8, r9
    1208:	58 f4       	brcc	.+22     	; 0x1220 <vfprintf+0x2c0>
    120a:	34 fe       	sbrs	r3, 4
    120c:	0b c0       	rjmp	.+22     	; 0x1224 <vfprintf+0x2c4>
    120e:	32 fc       	sbrc	r3, 2
    1210:	09 c0       	rjmp	.+18     	; 0x1224 <vfprintf+0x2c4>
    1212:	83 2d       	mov	r24, r3
    1214:	8e 7e       	andi	r24, 0xEE	; 238
    1216:	a8 2e       	mov	r10, r24
    1218:	05 c0       	rjmp	.+10     	; 0x1224 <vfprintf+0x2c4>
    121a:	b8 2c       	mov	r11, r8
    121c:	a3 2c       	mov	r10, r3
    121e:	03 c0       	rjmp	.+6      	; 0x1226 <vfprintf+0x2c6>
    1220:	b8 2c       	mov	r11, r8
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <vfprintf+0x2c6>
    1224:	b9 2c       	mov	r11, r9
    1226:	a4 fe       	sbrs	r10, 4
    1228:	0f c0       	rjmp	.+30     	; 0x1248 <vfprintf+0x2e8>
    122a:	fe 01       	movw	r30, r28
    122c:	e8 0d       	add	r30, r8
    122e:	f1 1d       	adc	r31, r1
    1230:	80 81       	ld	r24, Z
    1232:	80 33       	cpi	r24, 0x30	; 48
    1234:	21 f4       	brne	.+8      	; 0x123e <vfprintf+0x2de>
    1236:	9a 2d       	mov	r25, r10
    1238:	99 7e       	andi	r25, 0xE9	; 233
    123a:	a9 2e       	mov	r10, r25
    123c:	09 c0       	rjmp	.+18     	; 0x1250 <vfprintf+0x2f0>
    123e:	a2 fe       	sbrs	r10, 2
    1240:	06 c0       	rjmp	.+12     	; 0x124e <vfprintf+0x2ee>
    1242:	b3 94       	inc	r11
    1244:	b3 94       	inc	r11
    1246:	04 c0       	rjmp	.+8      	; 0x1250 <vfprintf+0x2f0>
    1248:	8a 2d       	mov	r24, r10
    124a:	86 78       	andi	r24, 0x86	; 134
    124c:	09 f0       	breq	.+2      	; 0x1250 <vfprintf+0x2f0>
    124e:	b3 94       	inc	r11
    1250:	a3 fc       	sbrc	r10, 3
    1252:	10 c0       	rjmp	.+32     	; 0x1274 <vfprintf+0x314>
    1254:	a0 fe       	sbrs	r10, 0
    1256:	06 c0       	rjmp	.+12     	; 0x1264 <vfprintf+0x304>
    1258:	b2 14       	cp	r11, r2
    125a:	80 f4       	brcc	.+32     	; 0x127c <vfprintf+0x31c>
    125c:	28 0c       	add	r2, r8
    125e:	92 2c       	mov	r9, r2
    1260:	9b 18       	sub	r9, r11
    1262:	0d c0       	rjmp	.+26     	; 0x127e <vfprintf+0x31e>
    1264:	b2 14       	cp	r11, r2
    1266:	58 f4       	brcc	.+22     	; 0x127e <vfprintf+0x31e>
    1268:	b6 01       	movw	r22, r12
    126a:	80 e2       	ldi	r24, 0x20	; 32
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	63 d0       	rcall	.+198    	; 0x1336 <fputc>
    1270:	b3 94       	inc	r11
    1272:	f8 cf       	rjmp	.-16     	; 0x1264 <vfprintf+0x304>
    1274:	b2 14       	cp	r11, r2
    1276:	18 f4       	brcc	.+6      	; 0x127e <vfprintf+0x31e>
    1278:	2b 18       	sub	r2, r11
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <vfprintf+0x320>
    127c:	98 2c       	mov	r9, r8
    127e:	21 2c       	mov	r2, r1
    1280:	a4 fe       	sbrs	r10, 4
    1282:	0f c0       	rjmp	.+30     	; 0x12a2 <vfprintf+0x342>
    1284:	b6 01       	movw	r22, r12
    1286:	80 e3       	ldi	r24, 0x30	; 48
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	55 d0       	rcall	.+170    	; 0x1336 <fputc>
    128c:	a2 fe       	sbrs	r10, 2
    128e:	16 c0       	rjmp	.+44     	; 0x12bc <vfprintf+0x35c>
    1290:	a1 fc       	sbrc	r10, 1
    1292:	03 c0       	rjmp	.+6      	; 0x129a <vfprintf+0x33a>
    1294:	88 e7       	ldi	r24, 0x78	; 120
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 c0       	rjmp	.+4      	; 0x129e <vfprintf+0x33e>
    129a:	88 e5       	ldi	r24, 0x58	; 88
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	b6 01       	movw	r22, r12
    12a0:	0c c0       	rjmp	.+24     	; 0x12ba <vfprintf+0x35a>
    12a2:	8a 2d       	mov	r24, r10
    12a4:	86 78       	andi	r24, 0x86	; 134
    12a6:	51 f0       	breq	.+20     	; 0x12bc <vfprintf+0x35c>
    12a8:	a1 fe       	sbrs	r10, 1
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <vfprintf+0x350>
    12ac:	8b e2       	ldi	r24, 0x2B	; 43
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <vfprintf+0x352>
    12b0:	80 e2       	ldi	r24, 0x20	; 32
    12b2:	a7 fc       	sbrc	r10, 7
    12b4:	8d e2       	ldi	r24, 0x2D	; 45
    12b6:	b6 01       	movw	r22, r12
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	3d d0       	rcall	.+122    	; 0x1336 <fputc>
    12bc:	89 14       	cp	r8, r9
    12be:	30 f4       	brcc	.+12     	; 0x12cc <vfprintf+0x36c>
    12c0:	b6 01       	movw	r22, r12
    12c2:	80 e3       	ldi	r24, 0x30	; 48
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	37 d0       	rcall	.+110    	; 0x1336 <fputc>
    12c8:	9a 94       	dec	r9
    12ca:	f8 cf       	rjmp	.-16     	; 0x12bc <vfprintf+0x35c>
    12cc:	8a 94       	dec	r8
    12ce:	f3 01       	movw	r30, r6
    12d0:	e8 0d       	add	r30, r8
    12d2:	f1 1d       	adc	r31, r1
    12d4:	80 81       	ld	r24, Z
    12d6:	b6 01       	movw	r22, r12
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	2d d0       	rcall	.+90     	; 0x1336 <fputc>
    12dc:	81 10       	cpse	r8, r1
    12de:	f6 cf       	rjmp	.-20     	; 0x12cc <vfprintf+0x36c>
    12e0:	22 20       	and	r2, r2
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <vfprintf+0x386>
    12e4:	4e ce       	rjmp	.-868    	; 0xf82 <vfprintf+0x22>
    12e6:	b6 01       	movw	r22, r12
    12e8:	80 e2       	ldi	r24, 0x20	; 32
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	24 d0       	rcall	.+72     	; 0x1336 <fputc>
    12ee:	2a 94       	dec	r2
    12f0:	f7 cf       	rjmp	.-18     	; 0x12e0 <vfprintf+0x380>
    12f2:	f6 01       	movw	r30, r12
    12f4:	86 81       	ldd	r24, Z+6	; 0x06
    12f6:	97 81       	ldd	r25, Z+7	; 0x07
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <vfprintf+0x39e>
    12fa:	8f ef       	ldi	r24, 0xFF	; 255
    12fc:	9f ef       	ldi	r25, 0xFF	; 255
    12fe:	2b 96       	adiw	r28, 0x0b	; 11
    1300:	e2 e1       	ldi	r30, 0x12	; 18
    1302:	e8 c0       	rjmp	.+464    	; 0x14d4 <__epilogue_restores__>

00001304 <__ctype_isfalse>:
    1304:	99 27       	eor	r25, r25
    1306:	88 27       	eor	r24, r24

00001308 <__ctype_istrue>:
    1308:	08 95       	ret

0000130a <strnlen_P>:
    130a:	fc 01       	movw	r30, r24
    130c:	05 90       	lpm	r0, Z+
    130e:	61 50       	subi	r22, 0x01	; 1
    1310:	70 40       	sbci	r23, 0x00	; 0
    1312:	01 10       	cpse	r0, r1
    1314:	d8 f7       	brcc	.-10     	; 0x130c <strnlen_P+0x2>
    1316:	80 95       	com	r24
    1318:	90 95       	com	r25
    131a:	8e 0f       	add	r24, r30
    131c:	9f 1f       	adc	r25, r31
    131e:	08 95       	ret

00001320 <strnlen>:
    1320:	fc 01       	movw	r30, r24
    1322:	61 50       	subi	r22, 0x01	; 1
    1324:	70 40       	sbci	r23, 0x00	; 0
    1326:	01 90       	ld	r0, Z+
    1328:	01 10       	cpse	r0, r1
    132a:	d8 f7       	brcc	.-10     	; 0x1322 <strnlen+0x2>
    132c:	80 95       	com	r24
    132e:	90 95       	com	r25
    1330:	8e 0f       	add	r24, r30
    1332:	9f 1f       	adc	r25, r31
    1334:	08 95       	ret

00001336 <fputc>:
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	fb 01       	movw	r30, r22
    1340:	23 81       	ldd	r18, Z+3	; 0x03
    1342:	21 fd       	sbrc	r18, 1
    1344:	03 c0       	rjmp	.+6      	; 0x134c <fputc+0x16>
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	9f ef       	ldi	r25, 0xFF	; 255
    134a:	2c c0       	rjmp	.+88     	; 0x13a4 <fputc+0x6e>
    134c:	22 ff       	sbrs	r18, 2
    134e:	16 c0       	rjmp	.+44     	; 0x137c <fputc+0x46>
    1350:	46 81       	ldd	r20, Z+6	; 0x06
    1352:	57 81       	ldd	r21, Z+7	; 0x07
    1354:	24 81       	ldd	r18, Z+4	; 0x04
    1356:	35 81       	ldd	r19, Z+5	; 0x05
    1358:	42 17       	cp	r20, r18
    135a:	53 07       	cpc	r21, r19
    135c:	44 f4       	brge	.+16     	; 0x136e <fputc+0x38>
    135e:	a0 81       	ld	r26, Z
    1360:	b1 81       	ldd	r27, Z+1	; 0x01
    1362:	9d 01       	movw	r18, r26
    1364:	2f 5f       	subi	r18, 0xFF	; 255
    1366:	3f 4f       	sbci	r19, 0xFF	; 255
    1368:	31 83       	std	Z+1, r19	; 0x01
    136a:	20 83       	st	Z, r18
    136c:	8c 93       	st	X, r24
    136e:	26 81       	ldd	r18, Z+6	; 0x06
    1370:	37 81       	ldd	r19, Z+7	; 0x07
    1372:	2f 5f       	subi	r18, 0xFF	; 255
    1374:	3f 4f       	sbci	r19, 0xFF	; 255
    1376:	37 83       	std	Z+7, r19	; 0x07
    1378:	26 83       	std	Z+6, r18	; 0x06
    137a:	14 c0       	rjmp	.+40     	; 0x13a4 <fputc+0x6e>
    137c:	8b 01       	movw	r16, r22
    137e:	ec 01       	movw	r28, r24
    1380:	fb 01       	movw	r30, r22
    1382:	00 84       	ldd	r0, Z+8	; 0x08
    1384:	f1 85       	ldd	r31, Z+9	; 0x09
    1386:	e0 2d       	mov	r30, r0
    1388:	09 95       	icall
    138a:	89 2b       	or	r24, r25
    138c:	e1 f6       	brne	.-72     	; 0x1346 <fputc+0x10>
    138e:	d8 01       	movw	r26, r16
    1390:	16 96       	adiw	r26, 0x06	; 6
    1392:	8d 91       	ld	r24, X+
    1394:	9c 91       	ld	r25, X
    1396:	17 97       	sbiw	r26, 0x07	; 7
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	17 96       	adiw	r26, 0x07	; 7
    139c:	9c 93       	st	X, r25
    139e:	8e 93       	st	-X, r24
    13a0:	16 97       	sbiw	r26, 0x06	; 6
    13a2:	ce 01       	movw	r24, r28
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	08 95       	ret

000013ae <__ultoa_invert>:
    13ae:	fa 01       	movw	r30, r20
    13b0:	aa 27       	eor	r26, r26
    13b2:	28 30       	cpi	r18, 0x08	; 8
    13b4:	51 f1       	breq	.+84     	; 0x140a <__ultoa_invert+0x5c>
    13b6:	20 31       	cpi	r18, 0x10	; 16
    13b8:	81 f1       	breq	.+96     	; 0x141a <__ultoa_invert+0x6c>
    13ba:	e8 94       	clt
    13bc:	6f 93       	push	r22
    13be:	6e 7f       	andi	r22, 0xFE	; 254
    13c0:	6e 5f       	subi	r22, 0xFE	; 254
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	8f 4f       	sbci	r24, 0xFF	; 255
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	af 4f       	sbci	r26, 0xFF	; 255
    13ca:	b1 e0       	ldi	r27, 0x01	; 1
    13cc:	3e d0       	rcall	.+124    	; 0x144a <__ultoa_invert+0x9c>
    13ce:	b4 e0       	ldi	r27, 0x04	; 4
    13d0:	3c d0       	rcall	.+120    	; 0x144a <__ultoa_invert+0x9c>
    13d2:	67 0f       	add	r22, r23
    13d4:	78 1f       	adc	r23, r24
    13d6:	89 1f       	adc	r24, r25
    13d8:	9a 1f       	adc	r25, r26
    13da:	a1 1d       	adc	r26, r1
    13dc:	68 0f       	add	r22, r24
    13de:	79 1f       	adc	r23, r25
    13e0:	8a 1f       	adc	r24, r26
    13e2:	91 1d       	adc	r25, r1
    13e4:	a1 1d       	adc	r26, r1
    13e6:	6a 0f       	add	r22, r26
    13e8:	71 1d       	adc	r23, r1
    13ea:	81 1d       	adc	r24, r1
    13ec:	91 1d       	adc	r25, r1
    13ee:	a1 1d       	adc	r26, r1
    13f0:	20 d0       	rcall	.+64     	; 0x1432 <__ultoa_invert+0x84>
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <__ultoa_invert+0x48>
    13f4:	68 94       	set
    13f6:	3f 91       	pop	r19
    13f8:	2a e0       	ldi	r18, 0x0A	; 10
    13fa:	26 9f       	mul	r18, r22
    13fc:	11 24       	eor	r1, r1
    13fe:	30 19       	sub	r19, r0
    1400:	30 5d       	subi	r19, 0xD0	; 208
    1402:	31 93       	st	Z+, r19
    1404:	de f6       	brtc	.-74     	; 0x13bc <__ultoa_invert+0xe>
    1406:	cf 01       	movw	r24, r30
    1408:	08 95       	ret
    140a:	46 2f       	mov	r20, r22
    140c:	47 70       	andi	r20, 0x07	; 7
    140e:	40 5d       	subi	r20, 0xD0	; 208
    1410:	41 93       	st	Z+, r20
    1412:	b3 e0       	ldi	r27, 0x03	; 3
    1414:	0f d0       	rcall	.+30     	; 0x1434 <__ultoa_invert+0x86>
    1416:	c9 f7       	brne	.-14     	; 0x140a <__ultoa_invert+0x5c>
    1418:	f6 cf       	rjmp	.-20     	; 0x1406 <__ultoa_invert+0x58>
    141a:	46 2f       	mov	r20, r22
    141c:	4f 70       	andi	r20, 0x0F	; 15
    141e:	40 5d       	subi	r20, 0xD0	; 208
    1420:	4a 33       	cpi	r20, 0x3A	; 58
    1422:	18 f0       	brcs	.+6      	; 0x142a <__ultoa_invert+0x7c>
    1424:	49 5d       	subi	r20, 0xD9	; 217
    1426:	31 fd       	sbrc	r19, 1
    1428:	40 52       	subi	r20, 0x20	; 32
    142a:	41 93       	st	Z+, r20
    142c:	02 d0       	rcall	.+4      	; 0x1432 <__ultoa_invert+0x84>
    142e:	a9 f7       	brne	.-22     	; 0x141a <__ultoa_invert+0x6c>
    1430:	ea cf       	rjmp	.-44     	; 0x1406 <__ultoa_invert+0x58>
    1432:	b4 e0       	ldi	r27, 0x04	; 4
    1434:	a6 95       	lsr	r26
    1436:	97 95       	ror	r25
    1438:	87 95       	ror	r24
    143a:	77 95       	ror	r23
    143c:	67 95       	ror	r22
    143e:	ba 95       	dec	r27
    1440:	c9 f7       	brne	.-14     	; 0x1434 <__ultoa_invert+0x86>
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	61 05       	cpc	r22, r1
    1446:	71 05       	cpc	r23, r1
    1448:	08 95       	ret
    144a:	9b 01       	movw	r18, r22
    144c:	ac 01       	movw	r20, r24
    144e:	0a 2e       	mov	r0, r26
    1450:	06 94       	lsr	r0
    1452:	57 95       	ror	r21
    1454:	47 95       	ror	r20
    1456:	37 95       	ror	r19
    1458:	27 95       	ror	r18
    145a:	ba 95       	dec	r27
    145c:	c9 f7       	brne	.-14     	; 0x1450 <__ultoa_invert+0xa2>
    145e:	62 0f       	add	r22, r18
    1460:	73 1f       	adc	r23, r19
    1462:	84 1f       	adc	r24, r20
    1464:	95 1f       	adc	r25, r21
    1466:	a0 1d       	adc	r26, r0
    1468:	08 95       	ret

0000146a <__mulsi3>:
    146a:	db 01       	movw	r26, r22
    146c:	8f 93       	push	r24
    146e:	9f 93       	push	r25
    1470:	0b d0       	rcall	.+22     	; 0x1488 <__muluhisi3>
    1472:	bf 91       	pop	r27
    1474:	af 91       	pop	r26
    1476:	a2 9f       	mul	r26, r18
    1478:	80 0d       	add	r24, r0
    147a:	91 1d       	adc	r25, r1
    147c:	a3 9f       	mul	r26, r19
    147e:	90 0d       	add	r25, r0
    1480:	b2 9f       	mul	r27, r18
    1482:	90 0d       	add	r25, r0
    1484:	11 24       	eor	r1, r1
    1486:	08 95       	ret

00001488 <__muluhisi3>:
    1488:	d3 d9       	rcall	.-3162   	; 0x830 <__umulhisi3>
    148a:	a5 9f       	mul	r26, r21
    148c:	90 0d       	add	r25, r0
    148e:	b4 9f       	mul	r27, r20
    1490:	90 0d       	add	r25, r0
    1492:	a4 9f       	mul	r26, r20
    1494:	80 0d       	add	r24, r0
    1496:	91 1d       	adc	r25, r1
    1498:	11 24       	eor	r1, r1
    149a:	08 95       	ret

0000149c <__prologue_saves__>:
    149c:	2f 92       	push	r2
    149e:	3f 92       	push	r3
    14a0:	4f 92       	push	r4
    14a2:	5f 92       	push	r5
    14a4:	6f 92       	push	r6
    14a6:	7f 92       	push	r7
    14a8:	8f 92       	push	r8
    14aa:	9f 92       	push	r9
    14ac:	af 92       	push	r10
    14ae:	bf 92       	push	r11
    14b0:	cf 92       	push	r12
    14b2:	df 92       	push	r13
    14b4:	ef 92       	push	r14
    14b6:	ff 92       	push	r15
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	ca 1b       	sub	r28, r26
    14c6:	db 0b       	sbc	r29, r27
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	09 94       	ijmp

000014d4 <__epilogue_restores__>:
    14d4:	2a 88       	ldd	r2, Y+18	; 0x12
    14d6:	39 88       	ldd	r3, Y+17	; 0x11
    14d8:	48 88       	ldd	r4, Y+16	; 0x10
    14da:	5f 84       	ldd	r5, Y+15	; 0x0f
    14dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    14de:	7d 84       	ldd	r7, Y+13	; 0x0d
    14e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    14e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    14e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    14e6:	b9 84       	ldd	r11, Y+9	; 0x09
    14e8:	c8 84       	ldd	r12, Y+8	; 0x08
    14ea:	df 80       	ldd	r13, Y+7	; 0x07
    14ec:	ee 80       	ldd	r14, Y+6	; 0x06
    14ee:	fd 80       	ldd	r15, Y+5	; 0x05
    14f0:	0c 81       	ldd	r16, Y+4	; 0x04
    14f2:	1b 81       	ldd	r17, Y+3	; 0x03
    14f4:	aa 81       	ldd	r26, Y+2	; 0x02
    14f6:	b9 81       	ldd	r27, Y+1	; 0x01
    14f8:	ce 0f       	add	r28, r30
    14fa:	d1 1d       	adc	r29, r1
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	ed 01       	movw	r28, r26
    1508:	08 95       	ret

0000150a <_exit>:
    150a:	f8 94       	cli

0000150c <__stop_program>:
    150c:	ff cf       	rjmp	.-2      	; 0x150c <__stop_program>
