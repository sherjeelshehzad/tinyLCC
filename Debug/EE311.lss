
EE311.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00001c60  00001cf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000226  0080007e  0080007e  00001d12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00001d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014e7  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082a  00000000  00000000  00003357  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001132  00000000  00000000  00003b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00004cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006db  00000000  00000000  00004ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000044c  00000000  00000000  000055ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000059f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	ca c2       	rjmp	.+1428   	; 0x59c <__vector_3>
       8:	fc c2       	rjmp	.+1528   	; 0x602 <__vector_4>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	84 c1       	rjmp	.+776    	; 0x316 <__vector_6>
       e:	e0 c1       	rjmp	.+960    	; 0x3d0 <__vector_7>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	5c c1       	rjmp	.+696    	; 0x2cc <__vector_9>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	51 c0       	rjmp	.+162    	; 0xba <__vector_11>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	12 c1       	rjmp	.+548    	; 0x24c <__vector_11+0x192>
      28:	15 c1       	rjmp	.+554    	; 0x254 <__vector_11+0x19a>
      2a:	18 c1       	rjmp	.+560    	; 0x25c <__vector_11+0x1a2>
      2c:	1b c1       	rjmp	.+566    	; 0x264 <__vector_11+0x1aa>
      2e:	20 c1       	rjmp	.+576    	; 0x270 <__vector_11+0x1b6>
      30:	23 c1       	rjmp	.+582    	; 0x278 <__vector_11+0x1be>
      32:	28 c1       	rjmp	.+592    	; 0x284 <__vector_11+0x1ca>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf e5       	ldi	r28, 0x5F	; 95
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	10 e0       	ldi	r17, 0x00	; 0
      42:	a0 e6       	ldi	r26, 0x60	; 96
      44:	b0 e0       	ldi	r27, 0x00	; 0
      46:	e0 e6       	ldi	r30, 0x60	; 96
      48:	fc e1       	ldi	r31, 0x1C	; 28
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	ae 37       	cpi	r26, 0x7E	; 126
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	22 e0       	ldi	r18, 0x02	; 2
      58:	ae e7       	ldi	r26, 0x7E	; 126
      5a:	b0 e0       	ldi	r27, 0x00	; 0
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a4 3a       	cpi	r26, 0xA4	; 164
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	08 d3       	rcall	.+1552   	; 0x678 <main>
      68:	f9 cd       	rjmp	.-1038   	; 0xfffffc5c <__eeprom_end+0xff7efc5c>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <adc_read>:
#include "adc.h"

#define ADCSTATUS (ADCSRA & (1<<ADIF))

uint16_t adc_read(uint8_t channel){
	ADMUX &= 0xF0; //clear previous setting
      6c:	97 b1       	in	r25, 0x07	; 7
      6e:	90 7f       	andi	r25, 0xF0	; 240
      70:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel; //add channel setting
      72:	97 b1       	in	r25, 0x07	; 7
      74:	89 2b       	or	r24, r25
      76:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA |= (1<<ADSC); //start conversion
      78:	36 9a       	sbi	0x06, 6	; 6
	
	while (ADCSTATUS == 0){ //block until conversion finishes
      7a:	34 9b       	sbis	0x06, 4	; 6
      7c:	fe cf       	rjmp	.-4      	; 0x7a <adc_read+0xe>
	}
	return ADC; //return value in mV  
      7e:	84 b1       	in	r24, 0x04	; 4
      80:	95 b1       	in	r25, 0x05	; 5
}
      82:	08 95       	ret

00000084 <adc_convert>:

uint32_t adc_convert(uint16_t rawvalue){
	return (uint32_t)((uint32_t)rawvalue*voltagereference/1024);
      84:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <voltagereference>
      88:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <voltagereference+0x1>
      8c:	9c 01       	movw	r18, r24
      8e:	df dc       	rcall	.-1602   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
      90:	2a e0       	ldi	r18, 0x0A	; 10
      92:	96 95       	lsr	r25
      94:	87 95       	ror	r24
      96:	77 95       	ror	r23
      98:	67 95       	ror	r22
      9a:	2a 95       	dec	r18
      9c:	d1 f7       	brne	.-12     	; 0x92 <adc_convert+0xe>
}
      9e:	08 95       	ret

000000a0 <adc_init>:

void adc_init(){
	ADMUX &= ~(1<<REFS1);
      a0:	3f 98       	cbi	0x07, 7	; 7
	ADMUX |= (1<<REFS0); //use AVcc reference
      a2:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN); //enable ADC
      a4:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= ((1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2)); //use clock divider of /128 for 125khz ADC frequency
      a6:	86 b1       	in	r24, 0x06	; 6
      a8:	87 60       	ori	r24, 0x07	; 7
      aa:	86 b9       	out	0x06, r24	; 6
	voltagereference = 5000;
      ac:	88 e8       	ldi	r24, 0x88	; 136
      ae:	93 e1       	ldi	r25, 0x13	; 19
      b0:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <voltagereference+0x1>
      b4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <voltagereference>
      b8:	08 95       	ret

000000ba <__vector_11>:

#include "interrupts.h"
#include "uart.h"

//json receiver and parser
ISR(USART_RXC_vect){
      ba:	1f 92       	push	r1
      bc:	0f 92       	push	r0
      be:	0f b6       	in	r0, 0x3f	; 63
      c0:	0f 92       	push	r0
      c2:	11 24       	eor	r1, r1
      c4:	2f 93       	push	r18
      c6:	3f 93       	push	r19
      c8:	4f 93       	push	r20
      ca:	5f 93       	push	r21
      cc:	6f 93       	push	r22
      ce:	7f 93       	push	r23
      d0:	8f 93       	push	r24
      d2:	9f 93       	push	r25
      d4:	ef 93       	push	r30
      d6:	ff 93       	push	r31
	uart_char = UDR;
      d8:	8c b1       	in	r24, 0x0c	; 12
      da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <uart_char>
	switch (state){
      de:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <state>
      e2:	21 30       	cpi	r18, 0x01	; 1
      e4:	69 f0       	breq	.+26     	; 0x100 <__vector_11+0x46>
      e6:	38 f0       	brcs	.+14     	; 0xf6 <__vector_11+0x3c>
      e8:	22 30       	cpi	r18, 0x02	; 2
      ea:	09 f4       	brne	.+2      	; 0xee <__vector_11+0x34>
      ec:	42 c0       	rjmp	.+132    	; 0x172 <__vector_11+0xb8>
      ee:	23 30       	cpi	r18, 0x03	; 3
      f0:	09 f4       	brne	.+2      	; 0xf4 <__vector_11+0x3a>
      f2:	a1 c0       	rjmp	.+322    	; 0x236 <__vector_11+0x17c>
      f4:	db c0       	rjmp	.+438    	; 0x2ac <__vector_11+0x1f2>
		case ID:
			if (uart_char == '3') {state = MFC; mfcstate = M; clrstate = clrC; reqstate = req1;}
      f6:	83 33       	cpi	r24, 0x33	; 51
      f8:	09 f0       	breq	.+2      	; 0xfc <__vector_11+0x42>
      fa:	d8 c0       	rjmp	.+432    	; 0x2ac <__vector_11+0x1f2>
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	30 c0       	rjmp	.+96     	; 0x160 <__vector_11+0xa6>
			break;
		case MFC:
			switch (mfcstate){
     100:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <mfcstate>
     104:	92 30       	cpi	r25, 0x02	; 2
     106:	b9 f0       	breq	.+46     	; 0x136 <__vector_11+0x7c>
     108:	28 f4       	brcc	.+10     	; 0x114 <__vector_11+0x5a>
     10a:	99 23       	and	r25, r25
     10c:	49 f0       	breq	.+18     	; 0x120 <__vector_11+0x66>
     10e:	91 30       	cpi	r25, 0x01	; 1
     110:	69 f0       	breq	.+26     	; 0x12c <__vector_11+0x72>
     112:	cc c0       	rjmp	.+408    	; 0x2ac <__vector_11+0x1f2>
     114:	94 30       	cpi	r25, 0x04	; 4
     116:	c9 f0       	breq	.+50     	; 0x14a <__vector_11+0x90>
     118:	98 f0       	brcs	.+38     	; 0x140 <__vector_11+0x86>
     11a:	95 30       	cpi	r25, 0x05	; 5
     11c:	e9 f0       	breq	.+58     	; 0x158 <__vector_11+0x9e>
     11e:	c6 c0       	rjmp	.+396    	; 0x2ac <__vector_11+0x1f2>
				case M:
					if (uart_char == 'm') {mfcstate = F;}
     120:	8d 36       	cpi	r24, 0x6D	; 109
     122:	09 f0       	breq	.+2      	; 0x126 <__vector_11+0x6c>
     124:	c3 c0       	rjmp	.+390    	; 0x2ac <__vector_11+0x1f2>
     126:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <mfcstate>
     12a:	c0 c0       	rjmp	.+384    	; 0x2ac <__vector_11+0x1f2>
					break;
				case F:
					if (uart_char == 'f') {mfcstate = C;}
     12c:	86 36       	cpi	r24, 0x66	; 102
     12e:	09 f0       	breq	.+2      	; 0x132 <__vector_11+0x78>
     130:	bd c0       	rjmp	.+378    	; 0x2ac <__vector_11+0x1f2>
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	0e c0       	rjmp	.+28     	; 0x152 <__vector_11+0x98>
					break;
				case C:
					if (uart_char == 'c') {mfcstate = R;}
     136:	83 36       	cpi	r24, 0x63	; 99
     138:	09 f0       	breq	.+2      	; 0x13c <__vector_11+0x82>
     13a:	b8 c0       	rjmp	.+368    	; 0x2ac <__vector_11+0x1f2>
     13c:	83 e0       	ldi	r24, 0x03	; 3
     13e:	09 c0       	rjmp	.+18     	; 0x152 <__vector_11+0x98>
					break;
				case R:
					if (uart_char == 'r') {mfcstate = E;}
     140:	82 37       	cpi	r24, 0x72	; 114
     142:	09 f0       	breq	.+2      	; 0x146 <__vector_11+0x8c>
     144:	b3 c0       	rjmp	.+358    	; 0x2ac <__vector_11+0x1f2>
     146:	84 e0       	ldi	r24, 0x04	; 4
     148:	04 c0       	rjmp	.+8      	; 0x152 <__vector_11+0x98>
					break;
				case E:
					if (uart_char == 'e') {mfcstate = Q;}
     14a:	85 36       	cpi	r24, 0x65	; 101
     14c:	09 f0       	breq	.+2      	; 0x150 <__vector_11+0x96>
     14e:	ae c0       	rjmp	.+348    	; 0x2ac <__vector_11+0x1f2>
     150:	85 e0       	ldi	r24, 0x05	; 5
     152:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <mfcstate>
     156:	aa c0       	rjmp	.+340    	; 0x2ac <__vector_11+0x1f2>
					break;
				case Q:
					if (uart_char == 'q') {
     158:	81 37       	cpi	r24, 0x71	; 113
     15a:	09 f0       	breq	.+2      	; 0x15e <__vector_11+0xa4>
     15c:	a7 c0       	rjmp	.+334    	; 0x2ac <__vector_11+0x1f2>
						state = REQ; 
     15e:	82 e0       	ldi	r24, 0x02	; 2
     160:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <state>
						mfcstate = M;
     164:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <mfcstate>
						clrstate = clrC;
     168:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <clrstate>
						reqstate = req1;
     16c:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <reqstate>
     170:	9d c0       	rjmp	.+314    	; 0x2ac <__vector_11+0x1f2>
				default:
					break;
			}
			break;
		case REQ:
			switch(reqstate){
     172:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <reqstate>
     176:	91 30       	cpi	r25, 0x01	; 1
     178:	c9 f0       	breq	.+50     	; 0x1ac <__vector_11+0xf2>
     17a:	18 f0       	brcs	.+6      	; 0x182 <__vector_11+0xc8>
     17c:	92 30       	cpi	r25, 0x02	; 2
     17e:	89 f1       	breq	.+98     	; 0x1e2 <__vector_11+0x128>
     180:	95 c0       	rjmp	.+298    	; 0x2ac <__vector_11+0x1f2>
				case req1:
					if ((uart_char >= 48) && (uart_char <= 57)){
     182:	90 ed       	ldi	r25, 0xD0	; 208
     184:	98 0f       	add	r25, r24
     186:	9a 30       	cpi	r25, 0x0A	; 10
     188:	08 f0       	brcs	.+2      	; 0x18c <__vector_11+0xd2>
     18a:	90 c0       	rjmp	.+288    	; 0x2ac <__vector_11+0x1f2>
						reqval = (uart_char - 48) * 100;
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	c0 97       	sbiw	r24, 0x30	; 48
     190:	44 e6       	ldi	r20, 0x64	; 100
     192:	48 9f       	mul	r20, r24
     194:	90 01       	movw	r18, r0
     196:	49 9f       	mul	r20, r25
     198:	30 0d       	add	r19, r0
     19a:	11 24       	eor	r1, r1
     19c:	30 93 b8 00 	sts	0x00B8, r19	; 0x8000b8 <reqval+0x1>
     1a0:	20 93 b7 00 	sts	0x00B7, r18	; 0x8000b7 <reqval>
						reqstate = req2;
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <reqstate>
     1aa:	80 c0       	rjmp	.+256    	; 0x2ac <__vector_11+0x1f2>
					}
					break;
				case req2:
					if ((uart_char >= 48) && (uart_char <= 57)){
     1ac:	90 ed       	ldi	r25, 0xD0	; 208
     1ae:	98 0f       	add	r25, r24
     1b0:	9a 30       	cpi	r25, 0x0A	; 10
     1b2:	08 f0       	brcs	.+2      	; 0x1b6 <__vector_11+0xfc>
     1b4:	7b c0       	rjmp	.+246    	; 0x2ac <__vector_11+0x1f2>
						reqval = reqval + ((uart_char - 48) * 10);
     1b6:	40 91 b7 00 	lds	r20, 0x00B7	; 0x8000b7 <reqval>
     1ba:	50 91 b8 00 	lds	r21, 0x00B8	; 0x8000b8 <reqval+0x1>
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	c0 97       	sbiw	r24, 0x30	; 48
     1c2:	3a e0       	ldi	r19, 0x0A	; 10
     1c4:	38 9f       	mul	r19, r24
     1c6:	b0 01       	movw	r22, r0
     1c8:	39 9f       	mul	r19, r25
     1ca:	70 0d       	add	r23, r0
     1cc:	11 24       	eor	r1, r1
     1ce:	cb 01       	movw	r24, r22
     1d0:	84 0f       	add	r24, r20
     1d2:	95 1f       	adc	r25, r21
     1d4:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <reqval+0x1>
     1d8:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <reqval>
						reqstate = req3;
     1dc:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <reqstate>
     1e0:	65 c0       	rjmp	.+202    	; 0x2ac <__vector_11+0x1f2>
					}
					break;
				case req3:
					if ((uart_char >= 48) && (uart_char <= 57)){
     1e2:	90 ed       	ldi	r25, 0xD0	; 208
     1e4:	98 0f       	add	r25, r24
     1e6:	9a 30       	cpi	r25, 0x0A	; 10
     1e8:	08 f0       	brcs	.+2      	; 0x1ec <__vector_11+0x132>
     1ea:	60 c0       	rjmp	.+192    	; 0x2ac <__vector_11+0x1f2>
						reqval = reqval + (uart_char - 48);
     1ec:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <reqval>
     1f0:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <reqval+0x1>
     1f4:	20 53       	subi	r18, 0x30	; 48
     1f6:	31 09       	sbc	r19, r1
     1f8:	a9 01       	movw	r20, r18
     1fa:	48 0f       	add	r20, r24
     1fc:	51 1d       	adc	r21, r1
     1fe:	50 93 b8 00 	sts	0x00B8, r21	; 0x8000b8 <reqval+0x1>
     202:	40 93 b7 00 	sts	0x00B7, r20	; 0x8000b7 <reqval>
						if ((reqval >= 0) && (reqval <= 255)){
     206:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <reqval>
     20a:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <reqval+0x1>
     20e:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <reqval>
     212:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <reqval+0x1>
     216:	8f 3f       	cpi	r24, 0xFF	; 255
     218:	91 05       	cpc	r25, r1
     21a:	09 f0       	breq	.+2      	; 0x21e <__vector_11+0x164>
     21c:	40 f4       	brcc	.+16     	; 0x22e <__vector_11+0x174>
							duty_request = reqval; //set duty cycle request if valid value detected
     21e:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <reqval>
     222:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <reqval+0x1>
     226:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <duty_request+0x1>
     22a:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <duty_request>
						}
						state = CLR;
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <state>
     234:	9b cf       	rjmp	.-202    	; 0x16c <__vector_11+0xb2>
				default:
					break;
			}
			break;
		case CLR:
			switch(clrstate){
     236:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <clrstate>
     23a:	4e 2f       	mov	r20, r30
     23c:	50 e0       	ldi	r21, 0x00	; 0
     23e:	47 30       	cpi	r20, 0x07	; 7
     240:	51 05       	cpc	r21, r1
     242:	a0 f5       	brcc	.+104    	; 0x2ac <__vector_11+0x1f2>
     244:	fa 01       	movw	r30, r20
     246:	ed 5e       	subi	r30, 0xED	; 237
     248:	ff 4f       	sbci	r31, 0xFF	; 255
     24a:	09 94       	ijmp
				case clrC:
					if (uart_char == 'c') {clrstate = L;}
     24c:	83 36       	cpi	r24, 0x63	; 99
     24e:	71 f5       	brne	.+92     	; 0x2ac <__vector_11+0x1f2>
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	0b c0       	rjmp	.+22     	; 0x26a <__vector_11+0x1b0>
					break;
				case L:
					if (uart_char == 'l') {clrstate = clrR;}
     254:	8c 36       	cpi	r24, 0x6C	; 108
     256:	51 f5       	brne	.+84     	; 0x2ac <__vector_11+0x1f2>
     258:	82 e0       	ldi	r24, 0x02	; 2
     25a:	07 c0       	rjmp	.+14     	; 0x26a <__vector_11+0x1b0>
					break;
				case clrR:
					if (uart_char == 'r') {clrstate = clrE;}
     25c:	82 37       	cpi	r24, 0x72	; 114
     25e:	31 f5       	brne	.+76     	; 0x2ac <__vector_11+0x1f2>
     260:	83 e0       	ldi	r24, 0x03	; 3
     262:	03 c0       	rjmp	.+6      	; 0x26a <__vector_11+0x1b0>
					break;
				case clrE:
					if (uart_char == 'e') {clrstate = W;}
     264:	85 36       	cpi	r24, 0x65	; 101
     266:	11 f5       	brne	.+68     	; 0x2ac <__vector_11+0x1f2>
     268:	84 e0       	ldi	r24, 0x04	; 4
     26a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <clrstate>
     26e:	1e c0       	rjmp	.+60     	; 0x2ac <__vector_11+0x1f2>
					break;
				case W:
					if (uart_char == 'w') {
     270:	87 37       	cpi	r24, 0x77	; 119
     272:	e1 f4       	brne	.+56     	; 0x2ac <__vector_11+0x1f2>
						clrstate = br1;
     274:	85 e0       	ldi	r24, 0x05	; 5
     276:	f9 cf       	rjmp	.-14     	; 0x26a <__vector_11+0x1b0>
					}
					break;
				case br1:
					if (uart_char == '}') {
     278:	8d 37       	cpi	r24, 0x7D	; 125
     27a:	c1 f4       	brne	.+48     	; 0x2ac <__vector_11+0x1f2>
						clrstate = br1;
     27c:	85 e0       	ldi	r24, 0x05	; 5
     27e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <clrstate>
     282:	02 c0       	rjmp	.+4      	; 0x288 <__vector_11+0x1ce>
					}
				case br2:
					if (uart_char == '}') {
     284:	8d 37       	cpi	r24, 0x7D	; 125
     286:	91 f4       	brne	.+36     	; 0x2ac <__vector_11+0x1f2>
						state = ID;
     288:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <state>
						mfcstate = M;
     28c:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <mfcstate>
						reqstate = req1;
     290:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <reqstate>
						clrstate = clrC;
     294:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <clrstate>
						clear_errors = 1;
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <clear_errors+0x1>
     2a0:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <clear_errors>
						transmit_data = 1;
     2a4:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <transmit_data+0x1>
     2a8:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <transmit_data>
			}
			break;
		default:
			break;
	}
	wdr();
     2ac:	a8 95       	wdr
}
     2ae:	ff 91       	pop	r31
     2b0:	ef 91       	pop	r30
     2b2:	9f 91       	pop	r25
     2b4:	8f 91       	pop	r24
     2b6:	7f 91       	pop	r23
     2b8:	6f 91       	pop	r22
     2ba:	5f 91       	pop	r21
     2bc:	4f 91       	pop	r20
     2be:	3f 91       	pop	r19
     2c0:	2f 91       	pop	r18
     2c2:	0f 90       	pop	r0
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	0f 90       	pop	r0
     2c8:	1f 90       	pop	r1
     2ca:	18 95       	reti

000002cc <__vector_9>:
//interrupt to increment overflow counter
ISR(TIMER0_OVF_vect){
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	0f 92       	push	r0
     2d4:	11 24       	eor	r1, r1
     2d6:	8f 93       	push	r24
     2d8:	9f 93       	push	r25
     2da:	af 93       	push	r26
     2dc:	bf 93       	push	r27
	++timer0_ovf_count;
     2de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_ovf_count>
     2e2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_ovf_count+0x1>
     2e6:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_ovf_count+0x2>
     2ea:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_ovf_count+0x3>
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	a1 1d       	adc	r26, r1
     2f2:	b1 1d       	adc	r27, r1
     2f4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_ovf_count>
     2f8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_ovf_count+0x1>
     2fc:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_ovf_count+0x2>
     300:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_ovf_count+0x3>
}
     304:	bf 91       	pop	r27
     306:	af 91       	pop	r26
     308:	9f 91       	pop	r25
     30a:	8f 91       	pop	r24
     30c:	0f 90       	pop	r0
     30e:	0f be       	out	0x3f, r0	; 63
     310:	0f 90       	pop	r0
     312:	1f 90       	pop	r1
     314:	18 95       	reti

00000316 <__vector_6>:

//interrupt to handle T/4 or 3T/4 time crossing
ISR(TIMER1_COMPA_vect){
     316:	1f 92       	push	r1
     318:	0f 92       	push	r0
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	0f 92       	push	r0
     31e:	11 24       	eor	r1, r1
     320:	8f 93       	push	r24
     322:	9f 93       	push	r25
		//turn off PWM timer
		TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     324:	85 b5       	in	r24, 0x25	; 37
     326:	88 7f       	andi	r24, 0xF8	; 248
     328:	85 bd       	out	0x25, r24	; 37
		//indicate that RHS/LHS voltage are both off
		voltage_right_on = 0;
     32a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <voltage_right_on+0x1>
     32e:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <voltage_right_on>
		voltage_left_on = 0;
     332:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <voltage_left_on+0x1>
     336:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <voltage_left_on>
		
		//since we have stopped pulsing PWM, stop reading current ADC
		readadci = 0;
     33a:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <readadci+0x1>
     33e:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <readadci>
		adcdone = 0;
     342:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adcdone+0x1>
     346:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <adcdone>
		//disable PWM signals
		if (!t2){
     34a:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <t2>
     34e:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <t2+0x1>
			//right to left current
			//turn off PMOSes, turn on left NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
     352:	c2 98       	cbi	0x18, 2	; 24
		
		//since we have stopped pulsing PWM, stop reading current ADC
		readadci = 0;
		adcdone = 0;
		//disable PWM signals
		if (!t2){
     354:	89 2b       	or	r24, r25
     356:	b9 f4       	brne	.+46     	; 0x386 <__vector_6+0x70>
			//right to left current
			//turn off PMOSes, turn on left NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
			//turn on left NMOS
			PORTB &= ~(1<<PB1);
     358:	c1 98       	cbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     35a:	97 98       	cbi	0x12, 7	; 18
			//turn off right NMOS
			PORTB |= (1<<PB0);
     35c:	c0 9a       	sbi	0x18, 0	; 24
			//indicate that we are ready to start reading motor LHS back emf
			readadc = 1;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <readadc+0x1>
     366:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <readadc>
			readadcmotorright = 1;
     36a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <readadcmotorright+0x1>
     36e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <readadcmotorright>
			backemffound = 0;
     372:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <backemffound+0x1>
     376:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <backemffound>
			//reset backemf index
			backemfreadingindex = 0;
     37a:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <backemfreadingindex+0x1>
     37e:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <backemfreadingindex>
			PORTD &= ~(1<<PD5);
     382:	95 98       	cbi	0x12, 5	; 18
     384:	16 c0       	rjmp	.+44     	; 0x3b2 <__vector_6+0x9c>
			//left to right current
			//turn off PMOSes, turn on right NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
			//turn off left NMOS
			PORTB |= (1<<PB1);
     386:	c1 9a       	sbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     388:	97 98       	cbi	0x12, 7	; 18
			//turn on right NMOS
			PORTB &= ~(1<<PB0);
     38a:	c0 98       	cbi	0x18, 0	; 24
			//indicate that we are ready to start reading motor RHS back emf
			readadc = 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <readadc+0x1>
     394:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <readadc>
			readadcmotorleft = 1;
     398:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <readadcmotorleft+0x1>
     39c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <readadcmotorleft>
			backemffound = 0;
     3a0:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <backemffound+0x1>
     3a4:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <backemffound>
			//reset backemf index
			backemfreadingindex = 0;
     3a8:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <backemfreadingindex+0x1>
     3ac:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <backemfreadingindex>
			PORTD |= (1<<PD5);
     3b0:	95 9a       	sbi	0x12, 5	; 18
		}
		//turn on timer 0 with prescaler /256 to measure backemf time
		TCNT0 = 0;
     3b2:	12 be       	out	0x32, r1	; 50
		TCCR0 |= ((1<<CS02));
     3b4:	83 b7       	in	r24, 0x33	; 51
     3b6:	84 60       	ori	r24, 0x04	; 4
     3b8:	83 bf       	out	0x33, r24	; 51
		TCCR0 &= ~((1<<CS01)|(1<<CS00));
     3ba:	83 b7       	in	r24, 0x33	; 51
     3bc:	8c 7f       	andi	r24, 0xFC	; 252
     3be:	83 bf       	out	0x33, r24	; 51
		//reset PWM timer counter
		TCNT2 = 0;
     3c0:	14 bc       	out	0x24, r1	; 36
}
     3c2:	9f 91       	pop	r25
     3c4:	8f 91       	pop	r24
     3c6:	0f 90       	pop	r0
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	0f 90       	pop	r0
     3cc:	1f 90       	pop	r1
     3ce:	18 95       	reti

000003d0 <__vector_7>:

//interrupt to handle T or T/2 time crossing
ISR(TIMER1_COMPB_vect){
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	2f 93       	push	r18
     3dc:	3f 93       	push	r19
     3de:	4f 93       	push	r20
     3e0:	5f 93       	push	r21
     3e2:	6f 93       	push	r22
     3e4:	7f 93       	push	r23
     3e6:	8f 93       	push	r24
     3e8:	9f 93       	push	r25
     3ea:	af 93       	push	r26
		//back emf pulse has expired (we are driving the motor now), stop reading the adc
		readadcmotorleft = 0;
     3ec:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <readadcmotorleft+0x1>
     3f0:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <readadcmotorleft>
		readadcmotorright = 0;
     3f4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <readadcmotorright+0x1>
     3f8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <readadcmotorright>
		if (numcycles >= 50){
     3fc:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <numcycles>
     400:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <numcycles+0x1>
     404:	c2 97       	sbiw	r24, 0x32	; 50
     406:	08 f4       	brcc	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	46 c0       	rjmp	.+140    	; 0x496 <__stack+0x37>
			if (backemffound){
     40a:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <backemffound>
     40e:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <backemffound+0x1>
     412:	89 2b       	or	r24, r25
     414:	c1 f0       	breq	.+48     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
				if (validbackemffound == 0){
     416:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <validbackemffound>
     41a:	90 91 ff 00 	lds	r25, 0x00FF	; 0x8000ff <validbackemffound+0x1>
     41e:	89 2b       	or	r24, r25
     420:	d1 f5       	brne	.+116    	; 0x496 <__stack+0x37>
					backemftime += 1; //add 0.5ms to back emf time (since we didn't find it previously, we must have driven the motor too fast)
     422:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <backemftime>
     426:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <backemftime+0x1>
     42a:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <backemftime+0x2>
     42e:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <backemftime+0x3>
     432:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <backemftime+0x4>
     436:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <backemftime+0x5>
     43a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <backemftime+0x6>
     43e:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <backemftime+0x7>
     442:	a1 e0       	ldi	r26, 0x01	; 1
     444:	11 c0       	rjmp	.+34     	; 0x468 <__stack+0x9>
					//backemffreq = 1000000000/backemftime;
					backemffound = 1; //indicate that a back emf value has been "found"
				}
			}
			else{
				backemftime += 5; //add 0.5ms to back emf time (since we didn't find it previously, we must have driven the motor too fast)
     446:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <backemftime>
     44a:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <backemftime+0x1>
     44e:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <backemftime+0x2>
     452:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <backemftime+0x3>
     456:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <backemftime+0x4>
     45a:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <backemftime+0x5>
     45e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <backemftime+0x6>
     462:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <backemftime+0x7>
     466:	a5 e0       	ldi	r26, 0x05	; 5
     468:	e5 db       	rcall	.-2102   	; 0xfffffc34 <__eeprom_end+0xff7efc34>
     46a:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <backemftime>
     46e:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <backemftime+0x1>
     472:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <backemftime+0x2>
     476:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <backemftime+0x3>
     47a:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <backemftime+0x4>
     47e:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <backemftime+0x5>
     482:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <backemftime+0x6>
     486:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <backemftime+0x7>
				//backemffreq = 1000000000/backemftime;
				backemffound = 1; //indicate that a back emf value has been "found"
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <backemffound+0x1>
     492:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <backemffound>
			}
		}
		
		if (t2){
     496:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <t2>
     49a:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <t2+0x1>
     49e:	89 2b       	or	r24, r25
     4a0:	29 f0       	breq	.+10     	; 0x4ac <__stack+0x4d>
			//T time crossing has been handled, T/2 is next
			t2 = 0;
     4a2:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <t2+0x1>
     4a6:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <t2>
     4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <__stack+0x59>
			TCCR2 |= ((1<<CS22) | (1<<CS21));
			TCCR2 &= ~((1<<CS20));
			
		}
		else{
			t2 = 1;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <t2+0x1>
     4b4:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <t2>
			//turn off timer1
			TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     4b8:	8e b5       	in	r24, 0x2e	; 46
     4ba:	88 7f       	andi	r24, 0xF8	; 248
     4bc:	8e bd       	out	0x2e, r24	; 46
			//turn off PWM
			TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     4be:	85 b5       	in	r24, 0x25	; 37
     4c0:	88 7f       	andi	r24, 0xF8	; 248
     4c2:	85 bd       	out	0x25, r24	; 37
			//reset timer1 counter
			TCNT1 = 0;
     4c4:	1d bc       	out	0x2d, r1	; 45
     4c6:	1c bc       	out	0x2c, r1	; 44
			//reset PWM timer counter
			TCNT2 = 0;
     4c8:	14 bc       	out	0x24, r1	; 36
			//turn on timer 1 again (prescaler /256)
			TCCR1B |= (1<<CS12);
     4ca:	8e b5       	in	r24, 0x2e	; 46
     4cc:	84 60       	ori	r24, 0x04	; 4
     4ce:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &= ~((1<<CS11) | (1<<CS10));
     4d0:	8e b5       	in	r24, 0x2e	; 46
     4d2:	8c 7f       	andi	r24, 0xFC	; 252
     4d4:	8e bd       	out	0x2e, r24	; 46
			//turn on PWM timer counter (prescaler /64)
			//turn on PWM timer counter (prescaler /256)
			TCCR2 |= ((1<<CS22) | (1<<CS21));
     4d6:	85 b5       	in	r24, 0x25	; 37
     4d8:	86 60       	ori	r24, 0x06	; 6
     4da:	85 bd       	out	0x25, r24	; 37
			TCCR2 &= ~((1<<CS20));
     4dc:	85 b5       	in	r24, 0x25	; 37
     4de:	8e 7f       	andi	r24, 0xFE	; 254
     4e0:	85 bd       	out	0x25, r24	; 37
			
		}
		//turn on PWM signals if we are not braking
		if (OCR2 != 0){
     4e2:	83 b5       	in	r24, 0x23	; 35
     4e4:	88 23       	and	r24, r24
     4e6:	d9 f0       	breq	.+54     	; 0x51e <__stack+0xbf>
			if (t2){
     4e8:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <t2>
     4ec:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <t2+0x1>
     4f0:	89 2b       	or	r24, r25
     4f2:	59 f0       	breq	.+22     	; 0x50a <__stack+0xab>
				//right to left current
				//turn off left PMOS
				PORTB &= ~(1<<PB2);
     4f4:	c2 98       	cbi	0x18, 2	; 24
				//turn on left NMOS
				PORTB &= ~(1<<PB1);
     4f6:	c1 98       	cbi	0x18, 1	; 24
				//turn on right PMOS
				PORTD |= (1<<PD7);
     4f8:	97 9a       	sbi	0x12, 7	; 18
				//turn off right NMOS
				PORTB |= (1<<PB0);
     4fa:	c0 9a       	sbi	0x18, 0	; 24
				//indicate that RHS voltage is on
				voltage_right_on = 1;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <voltage_right_on+0x1>
     504:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <voltage_right_on>
     508:	0a c0       	rjmp	.+20     	; 0x51e <__stack+0xbf>
			}
			else{
				//left to right current
				//turn on left PMOS
				PORTB |= (1<<PB2);
     50a:	c2 9a       	sbi	0x18, 2	; 24
				//turn off left NMOS
				PORTB |= (1<<PB1);
     50c:	c1 9a       	sbi	0x18, 1	; 24
				//turn off right PMOS
				PORTD &= ~(1<<PD7);
     50e:	97 98       	cbi	0x12, 7	; 18
				//turn on right NMOS
				PORTB &= ~(1<<PB0);
     510:	c0 98       	cbi	0x18, 0	; 24
				//indicate that LHS voltage is on
				voltage_left_on = 1;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <voltage_left_on+0x1>
     51a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <voltage_left_on>
			}
		}
		
		
		//indicate that we are ready to read adc from motor RHS to measure voltage and current
		readadc = 1;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <readadc+0x1>
     526:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <readadc>
		readadcv = 1;
     52a:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <readadcv+0x1>
     52e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <readadcv>
		readadci = 1;
     532:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <readadci+0x1>
     536:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <readadci>
		//reset ADC indices
		current_i = 0;
     53a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <current_i+0x1>
     53e:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <current_i>
		currentreadingindex = 0;
     542:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <currentreadingindex+0x1>
     546:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <currentreadingindex>
		//++stop_counter;
		//stop back emf timer since the time to measure it has expired
		TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     54a:	83 b7       	in	r24, 0x33	; 51
     54c:	88 7f       	andi	r24, 0xF8	; 248
     54e:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;
     550:	12 be       	out	0x32, r1	; 50
		timer0_ovf_count = 0;
     552:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <timer0_ovf_count>
     556:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timer0_ovf_count+0x1>
     55a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer0_ovf_count+0x2>
     55e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timer0_ovf_count+0x3>
		if (numcycles != 50) ++numcycles;
     562:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <numcycles>
     566:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <numcycles+0x1>
     56a:	c2 97       	sbiw	r24, 0x32	; 50
     56c:	49 f0       	breq	.+18     	; 0x580 <__stack+0x121>
     56e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <numcycles>
     572:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <numcycles+0x1>
     576:	01 96       	adiw	r24, 0x01	; 1
     578:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <numcycles+0x1>
     57c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <numcycles>
}
     580:	af 91       	pop	r26
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	7f 91       	pop	r23
     588:	6f 91       	pop	r22
     58a:	5f 91       	pop	r21
     58c:	4f 91       	pop	r20
     58e:	3f 91       	pop	r19
     590:	2f 91       	pop	r18
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <__vector_3>:

//PWM duty cycle expired, shut off PWM signals
ISR(TIMER2_COMP_vect){
     59c:	1f 92       	push	r1
     59e:	0f 92       	push	r0
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	0f 92       	push	r0
     5a4:	11 24       	eor	r1, r1
     5a6:	8f 93       	push	r24
     5a8:	9f 93       	push	r25
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     5aa:	85 b5       	in	r24, 0x25	; 37
     5ac:	88 7f       	andi	r24, 0xF8	; 248
     5ae:	85 bd       	out	0x25, r24	; 37
	
	if (t2){
     5b0:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <t2>
     5b4:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <t2+0x1>
		//right to left current
		//turn off PMOSes, turn on left NMOS so motor brakes
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     5b8:	c2 98       	cbi	0x18, 2	; 24
//PWM duty cycle expired, shut off PWM signals
ISR(TIMER2_COMP_vect){
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
	
	if (t2){
     5ba:	89 2b       	or	r24, r25
     5bc:	21 f0       	breq	.+8      	; 0x5c6 <__vector_3+0x2a>
		//right to left current
		//turn off PMOSes, turn on left NMOS so motor brakes
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     5be:	c1 98       	cbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     5c0:	97 98       	cbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     5c2:	c0 9a       	sbi	0x18, 0	; 24
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <__vector_3+0x30>
		//left to right current
		//turn off PMOSes, turn on right NMOS so motor brakes?!
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
		//turn off left NMOS
		PORTB |= (1<<PB1);
     5c6:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     5c8:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     5ca:	c0 98       	cbi	0x18, 0	; 24
	}
	readadc = 1;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <readadc+0x1>
     5d4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <readadc>
	//indicate that voltage is off
	voltage_right_on = 0;
     5d8:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <voltage_right_on+0x1>
     5dc:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <voltage_right_on>
	voltage_left_on = 0;
     5e0:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <voltage_left_on+0x1>
     5e4:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <voltage_left_on>
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     5e8:	85 b5       	in	r24, 0x25	; 37
     5ea:	86 60       	ori	r24, 0x06	; 6
     5ec:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     5ee:	85 b5       	in	r24, 0x25	; 37
     5f0:	8e 7f       	andi	r24, 0xFE	; 254
     5f2:	85 bd       	out	0x25, r24	; 37
}
     5f4:	9f 91       	pop	r25
     5f6:	8f 91       	pop	r24
     5f8:	0f 90       	pop	r0
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	0f 90       	pop	r0
     5fe:	1f 90       	pop	r1
     600:	18 95       	reti

00000602 <__vector_4>:

//PWM restarted, change switches according to current current direction
ISR(TIMER2_OVF_vect){
     602:	1f 92       	push	r1
     604:	0f 92       	push	r0
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	0f 92       	push	r0
     60a:	11 24       	eor	r1, r1
     60c:	8f 93       	push	r24
     60e:	9f 93       	push	r25
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     610:	85 b5       	in	r24, 0x25	; 37
     612:	88 7f       	andi	r24, 0xF8	; 248
     614:	85 bd       	out	0x25, r24	; 37
	TCCR2 = 0;
     616:	15 bc       	out	0x25, r1	; 37
	if (t2){
     618:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <t2>
     61c:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <t2+0x1>
     620:	89 2b       	or	r24, r25
     622:	79 f0       	breq	.+30     	; 0x642 <__vector_4+0x40>
		//right to left current
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     624:	c2 98       	cbi	0x18, 2	; 24
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     626:	c1 98       	cbi	0x18, 1	; 24
		//turn on right PMOS
		PORTD |= (1<<PD7);
     628:	97 9a       	sbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     62a:	c0 9a       	sbi	0x18, 0	; 24
		//indicate that RHS voltage is on
		readadc = 1;
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <readadc+0x1>
     634:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <readadc>
		voltage_right_on = 1;
     638:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <voltage_right_on+0x1>
     63c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <voltage_right_on>
     640:	0e c0       	rjmp	.+28     	; 0x65e <__vector_4+0x5c>
	}
	else{
		//left to right current
		//turn on left PMOS
		PORTB |= (1<<PB2);
     642:	c2 9a       	sbi	0x18, 2	; 24
		//turn off left NMOS
		PORTB |= (1<<PB1);
     644:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     646:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     648:	c0 98       	cbi	0x18, 0	; 24
		//indicate that LHS voltage is on
		readadc = 1;
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <readadc+0x1>
     652:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <readadc>
		voltage_left_on = 1;
     656:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <voltage_left_on+0x1>
     65a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <voltage_left_on>
	}
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     65e:	85 b5       	in	r24, 0x25	; 37
     660:	86 60       	ori	r24, 0x06	; 6
     662:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     664:	85 b5       	in	r24, 0x25	; 37
     666:	8e 7f       	andi	r24, 0xFE	; 254
     668:	85 bd       	out	0x25, r24	; 37
     66a:	9f 91       	pop	r25
     66c:	8f 91       	pop	r24
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <main>:
uint32_t currentrmsavg = 0;
uint64_t currentvalue = 0;
uint64_t powervalue = 0;

int main(void)
{
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	65 97       	sbiw	r28, 0x15	; 21
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
	//it was only executed once because the EEPROM is not erased on chip-reprogram
	//it has been left here to show 
	//char transmit_buffer[255];
	//sprintf(transmit_buffer, "{\n\"3\":\n{\n\"mfc\":{\"req\":\"\",\"cur\":\"\"\},\n\"ver\": \"001.002.003\",\n\"param\":{\"pwr\":\".W\",\"freq\":\".Hz\",\"curr\":\"mA\",\"volt\": \".V\"},\n\"clr\":\"ew\",\n\"ew\":[\"cmprStalled\",\"pistonCollision\"]\n}\n}");
	//eeprom_write_block(transmit_buffer,0,strlen(transmit_buffer));	
	t2 = 0; //flag for if T/2 time crossing is next to be handled
     68c:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <t2+0x1>
     690:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <t2>
	stop_counter = 0; //counter to stop PWM every STOPCYCLE/2 number of cycles
     694:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <stop_counter+0x1>
     698:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <stop_counter>
	data_received = 0; //set data received flag to 0 initially
     69c:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <data_received+0x1>
     6a0:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <data_received>
	timer0_ovf_count = 0;//set timer0 overflow count to 0 initially
     6a4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <timer0_ovf_count>
     6a8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timer0_ovf_count+0x1>
     6ac:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer0_ovf_count+0x2>
     6b0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timer0_ovf_count+0x3>
	current_i = 0; //initialise current reading index
     6b4:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <current_i+0x1>
     6b8:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <current_i>
	backemfreadingindex = 0; //initialise backemf reading index
     6bc:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <backemfreadingindex+0x1>
     6c0:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <backemfreadingindex>
	readadc = 0;
     6c4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <readadc+0x1>
     6c8:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <readadc>
	readadcv = 0;
     6cc:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <readadcv+0x1>
     6d0:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <readadcv>
	readadci = 0;
     6d4:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <readadci+0x1>
     6d8:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <readadci>
	numcycles = 0;
     6dc:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <numcycles+0x1>
     6e0:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <numcycles>
	adcdone = 0;
     6e4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adcdone+0x1>
     6e8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <adcdone>
	transmit_data = 0;
     6ec:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <transmit_data+0x1>
     6f0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <transmit_data>
	clear_errors = 0;
     6f4:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <clear_errors+0x1>
     6f8:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <clear_errors>
	voltagereference = 5000;
     6fc:	88 e8       	ldi	r24, 0x88	; 136
     6fe:	93 e1       	ldi	r25, 0x13	; 19
     700:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <voltagereference+0x1>
     704:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <voltagereference>
	buffer_ptr = 0;
     708:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <buffer_ptr+0x1>
     70c:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <buffer_ptr>
	//set PWM ports as output
	DDRB |= ((1<<PB2)|(1<<PB1)|(1<<PB0));
     710:	87 b3       	in	r24, 0x17	; 23
     712:	87 60       	ori	r24, 0x07	; 7
     714:	87 bb       	out	0x17, r24	; 23
	DDRD |= ((1<<PD7)|(1<<PD5));
     716:	81 b3       	in	r24, 0x11	; 17
     718:	80 6a       	ori	r24, 0xA0	; 160
     71a:	81 bb       	out	0x11, r24	; 17
	
	WDTCR |= ((1<<WDP2)|(1<<WDP2)|(1<<WDP2));
     71c:	81 b5       	in	r24, 0x21	; 33
     71e:	84 60       	ori	r24, 0x04	; 4
     720:	81 bd       	out	0x21, r24	; 33
	//enable watchdog timer
	WDTCR |= (1<<WDE);
     722:	81 b5       	in	r24, 0x21	; 33
     724:	88 60       	ori	r24, 0x08	; 8
     726:	81 bd       	out	0x21, r24	; 33
	//set normal timer mode
	TCCR2 &= ~(1<<WGM20);
     728:	85 b5       	in	r24, 0x25	; 37
     72a:	8f 7b       	andi	r24, 0xBF	; 191
     72c:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(1<<WGM21);
     72e:	85 b5       	in	r24, 0x25	; 37
     730:	87 7f       	andi	r24, 0xF7	; 247
     732:	85 bd       	out	0x25, r24	; 37
	
	//disconnect OC2 port
	TCCR2 &= ~((1<<COM21) | (1<<COM20));
     734:	85 b5       	in	r24, 0x25	; 37
     736:	8f 7c       	andi	r24, 0xCF	; 207
     738:	85 bd       	out	0x25, r24	; 37
	
	//set output compare value for timer 2 between 0-255 (OCR2/255 % duty cycle)
	duty_request = 128;
     73a:	80 e8       	ldi	r24, 0x80	; 128
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <duty_request+0x1>
     742:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <duty_request>
	OCR2 = duty_request;
     746:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <duty_request>
     74a:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <duty_request+0x1>
     74e:	83 bd       	out	0x23, r24	; 35

	//set prescaler of 256 (gives effective PWM frequency of 245Hz)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     750:	85 b5       	in	r24, 0x25	; 37
     752:	86 60       	ori	r24, 0x06	; 6
     754:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     756:	85 b5       	in	r24, 0x25	; 37
     758:	8e 7f       	andi	r24, 0xFE	; 254
     75a:	85 bd       	out	0x25, r24	; 37
	
	//turn off PMOSes, turn on NMOSes so motor brakes?!
	//turn off left PMOS
	PORTB &= ~(1<<PB2);
     75c:	c2 98       	cbi	0x18, 2	; 24
	//turn on left NMOS
	PORTB |= (1<<PB1);
     75e:	c1 9a       	sbi	0x18, 1	; 24
	//turn off right PMOS
	PORTD &= ~(1<<PD7);
     760:	97 98       	cbi	0x12, 7	; 18
	//turn on right NMOS
	PORTB |= (1<<PB0);
     762:	c0 9a       	sbi	0x18, 0	; 24
	
	//set timer 1 to normal mode
	TCCR1B &= ~((1<<WGM13) | (1<<WGM12));
     764:	8e b5       	in	r24, 0x2e	; 46
     766:	87 7e       	andi	r24, 0xE7	; 231
     768:	8e bd       	out	0x2e, r24	; 46
	TCCR1A &= ~((1<<WGM11) | (1<<WGM10));
     76a:	8f b5       	in	r24, 0x2f	; 47
     76c:	8c 7f       	andi	r24, 0xFC	; 252
     76e:	8f bd       	out	0x2f, r24	; 47
	
	//set prescaler to /256
	TCCR1B |= (1<<CS12);
     770:	8e b5       	in	r24, 0x2e	; 46
     772:	84 60       	ori	r24, 0x04	; 4
     774:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1<<CS11) | (1<<CS10));
     776:	8e b5       	in	r24, 0x2e	; 46
     778:	8c 7f       	andi	r24, 0xFC	; 252
     77a:	8e bd       	out	0x2e, r24	; 46
	
	//set timer 1 overflow A and B compare values
	OCR1A = 1250; //for T/4
     77c:	82 ee       	ldi	r24, 0xE2	; 226
     77e:	94 e0       	ldi	r25, 0x04	; 4
     780:	9b bd       	out	0x2b, r25	; 43
     782:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 2500; //for 12.5Hz resonant frequency (for T/2)
     784:	84 ec       	ldi	r24, 0xC4	; 196
     786:	99 e0       	ldi	r25, 0x09	; 9
     788:	99 bd       	out	0x29, r25	; 41
     78a:	88 bd       	out	0x28, r24	; 40
	//enable timer 2 compare match interrupt and overflow interrupt
	TIMSK |= ((1<<OCIE2) | (1<<TOIE2));
     78c:	89 b7       	in	r24, 0x39	; 57
     78e:	80 6c       	ori	r24, 0xC0	; 192
     790:	89 bf       	out	0x39, r24	; 57
	//enable timer 1 compare match A and B interrupts
	TIMSK |= ((1<<OCIE1A) | (1<<OCIE1B));
     792:	89 b7       	in	r24, 0x39	; 57
     794:	88 61       	ori	r24, 0x18	; 24
     796:	89 bf       	out	0x39, r24	; 57
	//enable timer 0 overflow interrupt
	TIMSK |= (1<<TOIE0);
     798:	89 b7       	in	r24, 0x39	; 57
     79a:	81 60       	ori	r24, 0x01	; 1
     79c:	89 bf       	out	0x39, r24	; 57
	//mark T PWM pulse to be handled next
	t2 = 0;
     79e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <t2+0x1>
     7a2:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <t2>
	
	//enable and initialise UART
	uart_init();
     7a6:	ee d6       	rcall	.+3548   	; 0x1584 <uart_init>
	//enable and initialise ADC
	adc_init();
     7a8:	7b dc       	rcall	.-1802   	; 0xa0 <adc_init>
	//enable global interrupts
	sei();
     7aa:	78 94       	sei
					uart_transmit((freqleft%10) + 48);
				}
				if (i == 87){
					//freq right value
					uart_transmit((freqright/1000) + 48);//1st DP
					uart_transmit(((freqright/100) % 10) + 48);//2nd DP
     7ac:	8a e0       	ldi	r24, 0x0A	; 10
     7ae:	68 2e       	mov	r6, r24
     7b0:	71 2c       	mov	r7, r1
							if((current_i % 2) == 0){
								currentarray[currentreadingindex] = reading; //store i_sense_shifted voltage
								//powerarray[currentreadingindex] = currentarray[currentreadingindex] * voltagereading; //store power in uW
								++currentreadingindex;
								if (reading > 3000) {//short circuit condition test
									shortcircuit = 1;
     7b2:	88 24       	eor	r8, r8
     7b4:	83 94       	inc	r8
     7b6:	91 2c       	mov	r9, r1
	adc_init();
	//enable global interrupts
	sei();
    while (1)
    {
		wdr(); //reset watchdog timer
     7b8:	a8 95       	wdr
		//gradual duty cycle increase logic to couple with resonant frequency detection module
		//this is because changing the PWM duty cycle also changes the resonant frequency
		if (duty_request == 0){
     7ba:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <duty_request>
     7be:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <duty_request+0x1>
     7c2:	89 2b       	or	r24, r25
     7c4:	11 f4       	brne	.+4      	; 0x7ca <main+0x152>
			OCR2 = 0;
     7c6:	13 bc       	out	0x23, r1	; 35
     7c8:	21 c0       	rjmp	.+66     	; 0x80c <main+0x194>
		}
		else if (duty_request == 255){
     7ca:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <duty_request>
     7ce:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <duty_request+0x1>
     7d2:	8f 3f       	cpi	r24, 0xFF	; 255
     7d4:	91 05       	cpc	r25, r1
     7d6:	11 f4       	brne	.+4      	; 0x7dc <main+0x164>
			OCR2 = 255;
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	17 c0       	rjmp	.+46     	; 0x80a <main+0x192>
		}
		else{
			if (OCR2 < duty_request){
     7dc:	83 b5       	in	r24, 0x23	; 35
     7de:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <duty_request>
     7e2:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <duty_request+0x1>
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	82 17       	cp	r24, r18
     7ea:	93 07       	cpc	r25, r19
     7ec:	18 f4       	brcc	.+6      	; 0x7f4 <main+0x17c>
				OCR2 = OCR2 + 1;
     7ee:	83 b5       	in	r24, 0x23	; 35
     7f0:	8f 5f       	subi	r24, 0xFF	; 255
     7f2:	0b c0       	rjmp	.+22     	; 0x80a <main+0x192>
			}
			else if (OCR2 > duty_request){
     7f4:	83 b5       	in	r24, 0x23	; 35
     7f6:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <duty_request>
     7fa:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <duty_request+0x1>
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	28 17       	cp	r18, r24
     802:	39 07       	cpc	r19, r25
     804:	18 f4       	brcc	.+6      	; 0x80c <main+0x194>
				OCR2 = OCR2 - 1;
     806:	83 b5       	in	r24, 0x23	; 35
     808:	81 50       	subi	r24, 0x01	; 1
     80a:	83 bd       	out	0x23, r24	; 35
			}
		}
		

		if (transmit_data){//transmitting fixed-size fixed order JSON
     80c:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <transmit_data>
     810:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <transmit_data+0x1>
     814:	89 2b       	or	r24, r25
     816:	09 f4       	brne	.+2      	; 0x81a <main+0x1a2>
     818:	42 c1       	rjmp	.+644    	; 0xa9e <main+0x426>
     81a:	1e 82       	std	Y+6, r1	; 0x06
     81c:	1d 82       	std	Y+5, r1	; 0x05
			for (int i = 0; i < 260; ++i){
				if (i == 23){
     81e:	0d 81       	ldd	r16, Y+5	; 0x05
     820:	1e 81       	ldd	r17, Y+6	; 0x06
     822:	07 31       	cpi	r16, 0x17	; 23
     824:	11 05       	cpc	r17, r1
     826:	e9 f4       	brne	.+58     	; 0x862 <main+0x1ea>
					//req flowrate value
					uart_transmit((duty_request/100) + 48);
     828:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <duty_request>
     82c:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <duty_request+0x1>
     830:	64 e6       	ldi	r22, 0x64	; 100
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	d6 d8       	rcall	.-3668   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     836:	80 e3       	ldi	r24, 0x30	; 48
     838:	86 0f       	add	r24, r22
     83a:	b5 d6       	rcall	.+3434   	; 0x15a6 <uart_transmit>
					uart_transmit(((duty_request/10) % 10) + 48);
     83c:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <duty_request>
     840:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <duty_request+0x1>
     844:	b3 01       	movw	r22, r6
     846:	cd d8       	rcall	.-3686   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     848:	cb 01       	movw	r24, r22
     84a:	b3 01       	movw	r22, r6
     84c:	ca d8       	rcall	.-3692   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     84e:	80 5d       	subi	r24, 0xD0	; 208
     850:	aa d6       	rcall	.+3412   	; 0x15a6 <uart_transmit>
					uart_transmit((duty_request % 10) + 48);
     852:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <duty_request>
     856:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <duty_request+0x1>
     85a:	b3 01       	movw	r22, r6
     85c:	c2 d8       	rcall	.-3708   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     85e:	80 5d       	subi	r24, 0xD0	; 208
     860:	16 c0       	rjmp	.+44     	; 0x88e <main+0x216>
				}
				if (i == 32){
     862:	0d 81       	ldd	r16, Y+5	; 0x05
     864:	1e 81       	ldd	r17, Y+6	; 0x06
     866:	00 32       	cpi	r16, 0x20	; 32
     868:	11 05       	cpc	r17, r1
     86a:	99 f4       	brne	.+38     	; 0x892 <main+0x21a>
					//current flowrate value
					uart_transmit((OCR2/100) + 48);
     86c:	83 b5       	in	r24, 0x23	; 35
     86e:	64 e6       	ldi	r22, 0x64	; 100
     870:	ac d8       	rcall	.-3752   	; 0xfffff9ca <__eeprom_end+0xff7ef9ca>
     872:	80 5d       	subi	r24, 0xD0	; 208
     874:	98 d6       	rcall	.+3376   	; 0x15a6 <uart_transmit>
					uart_transmit(((OCR2/10) % 10) + 48);
     876:	83 b5       	in	r24, 0x23	; 35
     878:	6a e0       	ldi	r22, 0x0A	; 10
     87a:	a7 d8       	rcall	.-3762   	; 0xfffff9ca <__eeprom_end+0xff7ef9ca>
     87c:	a6 d8       	rcall	.-3764   	; 0xfffff9ca <__eeprom_end+0xff7ef9ca>
     87e:	80 e3       	ldi	r24, 0x30	; 48
     880:	89 0f       	add	r24, r25
     882:	91 d6       	rcall	.+3362   	; 0x15a6 <uart_transmit>
					uart_transmit((OCR2 % 10) + 48);
     884:	83 b5       	in	r24, 0x23	; 35
     886:	6a e0       	ldi	r22, 0x0A	; 10
     888:	a0 d8       	rcall	.-3776   	; 0xfffff9ca <__eeprom_end+0xff7ef9ca>
     88a:	80 e3       	ldi	r24, 0x30	; 48
     88c:	89 0f       	add	r24, r25
     88e:	8b d6       	rcall	.+3350   	; 0x15a6 <uart_transmit>
     890:	58 c6       	rjmp	.+3248   	; 0x1542 <main+0xeca>
				}
				if (i == 74){
     892:	0d 81       	ldd	r16, Y+5	; 0x05
     894:	1e 81       	ldd	r17, Y+6	; 0x06
     896:	0a 34       	cpi	r16, 0x4A	; 74
     898:	11 05       	cpc	r17, r1
     89a:	a9 f4       	brne	.+42     	; 0x8c6 <main+0x24e>
					//pwr left value
					if ((powerleft / 10) == 0){
     89c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <powerleft>
     8a0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <powerleft+0x1>
     8a4:	8a 30       	cpi	r24, 0x0A	; 10
     8a6:	91 05       	cpc	r25, r1
     8a8:	58 f0       	brcs	.+22     	; 0x8c0 <main+0x248>
						uart_transmit(powerleft + 48);//transmit the number right away
					}
					else{//split it into two digits
						uart_transmit((powerleft/10) + 48);
     8aa:	b3 01       	movw	r22, r6
     8ac:	9a d8       	rcall	.-3788   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     8ae:	80 e3       	ldi	r24, 0x30	; 48
     8b0:	86 0f       	add	r24, r22
     8b2:	79 d6       	rcall	.+3314   	; 0x15a6 <uart_transmit>
						uart_transmit((powerleft % 10) + 48);
     8b4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <powerleft>
     8b8:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <powerleft+0x1>
     8bc:	b3 01       	movw	r22, r6
     8be:	91 d8       	rcall	.-3806   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     8c0:	80 5d       	subi	r24, 0xD0	; 208
     8c2:	71 d6       	rcall	.+3298   	; 0x15a6 <uart_transmit>
     8c4:	2f c0       	rjmp	.+94     	; 0x924 <main+0x2ac>
					}
				}
				if (i == 75){
     8c6:	0d 81       	ldd	r16, Y+5	; 0x05
     8c8:	1e 81       	ldd	r17, Y+6	; 0x06
     8ca:	0b 34       	cpi	r16, 0x4B	; 75
     8cc:	11 05       	cpc	r17, r1
     8ce:	b1 f4       	brne	.+44     	; 0x8fc <main+0x284>
					//pwr right value
					uart_transmit((powerright/100) + 48);//1st DP
     8d0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <powerright>
     8d4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <powerright+0x1>
     8d8:	64 e6       	ldi	r22, 0x64	; 100
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	82 d8       	rcall	.-3836   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     8de:	80 e3       	ldi	r24, 0x30	; 48
     8e0:	86 0f       	add	r24, r22
     8e2:	61 d6       	rcall	.+3266   	; 0x15a6 <uart_transmit>
					uart_transmit(((powerright/10) % 10) + 48);//2nd DP
     8e4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <powerright>
     8e8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <powerright+0x1>
     8ec:	b3 01       	movw	r22, r6
     8ee:	79 d8       	rcall	.-3854   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     8f0:	cb 01       	movw	r24, r22
     8f2:	b3 01       	movw	r22, r6
     8f4:	76 d8       	rcall	.-3860   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     8f6:	80 5d       	subi	r24, 0xD0	; 208
     8f8:	56 d6       	rcall	.+3244   	; 0x15a6 <uart_transmit>
     8fa:	3f c0       	rjmp	.+126    	; 0x97a <main+0x302>
				}
				if (i == 86){
     8fc:	0d 81       	ldd	r16, Y+5	; 0x05
     8fe:	1e 81       	ldd	r17, Y+6	; 0x06
     900:	06 35       	cpi	r16, 0x56	; 86
     902:	11 05       	cpc	r17, r1
     904:	09 f0       	breq	.+2      	; 0x908 <main+0x290>
     906:	1d c6       	rjmp	.+3130   	; 0x1542 <main+0xeca>
					//freq left value
					uart_transmit((freqleft/10) + 48);
     908:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <freqleft>
     90c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <freqleft+0x1>
     910:	b3 01       	movw	r22, r6
     912:	67 d8       	rcall	.-3890   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     914:	80 e3       	ldi	r24, 0x30	; 48
     916:	86 0f       	add	r24, r22
     918:	46 d6       	rcall	.+3212   	; 0x15a6 <uart_transmit>
					uart_transmit((freqleft%10) + 48);
     91a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <freqleft>
     91e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <freqleft+0x1>
     922:	5c c0       	rjmp	.+184    	; 0x9dc <main+0x364>
					//freq right value
					uart_transmit((freqright/1000) + 48);//1st DP
					uart_transmit(((freqright/100) % 10) + 48);//2nd DP
					uart_transmit((freqright % 10) + 48);//3nd DP
				}
				if (i == 99){
     924:	0d 81       	ldd	r16, Y+5	; 0x05
     926:	1e 81       	ldd	r17, Y+6	; 0x06
     928:	03 36       	cpi	r16, 0x63	; 99
     92a:	11 05       	cpc	r17, r1
     92c:	31 f5       	brne	.+76     	; 0x97a <main+0x302>
					//current value
					uart_transmit((current/1000) + 48);
     92e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current>
     932:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current+0x1>
     936:	68 ee       	ldi	r22, 0xE8	; 232
     938:	73 e0       	ldi	r23, 0x03	; 3
     93a:	53 d8       	rcall	.-3930   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     93c:	80 e3       	ldi	r24, 0x30	; 48
     93e:	86 0f       	add	r24, r22
     940:	32 d6       	rcall	.+3172   	; 0x15a6 <uart_transmit>
					uart_transmit(((current/100) % 10) + 48);
     942:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current>
     946:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current+0x1>
     94a:	64 e6       	ldi	r22, 0x64	; 100
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	49 d8       	rcall	.-3950   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     950:	cb 01       	movw	r24, r22
     952:	b3 01       	movw	r22, r6
     954:	46 d8       	rcall	.-3956   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     956:	80 5d       	subi	r24, 0xD0	; 208
     958:	26 d6       	rcall	.+3148   	; 0x15a6 <uart_transmit>
					uart_transmit(((current/10) % 10) + 48);
     95a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current>
     95e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current+0x1>
     962:	b3 01       	movw	r22, r6
     964:	3e d8       	rcall	.-3972   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     966:	cb 01       	movw	r24, r22
     968:	b3 01       	movw	r22, r6
     96a:	3b d8       	rcall	.-3978   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     96c:	80 5d       	subi	r24, 0xD0	; 208
     96e:	1b d6       	rcall	.+3126   	; 0x15a6 <uart_transmit>
					uart_transmit((current % 10) + 48);
     970:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current>
     974:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current+0x1>
     978:	31 c0       	rjmp	.+98     	; 0x9dc <main+0x364>
				}
				if (i == 112){
     97a:	0d 81       	ldd	r16, Y+5	; 0x05
     97c:	1e 81       	ldd	r17, Y+6	; 0x06
     97e:	00 37       	cpi	r16, 0x70	; 112
     980:	11 05       	cpc	r17, r1
     982:	71 f4       	brne	.+28     	; 0x9a0 <main+0x328>
					//voltage left value
					uart_transmit((voltleft/10) + 48);
     984:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <voltleft>
     988:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <voltleft+0x1>
     98c:	b3 01       	movw	r22, r6
     98e:	29 d8       	rcall	.-4014   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     990:	80 e3       	ldi	r24, 0x30	; 48
     992:	86 0f       	add	r24, r22
     994:	08 d6       	rcall	.+3088   	; 0x15a6 <uart_transmit>
					uart_transmit((voltleft % 10) + 48);
     996:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <voltleft>
     99a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <voltleft+0x1>
     99e:	1e c0       	rjmp	.+60     	; 0x9dc <main+0x364>
				}
				if (i == 113){
     9a0:	0d 81       	ldd	r16, Y+5	; 0x05
     9a2:	1e 81       	ldd	r17, Y+6	; 0x06
     9a4:	01 37       	cpi	r16, 0x71	; 113
     9a6:	11 05       	cpc	r17, r1
     9a8:	e9 f4       	brne	.+58     	; 0x9e4 <main+0x36c>
					//voltage right value
					uart_transmit((voltright/100) + 48);
     9aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     9ae:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     9b2:	64 e6       	ldi	r22, 0x64	; 100
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	15 d8       	rcall	.-4054   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     9b8:	80 e3       	ldi	r24, 0x30	; 48
     9ba:	86 0f       	add	r24, r22
     9bc:	f4 d5       	rcall	.+3048   	; 0x15a6 <uart_transmit>
					uart_transmit(((voltright/10) % 10) + 48);
     9be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     9c2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     9c6:	b3 01       	movw	r22, r6
     9c8:	0c d8       	rcall	.-4072   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     9ca:	cb 01       	movw	r24, r22
     9cc:	b3 01       	movw	r22, r6
     9ce:	09 d8       	rcall	.-4078   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     9d0:	80 5d       	subi	r24, 0xD0	; 208
     9d2:	e9 d5       	rcall	.+3026   	; 0x15a6 <uart_transmit>
					uart_transmit((voltright % 10) + 48);
     9d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     9d8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     9dc:	b3 01       	movw	r22, r6
     9de:	01 d8       	rcall	.-4094   	; 0xfffff9e2 <__eeprom_end+0xff7ef9e2>
     9e0:	80 5d       	subi	r24, 0xD0	; 208
     9e2:	e1 d5       	rcall	.+3010   	; 0x15a6 <uart_transmit>
				}
				if ((i >= 118) && (i <= 168)){//error condition check
     9e4:	8d 81       	ldd	r24, Y+5	; 0x05
     9e6:	9e 81       	ldd	r25, Y+6	; 0x06
     9e8:	86 57       	subi	r24, 0x76	; 118
     9ea:	91 09       	sbc	r25, r1
     9ec:	c3 97       	sbiw	r24, 0x33	; 51
     9ee:	c0 f5       	brcc	.+112    	; 0xa60 <main+0x3e8>
					if (error){
     9f0:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <error>
     9f4:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <error+0x1>
     9f8:	89 2b       	or	r24, r25
     9fa:	f9 f0       	breq	.+62     	; 0xa3a <main+0x3c2>
						if (i <= 136){
     9fc:	0d 81       	ldd	r16, Y+5	; 0x05
     9fe:	1e 81       	ldd	r17, Y+6	; 0x06
     a00:	09 38       	cpi	r16, 0x89	; 137
     a02:	11 05       	cpc	r17, r1
     a04:	5c f1       	brlt	.+86     	; 0xa5c <main+0x3e4>
							uart_transmit(eeprom_read_byte((uint8_t*)i));//transmit clr object and error object header
						}
						else{//check to see which errors we have and transmit accordingly
							if (i <= 148){
     a06:	0d 81       	ldd	r16, Y+5	; 0x05
     a08:	1e 81       	ldd	r17, Y+6	; 0x06
     a0a:	05 39       	cpi	r16, 0x95	; 149
     a0c:	11 05       	cpc	r17, r1
     a0e:	2c f4       	brge	.+10     	; 0xa1a <main+0x3a2>
								if (stalled){
     a10:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <stalled>
     a14:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <stalled+0x1>
     a18:	0e c0       	rjmp	.+28     	; 0xa36 <main+0x3be>
								}
								else{
									uart_transmit(' '); //transmit whitespace
								}
							}
							else if (i == 149){
     a1a:	0d 81       	ldd	r16, Y+5	; 0x05
     a1c:	1e 81       	ldd	r17, Y+6	; 0x06
     a1e:	05 39       	cpi	r16, 0x95	; 149
     a20:	11 05       	cpc	r17, r1
     a22:	69 f0       	breq	.+26     	; 0xa3e <main+0x3c6>
								if (stalled && collision){
									uart_transmit(eeprom_read_byte((uint8_t*)i));//transmit comma if both errors present
								}
							}
							else if (i <= 166){
     a24:	0d 81       	ldd	r16, Y+5	; 0x05
     a26:	1e 81       	ldd	r17, Y+6	; 0x06
     a28:	07 3a       	cpi	r16, 0xA7	; 167
     a2a:	11 05       	cpc	r17, r1
     a2c:	cc f4       	brge	.+50     	; 0xa60 <main+0x3e8>
								if (collision){
     a2e:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <collision>
     a32:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <collision+0x1>
     a36:	89 2b       	or	r24, r25
     a38:	89 f4       	brne	.+34     	; 0xa5c <main+0x3e4>
							if (i <= 148){
								if (stalled){
									uart_transmit(eeprom_read_byte((uint8_t*)i));//transmit cmprstalled
								}
								else{
									uart_transmit(' '); //transmit whitespace
     a3a:	80 e2       	ldi	r24, 0x20	; 32
     a3c:	14 c0       	rjmp	.+40     	; 0xa66 <main+0x3ee>
								}
							}
							else if (i == 149){
								if (stalled && collision){
     a3e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <stalled>
     a42:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <stalled+0x1>
     a46:	89 2b       	or	r24, r25
     a48:	79 f0       	breq	.+30     	; 0xa68 <main+0x3f0>
     a4a:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <collision>
     a4e:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <collision+0x1>
     a52:	89 2b       	or	r24, r25
     a54:	49 f0       	breq	.+18     	; 0xa68 <main+0x3f0>
									uart_transmit(eeprom_read_byte((uint8_t*)i));//transmit comma if both errors present
     a56:	85 e9       	ldi	r24, 0x95	; 149
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	04 c0       	rjmp	.+8      	; 0xa64 <main+0x3ec>
								}
							}
							else if (i <= 166){
								if (collision){
									uart_transmit(eeprom_read_byte((uint8_t*)i));//transmit pistoncollision
     a5c:	c8 01       	movw	r24, r16
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <main+0x3ec>
					else{
						uart_transmit(' '); //transmit whitespace
					}
				}
				else{//if no error condition, transmit json as usual from eeprom
					uart_transmit(eeprom_read_byte((uint8_t*)i));//we have stored the formatted json string in the eeprom to avoid PROGMEM overfill issues
     a60:	8d 81       	ldd	r24, Y+5	; 0x05
     a62:	9e 81       	ldd	r25, Y+6	; 0x06
     a64:	f3 d8       	rcall	.-3610   	; 0xfffffc4c <__eeprom_end+0xff7efc4c>
     a66:	9f d5       	rcall	.+2878   	; 0x15a6 <uart_transmit>
				}
				wdr();//reset watchdog timer
     a68:	a8 95       	wdr
			}
		}
		

		if (transmit_data){//transmitting fixed-size fixed order JSON
			for (int i = 0; i < 260; ++i){
     a6a:	0d 81       	ldd	r16, Y+5	; 0x05
     a6c:	1e 81       	ldd	r17, Y+6	; 0x06
     a6e:	0f 5f       	subi	r16, 0xFF	; 255
     a70:	1f 4f       	sbci	r17, 0xFF	; 255
     a72:	1e 83       	std	Y+6, r17	; 0x06
     a74:	0d 83       	std	Y+5, r16	; 0x05
     a76:	04 30       	cpi	r16, 0x04	; 4
     a78:	11 40       	sbci	r17, 0x01	; 1
     a7a:	09 f0       	breq	.+2      	; 0xa7e <main+0x406>
     a7c:	d0 ce       	rjmp	.-608    	; 0x81e <main+0x1a6>
				else{//if no error condition, transmit json as usual from eeprom
					uart_transmit(eeprom_read_byte((uint8_t*)i));//we have stored the formatted json string in the eeprom to avoid PROGMEM overfill issues
				}
				wdr();//reset watchdog timer
			}
			uart_transmit('\n');//transmit a newline at the end of the transmission
     a7e:	8a e0       	ldi	r24, 0x0A	; 10
     a80:	92 d5       	rcall	.+2852   	; 0x15a6 <uart_transmit>
			//wait for last transmission to fully complete
			while (TXCOMP == 0);
     a82:	5e 9b       	sbis	0x0b, 6	; 11
     a84:	fe cf       	rjmp	.-4      	; 0xa82 <main+0x40a>
			transmit_data = 0;
     a86:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <transmit_data+0x1>
     a8a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <transmit_data>
			mfcinvalid = 0;
     a8e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <mfcinvalid+0x1>
     a92:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mfcinvalid>
			clrinvalid = 0;
     a96:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <clrinvalid+0x1>
     a9a:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <clrinvalid>
		}
		//uart_transmit(48);
		//if adc has to be read
		if (numcycles >= 50){
     a9e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <numcycles>
     aa2:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <numcycles+0x1>
     aa6:	c2 97       	sbiw	r24, 0x32	; 50
     aa8:	08 f4       	brcc	.+2      	; 0xaac <main+0x434>
     aaa:	b2 c2       	rjmp	.+1380   	; 0x1010 <main+0x998>
			if (readadc){
     aac:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <readadc>
     ab0:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <readadc+0x1>
     ab4:	89 2b       	or	r24, r25
     ab6:	09 f4       	brne	.+2      	; 0xaba <main+0x442>
     ab8:	ab c2       	rjmp	.+1366   	; 0x1010 <main+0x998>
					if (readadcmotorleft){
     aba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <readadcmotorleft>
     abe:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <readadcmotorleft+0x1>
     ac2:	89 2b       	or	r24, r25
     ac4:	09 f4       	brne	.+2      	; 0xac8 <main+0x450>
     ac6:	fb c0       	rjmp	.+502    	; 0xcbe <main+0x646>
						//turn off timer 0
						TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     ac8:	83 b7       	in	r24, 0x33	; 51
     aca:	88 7f       	andi	r24, 0xF8	; 248
     acc:	83 bf       	out	0x33, r24	; 51
						//store time value for current sample
						backemftime = (TCNT0 + (timer0_ovf_count*256)); //store time value in 16 microsecond ticks
     ace:	22 b7       	in	r18, 0x32	; 50
     ad0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_ovf_count>
     ad4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_ovf_count+0x1>
     ad8:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_ovf_count+0x2>
     adc:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_ovf_count+0x3>
     ae0:	ba 2f       	mov	r27, r26
     ae2:	a9 2f       	mov	r26, r25
     ae4:	98 2f       	mov	r25, r24
     ae6:	88 27       	eor	r24, r24
     ae8:	82 0f       	add	r24, r18
     aea:	91 1d       	adc	r25, r1
     aec:	a1 1d       	adc	r26, r1
     aee:	b1 1d       	adc	r27, r1
     af0:	6c 01       	movw	r12, r24
     af2:	7d 01       	movw	r14, r26
     af4:	00 e0       	ldi	r16, 0x00	; 0
     af6:	10 e0       	ldi	r17, 0x00	; 0
     af8:	98 01       	movw	r18, r16
     afa:	8d 87       	std	Y+13, r24	; 0x0d
     afc:	de 86       	std	Y+14, r13	; 0x0e
     afe:	ef 86       	std	Y+15, r14	; 0x0f
     b00:	f8 8a       	std	Y+16, r15	; 0x10
     b02:	09 8b       	std	Y+17, r16	; 0x11
     b04:	1a 8b       	std	Y+18, r17	; 0x12
     b06:	2b 8b       	std	Y+19, r18	; 0x13
     b08:	3c 8b       	std	Y+20, r19	; 0x14
     b0a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <backemftime>
     b0e:	d0 92 6f 00 	sts	0x006F, r13	; 0x80006f <backemftime+0x1>
     b12:	e0 92 70 00 	sts	0x0070, r14	; 0x800070 <backemftime+0x2>
     b16:	f0 92 71 00 	sts	0x0071, r15	; 0x800071 <backemftime+0x3>
     b1a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <backemftime+0x4>
     b1e:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <backemftime+0x5>
     b22:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <backemftime+0x6>
     b26:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <backemftime+0x7>
						//turn on timer 0 with prescaler /256 to keep measuring time
						TCCR0 |= ((1<<CS02));
     b2a:	83 b7       	in	r24, 0x33	; 51
     b2c:	84 60       	ori	r24, 0x04	; 4
     b2e:	83 bf       	out	0x33, r24	; 51
						TCCR0 &= ~((1<<CS01)|(1<<CS00));
     b30:	83 b7       	in	r24, 0x33	; 51
     b32:	8c 7f       	andi	r24, 0xFC	; 252
     b34:	83 bf       	out	0x33, r24	; 51
						
						reading = adc_convert((adc_read(LHSVOLTAGECHANNEL)));
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	99 da       	rcall	.-2766   	; 0x6c <adc_read>
     b3a:	a4 da       	rcall	.-2744   	; 0x84 <adc_convert>
     b3c:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <reading+0x1>
     b40:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <reading>
						if (reading < 3000){
     b44:	68 3b       	cpi	r22, 0xB8	; 184
     b46:	0b e0       	ldi	r16, 0x0B	; 11
     b48:	70 07       	cpc	r23, r16
     b4a:	08 f0       	brcs	.+2      	; 0xb4e <main+0x4d6>
     b4c:	58 c0       	rjmp	.+176    	; 0xbfe <main+0x586>
							if (backemfreadingindex >= 3){
     b4e:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <backemfreadingindex>
     b52:	30 91 fa 00 	lds	r19, 0x00FA	; 0x8000fa <backemfreadingindex+0x1>
     b56:	23 30       	cpi	r18, 0x03	; 3
     b58:	31 05       	cpc	r19, r1
     b5a:	d0 f0       	brcs	.+52     	; 0xb90 <main+0x518>
								backemfreadingindex = 2;
     b5c:	22 e0       	ldi	r18, 0x02	; 2
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	30 93 fa 00 	sts	0x00FA, r19	; 0x8000fa <backemfreadingindex+0x1>
     b64:	20 93 f9 00 	sts	0x00F9, r18	; 0x8000f9 <backemfreadingindex>
								backemfreading[0] = backemfreading[1];
     b68:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <backemfreading+0x2>
     b6c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <backemfreading+0x3>
     b70:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <backemfreading+0x1>
     b74:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <backemfreading>
								backemfreading[1] = backemfreading[2];
     b78:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <backemfreading+0x4>
     b7c:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <backemfreading+0x5>
     b80:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <backemfreading+0x3>
     b84:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <backemfreading+0x2>
								backemfreading[2] = 0;
     b88:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <backemfreading+0x5>
     b8c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <backemfreading+0x4>
							}
							if ((backemf_i_mod % 2) == 0){
     b90:	40 91 8e 00 	lds	r20, 0x008E	; 0x80008e <backemf_i_mod>
     b94:	50 91 8f 00 	lds	r21, 0x008F	; 0x80008f <backemf_i_mod+0x1>
     b98:	40 fd       	sbrc	r20, 0
     b9a:	2b c0       	rjmp	.+86     	; 0xbf2 <main+0x57a>
								if (backemf_i != NUMSAMPLESI){
     b9c:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <backemf_i>
     ba0:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <backemf_i+0x1>
     ba4:	22 33       	cpi	r18, 0x32	; 50
     ba6:	31 05       	cpc	r19, r1
     ba8:	31 f0       	breq	.+12     	; 0xbb6 <main+0x53e>
									backemf_i++;
     baa:	2f 5f       	subi	r18, 0xFF	; 255
     bac:	3f 4f       	sbci	r19, 0xFF	; 255
     bae:	30 93 91 00 	sts	0x0091, r19	; 0x800091 <backemf_i+0x1>
     bb2:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <backemf_i>
								}
								if (backemf_i_mod > 30){
     bb6:	4f 31       	cpi	r20, 0x1F	; 31
     bb8:	51 05       	cpc	r21, r1
     bba:	d8 f0       	brcs	.+54     	; 0xbf2 <main+0x57a>
									backemfreading[backemfreadingindex] = reading;
     bbc:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <backemfreadingindex>
     bc0:	f0 91 fa 00 	lds	r31, 0x00FA	; 0x8000fa <backemfreadingindex+0x1>
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	e2 5f       	subi	r30, 0xF2	; 242
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	71 83       	std	Z+1, r23	; 0x01
     bce:	60 83       	st	Z, r22
									if (backemfreadingindex < 3) ++backemfreadingindex;
     bd0:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <backemfreadingindex>
     bd4:	30 91 fa 00 	lds	r19, 0x00FA	; 0x8000fa <backemfreadingindex+0x1>
     bd8:	23 30       	cpi	r18, 0x03	; 3
     bda:	31 05       	cpc	r19, r1
     bdc:	50 f4       	brcc	.+20     	; 0xbf2 <main+0x57a>
     bde:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <backemfreadingindex>
     be2:	30 91 fa 00 	lds	r19, 0x00FA	; 0x8000fa <backemfreadingindex+0x1>
     be6:	2f 5f       	subi	r18, 0xFF	; 255
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
     bea:	30 93 fa 00 	sts	0x00FA, r19	; 0x8000fa <backemfreadingindex+0x1>
     bee:	20 93 f9 00 	sts	0x00F9, r18	; 0x8000f9 <backemfreadingindex>
								}
							}
							backemf_i_mod++;
     bf2:	ca 01       	movw	r24, r20
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <backemf_i_mod+0x1>
     bfa:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <backemf_i_mod>
						}
						//if we have gathered at least 3 samples so far, start testing for maximum point reachage
						if (backemfreadingindex == 3){
     bfe:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <backemfreadingindex>
     c02:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <backemfreadingindex+0x1>
     c06:	03 97       	sbiw	r24, 0x03	; 3
     c08:	09 f0       	breq	.+2      	; 0xc0c <main+0x594>
     c0a:	5a c1       	rjmp	.+692    	; 0xec0 <main+0x848>
							if (((backemfreading[2] - backemfreading[1]) < 10) && ((backemfreading[1] - backemfreading[0]) < 10)){//hysteresis of 50mV
     c0c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <backemfreading+0x2>
     c10:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <backemfreading+0x3>
     c14:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <backemfreading+0x4>
     c18:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <backemfreading+0x5>
     c1c:	28 1b       	sub	r18, r24
     c1e:	39 0b       	sbc	r19, r25
     c20:	2a 30       	cpi	r18, 0x0A	; 10
     c22:	31 05       	cpc	r19, r1
     c24:	08 f0       	brcs	.+2      	; 0xc28 <main+0x5b0>
     c26:	4c c1       	rjmp	.+664    	; 0xec0 <main+0x848>
     c28:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <backemfreading>
     c2c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <backemfreading+0x1>
     c30:	82 1b       	sub	r24, r18
     c32:	93 0b       	sbc	r25, r19
     c34:	0a 97       	sbiw	r24, 0x0a	; 10
     c36:	08 f0       	brcs	.+2      	; 0xc3a <main+0x5c2>
     c38:	43 c1       	rjmp	.+646    	; 0xec0 <main+0x848>
								//we have found max, reset timer 0 count and overflow counter, and calculate frequency using stored time
								backemffound = 1;
     c3a:	90 92 ad 00 	sts	0x00AD, r9	; 0x8000ad <backemffound+0x1>
     c3e:	80 92 ac 00 	sts	0x00AC, r8	; 0x8000ac <backemffound>
								backemf_i_mod = 0;
     c42:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <backemf_i_mod+0x1>
     c46:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <backemf_i_mod>
								TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     c4a:	83 b7       	in	r24, 0x33	; 51
     c4c:	88 7f       	andi	r24, 0xF8	; 248
     c4e:	83 bf       	out	0x33, r24	; 51
								TCNT0 = 0;
     c50:	12 be       	out	0x32, r1	; 50
								timer0_ovf_count = 0;
     c52:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <timer0_ovf_count>
     c56:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timer0_ovf_count+0x1>
     c5a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer0_ovf_count+0x2>
     c5e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timer0_ovf_count+0x3>
								backemffreq = 1000000000/backemftime; //find backemf frequency in millihertz
     c62:	a0 90 6e 00 	lds	r10, 0x006E	; 0x80006e <backemftime>
     c66:	b0 90 6f 00 	lds	r11, 0x006F	; 0x80006f <backemftime+0x1>
     c6a:	c0 90 70 00 	lds	r12, 0x0070	; 0x800070 <backemftime+0x2>
     c6e:	d0 90 71 00 	lds	r13, 0x0071	; 0x800071 <backemftime+0x3>
     c72:	e0 90 72 00 	lds	r14, 0x0072	; 0x800072 <backemftime+0x4>
     c76:	f0 90 73 00 	lds	r15, 0x0073	; 0x800073 <backemftime+0x5>
     c7a:	00 91 74 00 	lds	r16, 0x0074	; 0x800074 <backemftime+0x6>
     c7e:	10 91 75 00 	lds	r17, 0x0075	; 0x800075 <backemftime+0x7>
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	3a ec       	ldi	r19, 0xCA	; 202
     c86:	4a e9       	ldi	r20, 0x9A	; 154
     c88:	5b e3       	ldi	r21, 0x3B	; 59
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	46 d7       	rcall	.+3724   	; 0x1b20 <__udivdi3>
     c94:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <backemffreq>
     c98:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <backemffreq+0x1>
     c9c:	40 93 78 00 	sts	0x0078, r20	; 0x800078 <backemffreq+0x2>
     ca0:	50 93 79 00 	sts	0x0079, r21	; 0x800079 <backemffreq+0x3>
     ca4:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <backemffreq+0x4>
     ca8:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <backemffreq+0x5>
     cac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <backemffreq+0x6>
     cb0:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <backemffreq+0x7>
								readadcmotorleft = 0;//we have successfully found back-emf, no need to keep reading
     cb4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <readadcmotorleft+0x1>
     cb8:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <readadcmotorleft>
     cbc:	01 c1       	rjmp	.+514    	; 0xec0 <main+0x848>
						
						//left side motor back emf is ready to be read, start timer and keep reading (and storing current and previous timer value each time) until max value stabilises
						//possibly enable ADC interrupt and write a separate function to do non-blocking ADC converts and timer stores to not block other code
						//once max has stabilised and corresponding time has been obtained, calculate resonant frequency and adjust duty cycle on next while () iteration (if required) and do resonant_done = 1;
					}
					else if (readadcmotorright){
     cbe:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <readadcmotorright>
     cc2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <readadcmotorright+0x1>
     cc6:	89 2b       	or	r24, r25
     cc8:	09 f4       	brne	.+2      	; 0xccc <main+0x654>
     cca:	fa c0       	rjmp	.+500    	; 0xec0 <main+0x848>
						//turn off timer 0
						TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     ccc:	83 b7       	in	r24, 0x33	; 51
     cce:	88 7f       	andi	r24, 0xF8	; 248
     cd0:	83 bf       	out	0x33, r24	; 51
						//store time value for current sample
						backemftime = (TCNT0 + (timer0_ovf_count*256)); //store time value in 16 microseconds
     cd2:	22 b7       	in	r18, 0x32	; 50
     cd4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_ovf_count>
     cd8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_ovf_count+0x1>
     cdc:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_ovf_count+0x2>
     ce0:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_ovf_count+0x3>
     ce4:	ba 2f       	mov	r27, r26
     ce6:	a9 2f       	mov	r26, r25
     ce8:	98 2f       	mov	r25, r24
     cea:	88 27       	eor	r24, r24
     cec:	82 0f       	add	r24, r18
     cee:	91 1d       	adc	r25, r1
     cf0:	a1 1d       	adc	r26, r1
     cf2:	b1 1d       	adc	r27, r1
     cf4:	6c 01       	movw	r12, r24
     cf6:	7d 01       	movw	r14, r26
     cf8:	00 e0       	ldi	r16, 0x00	; 0
     cfa:	10 e0       	ldi	r17, 0x00	; 0
     cfc:	98 01       	movw	r18, r16
     cfe:	8d 87       	std	Y+13, r24	; 0x0d
     d00:	de 86       	std	Y+14, r13	; 0x0e
     d02:	ef 86       	std	Y+15, r14	; 0x0f
     d04:	f8 8a       	std	Y+16, r15	; 0x10
     d06:	09 8b       	std	Y+17, r16	; 0x11
     d08:	1a 8b       	std	Y+18, r17	; 0x12
     d0a:	2b 8b       	std	Y+19, r18	; 0x13
     d0c:	3c 8b       	std	Y+20, r19	; 0x14
     d0e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <backemftime>
     d12:	d0 92 6f 00 	sts	0x006F, r13	; 0x80006f <backemftime+0x1>
     d16:	e0 92 70 00 	sts	0x0070, r14	; 0x800070 <backemftime+0x2>
     d1a:	f0 92 71 00 	sts	0x0071, r15	; 0x800071 <backemftime+0x3>
     d1e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <backemftime+0x4>
     d22:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <backemftime+0x5>
     d26:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <backemftime+0x6>
     d2a:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <backemftime+0x7>
						//turn on timer 0 with prescaler /256 to keep measuring time
						TCCR0 |= ((1<<CS02));
     d2e:	83 b7       	in	r24, 0x33	; 51
     d30:	84 60       	ori	r24, 0x04	; 4
     d32:	83 bf       	out	0x33, r24	; 51
						TCCR0 &= ~((1<<CS01)|(1<<CS00));
     d34:	83 b7       	in	r24, 0x33	; 51
     d36:	8c 7f       	andi	r24, 0xFC	; 252
     d38:	83 bf       	out	0x33, r24	; 51
						//read back emf voltage
						reading = adc_convert((adc_read(RHSVOLTAGECHANNEL)));
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	97 d9       	rcall	.-3282   	; 0x6c <adc_read>
     d3e:	a2 d9       	rcall	.-3260   	; 0x84 <adc_convert>
     d40:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <reading+0x1>
     d44:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <reading>
						if (reading < 3000){
     d48:	68 3b       	cpi	r22, 0xB8	; 184
     d4a:	0b e0       	ldi	r16, 0x0B	; 11
     d4c:	70 07       	cpc	r23, r16
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <main+0x6da>
     d50:	58 c0       	rjmp	.+176    	; 0xe02 <main+0x78a>
							if (backemfreadingindex >= 3){
     d52:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <backemfreadingindex>
     d56:	30 91 fa 00 	lds	r19, 0x00FA	; 0x8000fa <backemfreadingindex+0x1>
     d5a:	23 30       	cpi	r18, 0x03	; 3
     d5c:	31 05       	cpc	r19, r1
     d5e:	d0 f0       	brcs	.+52     	; 0xd94 <main+0x71c>
								backemfreadingindex = 2;
     d60:	22 e0       	ldi	r18, 0x02	; 2
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	30 93 fa 00 	sts	0x00FA, r19	; 0x8000fa <backemfreadingindex+0x1>
     d68:	20 93 f9 00 	sts	0x00F9, r18	; 0x8000f9 <backemfreadingindex>
								backemfreading[0] = backemfreading[1];
     d6c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <backemfreading+0x2>
     d70:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <backemfreading+0x3>
     d74:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <backemfreading+0x1>
     d78:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <backemfreading>
								backemfreading[1] = backemfreading[2];
     d7c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <backemfreading+0x4>
     d80:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <backemfreading+0x5>
     d84:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <backemfreading+0x3>
     d88:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <backemfreading+0x2>
								backemfreading[2] = 0;
     d8c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <backemfreading+0x5>
     d90:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <backemfreading+0x4>
							}
							if ((backemf_i_mod % 2) == 0){
     d94:	40 91 8e 00 	lds	r20, 0x008E	; 0x80008e <backemf_i_mod>
     d98:	50 91 8f 00 	lds	r21, 0x008F	; 0x80008f <backemf_i_mod+0x1>
     d9c:	40 fd       	sbrc	r20, 0
     d9e:	2b c0       	rjmp	.+86     	; 0xdf6 <main+0x77e>
								if (backemf_i != NUMSAMPLESI){
     da0:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <backemf_i>
     da4:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <backemf_i+0x1>
     da8:	22 33       	cpi	r18, 0x32	; 50
     daa:	31 05       	cpc	r19, r1
     dac:	31 f0       	breq	.+12     	; 0xdba <main+0x742>
									//backemfarray[backemf_i] = reading;
									backemf_i++;
     dae:	2f 5f       	subi	r18, 0xFF	; 255
     db0:	3f 4f       	sbci	r19, 0xFF	; 255
     db2:	30 93 91 00 	sts	0x0091, r19	; 0x800091 <backemf_i+0x1>
     db6:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <backemf_i>
								}
								if (backemf_i_mod > 30){
     dba:	4f 31       	cpi	r20, 0x1F	; 31
     dbc:	51 05       	cpc	r21, r1
     dbe:	d8 f0       	brcs	.+54     	; 0xdf6 <main+0x77e>
									backemfreading[backemfreadingindex] = reading;
     dc0:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <backemfreadingindex>
     dc4:	f0 91 fa 00 	lds	r31, 0x00FA	; 0x8000fa <backemfreadingindex+0x1>
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	e2 5f       	subi	r30, 0xF2	; 242
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	71 83       	std	Z+1, r23	; 0x01
     dd2:	60 83       	st	Z, r22
									if (backemfreadingindex < 3) ++backemfreadingindex;
     dd4:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <backemfreadingindex>
     dd8:	30 91 fa 00 	lds	r19, 0x00FA	; 0x8000fa <backemfreadingindex+0x1>
     ddc:	23 30       	cpi	r18, 0x03	; 3
     dde:	31 05       	cpc	r19, r1
     de0:	50 f4       	brcc	.+20     	; 0xdf6 <main+0x77e>
     de2:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <backemfreadingindex>
     de6:	30 91 fa 00 	lds	r19, 0x00FA	; 0x8000fa <backemfreadingindex+0x1>
     dea:	2f 5f       	subi	r18, 0xFF	; 255
     dec:	3f 4f       	sbci	r19, 0xFF	; 255
     dee:	30 93 fa 00 	sts	0x00FA, r19	; 0x8000fa <backemfreadingindex+0x1>
     df2:	20 93 f9 00 	sts	0x00F9, r18	; 0x8000f9 <backemfreadingindex>
								}
							}
							backemf_i_mod++;
     df6:	ca 01       	movw	r24, r20
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <backemf_i_mod+0x1>
     dfe:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <backemf_i_mod>
						}
						
						//if we have gathered at least 3 samples so far, start testing for maximum point reachage
						if (backemfreadingindex == 3){
     e02:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <backemfreadingindex>
     e06:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <backemfreadingindex+0x1>
     e0a:	03 97       	sbiw	r24, 0x03	; 3
     e0c:	09 f0       	breq	.+2      	; 0xe10 <main+0x798>
     e0e:	58 c0       	rjmp	.+176    	; 0xec0 <main+0x848>
							if (((backemfreading[2] - backemfreading[1]) < 10) && ((backemfreading[1] - backemfreading[0]) < 10)){//hysteresis of 50mV
     e10:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <backemfreading+0x2>
     e14:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <backemfreading+0x3>
     e18:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <backemfreading+0x4>
     e1c:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <backemfreading+0x5>
     e20:	28 1b       	sub	r18, r24
     e22:	39 0b       	sbc	r19, r25
     e24:	2a 30       	cpi	r18, 0x0A	; 10
     e26:	31 05       	cpc	r19, r1
     e28:	08 f0       	brcs	.+2      	; 0xe2c <main+0x7b4>
     e2a:	4a c0       	rjmp	.+148    	; 0xec0 <main+0x848>
     e2c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <backemfreading>
     e30:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <backemfreading+0x1>
     e34:	82 1b       	sub	r24, r18
     e36:	93 0b       	sbc	r25, r19
     e38:	0a 97       	sbiw	r24, 0x0a	; 10
     e3a:	08 f0       	brcs	.+2      	; 0xe3e <main+0x7c6>
     e3c:	41 c0       	rjmp	.+130    	; 0xec0 <main+0x848>
								//we have found max, reset timer 0 count and overflow counter, and calculate frequency using stored time
								backemffound = 1;
     e3e:	90 92 ad 00 	sts	0x00AD, r9	; 0x8000ad <backemffound+0x1>
     e42:	80 92 ac 00 	sts	0x00AC, r8	; 0x8000ac <backemffound>
								//backemf_i = 0;
								backemf_i_mod = 0;
     e46:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <backemf_i_mod+0x1>
     e4a:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <backemf_i_mod>
								TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     e4e:	83 b7       	in	r24, 0x33	; 51
     e50:	88 7f       	andi	r24, 0xF8	; 248
     e52:	83 bf       	out	0x33, r24	; 51
								TCNT0 = 0;
     e54:	12 be       	out	0x32, r1	; 50
								timer0_ovf_count = 0;
     e56:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <timer0_ovf_count>
     e5a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timer0_ovf_count+0x1>
     e5e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer0_ovf_count+0x2>
     e62:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timer0_ovf_count+0x3>
								backemffreq = 1000000000/backemftime; //find backemf frequency in millihertz
     e66:	a0 90 6e 00 	lds	r10, 0x006E	; 0x80006e <backemftime>
     e6a:	b0 90 6f 00 	lds	r11, 0x006F	; 0x80006f <backemftime+0x1>
     e6e:	c0 90 70 00 	lds	r12, 0x0070	; 0x800070 <backemftime+0x2>
     e72:	d0 90 71 00 	lds	r13, 0x0071	; 0x800071 <backemftime+0x3>
     e76:	e0 90 72 00 	lds	r14, 0x0072	; 0x800072 <backemftime+0x4>
     e7a:	f0 90 73 00 	lds	r15, 0x0073	; 0x800073 <backemftime+0x5>
     e7e:	00 91 74 00 	lds	r16, 0x0074	; 0x800074 <backemftime+0x6>
     e82:	10 91 75 00 	lds	r17, 0x0075	; 0x800075 <backemftime+0x7>
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	3a ec       	ldi	r19, 0xCA	; 202
     e8a:	4a e9       	ldi	r20, 0x9A	; 154
     e8c:	5b e3       	ldi	r21, 0x3B	; 59
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	44 d6       	rcall	.+3208   	; 0x1b20 <__udivdi3>
     e98:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <backemffreq>
     e9c:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <backemffreq+0x1>
     ea0:	40 93 78 00 	sts	0x0078, r20	; 0x800078 <backemffreq+0x2>
     ea4:	50 93 79 00 	sts	0x0079, r21	; 0x800079 <backemffreq+0x3>
     ea8:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <backemffreq+0x4>
     eac:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <backemffreq+0x5>
     eb0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <backemffreq+0x6>
     eb4:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <backemffreq+0x7>
								readadcmotorright = 0;//we have successfully found back-emf, no need to keep reading
     eb8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <readadcmotorright+0x1>
     ebc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <readadcmotorright>
						}
						//left side motor back emf is ready to be read, start timer and keep reading (and storing current and previous timer value each time) until max value stabilises
						//possibly enable ADC interrupt and write a separate function to do non-blocking ADC converts and timer stores to not block other code
						//once max has stabilised and corresponding time has been obtained, calculate resonant frequency and adjust duty cycle on next while () iteration (if required) and do resonant_done = 1;
					}
				if (readadcv){
     ec0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <readadcv>
     ec4:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <readadcv+0x1>
     ec8:	89 2b       	or	r24, r25
     eca:	09 f1       	breq	.+66     	; 0xf0e <main+0x896>
					if (voltage_right_on){
     ecc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <voltage_right_on>
     ed0:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <voltage_right_on+0x1>
     ed4:	89 2b       	or	r24, r25
     ed6:	b1 f0       	breq	.+44     	; 0xf04 <main+0x88c>
						//read motor_right for VCC
						reading = adc_convert(adc_read(RHSVOLTAGECHANNEL));
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	c8 d8       	rcall	.-3696   	; 0x6c <adc_read>
     edc:	d3 d8       	rcall	.-3674   	; 0x84 <adc_convert>
     ede:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <reading+0x1>
     ee2:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <reading>
						voltagereading = (reading - 220)*2.6997; //store actual voltage value
     ee6:	6c 5d       	subi	r22, 0xDC	; 220
     ee8:	71 09       	sbc	r23, r1
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	c5 d3       	rcall	.+1930   	; 0x167a <__floatunsisf>
     ef0:	23 ee       	ldi	r18, 0xE3	; 227
     ef2:	37 ec       	ldi	r19, 0xC7	; 199
     ef4:	4c e2       	ldi	r20, 0x2C	; 44
     ef6:	50 e4       	ldi	r21, 0x40	; 64
     ef8:	74 d4       	rcall	.+2280   	; 0x17e2 <__mulsf3>
     efa:	93 d3       	rcall	.+1830   	; 0x1622 <__fixunssfsi>
     efc:	70 93 95 00 	sts	0x0095, r23	; 0x800095 <voltagereading+0x1>
     f00:	60 93 94 00 	sts	0x0094, r22	; 0x800094 <voltagereading>
					}
					//we have read voltage value (only need to do this once because we are assuming Vcc remains constant between PWM pulses), turn off voltage reading flag
					readadcv = 0;
     f04:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <readadcv+0x1>
     f08:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <readadcv>
     f0c:	81 c0       	rjmp	.+258    	; 0x1010 <main+0x998>
				}
				else if (readadci){
     f0e:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <readadci>
     f12:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <readadci+0x1>
     f16:	89 2b       	or	r24, r25
     f18:	09 f4       	brne	.+2      	; 0xf1c <main+0x8a4>
     f1a:	7a c0       	rjmp	.+244    	; 0x1010 <main+0x998>
					if (currentreadingindex != NUMSAMPLESI){
     f1c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <currentreadingindex>
     f20:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <currentreadingindex+0x1>
     f24:	c2 97       	sbiw	r24, 0x32	; 50
     f26:	09 f4       	brne	.+2      	; 0xf2a <main+0x8b2>
     f28:	73 c0       	rjmp	.+230    	; 0x1010 <main+0x998>
						if ((voltage_left_on) || (voltage_right_on)){
     f2a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <voltage_left_on>
     f2e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <voltage_left_on+0x1>
     f32:	89 2b       	or	r24, r25
     f34:	31 f4       	brne	.+12     	; 0xf42 <main+0x8ca>
     f36:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <voltage_right_on>
     f3a:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <voltage_right_on+0x1>
     f3e:	89 2b       	or	r24, r25
     f40:	91 f1       	breq	.+100    	; 0xfa6 <main+0x92e>
							//store current ADC samples into array, do NOT reset the index between sampling intervals so we can build up a full array
							//also at the same time, multiply adc current value by the voltage value to get the instantaneous power array
							//store only alternate samples (i % 50 == 0) (so we don't get more than ~50 samples for the whole of T/4)
							reading = adc_convert(adc_read(ISHIFTEDCHANNEL));
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	93 d8       	rcall	.-3802   	; 0x6c <adc_read>
     f46:	9e d8       	rcall	.-3780   	; 0x84 <adc_convert>
     f48:	db 01       	movw	r26, r22
     f4a:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <reading+0x1>
     f4e:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <reading>
							if((current_i % 2) == 0){
     f52:	20 91 ba 00 	lds	r18, 0x00BA	; 0x8000ba <current_i>
     f56:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <current_i+0x1>
     f5a:	20 fd       	sbrc	r18, 0
     f5c:	50 c0       	rjmp	.+160    	; 0xffe <main+0x986>
								currentarray[currentreadingindex] = reading; //store i_sense_shifted voltage
     f5e:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <currentreadingindex>
     f62:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <currentreadingindex+0x1>
     f66:	ee 0f       	add	r30, r30
     f68:	ff 1f       	adc	r31, r31
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	e4 52       	subi	r30, 0x24	; 36
     f70:	fe 4f       	sbci	r31, 0xFE	; 254
     f72:	ab 01       	movw	r20, r22
     f74:	bc 01       	movw	r22, r24
     f76:	66 27       	eor	r22, r22
     f78:	77 27       	eor	r23, r23
     f7a:	40 83       	st	Z, r20
     f7c:	51 83       	std	Z+1, r21	; 0x01
     f7e:	62 83       	std	Z+2, r22	; 0x02
     f80:	73 83       	std	Z+3, r23	; 0x03
								//powerarray[currentreadingindex] = currentarray[currentreadingindex] * voltagereading; //store power in uW
								++currentreadingindex;
     f82:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <currentreadingindex>
     f86:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <currentreadingindex+0x1>
     f8a:	2f 5f       	subi	r18, 0xFF	; 255
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <currentreadingindex+0x1>
     f92:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <currentreadingindex>
								if (reading > 3000) {//short circuit condition test
     f96:	a9 3b       	cpi	r26, 0xB9	; 185
     f98:	bb 40       	sbci	r27, 0x0B	; 11
     f9a:	88 f1       	brcs	.+98     	; 0xffe <main+0x986>
									shortcircuit = 1;
     f9c:	90 92 93 00 	sts	0x0093, r9	; 0x800093 <shortcircuit+0x1>
     fa0:	80 92 92 00 	sts	0x0092, r8	; 0x800092 <shortcircuit>
     fa4:	2c c0       	rjmp	.+88     	; 0xffe <main+0x986>
								}
							}
						}
						else if ((!voltage_left_on) && (!voltage_right_on)){
     fa6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <voltage_left_on>
     faa:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <voltage_left_on+0x1>
     fae:	89 2b       	or	r24, r25
     fb0:	31 f5       	brne	.+76     	; 0xffe <main+0x986>
     fb2:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <voltage_right_on>
     fb6:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <voltage_right_on+0x1>
     fba:	89 2b       	or	r24, r25
     fbc:	01 f5       	brne	.+64     	; 0xffe <main+0x986>
							//if PWM is turned off, current is 0
							//therefore store a 0 in the array (again, do not reset the index yet)
							//but make sure to read still ADC to generate the correct number of samples (because we don't have a spare timer)
							//also at the same time, multiply adc current value by the voltage value to get the instantaneous power array
							//store only alternate samples (every 25th sample using (i % 50 == 0)) (so we don't get more than ~50 samples)
							adc_convert(adc_read(ISHIFTEDCHANNEL));
     fbe:	82 e0       	ldi	r24, 0x02	; 2
     fc0:	55 d8       	rcall	.-3926   	; 0x6c <adc_read>
     fc2:	60 d8       	rcall	.-3904   	; 0x84 <adc_convert>
							if ((current_i % 2) == 0){
     fc4:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <current_i>
     fc8:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <current_i+0x1>
     fcc:	80 fd       	sbrc	r24, 0
     fce:	17 c0       	rjmp	.+46     	; 0xffe <main+0x986>
								currentarray[currentreadingindex] = 0;
     fd0:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <currentreadingindex>
     fd4:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <currentreadingindex+0x1>
     fd8:	ee 0f       	add	r30, r30
     fda:	ff 1f       	adc	r31, r31
     fdc:	ee 0f       	add	r30, r30
     fde:	ff 1f       	adc	r31, r31
     fe0:	e4 52       	subi	r30, 0x24	; 36
     fe2:	fe 4f       	sbci	r31, 0xFE	; 254
     fe4:	10 82       	st	Z, r1
     fe6:	11 82       	std	Z+1, r1	; 0x01
     fe8:	12 82       	std	Z+2, r1	; 0x02
     fea:	13 82       	std	Z+3, r1	; 0x03
								//powerarray[currentreadingindex] = 0;
								++currentreadingindex;
     fec:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <currentreadingindex>
     ff0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <currentreadingindex+0x1>
     ff4:	01 96       	adiw	r24, 0x01	; 1
     ff6:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <currentreadingindex+0x1>
     ffa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <currentreadingindex>
							}
						}
						++current_i;
     ffe:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <current_i>
    1002:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <current_i+0x1>
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <current_i+0x1>
    100c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <current_i>
				}
			}
		}
		
		//driving frequency adjustment here
		if (backemffound){
    1010:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <backemffound>
    1014:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <backemffound+0x1>
    1018:	89 2b       	or	r24, r25
    101a:	09 f4       	brne	.+2      	; 0x101e <main+0x9a6>
    101c:	9f c0       	rjmp	.+318    	; 0x115c <main+0xae4>
			char buf[10];
			if (TCNT1 < OCR1A){
    101e:	2c b5       	in	r18, 0x2c	; 44
    1020:	3d b5       	in	r19, 0x2d	; 45
    1022:	8a b5       	in	r24, 0x2a	; 42
    1024:	9b b5       	in	r25, 0x2b	; 43
    1026:	28 17       	cp	r18, r24
    1028:	39 07       	cpc	r19, r25
    102a:	68 f5       	brcc	.+90     	; 0x1086 <main+0xa0e>
				backemf_i_mod = 0;
    102c:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <backemf_i_mod+0x1>
    1030:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <backemf_i_mod>
				backemf_i = 0;
    1034:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <backemf_i+0x1>
    1038:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <backemf_i>
				if ((backemfreading[2] < 260) && (backemfreading[1] < 260) && (backemfreading[0] < 260)){ //check for either stalling or head collision if our back emf is too low
    103c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <backemfreading+0x4>
    1040:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <backemfreading+0x5>
    1044:	84 30       	cpi	r24, 0x04	; 4
    1046:	91 40       	sbci	r25, 0x01	; 1
    1048:	90 f4       	brcc	.+36     	; 0x106e <main+0x9f6>
    104a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <backemfreading+0x2>
    104e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <backemfreading+0x3>
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	91 40       	sbci	r25, 0x01	; 1
    1056:	58 f4       	brcc	.+22     	; 0x106e <main+0x9f6>
    1058:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <backemfreading>
    105c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <backemfreading+0x1>
    1060:	84 30       	cpi	r24, 0x04	; 4
    1062:	91 40       	sbci	r25, 0x01	; 1
    1064:	20 f4       	brcc	.+8      	; 0x106e <main+0x9f6>
					error = 1;
    1066:	90 92 9b 00 	sts	0x009B, r9	; 0x80009b <error+0x1>
    106a:	80 92 9a 00 	sts	0x009A, r8	; 0x80009a <error>
				}
				backemfreading[0] = 0;
    106e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <backemfreading+0x1>
    1072:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <backemfreading>
				backemfreading[1] = 0;
    1076:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <backemfreading+0x3>
    107a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <backemfreading+0x2>
				backemfreading[2] = 0;
    107e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <backemfreading+0x5>
    1082:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <backemfreading+0x4>
			}
			if ((backemftime > 1150) && (backemftime < 1500)){//ignore garbage/incorrect resonant frequency values
    1086:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <backemftime>
    108a:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <backemftime+0x1>
    108e:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <backemftime+0x2>
    1092:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <backemftime+0x3>
    1096:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <backemftime+0x4>
    109a:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <backemftime+0x5>
    109e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <backemftime+0x6>
    10a2:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <backemftime+0x7>
    10a6:	2e 37       	cpi	r18, 0x7E	; 126
    10a8:	34 40       	sbci	r19, 0x04	; 4
    10aa:	41 05       	cpc	r20, r1
    10ac:	51 05       	cpc	r21, r1
    10ae:	61 05       	cpc	r22, r1
    10b0:	71 05       	cpc	r23, r1
    10b2:	81 05       	cpc	r24, r1
    10b4:	91 05       	cpc	r25, r1
    10b6:	09 f0       	breq	.+2      	; 0x10ba <main+0xa42>
    10b8:	08 f4       	brcc	.+2      	; 0x10bc <main+0xa44>
    10ba:	50 c0       	rjmp	.+160    	; 0x115c <main+0xae4>
    10bc:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <backemftime>
    10c0:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <backemftime+0x1>
    10c4:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <backemftime+0x2>
    10c8:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <backemftime+0x3>
    10cc:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <backemftime+0x4>
    10d0:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <backemftime+0x5>
    10d4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <backemftime+0x6>
    10d8:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <backemftime+0x7>
    10dc:	2b 3d       	cpi	r18, 0xDB	; 219
    10de:	35 40       	sbci	r19, 0x05	; 5
    10e0:	41 05       	cpc	r20, r1
    10e2:	51 05       	cpc	r21, r1
    10e4:	61 05       	cpc	r22, r1
    10e6:	71 05       	cpc	r23, r1
    10e8:	81 05       	cpc	r24, r1
    10ea:	91 05       	cpc	r25, r1
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <main+0xa78>
    10ee:	b0 f5       	brcc	.+108    	; 0x115c <main+0xae4>
				OCR1A = backemftime; //t/4 = backemf/16
    10f0:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <backemftime>
    10f4:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <backemftime+0x1>
    10f8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <backemftime+0x2>
    10fc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <backemftime+0x3>
    1100:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <backemftime+0x4>
    1104:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <backemftime+0x5>
    1108:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <backemftime+0x6>
    110c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <backemftime+0x7>
    1110:	83 2f       	mov	r24, r19
    1112:	92 2f       	mov	r25, r18
    1114:	9b bd       	out	0x2b, r25	; 43
    1116:	8a bd       	out	0x2a, r24	; 42
				OCR1B = backemftime * 2;//t/2 is always 2 * t/4
    1118:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <backemftime>
    111c:	ed 87       	std	Y+13, r30	; 0x0d
    111e:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <backemftime+0x1>
    1122:	fe 87       	std	Y+14, r31	; 0x0e
    1124:	c0 90 70 00 	lds	r12, 0x0070	; 0x800070 <backemftime+0x2>
    1128:	cf 86       	std	Y+15, r12	; 0x0f
    112a:	d0 90 71 00 	lds	r13, 0x0071	; 0x800071 <backemftime+0x3>
    112e:	d8 8a       	std	Y+16, r13	; 0x10
    1130:	e0 90 72 00 	lds	r14, 0x0072	; 0x800072 <backemftime+0x4>
    1134:	e9 8a       	std	Y+17, r14	; 0x11
    1136:	f0 90 73 00 	lds	r15, 0x0073	; 0x800073 <backemftime+0x5>
    113a:	fa 8a       	std	Y+18, r15	; 0x12
    113c:	00 91 74 00 	lds	r16, 0x0074	; 0x800074 <backemftime+0x6>
    1140:	0b 8b       	std	Y+19, r16	; 0x13
    1142:	10 91 75 00 	lds	r17, 0x0075	; 0x800075 <backemftime+0x7>
    1146:	1c 8b       	std	Y+20, r17	; 0x14
    1148:	8d 85       	ldd	r24, Y+13	; 0x0d
    114a:	9e 85       	ldd	r25, Y+14	; 0x0e
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	99 bd       	out	0x29, r25	; 41
    1152:	88 bd       	out	0x28, r24	; 40
				validbackemffound = 1;
    1154:	90 92 ff 00 	sts	0x00FF, r9	; 0x8000ff <validbackemffound+0x1>
    1158:	80 92 fe 00 	sts	0x00FE, r8	; 0x8000fe <validbackemffound>
			}
		}
		
		//once we have done adc readings, do rms/power calcs and store the values in their proper places
		if (currentreadingindex == NUMSAMPLESI){
    115c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <currentreadingindex>
    1160:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <currentreadingindex+0x1>
    1164:	c2 97       	sbiw	r24, 0x32	; 50
    1166:	09 f0       	breq	.+2      	; 0x116a <main+0xaf2>
    1168:	5f c1       	rjmp	.+702    	; 0x1428 <main+0xdb0>
			//calculate RMS current
			for (int i = 0; i < NUMSAMPLESI; ++i){
				if (currentarray[i] != 0){
					currentarray[i] = (((currentarray[i] - 200) * 0.2345)) * 10; //store actual current value (mA)
				}
				powerarray[i] = currentarray[i] * voltagereading;
    116a:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <voltagereading>
    116e:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <voltagereading+0x1>
    1172:	3e 83       	std	Y+6, r19	; 0x06
    1174:	2d 83       	std	Y+5, r18	; 0x05
    1176:	a9 01       	movw	r20, r18
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	49 87       	std	Y+9, r20	; 0x09
    117e:	5a 87       	std	Y+10, r21	; 0x0a
    1180:	6b 87       	std	Y+11, r22	; 0x0b
    1182:	7c 87       	std	Y+12, r23	; 0x0c
    1184:	70 91 86 00 	lds	r23, 0x0086	; 0x800086 <currentvalue>
    1188:	79 83       	std	Y+1, r23	; 0x01
    118a:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <currentvalue+0x1>
    118e:	8a 83       	std	Y+2, r24	; 0x02
    1190:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <currentvalue+0x2>
    1194:	9b 83       	std	Y+3, r25	; 0x03
    1196:	a0 91 89 00 	lds	r26, 0x0089	; 0x800089 <currentvalue+0x3>
    119a:	ac 83       	std	Y+4, r26	; 0x04
    119c:	b0 91 8a 00 	lds	r27, 0x008A	; 0x80008a <currentvalue+0x4>
    11a0:	bd 8b       	std	Y+21, r27	; 0x15
    11a2:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <currentvalue+0x5>
    11a6:	ed 87       	std	Y+13, r30	; 0x0d
    11a8:	40 90 8c 00 	lds	r4, 0x008C	; 0x80008c <currentvalue+0x6>
    11ac:	50 90 8d 00 	lds	r5, 0x008D	; 0x80008d <currentvalue+0x7>
    11b0:	04 e1       	ldi	r16, 0x14	; 20
    11b2:	11 e0       	ldi	r17, 0x01	; 1
    11b4:	18 87       	std	Y+8, r17	; 0x08
    11b6:	0f 83       	std	Y+7, r16	; 0x07
    11b8:	fc ed       	ldi	r31, 0xDC	; 220
    11ba:	2f 2e       	mov	r2, r31
    11bc:	f1 e0       	ldi	r31, 0x01	; 1
    11be:	3f 2e       	mov	r3, r31
		
		//once we have done adc readings, do rms/power calcs and store the values in their proper places
		if (currentreadingindex == NUMSAMPLESI){
			//calculate RMS current
			for (int i = 0; i < NUMSAMPLESI; ++i){
				if (currentarray[i] != 0){
    11c0:	f1 01       	movw	r30, r2
    11c2:	80 81       	ld	r24, Z
    11c4:	91 81       	ldd	r25, Z+1	; 0x01
    11c6:	a2 81       	ldd	r26, Z+2	; 0x02
    11c8:	b3 81       	ldd	r27, Z+3	; 0x03
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	a1 05       	cpc	r26, r1
    11ce:	b1 05       	cpc	r27, r1
    11d0:	c1 f0       	breq	.+48     	; 0x1202 <main+0xb8a>
					currentarray[i] = (((currentarray[i] - 200) * 0.2345)) * 10; //store actual current value (mA)
    11d2:	bc 01       	movw	r22, r24
    11d4:	cd 01       	movw	r24, r26
    11d6:	68 5c       	subi	r22, 0xC8	; 200
    11d8:	71 09       	sbc	r23, r1
    11da:	81 09       	sbc	r24, r1
    11dc:	91 09       	sbc	r25, r1
    11de:	4d d2       	rcall	.+1178   	; 0x167a <__floatunsisf>
    11e0:	25 ec       	ldi	r18, 0xC5	; 197
    11e2:	30 e2       	ldi	r19, 0x20	; 32
    11e4:	40 e7       	ldi	r20, 0x70	; 112
    11e6:	5e e3       	ldi	r21, 0x3E	; 62
    11e8:	fc d2       	rcall	.+1528   	; 0x17e2 <__mulsf3>
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e2       	ldi	r20, 0x20	; 32
    11f0:	51 e4       	ldi	r21, 0x41	; 65
    11f2:	f7 d2       	rcall	.+1518   	; 0x17e2 <__mulsf3>
    11f4:	16 d2       	rcall	.+1068   	; 0x1622 <__fixunssfsi>
    11f6:	d1 01       	movw	r26, r2
    11f8:	6d 93       	st	X+, r22
    11fa:	7d 93       	st	X+, r23
    11fc:	8d 93       	st	X+, r24
    11fe:	9c 93       	st	X, r25
    1200:	13 97       	sbiw	r26, 0x03	; 3
				}
				powerarray[i] = currentarray[i] * voltagereading;
    1202:	f1 01       	movw	r30, r2
    1204:	c0 80       	ld	r12, Z
    1206:	d1 80       	ldd	r13, Z+1	; 0x01
    1208:	e2 80       	ldd	r14, Z+2	; 0x02
    120a:	f3 80       	ldd	r15, Z+3	; 0x03
    120c:	a7 01       	movw	r20, r14
    120e:	96 01       	movw	r18, r12
    1210:	69 85       	ldd	r22, Y+9	; 0x09
    1212:	7a 85       	ldd	r23, Y+10	; 0x0a
    1214:	8b 85       	ldd	r24, Y+11	; 0x0b
    1216:	9c 85       	ldd	r25, Y+12	; 0x0c
    1218:	c9 d3       	rcall	.+1938   	; 0x19ac <__mulsi3>
    121a:	af 81       	ldd	r26, Y+7	; 0x07
    121c:	b8 85       	ldd	r27, Y+8	; 0x08
    121e:	6d 93       	st	X+, r22
    1220:	7d 93       	st	X+, r23
    1222:	8d 93       	st	X+, r24
    1224:	9d 93       	st	X+, r25
    1226:	b8 87       	std	Y+8, r27	; 0x08
    1228:	af 83       	std	Y+7, r26	; 0x07
				
				currentarray[i] = square(currentarray[i]); //square
    122a:	c7 01       	movw	r24, r14
    122c:	b6 01       	movw	r22, r12
    122e:	25 d2       	rcall	.+1098   	; 0x167a <__floatunsisf>
    1230:	7d d3       	rcall	.+1786   	; 0x192c <square>
    1232:	f7 d1       	rcall	.+1006   	; 0x1622 <__fixunssfsi>
    1234:	f1 01       	movw	r30, r2
    1236:	61 93       	st	Z+, r22
    1238:	71 93       	st	Z+, r23
    123a:	81 93       	st	Z+, r24
    123c:	91 93       	st	Z+, r25
    123e:	1f 01       	movw	r2, r30
				
				powervalue += powerarray[i]; //summation of power 
				currentvalue += currentarray[i];//summation of current^2
    1240:	5b 01       	movw	r10, r22
    1242:	6c 01       	movw	r12, r24
    1244:	9b 01       	movw	r18, r22
    1246:	a6 01       	movw	r20, r12
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a9 80       	ldd	r10, Y+1	; 0x01
    1252:	ba 80       	ldd	r11, Y+2	; 0x02
    1254:	cb 80       	ldd	r12, Y+3	; 0x03
    1256:	dc 80       	ldd	r13, Y+4	; 0x04
    1258:	ed 88       	ldd	r14, Y+21	; 0x15
    125a:	fd 84       	ldd	r15, Y+13	; 0x0d
    125c:	82 01       	movw	r16, r4
    125e:	e1 d4       	rcall	.+2498   	; 0x1c22 <__adddi3>
    1260:	29 83       	std	Y+1, r18	; 0x01
    1262:	3a 83       	std	Y+2, r19	; 0x02
    1264:	4b 83       	std	Y+3, r20	; 0x03
    1266:	5c 83       	std	Y+4, r21	; 0x04
    1268:	6d 8b       	std	Y+21, r22	; 0x15
    126a:	7d 87       	std	Y+13, r23	; 0x0d
    126c:	2c 01       	movw	r4, r24
		}
		
		//once we have done adc readings, do rms/power calcs and store the values in their proper places
		if (currentreadingindex == NUMSAMPLESI){
			//calculate RMS current
			for (int i = 0; i < NUMSAMPLESI; ++i){
    126e:	e4 ea       	ldi	r30, 0xA4	; 164
    1270:	ce 2e       	mov	r12, r30
    1272:	e2 e0       	ldi	r30, 0x02	; 2
    1274:	de 2e       	mov	r13, r30
    1276:	c2 14       	cp	r12, r2
    1278:	d3 04       	cpc	r13, r3
    127a:	09 f0       	breq	.+2      	; 0x127e <main+0xc06>
    127c:	a1 cf       	rjmp	.-190    	; 0x11c0 <main+0xb48>
				
				powervalue += powerarray[i]; //summation of power 
				currentvalue += currentarray[i];//summation of current^2
			}
			currentvalue /= NUMSAMPLESI; //mean
			currentvalue = sqrt(currentvalue); //root - gives RMS current in (mA)
    127e:	82 e3       	ldi	r24, 0x32	; 50
    1280:	a8 2e       	mov	r10, r24
    1282:	b1 2c       	mov	r11, r1
    1284:	c1 2c       	mov	r12, r1
    1286:	d1 2c       	mov	r13, r1
    1288:	e1 2c       	mov	r14, r1
    128a:	f1 2c       	mov	r15, r1
    128c:	00 e0       	ldi	r16, 0x00	; 0
    128e:	10 e0       	ldi	r17, 0x00	; 0
    1290:	c2 01       	movw	r24, r4
    1292:	46 d4       	rcall	.+2188   	; 0x1b20 <__udivdi3>
    1294:	2f d2       	rcall	.+1118   	; 0x16f4 <__floatundisf>
    1296:	0c d3       	rcall	.+1560   	; 0x18b0 <sqrt>
			currentvalue /= 2; //since we are operating bidirectional current and only reading the "ON" period of the signals for (T/4 + T/4) = T/2, we need to halve our obtained RMS value
    1298:	8f d1       	rcall	.+798    	; 0x15b8 <__fixunssfdi>
    129a:	01 e0       	ldi	r16, 0x01	; 1
    129c:	a6 d4       	rcall	.+2380   	; 0x1bea <__lshrdi3>
    129e:	19 01       	movw	r2, r18
			char buf[10];
			
			powervalue = currentvalue * voltagereading; //power mean (uW)
    12a0:	ed 80       	ldd	r14, Y+5	; 0x05
    12a2:	fe 80       	ldd	r15, Y+6	; 0x06
    12a4:	67 01       	movw	r12, r14
    12a6:	e1 2c       	mov	r14, r1
    12a8:	f1 2c       	mov	r15, r1
    12aa:	00 e0       	ldi	r16, 0x00	; 0
    12ac:	10 e0       	ldi	r17, 0x00	; 0
    12ae:	98 01       	movw	r18, r16
    12b0:	cd 86       	std	Y+13, r12	; 0x0d
    12b2:	de 86       	std	Y+14, r13	; 0x0e
    12b4:	ef 86       	std	Y+15, r14	; 0x0f
    12b6:	f8 8a       	std	Y+16, r15	; 0x10
    12b8:	09 8b       	std	Y+17, r16	; 0x11
    12ba:	1a 8b       	std	Y+18, r17	; 0x12
    12bc:	2b 8b       	std	Y+19, r18	; 0x13
    12be:	3c 8b       	std	Y+20, r19	; 0x14
    12c0:	51 01       	movw	r10, r2
    12c2:	6a 01       	movw	r12, r20
    12c4:	7b 01       	movw	r14, r22
    12c6:	8c 01       	movw	r16, r24
    12c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    12ca:	3e 85       	ldd	r19, Y+14	; 0x0e
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	d0 d3       	rcall	.+1952   	; 0x1a7a <__muldi3>
    12da:	29 01       	movw	r4, r18
    12dc:	49 83       	std	Y+1, r20	; 0x01
    12de:	5a 83       	std	Y+2, r21	; 0x02
    12e0:	6b 83       	std	Y+3, r22	; 0x03
    12e2:	7c 83       	std	Y+4, r23	; 0x04
    12e4:	89 87       	std	Y+9, r24	; 0x09
    12e6:	9f 83       	std	Y+7, r25	; 0x07
			powervalue /= 1000; //gives average power in (mW)
			current = currentvalue; //current is already in mA
    12e8:	20 92 64 00 	sts	0x0064, r2	; 0x800064 <current>
    12ec:	30 92 65 00 	sts	0x0065, r3	; 0x800065 <current+0x1>
			//put all the found circuit parameters into the proper format for transmission)
			voltleft = voltagereading/1000;
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	68 ee       	ldi	r22, 0xE8	; 232
    12f6:	73 e0       	ldi	r23, 0x03	; 3
    12f8:	74 d3       	rcall	.+1768   	; 0x19e2 <__udivmodhi4>
    12fa:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <voltleft+0x1>
    12fe:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <voltleft>
			voltright = voltagereading % 1000;
    1302:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
    1306:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			
			uint32_t freqfull = (backemffreq * 16)/1000; //total frequency = f(T/4) / 4
    130a:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <backemffreq>
    130e:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <backemffreq+0x1>
    1312:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <backemffreq+0x2>
    1316:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <backemffreq+0x3>
    131a:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <backemffreq+0x4>
    131e:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <backemffreq+0x5>
    1322:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <backemffreq+0x6>
    1326:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <backemffreq+0x7>
    132a:	04 e0       	ldi	r16, 0x04	; 4
    132c:	43 d4       	rcall	.+2182   	; 0x1bb4 <__ashldi3>
    132e:	e8 ee       	ldi	r30, 0xE8	; 232
    1330:	ae 2e       	mov	r10, r30
    1332:	f3 e0       	ldi	r31, 0x03	; 3
    1334:	bf 2e       	mov	r11, r31
    1336:	c1 2c       	mov	r12, r1
    1338:	d1 2c       	mov	r13, r1
    133a:	e1 2c       	mov	r14, r1
    133c:	f1 2c       	mov	r15, r1
    133e:	00 e0       	ldi	r16, 0x00	; 0
    1340:	10 e0       	ldi	r17, 0x00	; 0
    1342:	ee d3       	rcall	.+2012   	; 0x1b20 <__udivdi3>
    1344:	69 01       	movw	r12, r18
    1346:	7a 01       	movw	r14, r20
			freqfull = freqfull/4;
			freqleft = freqfull/1000;
    1348:	c7 01       	movw	r24, r14
    134a:	b6 01       	movw	r22, r12
    134c:	20 ea       	ldi	r18, 0xA0	; 160
    134e:	3f e0       	ldi	r19, 0x0F	; 15
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	5a d3       	rcall	.+1716   	; 0x1a0a <__udivmodsi4>
    1356:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <freqleft+0x1>
    135a:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <freqleft>
			freqright = freqfull % 1000;
    135e:	c7 01       	movw	r24, r14
    1360:	b6 01       	movw	r22, r12
    1362:	a2 e0       	ldi	r26, 0x02	; 2
    1364:	96 95       	lsr	r25
    1366:	87 95       	ror	r24
    1368:	77 95       	ror	r23
    136a:	67 95       	ror	r22
    136c:	aa 95       	dec	r26
    136e:	d1 f7       	brne	.-12     	; 0x1364 <main+0xcec>
    1370:	28 ee       	ldi	r18, 0xE8	; 232
    1372:	33 e0       	ldi	r19, 0x03	; 3
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	48 d3       	rcall	.+1680   	; 0x1a0a <__udivmodsi4>
    137a:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <freqright+0x1>
    137e:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <freqright>
			
			powerleft = powervalue / 1000;
    1382:	b0 e4       	ldi	r27, 0x40	; 64
    1384:	ab 2e       	mov	r10, r27
    1386:	82 e4       	ldi	r24, 0x42	; 66
    1388:	b8 2e       	mov	r11, r24
    138a:	9f e0       	ldi	r25, 0x0F	; 15
    138c:	c9 2e       	mov	r12, r25
    138e:	d1 2c       	mov	r13, r1
    1390:	e1 2c       	mov	r14, r1
    1392:	f1 2c       	mov	r15, r1
    1394:	92 01       	movw	r18, r4
    1396:	49 81       	ldd	r20, Y+1	; 0x01
    1398:	5a 81       	ldd	r21, Y+2	; 0x02
    139a:	6b 81       	ldd	r22, Y+3	; 0x03
    139c:	7c 81       	ldd	r23, Y+4	; 0x04
    139e:	89 85       	ldd	r24, Y+9	; 0x09
    13a0:	9f 81       	ldd	r25, Y+7	; 0x07
    13a2:	be d3       	rcall	.+1916   	; 0x1b20 <__udivdi3>
    13a4:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <powerleft>
    13a8:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <powerleft+0x1>
			powerright = powervalue % 1000;
    13ac:	28 ee       	ldi	r18, 0xE8	; 232
    13ae:	a2 2e       	mov	r10, r18
    13b0:	33 e0       	ldi	r19, 0x03	; 3
    13b2:	b3 2e       	mov	r11, r19
    13b4:	c1 2c       	mov	r12, r1
    13b6:	92 01       	movw	r18, r4
    13b8:	49 81       	ldd	r20, Y+1	; 0x01
    13ba:	5a 81       	ldd	r21, Y+2	; 0x02
    13bc:	6b 81       	ldd	r22, Y+3	; 0x03
    13be:	7c 81       	ldd	r23, Y+4	; 0x04
    13c0:	89 85       	ldd	r24, Y+9	; 0x09
    13c2:	9f 81       	ldd	r25, Y+7	; 0x07
    13c4:	ad d3       	rcall	.+1882   	; 0x1b20 <__udivdi3>
    13c6:	aa d3       	rcall	.+1876   	; 0x1b1c <__umoddi3>
    13c8:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <powerright>
    13cc:	30 93 6b 00 	sts	0x006B, r19	; 0x80006b <powerright+0x1>
			
			//reset ADC indices
			current_i = 0;
    13d0:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <current_i+0x1>
    13d4:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <current_i>
			currentreadingindex = 0;
    13d8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <currentreadingindex+0x1>
    13dc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <currentreadingindex>
			//we have read the adc
			adcdone = 1;
    13e0:	90 92 06 01 	sts	0x0106, r9	; 0x800106 <adcdone+0x1>
    13e4:	80 92 05 01 	sts	0x0105, r8	; 0x800105 <adcdone>
			currentvalue = 0;
    13e8:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <currentvalue>
    13ec:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <currentvalue+0x1>
    13f0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <currentvalue+0x2>
    13f4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <currentvalue+0x3>
    13f8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <currentvalue+0x4>
    13fc:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <currentvalue+0x5>
    1400:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <currentvalue+0x6>
    1404:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <currentvalue+0x7>
			powervalue = 0;
    1408:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end>
    140c:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__data_end+0x1>
    1410:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end+0x2>
    1414:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__data_end+0x3>
    1418:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__data_end+0x4>
    141c:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__data_end+0x5>
    1420:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__data_end+0x6>
    1424:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__data_end+0x7>
			//voltagereading = 0;
		}
		
		//clear error logic
		if (clear_errors){
    1428:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <clear_errors>
    142c:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <clear_errors+0x1>
    1430:	89 2b       	or	r24, r25
    1432:	81 f0       	breq	.+32     	; 0x1454 <main+0xddc>
			error = 0;
    1434:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <error+0x1>
    1438:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <error>
			stalled = 0;
    143c:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <stalled+0x1>
    1440:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <stalled>
			collision = 0;
    1444:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <collision+0x1>
    1448:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <collision>
			clear_errors = 0;
    144c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <clear_errors+0x1>
    1450:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <clear_errors>
		}
		
		//error detection here
		if (current != 9500){//if we have actually read a current value
    1454:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <current>
    1458:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <current+0x1>
    145c:	2c 31       	cpi	r18, 0x1C	; 28
    145e:	05 e2       	ldi	r16, 0x25	; 37
    1460:	30 07       	cpc	r19, r16
    1462:	71 f1       	breq	.+92     	; 0x14c0 <main+0xe48>
			if (error){
    1464:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <error>
    1468:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <error+0x1>
    146c:	89 2b       	or	r24, r25
    146e:	41 f1       	breq	.+80     	; 0x14c0 <main+0xe48>
				if (adcdone){
    1470:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <adcdone>
    1474:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <adcdone+0x1>
    1478:	89 2b       	or	r24, r25
    147a:	11 f1       	breq	.+68     	; 0x14c0 <main+0xe48>
					if ((((uint32_t)current*1000)/OCR2) > ((uint32_t)((3*OCR2) + 4600))){//check to see if we are within the statistically allowed range of Irms for our duty cycle value
    147c:	43 b5       	in	r20, 0x23	; 35
    147e:	13 b5       	in	r17, 0x23	; 35
    1480:	19 83       	std	Y+1, r17	; 0x01
    1482:	a8 ee       	ldi	r26, 0xE8	; 232
    1484:	b3 e0       	ldi	r27, 0x03	; 3
    1486:	e3 d2       	rcall	.+1478   	; 0x1a4e <__umulhisi3>
    1488:	24 2f       	mov	r18, r20
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	bc d2       	rcall	.+1400   	; 0x1a0a <__udivmodsi4>
    1492:	83 e0       	ldi	r24, 0x03	; 3
    1494:	18 9f       	mul	r17, r24
    1496:	b0 01       	movw	r22, r0
    1498:	11 24       	eor	r1, r1
    149a:	68 50       	subi	r22, 0x08	; 8
    149c:	7e 4e       	sbci	r23, 0xEE	; 238
    149e:	cb 01       	movw	r24, r22
    14a0:	77 0f       	add	r23, r23
    14a2:	aa 0b       	sbc	r26, r26
    14a4:	bb 0b       	sbc	r27, r27
    14a6:	82 17       	cp	r24, r18
    14a8:	93 07       	cpc	r25, r19
    14aa:	a4 07       	cpc	r26, r20
    14ac:	b5 07       	cpc	r27, r21
    14ae:	40 f4       	brcc	.+16     	; 0x14c0 <main+0xe48>
						stalled = 1;
    14b0:	90 92 99 00 	sts	0x0099, r9	; 0x800099 <stalled+0x1>
    14b4:	80 92 98 00 	sts	0x0098, r8	; 0x800098 <stalled>
						transmit_data = 1;
    14b8:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <transmit_data+0x1>
    14bc:	80 92 b2 00 	sts	0x00B2, r8	; 0x8000b2 <transmit_data>
					}*/
				}
			}
		}
		
		if (shortcircuit){
    14c0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <shortcircuit>
    14c4:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <shortcircuit+0x1>
    14c8:	89 2b       	or	r24, r25
    14ca:	09 f4       	brne	.+2      	; 0x14ce <main+0xe56>
    14cc:	75 c9       	rjmp	.-3350   	; 0x7b8 <main+0x140>
			cli(); //disable global interrupts
    14ce:	f8 94       	cli
			//this will also disable the receiver, which will not work while we have a short-circuit condition to prevent damage to external circuitry
			//turn off PWM timer
			TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
    14d0:	85 b5       	in	r24, 0x25	; 37
    14d2:	88 7f       	andi	r24, 0xF8	; 248
    14d4:	85 bd       	out	0x25, r24	; 37
			//turn off timer1
			TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
    14d6:	8e b5       	in	r24, 0x2e	; 46
    14d8:	88 7f       	andi	r24, 0xF8	; 248
    14da:	8e bd       	out	0x2e, r24	; 46
			//turn off timer0 (back emf measurement timer)
			TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
    14dc:	83 b7       	in	r24, 0x33	; 51
    14de:	88 7f       	andi	r24, 0xF8	; 248
    14e0:	83 bf       	out	0x33, r24	; 51
			//reset all timer counts
			TCNT0 = 0;
    14e2:	12 be       	out	0x32, r1	; 50
			TCNT1 = 0;
    14e4:	1d bc       	out	0x2d, r1	; 45
    14e6:	1c bc       	out	0x2c, r1	; 44
			TCNT2 = 0;
    14e8:	14 bc       	out	0x24, r1	; 36
			//turn off PMOSes, turn on NMOSes so motor is disconnected
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
    14ea:	c2 98       	cbi	0x18, 2	; 24
			//turn on left NMOS
			PORTB |= (1<<PB1);
    14ec:	c1 9a       	sbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
    14ee:	97 98       	cbi	0x12, 7	; 18
			//turn on right NMOS
			PORTB |= (1<<PB0);
    14f0:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14f2:	7f ef       	ldi	r23, 0xFF	; 255
    14f4:	83 e2       	ldi	r24, 0x23	; 35
    14f6:	94 ef       	ldi	r25, 0xF4	; 244
    14f8:	71 50       	subi	r23, 0x01	; 1
    14fa:	80 40       	sbci	r24, 0x00	; 0
    14fc:	90 40       	sbci	r25, 0x00	; 0
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <main+0xe80>
    1500:	00 c0       	rjmp	.+0      	; 0x1502 <main+0xe8a>
    1502:	00 00       	nop
			
			//busy-wait 5 seconds, turn on one MOSFET pair, and check adc
			_delay_ms(5000);
			//left to right current
			//turn on left PMOS
			PORTB |= (1<<PB2);
    1504:	c2 9a       	sbi	0x18, 2	; 24
			//turn off left NMOS
			PORTB |= (1<<PB1);
    1506:	c1 9a       	sbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
    1508:	97 98       	cbi	0x12, 7	; 18
			//turn on right NMOS
			PORTB &= ~(1<<PB0);
    150a:	c0 98       	cbi	0x18, 0	; 24
			
			reading = adc_convert(adc_read(ISHIFTEDCHANNEL));
    150c:	82 e0       	ldi	r24, 0x02	; 2
    150e:	ae d5       	rcall	.+2908   	; 0x206c <__TEXT_REGION_LENGTH__+0x6c>
    1510:	b9 d5       	rcall	.+2930   	; 0x2084 <__TEXT_REGION_LENGTH__+0x84>
    1512:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <reading+0x1>
    1516:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <reading>
			if (reading < 3000){
    151a:	68 3b       	cpi	r22, 0xB8	; 184
    151c:	7b 40       	sbci	r23, 0x0B	; 11
    151e:	60 f4       	brcc	.+24     	; 0x1538 <main+0xec0>
				//short circuit no longer exists, reset status
				shortcircuit = 0;
    1520:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <shortcircuit+0x1>
    1524:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <shortcircuit>
				//turn on main timer and set prescaler to /256
				TCCR1B |= (1<<CS12);
    1528:	8e b5       	in	r24, 0x2e	; 46
    152a:	84 60       	ori	r24, 0x04	; 4
    152c:	8e bd       	out	0x2e, r24	; 46
				TCCR1B &= ~((1<<CS11) | (1<<CS10));
    152e:	8e b5       	in	r24, 0x2e	; 46
    1530:	8c 7f       	andi	r24, 0xFC	; 252
    1532:	8e bd       	out	0x2e, r24	; 46
				sei();//reenable global interrupts so timers and UART can begin working again
    1534:	78 94       	sei
    1536:	3d c9       	rjmp	.-3462   	; 0x7b2 <main+0x13a>
			}
			else{
				//short circuit has not been resolved, disconnect the motor again
				//turn off PMOSes, turn on NMOSes
				//turn off left PMOS
				PORTB &= ~(1<<PB2);
    1538:	c2 98       	cbi	0x18, 2	; 24
				//turn on left NMOS
				PORTB |= (1<<PB1);
    153a:	c1 9a       	sbi	0x18, 1	; 24
				//turn off right PMOS
				PORTD &= ~(1<<PD7);
    153c:	97 98       	cbi	0x12, 7	; 18
				//turn on right NMOS
				PORTB |= (1<<PB0);
    153e:	c0 9a       	sbi	0x18, 0	; 24
    1540:	38 c9       	rjmp	.-3472   	; 0x7b2 <main+0x13a>
				if (i == 86){
					//freq left value
					uart_transmit((freqleft/10) + 48);
					uart_transmit((freqleft%10) + 48);
				}
				if (i == 87){
    1542:	0d 81       	ldd	r16, Y+5	; 0x05
    1544:	1e 81       	ldd	r17, Y+6	; 0x06
    1546:	07 35       	cpi	r16, 0x57	; 87
    1548:	11 05       	cpc	r17, r1
    154a:	09 f0       	breq	.+2      	; 0x154e <main+0xed6>
    154c:	eb c9       	rjmp	.-3114   	; 0x924 <main+0x2ac>
					//freq right value
					uart_transmit((freqright/1000) + 48);//1st DP
    154e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <freqright>
    1552:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <freqright+0x1>
    1556:	68 ee       	ldi	r22, 0xE8	; 232
    1558:	73 e0       	ldi	r23, 0x03	; 3
    155a:	43 d2       	rcall	.+1158   	; 0x19e2 <__udivmodhi4>
    155c:	80 e3       	ldi	r24, 0x30	; 48
    155e:	86 0f       	add	r24, r22
    1560:	22 d0       	rcall	.+68     	; 0x15a6 <uart_transmit>
					uart_transmit(((freqright/100) % 10) + 48);//2nd DP
    1562:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <freqright>
    1566:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <freqright+0x1>
    156a:	64 e6       	ldi	r22, 0x64	; 100
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	39 d2       	rcall	.+1138   	; 0x19e2 <__udivmodhi4>
    1570:	cb 01       	movw	r24, r22
    1572:	b3 01       	movw	r22, r6
    1574:	36 d2       	rcall	.+1132   	; 0x19e2 <__udivmodhi4>
    1576:	80 5d       	subi	r24, 0xD0	; 208
    1578:	16 d0       	rcall	.+44     	; 0x15a6 <uart_transmit>
					uart_transmit((freqright % 10) + 48);//3nd DP
    157a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <freqright>
    157e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <freqright+0x1>
    1582:	2c ca       	rjmp	.-2984   	; 0x9dc <main+0x364>

00001584 <uart_init>:
 */ 

#include "uart.h"

void uart_init(){
	UCSRB |= ((1<<TXEN)|(1<<RXEN)); //set transmit and receive bit
    1584:	8a b1       	in	r24, 0x0a	; 10
    1586:	88 61       	ori	r24, 0x18	; 24
    1588:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1<<RXCIE);
    158a:	57 9a       	sbi	0x0a, 7	; 10
	UBRRH = (ubrrvalue >> 8); //load baud rate register with calculated value
    158c:	10 bc       	out	0x20, r1	; 32
	UBRRL = ubrrvalue;
    158e:	87 e6       	ldi	r24, 0x67	; 103
    1590:	89 b9       	out	0x09, r24	; 9
	UCSRC |= ((1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0)); //set 8 bit character size
    1592:	80 b5       	in	r24, 0x20	; 32
    1594:	86 68       	ori	r24, 0x86	; 134
    1596:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1<<UMSEL); //Set Asynchronous operation
    1598:	80 b5       	in	r24, 0x20	; 32
    159a:	8f 7b       	andi	r24, 0xBF	; 191
    159c:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1<<UCSZ2); //set 8 bit character size
    159e:	80 b5       	in	r24, 0x20	; 32
    15a0:	8b 7f       	andi	r24, 0xFB	; 251
    15a2:	80 bd       	out	0x20, r24	; 32
    15a4:	08 95       	ret

000015a6 <uart_transmit>:
		stringtransmit++;
	}
}

void uart_transmit(uint8_t data){
	while (UDREMPTY == 0){ //wait for buffer to empty
    15a6:	5d 9b       	sbis	0x0b, 5	; 11
    15a8:	fe cf       	rjmp	.-4      	; 0x15a6 <uart_transmit>
	}
	UDR = data; //load data register with data byte
    15aa:	8c b9       	out	0x0c, r24	; 12
    15ac:	08 95       	ret

000015ae <__fixsfdi>:
    15ae:	be e3       	ldi	r27, 0x3E	; 62
    15b0:	04 d0       	rcall	.+8      	; 0x15ba <__fixunssfdi+0x2>
    15b2:	08 f4       	brcc	.+2      	; 0x15b6 <__fixsfdi+0x8>
    15b4:	90 e8       	ldi	r25, 0x80	; 128
    15b6:	08 95       	ret

000015b8 <__fixunssfdi>:
    15b8:	bf e3       	ldi	r27, 0x3F	; 63
    15ba:	22 27       	eor	r18, r18
    15bc:	33 27       	eor	r19, r19
    15be:	a9 01       	movw	r20, r18
    15c0:	ef d0       	rcall	.+478    	; 0x17a0 <__fp_splitA>
    15c2:	58 f1       	brcs	.+86     	; 0x161a <__fixunssfdi+0x62>
    15c4:	9f 57       	subi	r25, 0x7F	; 127
    15c6:	40 f1       	brcs	.+80     	; 0x1618 <__fixunssfdi+0x60>
    15c8:	b9 17       	cp	r27, r25
    15ca:	38 f1       	brcs	.+78     	; 0x161a <__fixunssfdi+0x62>
    15cc:	bf e3       	ldi	r27, 0x3F	; 63
    15ce:	b9 1b       	sub	r27, r25
    15d0:	99 27       	eor	r25, r25
    15d2:	b8 50       	subi	r27, 0x08	; 8
    15d4:	3a f4       	brpl	.+14     	; 0x15e4 <__fixunssfdi+0x2c>
    15d6:	66 0f       	add	r22, r22
    15d8:	77 1f       	adc	r23, r23
    15da:	88 1f       	adc	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	b3 95       	inc	r27
    15e0:	d2 f3       	brmi	.-12     	; 0x15d6 <__fixunssfdi+0x1e>
    15e2:	16 c0       	rjmp	.+44     	; 0x1610 <__fixunssfdi+0x58>
    15e4:	b8 50       	subi	r27, 0x08	; 8
    15e6:	4a f0       	brmi	.+18     	; 0x15fa <__fixunssfdi+0x42>
    15e8:	23 2f       	mov	r18, r19
    15ea:	34 2f       	mov	r19, r20
    15ec:	45 2f       	mov	r20, r21
    15ee:	56 2f       	mov	r21, r22
    15f0:	67 2f       	mov	r22, r23
    15f2:	78 2f       	mov	r23, r24
    15f4:	88 27       	eor	r24, r24
    15f6:	b8 50       	subi	r27, 0x08	; 8
    15f8:	ba f7       	brpl	.-18     	; 0x15e8 <__fixunssfdi+0x30>
    15fa:	b8 5f       	subi	r27, 0xF8	; 248
    15fc:	49 f0       	breq	.+18     	; 0x1610 <__fixunssfdi+0x58>
    15fe:	86 95       	lsr	r24
    1600:	77 95       	ror	r23
    1602:	67 95       	ror	r22
    1604:	57 95       	ror	r21
    1606:	47 95       	ror	r20
    1608:	37 95       	ror	r19
    160a:	27 95       	ror	r18
    160c:	ba 95       	dec	r27
    160e:	b9 f7       	brne	.-18     	; 0x15fe <__fixunssfdi+0x46>
    1610:	0e f4       	brtc	.+2      	; 0x1614 <__fixunssfdi+0x5c>
    1612:	ae d0       	rcall	.+348    	; 0x1770 <__fp_negdi>
    1614:	88 94       	clc
    1616:	08 95       	ret
    1618:	88 94       	clc
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	cb 01       	movw	r24, r22
    1620:	08 95       	ret

00001622 <__fixunssfsi>:
    1622:	be d0       	rcall	.+380    	; 0x17a0 <__fp_splitA>
    1624:	88 f0       	brcs	.+34     	; 0x1648 <__fixunssfsi+0x26>
    1626:	9f 57       	subi	r25, 0x7F	; 127
    1628:	90 f0       	brcs	.+36     	; 0x164e <__fixunssfsi+0x2c>
    162a:	b9 2f       	mov	r27, r25
    162c:	99 27       	eor	r25, r25
    162e:	b7 51       	subi	r27, 0x17	; 23
    1630:	a0 f0       	brcs	.+40     	; 0x165a <__fixunssfsi+0x38>
    1632:	d1 f0       	breq	.+52     	; 0x1668 <__fixunssfsi+0x46>
    1634:	66 0f       	add	r22, r22
    1636:	77 1f       	adc	r23, r23
    1638:	88 1f       	adc	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	1a f0       	brmi	.+6      	; 0x1644 <__fixunssfsi+0x22>
    163e:	ba 95       	dec	r27
    1640:	c9 f7       	brne	.-14     	; 0x1634 <__fixunssfsi+0x12>
    1642:	12 c0       	rjmp	.+36     	; 0x1668 <__fixunssfsi+0x46>
    1644:	b1 30       	cpi	r27, 0x01	; 1
    1646:	81 f0       	breq	.+32     	; 0x1668 <__fixunssfsi+0x46>
    1648:	c5 d0       	rcall	.+394    	; 0x17d4 <__fp_zero>
    164a:	b1 e0       	ldi	r27, 0x01	; 1
    164c:	08 95       	ret
    164e:	c2 c0       	rjmp	.+388    	; 0x17d4 <__fp_zero>
    1650:	67 2f       	mov	r22, r23
    1652:	78 2f       	mov	r23, r24
    1654:	88 27       	eor	r24, r24
    1656:	b8 5f       	subi	r27, 0xF8	; 248
    1658:	39 f0       	breq	.+14     	; 0x1668 <__fixunssfsi+0x46>
    165a:	b9 3f       	cpi	r27, 0xF9	; 249
    165c:	cc f3       	brlt	.-14     	; 0x1650 <__fixunssfsi+0x2e>
    165e:	86 95       	lsr	r24
    1660:	77 95       	ror	r23
    1662:	67 95       	ror	r22
    1664:	b3 95       	inc	r27
    1666:	d9 f7       	brne	.-10     	; 0x165e <__fixunssfsi+0x3c>
    1668:	3e f4       	brtc	.+14     	; 0x1678 <__fixunssfsi+0x56>
    166a:	90 95       	com	r25
    166c:	80 95       	com	r24
    166e:	70 95       	com	r23
    1670:	61 95       	neg	r22
    1672:	7f 4f       	sbci	r23, 0xFF	; 255
    1674:	8f 4f       	sbci	r24, 0xFF	; 255
    1676:	9f 4f       	sbci	r25, 0xFF	; 255
    1678:	08 95       	ret

0000167a <__floatunsisf>:
    167a:	e8 94       	clt
    167c:	09 c0       	rjmp	.+18     	; 0x1690 <__floatsisf+0x12>

0000167e <__floatsisf>:
    167e:	97 fb       	bst	r25, 7
    1680:	3e f4       	brtc	.+14     	; 0x1690 <__floatsisf+0x12>
    1682:	90 95       	com	r25
    1684:	80 95       	com	r24
    1686:	70 95       	com	r23
    1688:	61 95       	neg	r22
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	8f 4f       	sbci	r24, 0xFF	; 255
    168e:	9f 4f       	sbci	r25, 0xFF	; 255
    1690:	99 23       	and	r25, r25
    1692:	a9 f0       	breq	.+42     	; 0x16be <__floatsisf+0x40>
    1694:	f9 2f       	mov	r31, r25
    1696:	96 e9       	ldi	r25, 0x96	; 150
    1698:	bb 27       	eor	r27, r27
    169a:	93 95       	inc	r25
    169c:	f6 95       	lsr	r31
    169e:	87 95       	ror	r24
    16a0:	77 95       	ror	r23
    16a2:	67 95       	ror	r22
    16a4:	b7 95       	ror	r27
    16a6:	f1 11       	cpse	r31, r1
    16a8:	f8 cf       	rjmp	.-16     	; 0x169a <__floatsisf+0x1c>
    16aa:	fa f4       	brpl	.+62     	; 0x16ea <__floatsisf+0x6c>
    16ac:	bb 0f       	add	r27, r27
    16ae:	11 f4       	brne	.+4      	; 0x16b4 <__floatsisf+0x36>
    16b0:	60 ff       	sbrs	r22, 0
    16b2:	1b c0       	rjmp	.+54     	; 0x16ea <__floatsisf+0x6c>
    16b4:	6f 5f       	subi	r22, 0xFF	; 255
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	16 c0       	rjmp	.+44     	; 0x16ea <__floatsisf+0x6c>
    16be:	88 23       	and	r24, r24
    16c0:	11 f0       	breq	.+4      	; 0x16c6 <__floatsisf+0x48>
    16c2:	96 e9       	ldi	r25, 0x96	; 150
    16c4:	11 c0       	rjmp	.+34     	; 0x16e8 <__floatsisf+0x6a>
    16c6:	77 23       	and	r23, r23
    16c8:	21 f0       	breq	.+8      	; 0x16d2 <__floatsisf+0x54>
    16ca:	9e e8       	ldi	r25, 0x8E	; 142
    16cc:	87 2f       	mov	r24, r23
    16ce:	76 2f       	mov	r23, r22
    16d0:	05 c0       	rjmp	.+10     	; 0x16dc <__floatsisf+0x5e>
    16d2:	66 23       	and	r22, r22
    16d4:	71 f0       	breq	.+28     	; 0x16f2 <__floatsisf+0x74>
    16d6:	96 e8       	ldi	r25, 0x86	; 134
    16d8:	86 2f       	mov	r24, r22
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	2a f0       	brmi	.+10     	; 0x16ea <__floatsisf+0x6c>
    16e0:	9a 95       	dec	r25
    16e2:	66 0f       	add	r22, r22
    16e4:	77 1f       	adc	r23, r23
    16e6:	88 1f       	adc	r24, r24
    16e8:	da f7       	brpl	.-10     	; 0x16e0 <__floatsisf+0x62>
    16ea:	88 0f       	add	r24, r24
    16ec:	96 95       	lsr	r25
    16ee:	87 95       	ror	r24
    16f0:	97 f9       	bld	r25, 7
    16f2:	08 95       	ret

000016f4 <__floatundisf>:
    16f4:	e8 94       	clt

000016f6 <__fp_di2sf>:
    16f6:	f9 2f       	mov	r31, r25
    16f8:	96 eb       	ldi	r25, 0xB6	; 182
    16fa:	ff 23       	and	r31, r31
    16fc:	81 f0       	breq	.+32     	; 0x171e <__fp_di2sf+0x28>
    16fe:	12 16       	cp	r1, r18
    1700:	13 06       	cpc	r1, r19
    1702:	14 06       	cpc	r1, r20
    1704:	44 0b       	sbc	r20, r20
    1706:	93 95       	inc	r25
    1708:	f6 95       	lsr	r31
    170a:	87 95       	ror	r24
    170c:	77 95       	ror	r23
    170e:	67 95       	ror	r22
    1710:	57 95       	ror	r21
    1712:	40 40       	sbci	r20, 0x00	; 0
    1714:	ff 23       	and	r31, r31
    1716:	b9 f7       	brne	.-18     	; 0x1706 <__fp_di2sf+0x10>
    1718:	1b c0       	rjmp	.+54     	; 0x1750 <__fp_di2sf+0x5a>
    171a:	99 27       	eor	r25, r25
    171c:	08 95       	ret
    171e:	88 23       	and	r24, r24
    1720:	51 f4       	brne	.+20     	; 0x1736 <__fp_di2sf+0x40>
    1722:	98 50       	subi	r25, 0x08	; 8
    1724:	d2 f7       	brpl	.-12     	; 0x171a <__fp_di2sf+0x24>
    1726:	87 2b       	or	r24, r23
    1728:	76 2f       	mov	r23, r22
    172a:	65 2f       	mov	r22, r21
    172c:	54 2f       	mov	r21, r20
    172e:	43 2f       	mov	r20, r19
    1730:	32 2f       	mov	r19, r18
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	b1 f3       	breq	.-20     	; 0x1722 <__fp_di2sf+0x2c>
    1736:	12 16       	cp	r1, r18
    1738:	13 06       	cpc	r1, r19
    173a:	14 06       	cpc	r1, r20
    173c:	44 0b       	sbc	r20, r20
    173e:	88 23       	and	r24, r24
    1740:	3a f0       	brmi	.+14     	; 0x1750 <__fp_di2sf+0x5a>
    1742:	9a 95       	dec	r25
    1744:	44 0f       	add	r20, r20
    1746:	55 1f       	adc	r21, r21
    1748:	66 1f       	adc	r22, r22
    174a:	77 1f       	adc	r23, r23
    174c:	88 1f       	adc	r24, r24
    174e:	ca f7       	brpl	.-14     	; 0x1742 <__fp_di2sf+0x4c>
    1750:	55 23       	and	r21, r21
    1752:	4a f4       	brpl	.+18     	; 0x1766 <__fp_di2sf+0x70>
    1754:	44 0f       	add	r20, r20
    1756:	55 1f       	adc	r21, r21
    1758:	11 f4       	brne	.+4      	; 0x175e <__fp_di2sf+0x68>
    175a:	60 ff       	sbrs	r22, 0
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <__fp_di2sf+0x70>
    175e:	6f 5f       	subi	r22, 0xFF	; 255
    1760:	7f 4f       	sbci	r23, 0xFF	; 255
    1762:	8f 4f       	sbci	r24, 0xFF	; 255
    1764:	9f 4f       	sbci	r25, 0xFF	; 255
    1766:	88 0f       	add	r24, r24
    1768:	96 95       	lsr	r25
    176a:	87 95       	ror	r24
    176c:	97 f9       	bld	r25, 7
    176e:	08 95       	ret

00001770 <__fp_negdi>:
    1770:	90 95       	com	r25
    1772:	80 95       	com	r24
    1774:	70 95       	com	r23
    1776:	60 95       	com	r22
    1778:	50 95       	com	r21
    177a:	40 95       	com	r20
    177c:	30 95       	com	r19
    177e:	21 95       	neg	r18
    1780:	3f 4f       	sbci	r19, 0xFF	; 255
    1782:	4f 4f       	sbci	r20, 0xFF	; 255
    1784:	5f 4f       	sbci	r21, 0xFF	; 255
    1786:	6f 4f       	sbci	r22, 0xFF	; 255
    1788:	7f 4f       	sbci	r23, 0xFF	; 255
    178a:	8f 4f       	sbci	r24, 0xFF	; 255
    178c:	9f 4f       	sbci	r25, 0xFF	; 255
    178e:	08 95       	ret

00001790 <__fp_split3>:
    1790:	57 fd       	sbrc	r21, 7
    1792:	90 58       	subi	r25, 0x80	; 128
    1794:	44 0f       	add	r20, r20
    1796:	55 1f       	adc	r21, r21
    1798:	59 f0       	breq	.+22     	; 0x17b0 <__fp_splitA+0x10>
    179a:	5f 3f       	cpi	r21, 0xFF	; 255
    179c:	71 f0       	breq	.+28     	; 0x17ba <__fp_splitA+0x1a>
    179e:	47 95       	ror	r20

000017a0 <__fp_splitA>:
    17a0:	88 0f       	add	r24, r24
    17a2:	97 fb       	bst	r25, 7
    17a4:	99 1f       	adc	r25, r25
    17a6:	61 f0       	breq	.+24     	; 0x17c0 <__fp_splitA+0x20>
    17a8:	9f 3f       	cpi	r25, 0xFF	; 255
    17aa:	79 f0       	breq	.+30     	; 0x17ca <__fp_splitA+0x2a>
    17ac:	87 95       	ror	r24
    17ae:	08 95       	ret
    17b0:	12 16       	cp	r1, r18
    17b2:	13 06       	cpc	r1, r19
    17b4:	14 06       	cpc	r1, r20
    17b6:	55 1f       	adc	r21, r21
    17b8:	f2 cf       	rjmp	.-28     	; 0x179e <__fp_split3+0xe>
    17ba:	46 95       	lsr	r20
    17bc:	f1 df       	rcall	.-30     	; 0x17a0 <__fp_splitA>
    17be:	08 c0       	rjmp	.+16     	; 0x17d0 <__fp_splitA+0x30>
    17c0:	16 16       	cp	r1, r22
    17c2:	17 06       	cpc	r1, r23
    17c4:	18 06       	cpc	r1, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	f1 cf       	rjmp	.-30     	; 0x17ac <__fp_splitA+0xc>
    17ca:	86 95       	lsr	r24
    17cc:	71 05       	cpc	r23, r1
    17ce:	61 05       	cpc	r22, r1
    17d0:	08 94       	sec
    17d2:	08 95       	ret

000017d4 <__fp_zero>:
    17d4:	e8 94       	clt

000017d6 <__fp_szero>:
    17d6:	bb 27       	eor	r27, r27
    17d8:	66 27       	eor	r22, r22
    17da:	77 27       	eor	r23, r23
    17dc:	cb 01       	movw	r24, r22
    17de:	97 f9       	bld	r25, 7
    17e0:	08 95       	ret

000017e2 <__mulsf3>:
    17e2:	0b d0       	rcall	.+22     	; 0x17fa <__mulsf3x>
    17e4:	d2 c0       	rjmp	.+420    	; 0x198a <__fp_round>
    17e6:	c3 d0       	rcall	.+390    	; 0x196e <__fp_pscA>
    17e8:	28 f0       	brcs	.+10     	; 0x17f4 <__mulsf3+0x12>
    17ea:	c8 d0       	rcall	.+400    	; 0x197c <__fp_pscB>
    17ec:	18 f0       	brcs	.+6      	; 0x17f4 <__mulsf3+0x12>
    17ee:	95 23       	and	r25, r21
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <__mulsf3+0x12>
    17f2:	9f c0       	rjmp	.+318    	; 0x1932 <__fp_inf>
    17f4:	b2 c0       	rjmp	.+356    	; 0x195a <__fp_nan>
    17f6:	11 24       	eor	r1, r1
    17f8:	ee cf       	rjmp	.-36     	; 0x17d6 <__fp_szero>

000017fa <__mulsf3x>:
    17fa:	ca df       	rcall	.-108    	; 0x1790 <__fp_split3>
    17fc:	a0 f3       	brcs	.-24     	; 0x17e6 <__mulsf3+0x4>

000017fe <__mulsf3_pse>:
    17fe:	95 9f       	mul	r25, r21
    1800:	d1 f3       	breq	.-12     	; 0x17f6 <__mulsf3+0x14>
    1802:	95 0f       	add	r25, r21
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	55 1f       	adc	r21, r21
    1808:	62 9f       	mul	r22, r18
    180a:	f0 01       	movw	r30, r0
    180c:	72 9f       	mul	r23, r18
    180e:	bb 27       	eor	r27, r27
    1810:	f0 0d       	add	r31, r0
    1812:	b1 1d       	adc	r27, r1
    1814:	63 9f       	mul	r22, r19
    1816:	aa 27       	eor	r26, r26
    1818:	f0 0d       	add	r31, r0
    181a:	b1 1d       	adc	r27, r1
    181c:	aa 1f       	adc	r26, r26
    181e:	64 9f       	mul	r22, r20
    1820:	66 27       	eor	r22, r22
    1822:	b0 0d       	add	r27, r0
    1824:	a1 1d       	adc	r26, r1
    1826:	66 1f       	adc	r22, r22
    1828:	82 9f       	mul	r24, r18
    182a:	22 27       	eor	r18, r18
    182c:	b0 0d       	add	r27, r0
    182e:	a1 1d       	adc	r26, r1
    1830:	62 1f       	adc	r22, r18
    1832:	73 9f       	mul	r23, r19
    1834:	b0 0d       	add	r27, r0
    1836:	a1 1d       	adc	r26, r1
    1838:	62 1f       	adc	r22, r18
    183a:	83 9f       	mul	r24, r19
    183c:	a0 0d       	add	r26, r0
    183e:	61 1d       	adc	r22, r1
    1840:	22 1f       	adc	r18, r18
    1842:	74 9f       	mul	r23, r20
    1844:	33 27       	eor	r19, r19
    1846:	a0 0d       	add	r26, r0
    1848:	61 1d       	adc	r22, r1
    184a:	23 1f       	adc	r18, r19
    184c:	84 9f       	mul	r24, r20
    184e:	60 0d       	add	r22, r0
    1850:	21 1d       	adc	r18, r1
    1852:	82 2f       	mov	r24, r18
    1854:	76 2f       	mov	r23, r22
    1856:	6a 2f       	mov	r22, r26
    1858:	11 24       	eor	r1, r1
    185a:	9f 57       	subi	r25, 0x7F	; 127
    185c:	50 40       	sbci	r21, 0x00	; 0
    185e:	8a f0       	brmi	.+34     	; 0x1882 <__mulsf3_pse+0x84>
    1860:	e1 f0       	breq	.+56     	; 0x189a <__mulsf3_pse+0x9c>
    1862:	88 23       	and	r24, r24
    1864:	4a f0       	brmi	.+18     	; 0x1878 <__mulsf3_pse+0x7a>
    1866:	ee 0f       	add	r30, r30
    1868:	ff 1f       	adc	r31, r31
    186a:	bb 1f       	adc	r27, r27
    186c:	66 1f       	adc	r22, r22
    186e:	77 1f       	adc	r23, r23
    1870:	88 1f       	adc	r24, r24
    1872:	91 50       	subi	r25, 0x01	; 1
    1874:	50 40       	sbci	r21, 0x00	; 0
    1876:	a9 f7       	brne	.-22     	; 0x1862 <__mulsf3_pse+0x64>
    1878:	9e 3f       	cpi	r25, 0xFE	; 254
    187a:	51 05       	cpc	r21, r1
    187c:	70 f0       	brcs	.+28     	; 0x189a <__mulsf3_pse+0x9c>
    187e:	59 c0       	rjmp	.+178    	; 0x1932 <__fp_inf>
    1880:	aa cf       	rjmp	.-172    	; 0x17d6 <__fp_szero>
    1882:	5f 3f       	cpi	r21, 0xFF	; 255
    1884:	ec f3       	brlt	.-6      	; 0x1880 <__mulsf3_pse+0x82>
    1886:	98 3e       	cpi	r25, 0xE8	; 232
    1888:	dc f3       	brlt	.-10     	; 0x1880 <__mulsf3_pse+0x82>
    188a:	86 95       	lsr	r24
    188c:	77 95       	ror	r23
    188e:	67 95       	ror	r22
    1890:	b7 95       	ror	r27
    1892:	f7 95       	ror	r31
    1894:	e7 95       	ror	r30
    1896:	9f 5f       	subi	r25, 0xFF	; 255
    1898:	c1 f7       	brne	.-16     	; 0x188a <__mulsf3_pse+0x8c>
    189a:	fe 2b       	or	r31, r30
    189c:	88 0f       	add	r24, r24
    189e:	91 1d       	adc	r25, r1
    18a0:	96 95       	lsr	r25
    18a2:	87 95       	ror	r24
    18a4:	97 f9       	bld	r25, 7
    18a6:	08 95       	ret
    18a8:	11 f4       	brne	.+4      	; 0x18ae <__mulsf3_pse+0xb0>
    18aa:	0e f4       	brtc	.+2      	; 0x18ae <__mulsf3_pse+0xb0>
    18ac:	56 c0       	rjmp	.+172    	; 0x195a <__fp_nan>
    18ae:	47 c0       	rjmp	.+142    	; 0x193e <__fp_mpack>

000018b0 <sqrt>:
    18b0:	77 df       	rcall	.-274    	; 0x17a0 <__fp_splitA>
    18b2:	d0 f3       	brcs	.-12     	; 0x18a8 <__mulsf3_pse+0xaa>
    18b4:	99 23       	and	r25, r25
    18b6:	d9 f3       	breq	.-10     	; 0x18ae <__mulsf3_pse+0xb0>
    18b8:	ce f3       	brts	.-14     	; 0x18ac <__mulsf3_pse+0xae>
    18ba:	9f 57       	subi	r25, 0x7F	; 127
    18bc:	55 0b       	sbc	r21, r21
    18be:	87 ff       	sbrs	r24, 7
    18c0:	4f d0       	rcall	.+158    	; 0x1960 <__fp_norm2>
    18c2:	00 24       	eor	r0, r0
    18c4:	a0 e6       	ldi	r26, 0x60	; 96
    18c6:	40 ea       	ldi	r20, 0xA0	; 160
    18c8:	90 01       	movw	r18, r0
    18ca:	80 58       	subi	r24, 0x80	; 128
    18cc:	56 95       	lsr	r21
    18ce:	97 95       	ror	r25
    18d0:	28 f4       	brcc	.+10     	; 0x18dc <sqrt+0x2c>
    18d2:	80 5c       	subi	r24, 0xC0	; 192
    18d4:	66 0f       	add	r22, r22
    18d6:	77 1f       	adc	r23, r23
    18d8:	88 1f       	adc	r24, r24
    18da:	20 f0       	brcs	.+8      	; 0x18e4 <sqrt+0x34>
    18dc:	26 17       	cp	r18, r22
    18de:	37 07       	cpc	r19, r23
    18e0:	48 07       	cpc	r20, r24
    18e2:	30 f4       	brcc	.+12     	; 0x18f0 <sqrt+0x40>
    18e4:	62 1b       	sub	r22, r18
    18e6:	73 0b       	sbc	r23, r19
    18e8:	84 0b       	sbc	r24, r20
    18ea:	20 29       	or	r18, r0
    18ec:	31 29       	or	r19, r1
    18ee:	4a 2b       	or	r20, r26
    18f0:	a6 95       	lsr	r26
    18f2:	17 94       	ror	r1
    18f4:	07 94       	ror	r0
    18f6:	20 25       	eor	r18, r0
    18f8:	31 25       	eor	r19, r1
    18fa:	4a 27       	eor	r20, r26
    18fc:	58 f7       	brcc	.-42     	; 0x18d4 <sqrt+0x24>
    18fe:	66 0f       	add	r22, r22
    1900:	77 1f       	adc	r23, r23
    1902:	88 1f       	adc	r24, r24
    1904:	20 f0       	brcs	.+8      	; 0x190e <sqrt+0x5e>
    1906:	26 17       	cp	r18, r22
    1908:	37 07       	cpc	r19, r23
    190a:	48 07       	cpc	r20, r24
    190c:	30 f4       	brcc	.+12     	; 0x191a <sqrt+0x6a>
    190e:	62 0b       	sbc	r22, r18
    1910:	73 0b       	sbc	r23, r19
    1912:	84 0b       	sbc	r24, r20
    1914:	20 0d       	add	r18, r0
    1916:	31 1d       	adc	r19, r1
    1918:	41 1d       	adc	r20, r1
    191a:	a0 95       	com	r26
    191c:	81 f7       	brne	.-32     	; 0x18fe <sqrt+0x4e>
    191e:	b9 01       	movw	r22, r18
    1920:	84 2f       	mov	r24, r20
    1922:	91 58       	subi	r25, 0x81	; 129
    1924:	88 0f       	add	r24, r24
    1926:	96 95       	lsr	r25
    1928:	87 95       	ror	r24
    192a:	08 95       	ret

0000192c <square>:
    192c:	9b 01       	movw	r18, r22
    192e:	ac 01       	movw	r20, r24
    1930:	58 cf       	rjmp	.-336    	; 0x17e2 <__mulsf3>

00001932 <__fp_inf>:
    1932:	97 f9       	bld	r25, 7
    1934:	9f 67       	ori	r25, 0x7F	; 127
    1936:	80 e8       	ldi	r24, 0x80	; 128
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	08 95       	ret

0000193e <__fp_mpack>:
    193e:	9f 3f       	cpi	r25, 0xFF	; 255
    1940:	31 f0       	breq	.+12     	; 0x194e <__fp_mpack_finite+0xc>

00001942 <__fp_mpack_finite>:
    1942:	91 50       	subi	r25, 0x01	; 1
    1944:	20 f4       	brcc	.+8      	; 0x194e <__fp_mpack_finite+0xc>
    1946:	87 95       	ror	r24
    1948:	77 95       	ror	r23
    194a:	67 95       	ror	r22
    194c:	b7 95       	ror	r27
    194e:	88 0f       	add	r24, r24
    1950:	91 1d       	adc	r25, r1
    1952:	96 95       	lsr	r25
    1954:	87 95       	ror	r24
    1956:	97 f9       	bld	r25, 7
    1958:	08 95       	ret

0000195a <__fp_nan>:
    195a:	9f ef       	ldi	r25, 0xFF	; 255
    195c:	80 ec       	ldi	r24, 0xC0	; 192
    195e:	08 95       	ret

00001960 <__fp_norm2>:
    1960:	91 50       	subi	r25, 0x01	; 1
    1962:	50 40       	sbci	r21, 0x00	; 0
    1964:	66 0f       	add	r22, r22
    1966:	77 1f       	adc	r23, r23
    1968:	88 1f       	adc	r24, r24
    196a:	d2 f7       	brpl	.-12     	; 0x1960 <__fp_norm2>
    196c:	08 95       	ret

0000196e <__fp_pscA>:
    196e:	00 24       	eor	r0, r0
    1970:	0a 94       	dec	r0
    1972:	16 16       	cp	r1, r22
    1974:	17 06       	cpc	r1, r23
    1976:	18 06       	cpc	r1, r24
    1978:	09 06       	cpc	r0, r25
    197a:	08 95       	ret

0000197c <__fp_pscB>:
    197c:	00 24       	eor	r0, r0
    197e:	0a 94       	dec	r0
    1980:	12 16       	cp	r1, r18
    1982:	13 06       	cpc	r1, r19
    1984:	14 06       	cpc	r1, r20
    1986:	05 06       	cpc	r0, r21
    1988:	08 95       	ret

0000198a <__fp_round>:
    198a:	09 2e       	mov	r0, r25
    198c:	03 94       	inc	r0
    198e:	00 0c       	add	r0, r0
    1990:	11 f4       	brne	.+4      	; 0x1996 <__fp_round+0xc>
    1992:	88 23       	and	r24, r24
    1994:	52 f0       	brmi	.+20     	; 0x19aa <__fp_round+0x20>
    1996:	bb 0f       	add	r27, r27
    1998:	40 f4       	brcc	.+16     	; 0x19aa <__fp_round+0x20>
    199a:	bf 2b       	or	r27, r31
    199c:	11 f4       	brne	.+4      	; 0x19a2 <__fp_round+0x18>
    199e:	60 ff       	sbrs	r22, 0
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <__fp_round+0x20>
    19a2:	6f 5f       	subi	r22, 0xFF	; 255
    19a4:	7f 4f       	sbci	r23, 0xFF	; 255
    19a6:	8f 4f       	sbci	r24, 0xFF	; 255
    19a8:	9f 4f       	sbci	r25, 0xFF	; 255
    19aa:	08 95       	ret

000019ac <__mulsi3>:
    19ac:	db 01       	movw	r26, r22
    19ae:	8f 93       	push	r24
    19b0:	9f 93       	push	r25
    19b2:	59 d0       	rcall	.+178    	; 0x1a66 <__muluhisi3>
    19b4:	bf 91       	pop	r27
    19b6:	af 91       	pop	r26
    19b8:	a2 9f       	mul	r26, r18
    19ba:	80 0d       	add	r24, r0
    19bc:	91 1d       	adc	r25, r1
    19be:	a3 9f       	mul	r26, r19
    19c0:	90 0d       	add	r25, r0
    19c2:	b2 9f       	mul	r27, r18
    19c4:	90 0d       	add	r25, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	08 95       	ret

000019ca <__udivmodqi4>:
    19ca:	99 1b       	sub	r25, r25
    19cc:	79 e0       	ldi	r23, 0x09	; 9
    19ce:	04 c0       	rjmp	.+8      	; 0x19d8 <__udivmodqi4_ep>

000019d0 <__udivmodqi4_loop>:
    19d0:	99 1f       	adc	r25, r25
    19d2:	96 17       	cp	r25, r22
    19d4:	08 f0       	brcs	.+2      	; 0x19d8 <__udivmodqi4_ep>
    19d6:	96 1b       	sub	r25, r22

000019d8 <__udivmodqi4_ep>:
    19d8:	88 1f       	adc	r24, r24
    19da:	7a 95       	dec	r23
    19dc:	c9 f7       	brne	.-14     	; 0x19d0 <__udivmodqi4_loop>
    19de:	80 95       	com	r24
    19e0:	08 95       	ret

000019e2 <__udivmodhi4>:
    19e2:	aa 1b       	sub	r26, r26
    19e4:	bb 1b       	sub	r27, r27
    19e6:	51 e1       	ldi	r21, 0x11	; 17
    19e8:	07 c0       	rjmp	.+14     	; 0x19f8 <__udivmodhi4_ep>

000019ea <__udivmodhi4_loop>:
    19ea:	aa 1f       	adc	r26, r26
    19ec:	bb 1f       	adc	r27, r27
    19ee:	a6 17       	cp	r26, r22
    19f0:	b7 07       	cpc	r27, r23
    19f2:	10 f0       	brcs	.+4      	; 0x19f8 <__udivmodhi4_ep>
    19f4:	a6 1b       	sub	r26, r22
    19f6:	b7 0b       	sbc	r27, r23

000019f8 <__udivmodhi4_ep>:
    19f8:	88 1f       	adc	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	5a 95       	dec	r21
    19fe:	a9 f7       	brne	.-22     	; 0x19ea <__udivmodhi4_loop>
    1a00:	80 95       	com	r24
    1a02:	90 95       	com	r25
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	08 95       	ret

00001a0a <__udivmodsi4>:
    1a0a:	a1 e2       	ldi	r26, 0x21	; 33
    1a0c:	1a 2e       	mov	r1, r26
    1a0e:	aa 1b       	sub	r26, r26
    1a10:	bb 1b       	sub	r27, r27
    1a12:	fd 01       	movw	r30, r26
    1a14:	0d c0       	rjmp	.+26     	; 0x1a30 <__udivmodsi4_ep>

00001a16 <__udivmodsi4_loop>:
    1a16:	aa 1f       	adc	r26, r26
    1a18:	bb 1f       	adc	r27, r27
    1a1a:	ee 1f       	adc	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	a2 17       	cp	r26, r18
    1a20:	b3 07       	cpc	r27, r19
    1a22:	e4 07       	cpc	r30, r20
    1a24:	f5 07       	cpc	r31, r21
    1a26:	20 f0       	brcs	.+8      	; 0x1a30 <__udivmodsi4_ep>
    1a28:	a2 1b       	sub	r26, r18
    1a2a:	b3 0b       	sbc	r27, r19
    1a2c:	e4 0b       	sbc	r30, r20
    1a2e:	f5 0b       	sbc	r31, r21

00001a30 <__udivmodsi4_ep>:
    1a30:	66 1f       	adc	r22, r22
    1a32:	77 1f       	adc	r23, r23
    1a34:	88 1f       	adc	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	1a 94       	dec	r1
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <__udivmodsi4_loop>
    1a3c:	60 95       	com	r22
    1a3e:	70 95       	com	r23
    1a40:	80 95       	com	r24
    1a42:	90 95       	com	r25
    1a44:	9b 01       	movw	r18, r22
    1a46:	ac 01       	movw	r20, r24
    1a48:	bd 01       	movw	r22, r26
    1a4a:	cf 01       	movw	r24, r30
    1a4c:	08 95       	ret

00001a4e <__umulhisi3>:
    1a4e:	a2 9f       	mul	r26, r18
    1a50:	b0 01       	movw	r22, r0
    1a52:	b3 9f       	mul	r27, r19
    1a54:	c0 01       	movw	r24, r0
    1a56:	a3 9f       	mul	r26, r19
    1a58:	01 d0       	rcall	.+2      	; 0x1a5c <__umulhisi3+0xe>
    1a5a:	b2 9f       	mul	r27, r18
    1a5c:	70 0d       	add	r23, r0
    1a5e:	81 1d       	adc	r24, r1
    1a60:	11 24       	eor	r1, r1
    1a62:	91 1d       	adc	r25, r1
    1a64:	08 95       	ret

00001a66 <__muluhisi3>:
    1a66:	f3 df       	rcall	.-26     	; 0x1a4e <__umulhisi3>
    1a68:	a5 9f       	mul	r26, r21
    1a6a:	90 0d       	add	r25, r0
    1a6c:	b4 9f       	mul	r27, r20
    1a6e:	90 0d       	add	r25, r0
    1a70:	a4 9f       	mul	r26, r20
    1a72:	80 0d       	add	r24, r0
    1a74:	91 1d       	adc	r25, r1
    1a76:	11 24       	eor	r1, r1
    1a78:	08 95       	ret

00001a7a <__muldi3>:
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	1f 93       	push	r17
    1a80:	0f 93       	push	r16
    1a82:	9a 9d       	mul	r25, r10
    1a84:	f0 2d       	mov	r31, r0
    1a86:	21 9f       	mul	r18, r17
    1a88:	f0 0d       	add	r31, r0
    1a8a:	8b 9d       	mul	r24, r11
    1a8c:	f0 0d       	add	r31, r0
    1a8e:	8a 9d       	mul	r24, r10
    1a90:	e0 2d       	mov	r30, r0
    1a92:	f1 0d       	add	r31, r1
    1a94:	03 9f       	mul	r16, r19
    1a96:	f0 0d       	add	r31, r0
    1a98:	02 9f       	mul	r16, r18
    1a9a:	e0 0d       	add	r30, r0
    1a9c:	f1 1d       	adc	r31, r1
    1a9e:	4e 9d       	mul	r20, r14
    1aa0:	e0 0d       	add	r30, r0
    1aa2:	f1 1d       	adc	r31, r1
    1aa4:	5e 9d       	mul	r21, r14
    1aa6:	f0 0d       	add	r31, r0
    1aa8:	4f 9d       	mul	r20, r15
    1aaa:	f0 0d       	add	r31, r0
    1aac:	7f 93       	push	r23
    1aae:	6f 93       	push	r22
    1ab0:	bf 92       	push	r11
    1ab2:	af 92       	push	r10
    1ab4:	5f 93       	push	r21
    1ab6:	4f 93       	push	r20
    1ab8:	d5 01       	movw	r26, r10
    1aba:	c9 df       	rcall	.-110    	; 0x1a4e <__umulhisi3>
    1abc:	8b 01       	movw	r16, r22
    1abe:	ac 01       	movw	r20, r24
    1ac0:	d7 01       	movw	r26, r14
    1ac2:	c5 df       	rcall	.-118    	; 0x1a4e <__umulhisi3>
    1ac4:	eb 01       	movw	r28, r22
    1ac6:	e8 0f       	add	r30, r24
    1ac8:	f9 1f       	adc	r31, r25
    1aca:	d6 01       	movw	r26, r12
    1acc:	1f d0       	rcall	.+62     	; 0x1b0c <__muldi3_6>
    1ace:	2f 91       	pop	r18
    1ad0:	3f 91       	pop	r19
    1ad2:	d6 01       	movw	r26, r12
    1ad4:	bc df       	rcall	.-136    	; 0x1a4e <__umulhisi3>
    1ad6:	c6 0f       	add	r28, r22
    1ad8:	d7 1f       	adc	r29, r23
    1ada:	e8 1f       	adc	r30, r24
    1adc:	f9 1f       	adc	r31, r25
    1ade:	af 91       	pop	r26
    1ae0:	bf 91       	pop	r27
    1ae2:	14 d0       	rcall	.+40     	; 0x1b0c <__muldi3_6>
    1ae4:	2f 91       	pop	r18
    1ae6:	3f 91       	pop	r19
    1ae8:	b2 df       	rcall	.-156    	; 0x1a4e <__umulhisi3>
    1aea:	c6 0f       	add	r28, r22
    1aec:	d7 1f       	adc	r29, r23
    1aee:	e8 1f       	adc	r30, r24
    1af0:	f9 1f       	adc	r31, r25
    1af2:	d6 01       	movw	r26, r12
    1af4:	ac df       	rcall	.-168    	; 0x1a4e <__umulhisi3>
    1af6:	e6 0f       	add	r30, r22
    1af8:	f7 1f       	adc	r31, r23
    1afa:	98 01       	movw	r18, r16
    1afc:	be 01       	movw	r22, r28
    1afe:	cf 01       	movw	r24, r30
    1b00:	11 24       	eor	r1, r1
    1b02:	0f 91       	pop	r16
    1b04:	1f 91       	pop	r17
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <__muldi3_6>:
    1b0c:	a0 df       	rcall	.-192    	; 0x1a4e <__umulhisi3>
    1b0e:	46 0f       	add	r20, r22
    1b10:	57 1f       	adc	r21, r23
    1b12:	c8 1f       	adc	r28, r24
    1b14:	d9 1f       	adc	r29, r25
    1b16:	08 f4       	brcc	.+2      	; 0x1b1a <__muldi3_6+0xe>
    1b18:	31 96       	adiw	r30, 0x01	; 1
    1b1a:	08 95       	ret

00001b1c <__umoddi3>:
    1b1c:	68 94       	set
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <__udivdi3_umoddi3>

00001b20 <__udivdi3>:
    1b20:	e8 94       	clt

00001b22 <__udivdi3_umoddi3>:
    1b22:	8f 92       	push	r8
    1b24:	9f 92       	push	r9
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	05 d0       	rcall	.+10     	; 0x1b36 <__udivmod64>
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	9f 90       	pop	r9
    1b32:	8f 90       	pop	r8
    1b34:	08 95       	ret

00001b36 <__udivmod64>:
    1b36:	88 24       	eor	r8, r8
    1b38:	99 24       	eor	r9, r9
    1b3a:	f4 01       	movw	r30, r8
    1b3c:	e4 01       	movw	r28, r8
    1b3e:	b0 e4       	ldi	r27, 0x40	; 64
    1b40:	1b 2e       	mov	r1, r27
    1b42:	d4 01       	movw	r26, r8
    1b44:	9d 15       	cp	r25, r13
    1b46:	8e 04       	cpc	r8, r14
    1b48:	9f 04       	cpc	r9, r15
    1b4a:	e0 07       	cpc	r30, r16
    1b4c:	f1 07       	cpc	r31, r17
    1b4e:	38 f4       	brcc	.+14     	; 0x1b5e <__udivmod64+0x28>
    1b50:	fc 01       	movw	r30, r24
    1b52:	4b 01       	movw	r8, r22
    1b54:	ca 01       	movw	r24, r20
    1b56:	b9 01       	movw	r22, r18
    1b58:	ad 01       	movw	r20, r26
    1b5a:	9e 01       	movw	r18, r28
    1b5c:	16 94       	lsr	r1
    1b5e:	22 0f       	add	r18, r18
    1b60:	33 1f       	adc	r19, r19
    1b62:	44 1f       	adc	r20, r20
    1b64:	55 1f       	adc	r21, r21
    1b66:	66 1f       	adc	r22, r22
    1b68:	77 1f       	adc	r23, r23
    1b6a:	88 1f       	adc	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	88 1c       	adc	r8, r8
    1b70:	99 1c       	adc	r9, r9
    1b72:	ee 1f       	adc	r30, r30
    1b74:	ff 1f       	adc	r31, r31
    1b76:	cc 1f       	adc	r28, r28
    1b78:	dd 1f       	adc	r29, r29
    1b7a:	aa 1f       	adc	r26, r26
    1b7c:	bb 1f       	adc	r27, r27
    1b7e:	8a 14       	cp	r8, r10
    1b80:	9b 04       	cpc	r9, r11
    1b82:	ec 05       	cpc	r30, r12
    1b84:	fd 05       	cpc	r31, r13
    1b86:	ce 05       	cpc	r28, r14
    1b88:	df 05       	cpc	r29, r15
    1b8a:	a0 07       	cpc	r26, r16
    1b8c:	b1 07       	cpc	r27, r17
    1b8e:	48 f0       	brcs	.+18     	; 0x1ba2 <__udivmod64+0x6c>
    1b90:	8a 18       	sub	r8, r10
    1b92:	9b 08       	sbc	r9, r11
    1b94:	ec 09       	sbc	r30, r12
    1b96:	fd 09       	sbc	r31, r13
    1b98:	ce 09       	sbc	r28, r14
    1b9a:	df 09       	sbc	r29, r15
    1b9c:	a0 0b       	sbc	r26, r16
    1b9e:	b1 0b       	sbc	r27, r17
    1ba0:	21 60       	ori	r18, 0x01	; 1
    1ba2:	1a 94       	dec	r1
    1ba4:	e1 f6       	brne	.-72     	; 0x1b5e <__udivmod64+0x28>
    1ba6:	2e f4       	brtc	.+10     	; 0x1bb2 <__udivmod64+0x7c>
    1ba8:	94 01       	movw	r18, r8
    1baa:	af 01       	movw	r20, r30
    1bac:	be 01       	movw	r22, r28
    1bae:	cd 01       	movw	r24, r26
    1bb0:	00 0c       	add	r0, r0
    1bb2:	08 95       	ret

00001bb4 <__ashldi3>:
    1bb4:	0f 93       	push	r16
    1bb6:	08 30       	cpi	r16, 0x08	; 8
    1bb8:	90 f0       	brcs	.+36     	; 0x1bde <__ashldi3+0x2a>
    1bba:	98 2f       	mov	r25, r24
    1bbc:	87 2f       	mov	r24, r23
    1bbe:	76 2f       	mov	r23, r22
    1bc0:	65 2f       	mov	r22, r21
    1bc2:	54 2f       	mov	r21, r20
    1bc4:	43 2f       	mov	r20, r19
    1bc6:	32 2f       	mov	r19, r18
    1bc8:	22 27       	eor	r18, r18
    1bca:	08 50       	subi	r16, 0x08	; 8
    1bcc:	f4 cf       	rjmp	.-24     	; 0x1bb6 <__ashldi3+0x2>
    1bce:	22 0f       	add	r18, r18
    1bd0:	33 1f       	adc	r19, r19
    1bd2:	44 1f       	adc	r20, r20
    1bd4:	55 1f       	adc	r21, r21
    1bd6:	66 1f       	adc	r22, r22
    1bd8:	77 1f       	adc	r23, r23
    1bda:	88 1f       	adc	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 95       	dec	r16
    1be0:	b2 f7       	brpl	.-20     	; 0x1bce <__ashldi3+0x1a>
    1be2:	0f 91       	pop	r16
    1be4:	08 95       	ret

00001be6 <__ashrdi3>:
    1be6:	97 fb       	bst	r25, 7
    1be8:	10 f8       	bld	r1, 0

00001bea <__lshrdi3>:
    1bea:	16 94       	lsr	r1
    1bec:	00 08       	sbc	r0, r0
    1bee:	0f 93       	push	r16
    1bf0:	08 30       	cpi	r16, 0x08	; 8
    1bf2:	98 f0       	brcs	.+38     	; 0x1c1a <__lshrdi3+0x30>
    1bf4:	08 50       	subi	r16, 0x08	; 8
    1bf6:	23 2f       	mov	r18, r19
    1bf8:	34 2f       	mov	r19, r20
    1bfa:	45 2f       	mov	r20, r21
    1bfc:	56 2f       	mov	r21, r22
    1bfe:	67 2f       	mov	r22, r23
    1c00:	78 2f       	mov	r23, r24
    1c02:	89 2f       	mov	r24, r25
    1c04:	90 2d       	mov	r25, r0
    1c06:	f4 cf       	rjmp	.-24     	; 0x1bf0 <__lshrdi3+0x6>
    1c08:	05 94       	asr	r0
    1c0a:	97 95       	ror	r25
    1c0c:	87 95       	ror	r24
    1c0e:	77 95       	ror	r23
    1c10:	67 95       	ror	r22
    1c12:	57 95       	ror	r21
    1c14:	47 95       	ror	r20
    1c16:	37 95       	ror	r19
    1c18:	27 95       	ror	r18
    1c1a:	0a 95       	dec	r16
    1c1c:	aa f7       	brpl	.-22     	; 0x1c08 <__lshrdi3+0x1e>
    1c1e:	0f 91       	pop	r16
    1c20:	08 95       	ret

00001c22 <__adddi3>:
    1c22:	2a 0d       	add	r18, r10
    1c24:	3b 1d       	adc	r19, r11
    1c26:	4c 1d       	adc	r20, r12
    1c28:	5d 1d       	adc	r21, r13
    1c2a:	6e 1d       	adc	r22, r14
    1c2c:	7f 1d       	adc	r23, r15
    1c2e:	80 1f       	adc	r24, r16
    1c30:	91 1f       	adc	r25, r17
    1c32:	08 95       	ret

00001c34 <__adddi3_s8>:
    1c34:	00 24       	eor	r0, r0
    1c36:	a7 fd       	sbrc	r26, 7
    1c38:	00 94       	com	r0
    1c3a:	2a 0f       	add	r18, r26
    1c3c:	30 1d       	adc	r19, r0
    1c3e:	40 1d       	adc	r20, r0
    1c40:	50 1d       	adc	r21, r0
    1c42:	60 1d       	adc	r22, r0
    1c44:	70 1d       	adc	r23, r0
    1c46:	80 1d       	adc	r24, r0
    1c48:	90 1d       	adc	r25, r0
    1c4a:	08 95       	ret

00001c4c <eeprom_read_byte>:
    1c4c:	e1 99       	sbic	0x1c, 1	; 28
    1c4e:	fe cf       	rjmp	.-4      	; 0x1c4c <eeprom_read_byte>
    1c50:	9f bb       	out	0x1f, r25	; 31
    1c52:	8e bb       	out	0x1e, r24	; 30
    1c54:	e0 9a       	sbi	0x1c, 0	; 28
    1c56:	99 27       	eor	r25, r25
    1c58:	8d b3       	in	r24, 0x1d	; 29
    1c5a:	08 95       	ret

00001c5c <_exit>:
    1c5c:	f8 94       	cli

00001c5e <__stop_program>:
    1c5e:	ff cf       	rjmp	.-2      	; 0x1c5e <__stop_program>
