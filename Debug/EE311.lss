
EE311.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001868  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00001868  000018fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002da  0080007e  0080007e  0000191a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000194c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00001988  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001156  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f7  00000000  00000000  00002bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e38  00000000  00000000  000033c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00004200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ff  00000000  00000000  000043ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a5  00000000  00000000  000049eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004d90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	a6 c1       	rjmp	.+844    	; 0x354 <__vector_3>
       8:	d8 c1       	rjmp	.+944    	; 0x3ba <__vector_4>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	80 c0       	rjmp	.+256    	; 0x10e <__vector_6>
       e:	d8 c0       	rjmp	.+432    	; 0x1c0 <__vector_7>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	58 c0       	rjmp	.+176    	; 0xc4 <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	4a c0       	rjmp	.+148    	; 0xac <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e8 e6       	ldi	r30, 0x68	; 104
      3a:	f8 e1       	ldi	r31, 0x18	; 24
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ae 37       	cpi	r26, 0x7E	; 126
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	23 e0       	ldi	r18, 0x03	; 3
      4a:	ae e7       	ldi	r26, 0x7E	; 126
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a8 35       	cpi	r26, 0x58	; 88
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	eb d1       	rcall	.+982    	; 0x430 <main>
      5a:	04 cc       	rjmp	.-2040   	; 0xfffff864 <__eeprom_end+0xff7ef864>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <adc_read>:
#include "adc.h"

#define ADCSTATUS (ADCSRA & (1<<ADIF))

uint16_t adc_read(uint8_t channel){
	ADMUX &= 0xF0; //clear previous setting
      5e:	97 b1       	in	r25, 0x07	; 7
      60:	90 7f       	andi	r25, 0xF0	; 240
      62:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel; //add channel setting
      64:	97 b1       	in	r25, 0x07	; 7
      66:	89 2b       	or	r24, r25
      68:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA |= (1<<ADSC); //start conversion
      6a:	36 9a       	sbi	0x06, 6	; 6
	
	while (ADCSTATUS == 0){ //block until conversion finishes
      6c:	34 9b       	sbis	0x06, 4	; 6
      6e:	fe cf       	rjmp	.-4      	; 0x6c <adc_read+0xe>
	}
	return ADC; //return value in mV  
      70:	84 b1       	in	r24, 0x04	; 4
      72:	95 b1       	in	r25, 0x05	; 5
}
      74:	08 95       	ret

00000076 <adc_convert>:

uint32_t adc_convert(uint16_t rawvalue){
	return (uint32_t)((uint32_t)rawvalue*voltagereference/1024);
      76:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <voltagereference>
      7a:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <voltagereference+0x1>
      7e:	9c 01       	movw	r18, r24
      80:	03 db       	rcall	.-2554   	; 0xfffff688 <__eeprom_end+0xff7ef688>
      82:	2a e0       	ldi	r18, 0x0A	; 10
      84:	96 95       	lsr	r25
      86:	87 95       	ror	r24
      88:	77 95       	ror	r23
      8a:	67 95       	ror	r22
      8c:	2a 95       	dec	r18
      8e:	d1 f7       	brne	.-12     	; 0x84 <adc_convert+0xe>
}
      90:	08 95       	ret

00000092 <adc_init>:
	uint16_t bgrawvalue = ADC; //store ADC value for bandgap (1.30V)
	voltagereference = (uint32_t)((uint32_t)1300*1024/bgrawvalue); //calculate vref using bandgap
}

void adc_init(){
	ADMUX &= ~(1<<REFS1);
      92:	3f 98       	cbi	0x07, 7	; 7
	ADMUX |= (1<<REFS0); //use AVcc reference
      94:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN); //enable ADC
      96:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= ((1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2)); //use clock divider of /128 for 125khz ADC frequency
      98:	86 b1       	in	r24, 0x06	; 6
      9a:	87 60       	ori	r24, 0x07	; 7
      9c:	86 b9       	out	0x06, r24	; 6
	voltagereference = 5000;
      9e:	88 e8       	ldi	r24, 0x88	; 136
      a0:	93 e1       	ldi	r25, 0x13	; 19
      a2:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <voltagereference+0x1>
      a6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <voltagereference>
      aa:	08 95       	ret

000000ac <__vector_11>:
 *  Author: sshe325
 */ 

#include "interrupts.h"

ISR(USART_RXC_vect){
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
	//dynamically allocate and reallocate space for string
	char* buffer_ptr = str_buffer;
      b6:	c4 eb       	ldi	r28, 0xB4	; 180
      b8:	d0 e0       	ldi	r29, 0x00	; 0
	while((*buffer_ptr != '\n') || (*buffer_ptr != '\r') || (*buffer_ptr != (str_buffer + 50))){
		//make a null terminated string for strcat()
		uart_char = uart_receive();
      ba:	92 d8       	rcall	.-3804   	; 0xfffff1e0 <__eeprom_end+0xff7ef1e0>
      bc:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <uart_char>
		*buffer_ptr = uart_char;
      c0:	89 93       	st	Y+, r24
      c2:	fb cf       	rjmp	.-10     	; 0xba <__vector_11+0xe>

000000c4 <__vector_9>:
	//set flag to indicate received data
	data_received = 1;
}

//interrupt to increment overflow counter
ISR(TIMER0_OVF_vect){
      c4:	1f 92       	push	r1
      c6:	0f 92       	push	r0
      c8:	0f b6       	in	r0, 0x3f	; 63
      ca:	0f 92       	push	r0
      cc:	11 24       	eor	r1, r1
      ce:	8f 93       	push	r24
      d0:	9f 93       	push	r25
      d2:	af 93       	push	r26
      d4:	bf 93       	push	r27
	++timer0_ovf_count;
      d6:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <timer0_ovf_count>
      da:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <timer0_ovf_count+0x1>
      de:	a0 91 f1 00 	lds	r26, 0x00F1	; 0x8000f1 <timer0_ovf_count+0x2>
      e2:	b0 91 f2 00 	lds	r27, 0x00F2	; 0x8000f2 <timer0_ovf_count+0x3>
      e6:	01 96       	adiw	r24, 0x01	; 1
      e8:	a1 1d       	adc	r26, r1
      ea:	b1 1d       	adc	r27, r1
      ec:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <timer0_ovf_count>
      f0:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <timer0_ovf_count+0x1>
      f4:	a0 93 f1 00 	sts	0x00F1, r26	; 0x8000f1 <timer0_ovf_count+0x2>
      f8:	b0 93 f2 00 	sts	0x00F2, r27	; 0x8000f2 <timer0_ovf_count+0x3>
}
      fc:	bf 91       	pop	r27
      fe:	af 91       	pop	r26
     100:	9f 91       	pop	r25
     102:	8f 91       	pop	r24
     104:	0f 90       	pop	r0
     106:	0f be       	out	0x3f, r0	; 63
     108:	0f 90       	pop	r0
     10a:	1f 90       	pop	r1
     10c:	18 95       	reti

0000010e <__vector_6>:

//interrupt to handle T/4 or 3T/4 time crossing
ISR(TIMER1_COMPA_vect){
     10e:	1f 92       	push	r1
     110:	0f 92       	push	r0
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	0f 92       	push	r0
     116:	11 24       	eor	r1, r1
     118:	8f 93       	push	r24
     11a:	9f 93       	push	r25
		//turn off PWM timer
		TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     11c:	85 b5       	in	r24, 0x25	; 37
     11e:	88 7f       	andi	r24, 0xF8	; 248
     120:	85 bd       	out	0x25, r24	; 37
		//PORTD &= ~(1<<PD7);
		//turn on right NMOS
		//PORTB &= ~(1<<PB0);
		
		//indicate that RHS/LHS voltage are both off
		voltage_right_on = 0;
     122:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <voltage_right_on+0x1>
     126:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <voltage_right_on>
		voltage_left_on = 0;
     12a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <voltage_left_on+0x1>
     12e:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <voltage_left_on>
		
		//since we have stopped pulsing PWM, stop reading current ADC
		readadci = 0;
     132:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <readadci+0x1>
     136:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <readadci>
		//disable PWM signals
		if (!t2){
     13a:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     13e:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
			//right to left current
			//turn off PMOSes, turn on left NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
     142:	c2 98       	cbi	0x18, 2	; 24
		voltage_left_on = 0;
		
		//since we have stopped pulsing PWM, stop reading current ADC
		readadci = 0;
		//disable PWM signals
		if (!t2){
     144:	89 2b       	or	r24, r25
     146:	b9 f4       	brne	.+46     	; 0x176 <__vector_6+0x68>
			//right to left current
			//turn off PMOSes, turn on left NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
			//turn on left NMOS
			PORTB &= ~(1<<PB1);
     148:	c1 98       	cbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     14a:	97 98       	cbi	0x12, 7	; 18
			//turn off right NMOS
			PORTB |= (1<<PB0);
     14c:	c0 9a       	sbi	0x18, 0	; 24
			//indicate that we are ready to start reading motor LHS back emf
			readadc = 1;
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <readadc+0x1>
     156:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <readadc>
			readadcmotorright = 1;
     15a:	90 93 f6 00 	sts	0x00F6, r25	; 0x8000f6 <readadcmotorright+0x1>
     15e:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <readadcmotorright>
			backemffound = 0;
     162:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <backemffound+0x1>
     166:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <backemffound>
			//reset backemf index
			backemfreadingindex = 0;
     16a:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <backemfreadingindex+0x1>
     16e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <backemfreadingindex>
			PORTD &= ~(1<<PD5);
     172:	95 98       	cbi	0x12, 5	; 18
     174:	16 c0       	rjmp	.+44     	; 0x1a2 <__vector_6+0x94>
			//left to right current
			//turn off PMOSes, turn on right NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
			//turn off left NMOS
			PORTB |= (1<<PB1);
     176:	c1 9a       	sbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     178:	97 98       	cbi	0x12, 7	; 18
			//turn on right NMOS
			PORTB &= ~(1<<PB0);
     17a:	c0 98       	cbi	0x18, 0	; 24
			//indicate that we are ready to start reading motor RHS back emf
			readadc = 1;
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <readadc+0x1>
     184:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <readadc>
			readadcmotorleft = 1;
     188:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <readadcmotorleft+0x1>
     18c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <readadcmotorleft>
			backemffound = 0;
     190:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <backemffound+0x1>
     194:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <backemffound>
			//reset backemf index
			backemfreadingindex = 0;
     198:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <backemfreadingindex+0x1>
     19c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <backemfreadingindex>
			PORTD |= (1<<PD5);
     1a0:	95 9a       	sbi	0x12, 5	; 18
		}
		//turn on timer 0 with prescaler /256 to measure backemf time
		TCNT0 = 0;
     1a2:	12 be       	out	0x32, r1	; 50
		TCCR0 |= ((1<<CS02));
     1a4:	83 b7       	in	r24, 0x33	; 51
     1a6:	84 60       	ori	r24, 0x04	; 4
     1a8:	83 bf       	out	0x33, r24	; 51
		TCCR0 &= ~((1<<CS01)|(1<<CS00));
     1aa:	83 b7       	in	r24, 0x33	; 51
     1ac:	8c 7f       	andi	r24, 0xFC	; 252
     1ae:	83 bf       	out	0x33, r24	; 51
		//reset PWM timer counter
		TCNT2 = 0;
     1b0:	14 bc       	out	0x24, r1	; 36
}
     1b2:	9f 91       	pop	r25
     1b4:	8f 91       	pop	r24
     1b6:	0f 90       	pop	r0
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	0f 90       	pop	r0
     1bc:	1f 90       	pop	r1
     1be:	18 95       	reti

000001c0 <__vector_7>:

//interrupt to handle T or T/2 time crossing
ISR(TIMER1_COMPB_vect){
     1c0:	1f 92       	push	r1
     1c2:	0f 92       	push	r0
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	0f 92       	push	r0
     1c8:	11 24       	eor	r1, r1
     1ca:	2f 93       	push	r18
     1cc:	3f 93       	push	r19
     1ce:	4f 93       	push	r20
     1d0:	5f 93       	push	r21
     1d2:	6f 93       	push	r22
     1d4:	7f 93       	push	r23
     1d6:	8f 93       	push	r24
     1d8:	9f 93       	push	r25
     1da:	af 93       	push	r26
		TCCR1B |= (1<<CS12);
		TCCR1B &= ~((1<<CS11) | (1<<CS10));
		stop_counter = 0;
	}*/
		//back emf pulse has expired (we are driving the motor now), stop reading the adc
		readadcmotorleft = 0;
     1dc:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <readadcmotorleft+0x1>
     1e0:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <readadcmotorleft>
		readadcmotorright = 0;
     1e4:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <readadcmotorright+0x1>
     1e8:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <readadcmotorright>
		if (numcycles >= 50){
     1ec:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <numcycles>
     1f0:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <numcycles+0x1>
     1f4:	c2 97       	sbiw	r24, 0x32	; 50
     1f6:	70 f1       	brcs	.+92     	; 0x254 <__vector_7+0x94>
			if (backemffound == 0){
     1f8:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <backemffound>
     1fc:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <backemffound+0x1>
     200:	89 2b       	or	r24, r25
     202:	41 f5       	brne	.+80     	; 0x254 <__vector_7+0x94>
				backemftime += 5; //add 0.1ms to back emf time (since we didn't find it previously, we must have driven the motor too fast)
     204:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <backemftime>
     208:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <backemftime+0x1>
     20c:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <backemftime+0x2>
     210:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <backemftime+0x3>
     214:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <backemftime+0x4>
     218:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <backemftime+0x5>
     21c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <backemftime+0x6>
     220:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <backemftime+0x7>
     224:	a5 e0       	ldi	r26, 0x05	; 5
     226:	0a db       	rcall	.-2540   	; 0xfffff83c <__eeprom_end+0xff7ef83c>
     228:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <backemftime>
     22c:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <backemftime+0x1>
     230:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <backemftime+0x2>
     234:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <backemftime+0x3>
     238:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <backemftime+0x4>
     23c:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <backemftime+0x5>
     240:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <backemftime+0x6>
     244:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <backemftime+0x7>
				//backemffreq = 1000000000/backemftime;
				backemffound = 1; //indicate that a back emf value has been "found"
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <backemffound+0x1>
     250:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <backemffound>
			}
		}
		
		if (t2){
     254:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     258:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
     25c:	89 2b       	or	r24, r25
     25e:	29 f0       	breq	.+10     	; 0x26a <__vector_7+0xaa>
			//T time crossing has been handled, T/2 is next
			t2 = 0;
     260:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <t2+0x1>
     264:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <t2>
     268:	06 c0       	rjmp	.+12     	; 0x276 <__vector_7+0xb6>
			TCCR2 |= ((1<<CS22) | (1<<CS21));
			TCCR2 &= ~((1<<CS20));
			
		}
		else{
			t2 = 1;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <t2+0x1>
     272:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <t2>
			//turn off timer1
			TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     276:	8e b5       	in	r24, 0x2e	; 46
     278:	88 7f       	andi	r24, 0xF8	; 248
     27a:	8e bd       	out	0x2e, r24	; 46
			//turn off PWM
			TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     27c:	85 b5       	in	r24, 0x25	; 37
     27e:	88 7f       	andi	r24, 0xF8	; 248
     280:	85 bd       	out	0x25, r24	; 37
			//reset timer1 counter
			TCNT1 = 0;
     282:	1d bc       	out	0x2d, r1	; 45
     284:	1c bc       	out	0x2c, r1	; 44
			//reset PWM timer counter
			TCNT2 = 0;
     286:	14 bc       	out	0x24, r1	; 36
			//turn on timer 1 again (prescaler /256)
			TCCR1B |= (1<<CS12);
     288:	8e b5       	in	r24, 0x2e	; 46
     28a:	84 60       	ori	r24, 0x04	; 4
     28c:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &= ~((1<<CS11) | (1<<CS10));
     28e:	8e b5       	in	r24, 0x2e	; 46
     290:	8c 7f       	andi	r24, 0xFC	; 252
     292:	8e bd       	out	0x2e, r24	; 46
			//turn on PWM timer counter (prescaler /64)
			//turn on PWM timer counter (prescaler /256)
			TCCR2 |= ((1<<CS22) | (1<<CS21));
     294:	85 b5       	in	r24, 0x25	; 37
     296:	86 60       	ori	r24, 0x06	; 6
     298:	85 bd       	out	0x25, r24	; 37
			TCCR2 &= ~((1<<CS20));
     29a:	85 b5       	in	r24, 0x25	; 37
     29c:	8e 7f       	andi	r24, 0xFE	; 254
     29e:	85 bd       	out	0x25, r24	; 37
			
		}
		
		//turn on PWM signals
		if (t2){
     2a0:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     2a4:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
     2a8:	89 2b       	or	r24, r25
     2aa:	59 f0       	breq	.+22     	; 0x2c2 <__vector_7+0x102>
			//right to left current
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
     2ac:	c2 98       	cbi	0x18, 2	; 24
			//turn on left NMOS
			PORTB &= ~(1<<PB1);
     2ae:	c1 98       	cbi	0x18, 1	; 24
			//turn on right PMOS
			PORTD |= (1<<PD7);
     2b0:	97 9a       	sbi	0x12, 7	; 18
			//turn off right NMOS
			PORTB |= (1<<PB0);
     2b2:	c0 9a       	sbi	0x18, 0	; 24
			//indicate that RHS voltage is on
			voltage_right_on = 1;
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <voltage_right_on+0x1>
     2bc:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <voltage_right_on>
     2c0:	0a c0       	rjmp	.+20     	; 0x2d6 <__vector_7+0x116>
		}
		else{
			//left to right current
			//turn on left PMOS
			PORTB |= (1<<PB2);
     2c2:	c2 9a       	sbi	0x18, 2	; 24
			//turn off left NMOS
			PORTB |= (1<<PB1);
     2c4:	c1 9a       	sbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     2c6:	97 98       	cbi	0x12, 7	; 18
			//turn on right NMOS
			PORTB &= ~(1<<PB0);
     2c8:	c0 98       	cbi	0x18, 0	; 24
			//indicate that LHS voltage is on
			voltage_left_on = 1;
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <voltage_left_on+0x1>
     2d2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <voltage_left_on>
		}
		//indicate that we are ready to read adc from motor RHS to measure voltage and current
		readadc = 1;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <readadc+0x1>
     2de:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <readadc>
		readadcv = 1;
     2e2:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <readadcv+0x1>
     2e6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <readadcv>
		readadci = 1;
     2ea:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <readadci+0x1>
     2ee:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <readadci>
		//reset ADC indices
		current_i = 0;
     2f2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <current_i+0x1>
     2f6:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <current_i>
		currentreadingindex = 0;
     2fa:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <currentreadingindex+0x1>
     2fe:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <currentreadingindex>
		//++stop_counter;
		//stop back emf timer since the time to measure it has expired
		TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     302:	83 b7       	in	r24, 0x33	; 51
     304:	88 7f       	andi	r24, 0xF8	; 248
     306:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;
     308:	12 be       	out	0x32, r1	; 50
		timer0_ovf_count = 0;
     30a:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <timer0_ovf_count>
     30e:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <timer0_ovf_count+0x1>
     312:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <timer0_ovf_count+0x2>
     316:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <timer0_ovf_count+0x3>
		if (numcycles != 50) ++numcycles;
     31a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <numcycles>
     31e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <numcycles+0x1>
     322:	c2 97       	sbiw	r24, 0x32	; 50
     324:	49 f0       	breq	.+18     	; 0x338 <__vector_7+0x178>
     326:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <numcycles>
     32a:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <numcycles+0x1>
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <numcycles+0x1>
     334:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <numcycles>
}
     338:	af 91       	pop	r26
     33a:	9f 91       	pop	r25
     33c:	8f 91       	pop	r24
     33e:	7f 91       	pop	r23
     340:	6f 91       	pop	r22
     342:	5f 91       	pop	r21
     344:	4f 91       	pop	r20
     346:	3f 91       	pop	r19
     348:	2f 91       	pop	r18
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <__vector_3>:

//PWM duty cycle expired, shut off PWM signals
ISR(TIMER2_COMP_vect){
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	8f 93       	push	r24
     360:	9f 93       	push	r25
		PORTD &= ~(1<<PD7);
		//turn off right NMOS
		PORTB |= (1<<PB0);
	}*/
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     362:	85 b5       	in	r24, 0x25	; 37
     364:	88 7f       	andi	r24, 0xF8	; 248
     366:	85 bd       	out	0x25, r24	; 37
	
	if (t2){
     368:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     36c:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
		//right to left current
		//turn off PMOSes, turn on left NMOS so motor brakes
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     370:	c2 98       	cbi	0x18, 2	; 24
		PORTB |= (1<<PB0);
	}*/
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
	
	if (t2){
     372:	89 2b       	or	r24, r25
     374:	21 f0       	breq	.+8      	; 0x37e <__vector_3+0x2a>
		//right to left current
		//turn off PMOSes, turn on left NMOS so motor brakes
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     376:	c1 98       	cbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     378:	97 98       	cbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     37a:	c0 9a       	sbi	0x18, 0	; 24
     37c:	03 c0       	rjmp	.+6      	; 0x384 <__vector_3+0x30>
		//left to right current
		//turn off PMOSes, turn on right NMOS so motor brakes?!
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
		//turn off left NMOS
		PORTB |= (1<<PB1);
     37e:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     380:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     382:	c0 98       	cbi	0x18, 0	; 24
	}
	readadc = 1;
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <readadc+0x1>
     38c:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <readadc>
	//indicate that voltage is off
	voltage_right_on = 0;
     390:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <voltage_right_on+0x1>
     394:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <voltage_right_on>
	voltage_left_on = 0;
     398:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <voltage_left_on+0x1>
     39c:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <voltage_left_on>
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     3a0:	85 b5       	in	r24, 0x25	; 37
     3a2:	86 60       	ori	r24, 0x06	; 6
     3a4:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     3a6:	85 b5       	in	r24, 0x25	; 37
     3a8:	8e 7f       	andi	r24, 0xFE	; 254
     3aa:	85 bd       	out	0x25, r24	; 37
}
     3ac:	9f 91       	pop	r25
     3ae:	8f 91       	pop	r24
     3b0:	0f 90       	pop	r0
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	0f 90       	pop	r0
     3b6:	1f 90       	pop	r1
     3b8:	18 95       	reti

000003ba <__vector_4>:

//PWM restarted, change switches according to current current direction
ISR(TIMER2_OVF_vect){
     3ba:	1f 92       	push	r1
     3bc:	0f 92       	push	r0
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	0f 92       	push	r0
     3c2:	11 24       	eor	r1, r1
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     3c8:	85 b5       	in	r24, 0x25	; 37
     3ca:	88 7f       	andi	r24, 0xF8	; 248
     3cc:	85 bd       	out	0x25, r24	; 37
	TCCR2 = 0;
     3ce:	15 bc       	out	0x25, r1	; 37
	if (t2){
     3d0:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     3d4:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
     3d8:	89 2b       	or	r24, r25
     3da:	79 f0       	breq	.+30     	; 0x3fa <__vector_4+0x40>
		//right to left current
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     3dc:	c2 98       	cbi	0x18, 2	; 24
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     3de:	c1 98       	cbi	0x18, 1	; 24
		//turn on right PMOS
		PORTD |= (1<<PD7);
     3e0:	97 9a       	sbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     3e2:	c0 9a       	sbi	0x18, 0	; 24
		//indicate that RHS voltage is on
		readadc = 1;
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <readadc+0x1>
     3ec:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <readadc>
		voltage_right_on = 1;
     3f0:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <voltage_right_on+0x1>
     3f4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <voltage_right_on>
     3f8:	0e c0       	rjmp	.+28     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	}
	else{
		//left to right current
		//turn on left PMOS
		PORTB |= (1<<PB2);
     3fa:	c2 9a       	sbi	0x18, 2	; 24
		//turn off left NMOS
		PORTB |= (1<<PB1);
     3fc:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     3fe:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     400:	c0 98       	cbi	0x18, 0	; 24
		//indicate that LHS voltage is on
		readadc = 1;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <readadc+0x1>
     40a:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <readadc>
		voltage_left_on = 1;
     40e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <voltage_left_on+0x1>
     412:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <voltage_left_on>
	}
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     416:	85 b5       	in	r24, 0x25	; 37
     418:	86 60       	ori	r24, 0x06	; 6
     41a:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     41c:	85 b5       	in	r24, 0x25	; 37
     41e:	8e 7f       	andi	r24, 0xFE	; 254
     420:	85 bd       	out	0x25, r24	; 37
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <main>:
uint32_t backemfarray[NUMSAMPLESI];
uint64_t currentvalue = 0;
uint64_t powervalue = 0;

int main(void)
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	a3 97       	sbiw	r28, 0x23	; 35
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
	//sprintf(transmit_buffer, "{\n\"3\":\n{\n\"mfc\":{\"req\":\"\",\"cur\":\"\"\},\n\"ver\": \"001.002.003\",\n\"param\":{\"pwr\":\".W\",\"freq\":\".Hz\",\"curr\":\"mA\",\"volt\": \".V\"},\n\"clr\":\"ew\",\n\"ew\":[\"cmprStalled\",\"pistonCollision\"]\n}\n}");
	//sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3s\",\n%11s\"cur\": \"%3s\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%s.%sW\",\n%11s\"freq\": \"%s.%sHz\",\n%11s\"curr\": \"%smA\",\n%11s\"volt\": \"%s.%sV\",\n%7s}\n%3s}\n}", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "");
	//eeprom_write_block(transmit_buffer,0,strlen(transmit_buffer));	
	//eeprom_write_byte(0,'0');
	
	t2 = 0; //flag for if T/2 time crossing is next to be handled
     444:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <t2+0x1>
     448:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <t2>
	stop_counter = 0; //counter to stop PWM every STOPCYCLE/2 number of cycles
     44c:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <stop_counter+0x1>
     450:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <stop_counter>
	data_received = 0; //set data received flag to 0 initially
     454:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <data_received+0x1>
     458:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <data_received>
	timer0_ovf_count = 0;//set timer0 overflow count to 0 initially
     45c:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <timer0_ovf_count>
     460:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <timer0_ovf_count+0x1>
     464:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <timer0_ovf_count+0x2>
     468:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <timer0_ovf_count+0x3>
	current_i = 0; //initialise current reading index
     46c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <current_i+0x1>
     470:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <current_i>
	backemfreadingindex = 0; //initialise backemf reading index
     474:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <backemfreadingindex+0x1>
     478:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <backemfreadingindex>
	readadc = 0;
     47c:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <readadc+0x1>
     480:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <readadc>
	readadcv = 0;
     484:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <readadcv+0x1>
     488:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <readadcv>
	readadci = 0;
     48c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <readadci+0x1>
     490:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <readadci>
	numcycles = 0;
     494:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <numcycles+0x1>
     498:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <numcycles>
	voltagereference = 5000;
     49c:	88 e8       	ldi	r24, 0x88	; 136
     49e:	93 e1       	ldi	r25, 0x13	; 19
     4a0:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <voltagereference+0x1>
     4a4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <voltagereference>
	//set PWM ports as output
	DDRB |= ((1<<PB2)|(1<<PB1)|(1<<PB0));
     4a8:	87 b3       	in	r24, 0x17	; 23
     4aa:	87 60       	ori	r24, 0x07	; 7
     4ac:	87 bb       	out	0x17, r24	; 23
	DDRD |= ((1<<PD7)|(1<<PD5));
     4ae:	81 b3       	in	r24, 0x11	; 17
     4b0:	80 6a       	ori	r24, 0xA0	; 160
     4b2:	81 bb       	out	0x11, r24	; 17
	
	//set normal timer mode
	TCCR2 &= ~(1<<WGM20);
     4b4:	85 b5       	in	r24, 0x25	; 37
     4b6:	8f 7b       	andi	r24, 0xBF	; 191
     4b8:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(1<<WGM21);
     4ba:	85 b5       	in	r24, 0x25	; 37
     4bc:	87 7f       	andi	r24, 0xF7	; 247
     4be:	85 bd       	out	0x25, r24	; 37
	
	//disconnect OC2 port
	TCCR2 &= ~((1<<COM21) | (1<<COM20));
     4c0:	85 b5       	in	r24, 0x25	; 37
     4c2:	8f 7c       	andi	r24, 0xCF	; 207
     4c4:	85 bd       	out	0x25, r24	; 37
	
	//set output compare value for timer 2 between 0-255 (OCR2/255 % duty cycle)
	duty_request = 128;
     4c6:	80 e8       	ldi	r24, 0x80	; 128
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <duty_request+0x1>
     4ce:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <duty_request>
	OCR2 = duty_request;
     4d2:	80 e8       	ldi	r24, 0x80	; 128
     4d4:	83 bd       	out	0x23, r24	; 35
	
	//set prescaler of 64 (gives effective PWM frequency of 980Hz)
	//TCCR2 |= (1<<CS22);
	//TCCR2 &= ~((1<<CS21) | (1<<CS20));
	//set prescaler of 256 (gives effective PWM frequency of 245Hz)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     4d6:	85 b5       	in	r24, 0x25	; 37
     4d8:	86 60       	ori	r24, 0x06	; 6
     4da:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     4dc:	85 b5       	in	r24, 0x25	; 37
     4de:	8e 7f       	andi	r24, 0xFE	; 254
     4e0:	85 bd       	out	0x25, r24	; 37
	
	//turn off PMOSes, turn on NMOSes so motor brakes?!
	//turn off left PMOS
	PORTB &= ~(1<<PB2);
     4e2:	c2 98       	cbi	0x18, 2	; 24
	//turn on left NMOS
	PORTB |= (1<<PB1);
     4e4:	c1 9a       	sbi	0x18, 1	; 24
	//turn off right PMOS
	PORTD &= ~(1<<PD7);
     4e6:	97 98       	cbi	0x12, 7	; 18
	//turn on right NMOS
	PORTB |= (1<<PB0);
     4e8:	c0 9a       	sbi	0x18, 0	; 24
	
	//set timer 1 to normal mode
	TCCR1B &= ~((1<<WGM13) | (1<<WGM12));
     4ea:	8e b5       	in	r24, 0x2e	; 46
     4ec:	87 7e       	andi	r24, 0xE7	; 231
     4ee:	8e bd       	out	0x2e, r24	; 46
	TCCR1A &= ~((1<<WGM11) | (1<<WGM10));
     4f0:	8f b5       	in	r24, 0x2f	; 47
     4f2:	8c 7f       	andi	r24, 0xFC	; 252
     4f4:	8f bd       	out	0x2f, r24	; 47
	
	//set prescaler to /256
	TCCR1B |= (1<<CS12);
     4f6:	8e b5       	in	r24, 0x2e	; 46
     4f8:	84 60       	ori	r24, 0x04	; 4
     4fa:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1<<CS11) | (1<<CS10));
     4fc:	8e b5       	in	r24, 0x2e	; 46
     4fe:	8c 7f       	andi	r24, 0xFC	; 252
     500:	8e bd       	out	0x2e, r24	; 46
	
	//set timer 1 overflow A and B compare values
	OCR1A = 1250; //for T/4
     502:	82 ee       	ldi	r24, 0xE2	; 226
     504:	94 e0       	ldi	r25, 0x04	; 4
     506:	9b bd       	out	0x2b, r25	; 43
     508:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 2500; //for 12.5Hz resonant frequency (for T/2)
     50a:	84 ec       	ldi	r24, 0xC4	; 196
     50c:	99 e0       	ldi	r25, 0x09	; 9
     50e:	99 bd       	out	0x29, r25	; 41
     510:	88 bd       	out	0x28, r24	; 40
	//enable timer 2 compare match interrupt and overflow interrupt
	TIMSK |= ((1<<OCIE2) | (1<<TOIE2));
     512:	89 b7       	in	r24, 0x39	; 57
     514:	80 6c       	ori	r24, 0xC0	; 192
     516:	89 bf       	out	0x39, r24	; 57
	//enable timer 1 compare match A and B interrupts
	TIMSK |= ((1<<OCIE1A) | (1<<OCIE1B));
     518:	89 b7       	in	r24, 0x39	; 57
     51a:	88 61       	ori	r24, 0x18	; 24
     51c:	89 bf       	out	0x39, r24	; 57
	//enable timer 0 overflow interrupt
	TIMSK |= (1<<TOIE0);
     51e:	89 b7       	in	r24, 0x39	; 57
     520:	81 60       	ori	r24, 0x01	; 1
     522:	89 bf       	out	0x39, r24	; 57
	//mark T PWM pulse to be handled next
	t2 = 0;
     524:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <t2+0x1>
     528:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <t2>
	
	//enable and initialise UART
	uart_init();
     52c:	3b d6       	rcall	.+3190   	; 0x11a4 <uart_init>
	//enable and initialise ADC
	adc_init();
     52e:	b1 dd       	rcall	.-1182   	; 0x92 <adc_init>
	//enable global interrupts
	sei();
     530:	78 94       	sei
					//uart_transmit((freqright/(pow(10,log(freqright)))) + 48);//only transmit 1st DP
				}
				if (i == 99){
					//current value
					uart_transmit((current/1000) + 48);
					uart_transmit(((current/100) % 10) + 48);
     532:	9a e0       	ldi	r25, 0x0A	; 10
     534:	29 2e       	mov	r2, r25
     536:	31 2c       	mov	r3, r1
					uart_transmit(((duty_request/10) % 10) + 48);
					uart_transmit((duty_request % 10) + 48);
				}
				if (i == 32){
					//current flowrate value
					uart_transmit((OCR2/100) + 48);
     538:	14 e6       	ldi	r17, 0x64	; 100
     53a:	61 2e       	mov	r6, r17
					uart_transmit(((OCR2/10) % 10) + 48);
     53c:	0a e0       	ldi	r16, 0x0A	; 10
     53e:	70 2e       	mov	r7, r16
						TCCR0 &= ~((1<<CS01)|(1<<CS00));
						//read back emf voltage
						reading = adc_convert((adc_read(RHSVOLTAGECHANNEL)));
						if (reading < 3000){
							if (backemfreadingindex >= 3){
								backemfreadingindex = 2;
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	88 2e       	mov	r8, r24
     544:	91 2c       	mov	r9, r1
	sei();
    while (1)
    {
		//gradual duty cycle increase logic to couple with resonant frequency detection module
		//this is because changing the PWM duty cycle also changes the resonant frequency
		if (OCR2 < duty_request)
     546:	23 b5       	in	r18, 0x23	; 35
     548:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <duty_request>
     54c:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <duty_request+0x1>
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	28 17       	cp	r18, r24
     554:	39 07       	cpc	r19, r25
     556:	10 f4       	brcc	.+4      	; 0x55c <__stack+0xfd>
			OCR2 = duty_request + 1;
     558:	8f 5f       	subi	r24, 0xFF	; 255
     55a:	06 c0       	rjmp	.+12     	; 0x568 <__stack+0x109>
		else if (OCR2 > duty_request){
     55c:	23 b5       	in	r18, 0x23	; 35
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	82 17       	cp	r24, r18
     562:	93 07       	cpc	r25, r19
     564:	10 f4       	brcc	.+4      	; 0x56a <__stack+0x10b>
			OCR2 = duty_request - 1;
     566:	81 50       	subi	r24, 0x01	; 1
     568:	83 bd       	out	0x23, r24	; 35
			//DONT FORGET TO FREE MEMORY
			free(str_buffer);
			free(splitstrings);
		}*/
		
		if (data_received == 1){//using fixed-size fixed-order JSON
     56a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <data_received>
     56e:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <data_received+0x1>
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	91 05       	cpc	r25, r1
     576:	09 f0       	breq	.+2      	; 0x57a <__stack+0x11b>
     578:	47 c0       	rjmp	.+142    	; 0x608 <__stack+0x1a9>
			if (str_buffer[2] == '3') {
     57a:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <str_buffer+0x2>
     57e:	23 33       	cpi	r18, 0x33	; 51
     580:	09 f0       	breq	.+2      	; 0x584 <__stack+0x125>
     582:	42 c0       	rjmp	.+132    	; 0x608 <__stack+0x1a9>
				transmit_data = 1; //id detected, send transmission
     584:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <transmit_data+0x1>
     588:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <transmit_data>
				if (str_buffer[7] == 'm') {
     58c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <str_buffer+0x7>
     590:	8d 36       	cpi	r24, 0x6D	; 109
     592:	09 f0       	breq	.+2      	; 0x596 <__stack+0x137>
     594:	40 c0       	rjmp	.+128    	; 0x616 <__stack+0x1b7>
					if (str_buffer[8] == 'f') {
     596:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <str_buffer+0x8>
     59a:	86 36       	cpi	r24, 0x66	; 102
     59c:	e1 f5       	brne	.+120    	; 0x616 <__stack+0x1b7>
						if (str_buffer[9] == 'c') { //if mfc object detected, check request value
     59e:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <str_buffer+0x9>
     5a2:	83 36       	cpi	r24, 0x63	; 99
     5a4:	c1 f5       	brne	.+112    	; 0x616 <__stack+0x1b7>
							if (str_buffer[14] == 'r') {
     5a6:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <str_buffer+0xe>
     5aa:	82 37       	cpi	r24, 0x72	; 114
     5ac:	a1 f5       	brne	.+104    	; 0x616 <__stack+0x1b7>
								if (str_buffer[15] == 'e') {
     5ae:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <str_buffer+0xf>
     5b2:	85 36       	cpi	r24, 0x65	; 101
     5b4:	81 f5       	brne	.+96     	; 0x616 <__stack+0x1b7>
									if (str_buffer[16] == 'q') { //valid request detected, check request value
     5b6:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <str_buffer+0x10>
     5ba:	81 37       	cpi	r24, 0x71	; 113
     5bc:	61 f5       	brne	.+88     	; 0x616 <__stack+0x1b7>
										int reqval = (((str_buffer[20] - 48) * 100) + ((str_buffer[21] - 48) * 10) + (str_buffer[22] - 48));
										if ((reqval >= 0) && (reqval <= 255)){
     5be:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <str_buffer+0x14>
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	20 53       	subi	r18, 0x30	; 48
     5c6:	31 09       	sbc	r19, r1
     5c8:	62 9e       	mul	r6, r18
     5ca:	a0 01       	movw	r20, r0
     5cc:	63 9e       	mul	r6, r19
     5ce:	50 0d       	add	r21, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <str_buffer+0x15>
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	20 53       	subi	r18, 0x30	; 48
     5da:	31 09       	sbc	r19, r1
     5dc:	72 9e       	mul	r7, r18
     5de:	c0 01       	movw	r24, r0
     5e0:	73 9e       	mul	r7, r19
     5e2:	90 0d       	add	r25, r0
     5e4:	11 24       	eor	r1, r1
     5e6:	84 0f       	add	r24, r20
     5e8:	95 1f       	adc	r25, r21
     5ea:	20 91 ca 00 	lds	r18, 0x00CA	; 0x8000ca <str_buffer+0x16>
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	20 53       	subi	r18, 0x30	; 48
     5f2:	31 09       	sbc	r19, r1
     5f4:	82 0f       	add	r24, r18
     5f6:	93 1f       	adc	r25, r19
     5f8:	8f 3f       	cpi	r24, 0xFF	; 255
     5fa:	91 05       	cpc	r25, r1
     5fc:	09 f0       	breq	.+2      	; 0x600 <__stack+0x1a1>
     5fe:	58 f4       	brcc	.+22     	; 0x616 <__stack+0x1b7>
											duty_request = reqval; //set duty cycle request if valid value detected
     600:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <duty_request+0x1>
     604:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <duty_request>
						}
					}
				}
			}
		}
		if (transmit_data){
     608:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <transmit_data>
     60c:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <transmit_data+0x1>
     610:	89 2b       	or	r24, r25
     612:	09 f4       	brne	.+2      	; 0x616 <__stack+0x1b7>
     614:	06 c1       	rjmp	.+524    	; 0x822 <__stack+0x3c3>
			//disable receiver while transmitting to avoid echo-back
			UCSRB &= ~(1<<RXEN);
     616:	54 98       	cbi	0x0a, 4	; 10
			//char transmit_buffer[200];
			//sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3d\",\n%11s\"cur\": \"%3d\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%d.%dW\",\n%11s\"freq\": \"%d.%dHz\",\n%11s\"curr\": \"%dmA\",\n%11s\"volt\": \"%d.%dV\",\n%7s}\n%3s}\n}", "", "", "", "", "", duty_request, "", OCR2, "", "", "", "", "", powerleft, powerright, "", freqleft, freqright, "", current, "", voltleft, voltright, "", "");
			for (int i = 0; i < 260; ++i){
     618:	41 2c       	mov	r4, r1
     61a:	51 2c       	mov	r5, r1
				if (i == 23){
     61c:	07 e1       	ldi	r16, 0x17	; 23
     61e:	40 16       	cp	r4, r16
     620:	51 04       	cpc	r5, r1
     622:	e9 f4       	brne	.+58     	; 0x65e <__stack+0x1ff>
					//req flowrate value
					uart_transmit((duty_request/100) + 48);
     624:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <duty_request>
     628:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <duty_request+0x1>
     62c:	64 e6       	ldi	r22, 0x64	; 100
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	f5 d7       	rcall	.+4074   	; 0x161c <__udivmodhi4>
     632:	80 e3       	ldi	r24, 0x30	; 48
     634:	86 0f       	add	r24, r22
     636:	c5 d5       	rcall	.+2954   	; 0x11c2 <uart_transmit>
					uart_transmit(((duty_request/10) % 10) + 48);
     638:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <duty_request>
     63c:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <duty_request+0x1>
     640:	b1 01       	movw	r22, r2
     642:	ec d7       	rcall	.+4056   	; 0x161c <__udivmodhi4>
     644:	cb 01       	movw	r24, r22
     646:	b1 01       	movw	r22, r2
     648:	e9 d7       	rcall	.+4050   	; 0x161c <__udivmodhi4>
     64a:	80 5d       	subi	r24, 0xD0	; 208
     64c:	ba d5       	rcall	.+2932   	; 0x11c2 <uart_transmit>
					uart_transmit((duty_request % 10) + 48);
     64e:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <duty_request>
     652:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <duty_request+0x1>
     656:	b1 01       	movw	r22, r2
     658:	e1 d7       	rcall	.+4034   	; 0x161c <__udivmodhi4>
     65a:	80 5d       	subi	r24, 0xD0	; 208
     65c:	15 c0       	rjmp	.+42     	; 0x688 <__stack+0x229>
				}
				if (i == 32){
     65e:	10 e2       	ldi	r17, 0x20	; 32
     660:	41 16       	cp	r4, r17
     662:	51 04       	cpc	r5, r1
     664:	99 f4       	brne	.+38     	; 0x68c <__stack+0x22d>
					//current flowrate value
					uart_transmit((OCR2/100) + 48);
     666:	83 b5       	in	r24, 0x23	; 35
     668:	66 2d       	mov	r22, r6
     66a:	cc d7       	rcall	.+3992   	; 0x1604 <__udivmodqi4>
     66c:	80 5d       	subi	r24, 0xD0	; 208
     66e:	a9 d5       	rcall	.+2898   	; 0x11c2 <uart_transmit>
					uart_transmit(((OCR2/10) % 10) + 48);
     670:	83 b5       	in	r24, 0x23	; 35
     672:	67 2d       	mov	r22, r7
     674:	c7 d7       	rcall	.+3982   	; 0x1604 <__udivmodqi4>
     676:	c6 d7       	rcall	.+3980   	; 0x1604 <__udivmodqi4>
     678:	80 e3       	ldi	r24, 0x30	; 48
     67a:	89 0f       	add	r24, r25
     67c:	a2 d5       	rcall	.+2884   	; 0x11c2 <uart_transmit>
					uart_transmit((OCR2 % 10) + 48);
     67e:	83 b5       	in	r24, 0x23	; 35
     680:	67 2d       	mov	r22, r7
     682:	c0 d7       	rcall	.+3968   	; 0x1604 <__udivmodqi4>
     684:	80 e3       	ldi	r24, 0x30	; 48
     686:	89 0f       	add	r24, r25
     688:	9c d5       	rcall	.+2872   	; 0x11c2 <uart_transmit>
     68a:	61 c5       	rjmp	.+2754   	; 0x114e <__stack+0xcef>
				}
				if (i == 74){
     68c:	2a e4       	ldi	r18, 0x4A	; 74
     68e:	42 16       	cp	r4, r18
     690:	51 04       	cpc	r5, r1
     692:	e9 f4       	brne	.+58     	; 0x6ce <__stack+0x26f>
					//pwr left value
					if ((powerleft / 10) == 0){
     694:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <powerleft>
     698:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <powerleft+0x1>
     69c:	0a 97       	sbiw	r24, 0x0a	; 10
     69e:	28 f4       	brcc	.+10     	; 0x6aa <__stack+0x24b>
						uart_transmit(powerleft + 48);//transmit the number right away
     6a0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <powerleft>
     6a4:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <powerleft+0x1>
     6a8:	0f c0       	rjmp	.+30     	; 0x6c8 <__stack+0x269>
					}
					else{//split it into two digits
						uart_transmit((powerleft/10) + 48);
     6aa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <powerleft>
     6ae:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <powerleft+0x1>
     6b2:	b1 01       	movw	r22, r2
     6b4:	b3 d7       	rcall	.+3942   	; 0x161c <__udivmodhi4>
     6b6:	80 e3       	ldi	r24, 0x30	; 48
     6b8:	86 0f       	add	r24, r22
     6ba:	83 d5       	rcall	.+2822   	; 0x11c2 <uart_transmit>
						uart_transmit((powerleft % 10) + 48);
     6bc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <powerleft>
     6c0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <powerleft+0x1>
     6c4:	b1 01       	movw	r22, r2
     6c6:	aa d7       	rcall	.+3924   	; 0x161c <__udivmodhi4>
     6c8:	80 5d       	subi	r24, 0xD0	; 208
     6ca:	7b d5       	rcall	.+2806   	; 0x11c2 <uart_transmit>
     6cc:	2d c0       	rjmp	.+90     	; 0x728 <__stack+0x2c9>
					}
				}
				if (i == 75){
     6ce:	3b e4       	ldi	r19, 0x4B	; 75
     6d0:	43 16       	cp	r4, r19
     6d2:	51 04       	cpc	r5, r1
     6d4:	b1 f4       	brne	.+44     	; 0x702 <__stack+0x2a3>
					//pwr right value
					uart_transmit((powerright/100) + 48);//1st DP
     6d6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <powerright>
     6da:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <powerright+0x1>
     6de:	64 e6       	ldi	r22, 0x64	; 100
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	9c d7       	rcall	.+3896   	; 0x161c <__udivmodhi4>
     6e4:	80 e3       	ldi	r24, 0x30	; 48
     6e6:	86 0f       	add	r24, r22
     6e8:	6c d5       	rcall	.+2776   	; 0x11c2 <uart_transmit>
					uart_transmit(((powerright/10) % 10) + 48);//2nd DP
     6ea:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <powerright>
     6ee:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <powerright+0x1>
     6f2:	b1 01       	movw	r22, r2
     6f4:	93 d7       	rcall	.+3878   	; 0x161c <__udivmodhi4>
     6f6:	cb 01       	movw	r24, r22
     6f8:	b1 01       	movw	r22, r2
     6fa:	90 d7       	rcall	.+3872   	; 0x161c <__udivmodhi4>
     6fc:	80 5d       	subi	r24, 0xD0	; 208
     6fe:	61 d5       	rcall	.+2754   	; 0x11c2 <uart_transmit>
     700:	25 c0       	rjmp	.+74     	; 0x74c <__stack+0x2ed>
				}
				if (i == 86){
     702:	86 e5       	ldi	r24, 0x56	; 86
     704:	48 16       	cp	r4, r24
     706:	51 04       	cpc	r5, r1
     708:	09 f0       	breq	.+2      	; 0x70c <__stack+0x2ad>
     70a:	21 c5       	rjmp	.+2626   	; 0x114e <__stack+0xcef>
					//freq left value
					uart_transmit((freqleft/10) + 48);
     70c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <freqleft>
     710:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <freqleft+0x1>
     714:	b1 01       	movw	r22, r2
     716:	82 d7       	rcall	.+3844   	; 0x161c <__udivmodhi4>
     718:	80 e3       	ldi	r24, 0x30	; 48
     71a:	86 0f       	add	r24, r22
     71c:	52 d5       	rcall	.+2724   	; 0x11c2 <uart_transmit>
					uart_transmit((freqleft%10) + 48);
     71e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <freqleft>
     722:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <freqleft+0x1>
     726:	2f c0       	rjmp	.+94     	; 0x786 <__stack+0x327>
					uart_transmit((current/1000) + 48);
					uart_transmit(((current/100) % 10) + 48);
					uart_transmit(((current/10) % 10) + 48);
					uart_transmit((current % 10) + 48);
				}
				if (i == 112){
     728:	90 e7       	ldi	r25, 0x70	; 112
     72a:	49 16       	cp	r4, r25
     72c:	51 04       	cpc	r5, r1
     72e:	71 f4       	brne	.+28     	; 0x74c <__stack+0x2ed>
					//voltage left value
					uart_transmit((voltleft/10) + 48);
     730:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <voltleft>
     734:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <voltleft+0x1>
     738:	b1 01       	movw	r22, r2
     73a:	70 d7       	rcall	.+3808   	; 0x161c <__udivmodhi4>
     73c:	80 e3       	ldi	r24, 0x30	; 48
     73e:	86 0f       	add	r24, r22
     740:	40 d5       	rcall	.+2688   	; 0x11c2 <uart_transmit>
					uart_transmit((voltleft % 10) + 48);
     742:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <voltleft>
     746:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <voltleft+0x1>
     74a:	1d c0       	rjmp	.+58     	; 0x786 <__stack+0x327>
				}
				if (i == 113){
     74c:	a1 e7       	ldi	r26, 0x71	; 113
     74e:	4a 16       	cp	r4, r26
     750:	51 04       	cpc	r5, r1
     752:	e9 f4       	brne	.+58     	; 0x78e <__stack+0x32f>
					//voltage right value
					uart_transmit((voltright/100) + 48);
     754:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     758:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     75c:	64 e6       	ldi	r22, 0x64	; 100
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	5d d7       	rcall	.+3770   	; 0x161c <__udivmodhi4>
     762:	80 e3       	ldi	r24, 0x30	; 48
     764:	86 0f       	add	r24, r22
     766:	2d d5       	rcall	.+2650   	; 0x11c2 <uart_transmit>
					uart_transmit(((voltright/10) % 10) + 48);
     768:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     76c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     770:	b1 01       	movw	r22, r2
     772:	54 d7       	rcall	.+3752   	; 0x161c <__udivmodhi4>
     774:	cb 01       	movw	r24, r22
     776:	b1 01       	movw	r22, r2
     778:	51 d7       	rcall	.+3746   	; 0x161c <__udivmodhi4>
     77a:	80 5d       	subi	r24, 0xD0	; 208
     77c:	22 d5       	rcall	.+2628   	; 0x11c2 <uart_transmit>
					uart_transmit((voltright % 10) + 48);
     77e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     782:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     786:	b1 01       	movw	r22, r2
     788:	49 d7       	rcall	.+3730   	; 0x161c <__udivmodhi4>
     78a:	80 5d       	subi	r24, 0xD0	; 208
     78c:	1a d5       	rcall	.+2612   	; 0x11c2 <uart_transmit>
				}
				if ((i >= 118) && (i <= 168)){//error condition check
     78e:	c2 01       	movw	r24, r4
     790:	86 57       	subi	r24, 0x76	; 118
     792:	91 09       	sbc	r25, r1
     794:	c3 97       	sbiw	r24, 0x33	; 51
     796:	90 f5       	brcc	.+100    	; 0x7fc <__stack+0x39d>
					if (error){
     798:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <error>
     79c:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <error+0x1>
     7a0:	89 2b       	or	r24, r25
     7a2:	d9 f0       	breq	.+54     	; 0x7da <__stack+0x37b>
						if (i <= 136){
     7a4:	b9 e8       	ldi	r27, 0x89	; 137
     7a6:	4b 16       	cp	r4, r27
     7a8:	51 04       	cpc	r5, r1
     7aa:	44 f1       	brlt	.+80     	; 0x7fc <__stack+0x39d>
							uart_transmit(eeprom_read_byte((uint8_t*)i));//transmit clr object and error object header
						}
						else{//check to see which errors we have and transmit accordingly
							if (i <= 148){
     7ac:	e5 e9       	ldi	r30, 0x95	; 149
     7ae:	4e 16       	cp	r4, r30
     7b0:	51 04       	cpc	r5, r1
     7b2:	2c f4       	brge	.+10     	; 0x7be <__stack+0x35f>
								if (stalled){
     7b4:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <stalled>
     7b8:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <stalled+0x1>
     7bc:	0c c0       	rjmp	.+24     	; 0x7d6 <__stack+0x377>
								}
								else{
									uart_transmit(' '); //transmit whitespace
								}
							}
							else if (i == 149){
     7be:	f5 e9       	ldi	r31, 0x95	; 149
     7c0:	4f 16       	cp	r4, r31
     7c2:	51 04       	cpc	r5, r1
     7c4:	61 f0       	breq	.+24     	; 0x7de <__stack+0x37f>
								if (stalled && collision){
									uart_transmit(eeprom_read_byte((uint8_t*)i));//transmit comma if both errors present
								}
							}
							else if (i <= 166){
     7c6:	07 ea       	ldi	r16, 0xA7	; 167
     7c8:	40 16       	cp	r4, r16
     7ca:	51 04       	cpc	r5, r1
     7cc:	bc f4       	brge	.+46     	; 0x7fc <__stack+0x39d>
								if (collision){
     7ce:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <collision>
     7d2:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <collision+0x1>
     7d6:	89 2b       	or	r24, r25
     7d8:	89 f4       	brne	.+34     	; 0x7fc <__stack+0x39d>
							if (i <= 148){
								if (stalled){
									uart_transmit(eeprom_read_byte((uint8_t*)i));//transmit cmprstalled
								}
								else{
									uart_transmit(' '); //transmit whitespace
     7da:	80 e2       	ldi	r24, 0x20	; 32
     7dc:	11 c0       	rjmp	.+34     	; 0x800 <__stack+0x3a1>
								}
							}
							else if (i == 149){
								if (stalled && collision){
     7de:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <stalled>
     7e2:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <stalled+0x1>
     7e6:	89 2b       	or	r24, r25
     7e8:	61 f0       	breq	.+24     	; 0x802 <__stack+0x3a3>
     7ea:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <collision>
     7ee:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <collision+0x1>
     7f2:	89 2b       	or	r24, r25
     7f4:	31 f0       	breq	.+12     	; 0x802 <__stack+0x3a3>
									uart_transmit(eeprom_read_byte((uint8_t*)i));//transmit comma if both errors present
     7f6:	85 e9       	ldi	r24, 0x95	; 149
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	01 c0       	rjmp	.+2      	; 0x7fe <__stack+0x39f>
					else{
						uart_transmit(' '); //transmit whitespace
					}
				}
				else{//if no error condition, transmit json as usual from eeprom
					uart_transmit(eeprom_read_byte((uint8_t*)i));//we have stored the formatted json string in the eeprom to avoid PROGMEM overfill issues
     7fc:	c2 01       	movw	r24, r4
     7fe:	2a d8       	rcall	.-4012   	; 0xfffff854 <__eeprom_end+0xff7ef854>
     800:	e0 d4       	rcall	.+2496   	; 0x11c2 <uart_transmit>
		if (transmit_data){
			//disable receiver while transmitting to avoid echo-back
			UCSRB &= ~(1<<RXEN);
			//char transmit_buffer[200];
			//sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3d\",\n%11s\"cur\": \"%3d\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%d.%dW\",\n%11s\"freq\": \"%d.%dHz\",\n%11s\"curr\": \"%dmA\",\n%11s\"volt\": \"%d.%dV\",\n%7s}\n%3s}\n}", "", "", "", "", "", duty_request, "", OCR2, "", "", "", "", "", powerleft, powerright, "", freqleft, freqright, "", current, "", voltleft, voltright, "", "");
			for (int i = 0; i < 260; ++i){
     802:	1f ef       	ldi	r17, 0xFF	; 255
     804:	41 1a       	sub	r4, r17
     806:	51 0a       	sbc	r5, r17
     808:	24 e0       	ldi	r18, 0x04	; 4
     80a:	42 16       	cp	r4, r18
     80c:	21 e0       	ldi	r18, 0x01	; 1
     80e:	52 06       	cpc	r5, r18
     810:	09 f0       	breq	.+2      	; 0x814 <__stack+0x3b5>
     812:	04 cf       	rjmp	.-504    	; 0x61c <__stack+0x1bd>
			}
			//TODO: add code to detect and report errors/error messages
			//TODO: also add code to re-transmit errors if detected
			//uart_transmit_string(transmit_buffer);
			//wait for last transmission to fully complete
			while (UDREMPTY == 0);
     814:	5d 9b       	sbis	0x0b, 5	; 11
     816:	fe cf       	rjmp	.-4      	; 0x814 <__stack+0x3b5>
			//reenable receiver after transmission is complete
			UCSRB |= (1<<RXEN);
     818:	54 9a       	sbi	0x0a, 4	; 10
			transmit_data = 0;
     81a:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <transmit_data+0x1>
     81e:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <transmit_data>
		}
		//uart_transmit(48);
		//if adc has to be read
		if (numcycles >= 50){
     822:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <numcycles>
     826:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <numcycles+0x1>
     82a:	c2 97       	sbiw	r24, 0x32	; 50
     82c:	08 f4       	brcc	.+2      	; 0x830 <__stack+0x3d1>
     82e:	b8 c2       	rjmp	.+1392   	; 0xda0 <__stack+0x941>
			if (readadc){
     830:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <readadc>
     834:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <readadc+0x1>
     838:	89 2b       	or	r24, r25
     83a:	09 f4       	brne	.+2      	; 0x83e <__stack+0x3df>
     83c:	b1 c2       	rjmp	.+1378   	; 0xda0 <__stack+0x941>
				//TODO: fix the order of these if-conditions to properly read ADC at the correct intervals
				//if (!backemffound){
					if (readadcmotorleft){
     83e:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <readadcmotorleft>
     842:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <readadcmotorleft+0x1>
     846:	89 2b       	or	r24, r25
     848:	09 f4       	brne	.+2      	; 0x84c <__stack+0x3ed>
     84a:	fd c0       	rjmp	.+506    	; 0xa46 <__stack+0x5e7>
						//turn off timer 0
						TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     84c:	83 b7       	in	r24, 0x33	; 51
     84e:	88 7f       	andi	r24, 0xF8	; 248
     850:	83 bf       	out	0x33, r24	; 51
						//store time value for current sample
						backemftime = (TCNT0 + (timer0_ovf_count*256)); //store time value in 16 microsecond ticks
     852:	82 b7       	in	r24, 0x32	; 50
     854:	00 91 ef 00 	lds	r16, 0x00EF	; 0x8000ef <timer0_ovf_count>
     858:	10 91 f0 00 	lds	r17, 0x00F0	; 0x8000f0 <timer0_ovf_count+0x1>
     85c:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <timer0_ovf_count+0x2>
     860:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <timer0_ovf_count+0x3>
     864:	32 2f       	mov	r19, r18
     866:	21 2f       	mov	r18, r17
     868:	10 2f       	mov	r17, r16
     86a:	00 27       	eor	r16, r16
     86c:	08 0f       	add	r16, r24
     86e:	11 1d       	adc	r17, r1
     870:	21 1d       	adc	r18, r1
     872:	31 1d       	adc	r19, r1
     874:	00 93 6e 00 	sts	0x006E, r16	; 0x80006e <backemftime>
     878:	10 93 6f 00 	sts	0x006F, r17	; 0x80006f <backemftime+0x1>
     87c:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <backemftime+0x2>
     880:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <backemftime+0x3>
     884:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <backemftime+0x4>
     888:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <backemftime+0x5>
     88c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <backemftime+0x6>
     890:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <backemftime+0x7>
						//turn on timer 0 with prescaler /256 to keep measuring time
						TCCR0 |= ((1<<CS02));
     894:	83 b7       	in	r24, 0x33	; 51
     896:	84 60       	ori	r24, 0x04	; 4
     898:	83 bf       	out	0x33, r24	; 51
						TCCR0 &= ~((1<<CS01)|(1<<CS00));
     89a:	83 b7       	in	r24, 0x33	; 51
     89c:	8c 7f       	andi	r24, 0xFC	; 252
     89e:	83 bf       	out	0x33, r24	; 51
						
						reading = adc_convert((adc_read(LHSVOLTAGECHANNEL)));
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	dd db       	rcall	.-2118   	; 0x5e <adc_read>
     8a4:	e8 db       	rcall	.-2096   	; 0x76 <adc_convert>
     8a6:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <reading+0x1>
     8aa:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <reading>
						if (reading < 3000){
     8ae:	68 3b       	cpi	r22, 0xB8	; 184
     8b0:	3b e0       	ldi	r19, 0x0B	; 11
     8b2:	73 07       	cpc	r23, r19
     8b4:	08 f0       	brcs	.+2      	; 0x8b8 <__stack+0x459>
     8b6:	65 c0       	rjmp	.+202    	; 0x982 <__stack+0x523>
							if (backemfreadingindex >= 3){
     8b8:	20 91 ea 00 	lds	r18, 0x00EA	; 0x8000ea <backemfreadingindex>
     8bc:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <backemfreadingindex+0x1>
     8c0:	23 30       	cpi	r18, 0x03	; 3
     8c2:	31 05       	cpc	r19, r1
     8c4:	c0 f0       	brcs	.+48     	; 0x8f6 <__stack+0x497>
								backemfreadingindex = 2;
     8c6:	90 92 eb 00 	sts	0x00EB, r9	; 0x8000eb <backemfreadingindex+0x1>
     8ca:	80 92 ea 00 	sts	0x00EA, r8	; 0x8000ea <backemfreadingindex>
								backemfreading[0] = backemfreading[1];
     8ce:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <backemfreading+0x2>
     8d2:	30 91 fb 00 	lds	r19, 0x00FB	; 0x8000fb <backemfreading+0x3>
     8d6:	30 93 f9 00 	sts	0x00F9, r19	; 0x8000f9 <backemfreading+0x1>
     8da:	20 93 f8 00 	sts	0x00F8, r18	; 0x8000f8 <backemfreading>
								backemfreading[1] = backemfreading[2];
     8de:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <backemfreading+0x4>
     8e2:	30 91 fd 00 	lds	r19, 0x00FD	; 0x8000fd <backemfreading+0x5>
     8e6:	30 93 fb 00 	sts	0x00FB, r19	; 0x8000fb <backemfreading+0x3>
     8ea:	20 93 fa 00 	sts	0x00FA, r18	; 0x8000fa <backemfreading+0x2>
								backemfreading[2] = 0;
     8ee:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <backemfreading+0x5>
     8f2:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <backemfreading+0x4>
							}
							if ((backemf_i_mod % 2) == 0){
     8f6:	40 91 8e 00 	lds	r20, 0x008E	; 0x80008e <backemf_i_mod>
     8fa:	50 91 8f 00 	lds	r21, 0x008F	; 0x80008f <backemf_i_mod+0x1>
     8fe:	40 fd       	sbrc	r20, 0
     900:	3a c0       	rjmp	.+116    	; 0x976 <__stack+0x517>
								if (backemf_i != NUMSAMPLESI){
     902:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <backemf_i>
     906:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <backemf_i+0x1>
     90a:	22 33       	cpi	r18, 0x32	; 50
     90c:	31 05       	cpc	r19, r1
     90e:	a9 f0       	breq	.+42     	; 0x93a <__stack+0x4db>
									backemfarray[backemf_i] = reading;
     910:	f9 01       	movw	r30, r18
     912:	ee 0f       	add	r30, r30
     914:	ff 1f       	adc	r31, r31
     916:	ee 0f       	add	r30, r30
     918:	ff 1f       	adc	r31, r31
     91a:	e0 57       	subi	r30, 0x70	; 112
     91c:	fd 4f       	sbci	r31, 0xFD	; 253
     91e:	6b 01       	movw	r12, r22
     920:	7c 01       	movw	r14, r24
     922:	ee 24       	eor	r14, r14
     924:	ff 24       	eor	r15, r15
     926:	c0 82       	st	Z, r12
     928:	d1 82       	std	Z+1, r13	; 0x01
     92a:	e2 82       	std	Z+2, r14	; 0x02
     92c:	f3 82       	std	Z+3, r15	; 0x03
									backemf_i++;
     92e:	2f 5f       	subi	r18, 0xFF	; 255
     930:	3f 4f       	sbci	r19, 0xFF	; 255
     932:	30 93 91 00 	sts	0x0091, r19	; 0x800091 <backemf_i+0x1>
     936:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <backemf_i>
								}
								if (backemf_i_mod > 10){
     93a:	4b 30       	cpi	r20, 0x0B	; 11
     93c:	51 05       	cpc	r21, r1
     93e:	d8 f0       	brcs	.+54     	; 0x976 <__stack+0x517>
									backemfreading[backemfreadingindex] = reading;
     940:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <backemfreadingindex>
     944:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <backemfreadingindex+0x1>
     948:	ee 0f       	add	r30, r30
     94a:	ff 1f       	adc	r31, r31
     94c:	e8 50       	subi	r30, 0x08	; 8
     94e:	ff 4f       	sbci	r31, 0xFF	; 255
     950:	71 83       	std	Z+1, r23	; 0x01
     952:	60 83       	st	Z, r22
									if (backemfreadingindex < 3) ++backemfreadingindex;
     954:	20 91 ea 00 	lds	r18, 0x00EA	; 0x8000ea <backemfreadingindex>
     958:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <backemfreadingindex+0x1>
     95c:	23 30       	cpi	r18, 0x03	; 3
     95e:	31 05       	cpc	r19, r1
     960:	50 f4       	brcc	.+20     	; 0x976 <__stack+0x517>
     962:	20 91 ea 00 	lds	r18, 0x00EA	; 0x8000ea <backemfreadingindex>
     966:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <backemfreadingindex+0x1>
     96a:	2f 5f       	subi	r18, 0xFF	; 255
     96c:	3f 4f       	sbci	r19, 0xFF	; 255
     96e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <backemfreadingindex+0x1>
     972:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <backemfreadingindex>
								}
							}
							backemf_i_mod++;
     976:	ca 01       	movw	r24, r20
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <backemf_i_mod+0x1>
     97e:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <backemf_i_mod>
						}
						//if we have gathered at least 3 samples so far, start testing for maximum point reachage
						if (backemfreadingindex == 3){
     982:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <backemfreadingindex>
     986:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <backemfreadingindex+0x1>
     98a:	03 97       	sbiw	r24, 0x03	; 3
     98c:	09 f0       	breq	.+2      	; 0x990 <__stack+0x531>
     98e:	5e c1       	rjmp	.+700    	; 0xc4c <__stack+0x7ed>
							if (((backemfreading[2] - backemfreading[1]) < 5) && ((backemfreading[1] - backemfreading[0]) < 5)){//hysteresis of 50mV
     990:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <backemfreading+0x2>
     994:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <backemfreading+0x3>
     998:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <backemfreading+0x4>
     99c:	30 91 fd 00 	lds	r19, 0x00FD	; 0x8000fd <backemfreading+0x5>
     9a0:	28 1b       	sub	r18, r24
     9a2:	39 0b       	sbc	r19, r25
     9a4:	25 30       	cpi	r18, 0x05	; 5
     9a6:	31 05       	cpc	r19, r1
     9a8:	08 f0       	brcs	.+2      	; 0x9ac <__stack+0x54d>
     9aa:	50 c1       	rjmp	.+672    	; 0xc4c <__stack+0x7ed>
     9ac:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <backemfreading>
     9b0:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <backemfreading+0x1>
     9b4:	82 1b       	sub	r24, r18
     9b6:	93 0b       	sbc	r25, r19
     9b8:	05 97       	sbiw	r24, 0x05	; 5
     9ba:	08 f0       	brcs	.+2      	; 0x9be <__stack+0x55f>
     9bc:	47 c1       	rjmp	.+654    	; 0xc4c <__stack+0x7ed>
								//we have found max, reset timer 0 count and overflow counter, and calculate frequency using stored time
								backemffound = 1;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <backemffound+0x1>
     9c6:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <backemffound>
								//backemf_i = 0;
								backemf_i_mod = 0;
     9ca:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <backemf_i_mod+0x1>
     9ce:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <backemf_i_mod>
								//char buf[10];
								//sprintf(buf,"%d",backemftime);
								//uart_transmit_string(buf);
								TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     9d2:	83 b7       	in	r24, 0x33	; 51
     9d4:	88 7f       	andi	r24, 0xF8	; 248
     9d6:	83 bf       	out	0x33, r24	; 51
								TCNT0 = 0;
     9d8:	12 be       	out	0x32, r1	; 50
								timer0_ovf_count = 0;
     9da:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <timer0_ovf_count>
     9de:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <timer0_ovf_count+0x1>
     9e2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <timer0_ovf_count+0x2>
     9e6:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <timer0_ovf_count+0x3>
								backemffreq = 1000000000/backemftime; //find backemf frequency in millihertz
     9ea:	a0 90 6e 00 	lds	r10, 0x006E	; 0x80006e <backemftime>
     9ee:	b0 90 6f 00 	lds	r11, 0x006F	; 0x80006f <backemftime+0x1>
     9f2:	c0 90 70 00 	lds	r12, 0x0070	; 0x800070 <backemftime+0x2>
     9f6:	d0 90 71 00 	lds	r13, 0x0071	; 0x800071 <backemftime+0x3>
     9fa:	e0 90 72 00 	lds	r14, 0x0072	; 0x800072 <backemftime+0x4>
     9fe:	f0 90 73 00 	lds	r15, 0x0073	; 0x800073 <backemftime+0x5>
     a02:	00 91 74 00 	lds	r16, 0x0074	; 0x800074 <backemftime+0x6>
     a06:	10 91 75 00 	lds	r17, 0x0075	; 0x800075 <backemftime+0x7>
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	3a ec       	ldi	r19, 0xCA	; 202
     a0e:	4a e9       	ldi	r20, 0x9A	; 154
     a10:	5b e3       	ldi	r21, 0x3B	; 59
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	9f d6       	rcall	.+3390   	; 0x175a <__udivdi3>
     a1c:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <backemffreq>
     a20:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <backemffreq+0x1>
     a24:	40 93 78 00 	sts	0x0078, r20	; 0x800078 <backemffreq+0x2>
     a28:	50 93 79 00 	sts	0x0079, r21	; 0x800079 <backemffreq+0x3>
     a2c:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <backemffreq+0x4>
     a30:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <backemffreq+0x5>
     a34:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <backemffreq+0x6>
     a38:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <backemffreq+0x7>
								readadcmotorleft = 0;//we have successfully found back-emf, no need to keep reading
     a3c:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <readadcmotorleft+0x1>
     a40:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <readadcmotorleft>
     a44:	03 c1       	rjmp	.+518    	; 0xc4c <__stack+0x7ed>
						
						//left side motor back emf is ready to be read, start timer and keep reading (and storing current and previous timer value each time) until max value stabilises
						//possibly enable ADC interrupt and write a separate function to do non-blocking ADC converts and timer stores to not block other code
						//once max has stabilised and corresponding time has been obtained, calculate resonant frequency and adjust duty cycle on next while () iteration (if required) and do resonant_done = 1;
					}
					else if (readadcmotorright){
     a46:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <readadcmotorright>
     a4a:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <readadcmotorright+0x1>
     a4e:	89 2b       	or	r24, r25
     a50:	09 f4       	brne	.+2      	; 0xa54 <__stack+0x5f5>
     a52:	fc c0       	rjmp	.+504    	; 0xc4c <__stack+0x7ed>
						//turn off timer 0
						TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     a54:	83 b7       	in	r24, 0x33	; 51
     a56:	88 7f       	andi	r24, 0xF8	; 248
     a58:	83 bf       	out	0x33, r24	; 51
						//store time value for current sample
						backemftime = (TCNT0 + (timer0_ovf_count*256)); //store time value in 16 microseconds
     a5a:	82 b7       	in	r24, 0x32	; 50
     a5c:	00 91 ef 00 	lds	r16, 0x00EF	; 0x8000ef <timer0_ovf_count>
     a60:	10 91 f0 00 	lds	r17, 0x00F0	; 0x8000f0 <timer0_ovf_count+0x1>
     a64:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <timer0_ovf_count+0x2>
     a68:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <timer0_ovf_count+0x3>
     a6c:	32 2f       	mov	r19, r18
     a6e:	21 2f       	mov	r18, r17
     a70:	10 2f       	mov	r17, r16
     a72:	00 27       	eor	r16, r16
     a74:	08 0f       	add	r16, r24
     a76:	11 1d       	adc	r17, r1
     a78:	21 1d       	adc	r18, r1
     a7a:	31 1d       	adc	r19, r1
     a7c:	00 93 6e 00 	sts	0x006E, r16	; 0x80006e <backemftime>
     a80:	10 93 6f 00 	sts	0x006F, r17	; 0x80006f <backemftime+0x1>
     a84:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <backemftime+0x2>
     a88:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <backemftime+0x3>
     a8c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <backemftime+0x4>
     a90:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <backemftime+0x5>
     a94:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <backemftime+0x6>
     a98:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <backemftime+0x7>
						//turn on timer 0 with prescaler /256 to keep measuring time
						TCCR0 |= ((1<<CS02));
     a9c:	83 b7       	in	r24, 0x33	; 51
     a9e:	84 60       	ori	r24, 0x04	; 4
     aa0:	83 bf       	out	0x33, r24	; 51
						TCCR0 &= ~((1<<CS01)|(1<<CS00));
     aa2:	83 b7       	in	r24, 0x33	; 51
     aa4:	8c 7f       	andi	r24, 0xFC	; 252
     aa6:	83 bf       	out	0x33, r24	; 51
						//read back emf voltage
						reading = adc_convert((adc_read(RHSVOLTAGECHANNEL)));
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	d9 da       	rcall	.-2638   	; 0x5e <adc_read>
     aac:	e4 da       	rcall	.-2616   	; 0x76 <adc_convert>
     aae:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <reading+0x1>
     ab2:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <reading>
						if (reading < 3000){
     ab6:	68 3b       	cpi	r22, 0xB8	; 184
     ab8:	ab e0       	ldi	r26, 0x0B	; 11
     aba:	7a 07       	cpc	r23, r26
     abc:	08 f0       	brcs	.+2      	; 0xac0 <__stack+0x661>
     abe:	65 c0       	rjmp	.+202    	; 0xb8a <__stack+0x72b>
							if (backemfreadingindex >= 3){
     ac0:	20 91 ea 00 	lds	r18, 0x00EA	; 0x8000ea <backemfreadingindex>
     ac4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <backemfreadingindex+0x1>
     ac8:	23 30       	cpi	r18, 0x03	; 3
     aca:	31 05       	cpc	r19, r1
     acc:	c0 f0       	brcs	.+48     	; 0xafe <__stack+0x69f>
								backemfreadingindex = 2;
     ace:	90 92 eb 00 	sts	0x00EB, r9	; 0x8000eb <backemfreadingindex+0x1>
     ad2:	80 92 ea 00 	sts	0x00EA, r8	; 0x8000ea <backemfreadingindex>
								backemfreading[0] = backemfreading[1];
     ad6:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <backemfreading+0x2>
     ada:	30 91 fb 00 	lds	r19, 0x00FB	; 0x8000fb <backemfreading+0x3>
     ade:	30 93 f9 00 	sts	0x00F9, r19	; 0x8000f9 <backemfreading+0x1>
     ae2:	20 93 f8 00 	sts	0x00F8, r18	; 0x8000f8 <backemfreading>
								backemfreading[1] = backemfreading[2];
     ae6:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <backemfreading+0x4>
     aea:	30 91 fd 00 	lds	r19, 0x00FD	; 0x8000fd <backemfreading+0x5>
     aee:	30 93 fb 00 	sts	0x00FB, r19	; 0x8000fb <backemfreading+0x3>
     af2:	20 93 fa 00 	sts	0x00FA, r18	; 0x8000fa <backemfreading+0x2>
								backemfreading[2] = 0;
     af6:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <backemfreading+0x5>
     afa:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <backemfreading+0x4>
							}
							if ((backemf_i_mod % 2) == 0){
     afe:	40 91 8e 00 	lds	r20, 0x008E	; 0x80008e <backemf_i_mod>
     b02:	50 91 8f 00 	lds	r21, 0x008F	; 0x80008f <backemf_i_mod+0x1>
     b06:	40 fd       	sbrc	r20, 0
     b08:	3a c0       	rjmp	.+116    	; 0xb7e <__stack+0x71f>
								if (backemf_i != NUMSAMPLESI){
     b0a:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <backemf_i>
     b0e:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <backemf_i+0x1>
     b12:	22 33       	cpi	r18, 0x32	; 50
     b14:	31 05       	cpc	r19, r1
     b16:	a9 f0       	breq	.+42     	; 0xb42 <__stack+0x6e3>
									backemfarray[backemf_i] = reading;
     b18:	f9 01       	movw	r30, r18
     b1a:	ee 0f       	add	r30, r30
     b1c:	ff 1f       	adc	r31, r31
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	e0 57       	subi	r30, 0x70	; 112
     b24:	fd 4f       	sbci	r31, 0xFD	; 253
     b26:	6b 01       	movw	r12, r22
     b28:	7c 01       	movw	r14, r24
     b2a:	ee 24       	eor	r14, r14
     b2c:	ff 24       	eor	r15, r15
     b2e:	c0 82       	st	Z, r12
     b30:	d1 82       	std	Z+1, r13	; 0x01
     b32:	e2 82       	std	Z+2, r14	; 0x02
     b34:	f3 82       	std	Z+3, r15	; 0x03
									backemf_i++;
     b36:	2f 5f       	subi	r18, 0xFF	; 255
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	30 93 91 00 	sts	0x0091, r19	; 0x800091 <backemf_i+0x1>
     b3e:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <backemf_i>
								}
								if (backemf_i_mod > 10){
     b42:	4b 30       	cpi	r20, 0x0B	; 11
     b44:	51 05       	cpc	r21, r1
     b46:	d8 f0       	brcs	.+54     	; 0xb7e <__stack+0x71f>
									backemfreading[backemfreadingindex] = reading;
     b48:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <backemfreadingindex>
     b4c:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <backemfreadingindex+0x1>
     b50:	ee 0f       	add	r30, r30
     b52:	ff 1f       	adc	r31, r31
     b54:	e8 50       	subi	r30, 0x08	; 8
     b56:	ff 4f       	sbci	r31, 0xFF	; 255
     b58:	71 83       	std	Z+1, r23	; 0x01
     b5a:	60 83       	st	Z, r22
									if (backemfreadingindex < 3) ++backemfreadingindex;
     b5c:	20 91 ea 00 	lds	r18, 0x00EA	; 0x8000ea <backemfreadingindex>
     b60:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <backemfreadingindex+0x1>
     b64:	23 30       	cpi	r18, 0x03	; 3
     b66:	31 05       	cpc	r19, r1
     b68:	50 f4       	brcc	.+20     	; 0xb7e <__stack+0x71f>
     b6a:	20 91 ea 00 	lds	r18, 0x00EA	; 0x8000ea <backemfreadingindex>
     b6e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <backemfreadingindex+0x1>
     b72:	2f 5f       	subi	r18, 0xFF	; 255
     b74:	3f 4f       	sbci	r19, 0xFF	; 255
     b76:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <backemfreadingindex+0x1>
     b7a:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <backemfreadingindex>
								}
							}
							backemf_i_mod++;
     b7e:	ca 01       	movw	r24, r20
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <backemf_i_mod+0x1>
     b86:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <backemf_i_mod>
						}
						
						//if we have gathered at least 3 samples so far, start testing for maximum point reachage
						if (backemfreadingindex == 3){
     b8a:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <backemfreadingindex>
     b8e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <backemfreadingindex+0x1>
     b92:	03 97       	sbiw	r24, 0x03	; 3
     b94:	09 f0       	breq	.+2      	; 0xb98 <__stack+0x739>
     b96:	5a c0       	rjmp	.+180    	; 0xc4c <__stack+0x7ed>
							if (((backemfreading[2] - backemfreading[1]) < 5) && ((backemfreading[1] - backemfreading[0]) < 5)){//hysteresis of 50mV
     b98:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <backemfreading+0x2>
     b9c:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <backemfreading+0x3>
     ba0:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <backemfreading+0x4>
     ba4:	30 91 fd 00 	lds	r19, 0x00FD	; 0x8000fd <backemfreading+0x5>
     ba8:	28 1b       	sub	r18, r24
     baa:	39 0b       	sbc	r19, r25
     bac:	25 30       	cpi	r18, 0x05	; 5
     bae:	31 05       	cpc	r19, r1
     bb0:	08 f0       	brcs	.+2      	; 0xbb4 <__stack+0x755>
     bb2:	4c c0       	rjmp	.+152    	; 0xc4c <__stack+0x7ed>
     bb4:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <backemfreading>
     bb8:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <backemfreading+0x1>
     bbc:	82 1b       	sub	r24, r18
     bbe:	93 0b       	sbc	r25, r19
     bc0:	05 97       	sbiw	r24, 0x05	; 5
     bc2:	08 f0       	brcs	.+2      	; 0xbc6 <__stack+0x767>
     bc4:	43 c0       	rjmp	.+134    	; 0xc4c <__stack+0x7ed>
								//we have found max, reset timer 0 count and overflow counter, and calculate frequency using stored time
								backemffound = 1;
     bc6:	e1 e0       	ldi	r30, 0x01	; 1
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <backemffound+0x1>
     bce:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <backemffound>
								//backemf_i = 0;
								backemf_i_mod = 0;
     bd2:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <backemf_i_mod+0x1>
     bd6:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <backemf_i_mod>
								//char buf[10];
								//sprintf(buf,"%d",backemftime);
								//uart_transmit_string(buf);
								TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     bda:	83 b7       	in	r24, 0x33	; 51
     bdc:	88 7f       	andi	r24, 0xF8	; 248
     bde:	83 bf       	out	0x33, r24	; 51
								TCNT0 = 0;
     be0:	12 be       	out	0x32, r1	; 50
								timer0_ovf_count = 0;
     be2:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <timer0_ovf_count>
     be6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <timer0_ovf_count+0x1>
     bea:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <timer0_ovf_count+0x2>
     bee:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <timer0_ovf_count+0x3>
								backemffreq = 1000000000/backemftime; //find backemf frequency in millihertz
     bf2:	a0 90 6e 00 	lds	r10, 0x006E	; 0x80006e <backemftime>
     bf6:	b0 90 6f 00 	lds	r11, 0x006F	; 0x80006f <backemftime+0x1>
     bfa:	c0 90 70 00 	lds	r12, 0x0070	; 0x800070 <backemftime+0x2>
     bfe:	d0 90 71 00 	lds	r13, 0x0071	; 0x800071 <backemftime+0x3>
     c02:	e0 90 72 00 	lds	r14, 0x0072	; 0x800072 <backemftime+0x4>
     c06:	f0 90 73 00 	lds	r15, 0x0073	; 0x800073 <backemftime+0x5>
     c0a:	00 91 74 00 	lds	r16, 0x0074	; 0x800074 <backemftime+0x6>
     c0e:	10 91 75 00 	lds	r17, 0x0075	; 0x800075 <backemftime+0x7>
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	3a ec       	ldi	r19, 0xCA	; 202
     c16:	4a e9       	ldi	r20, 0x9A	; 154
     c18:	5b e3       	ldi	r21, 0x3B	; 59
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	9b d5       	rcall	.+2870   	; 0x175a <__udivdi3>
     c24:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <backemffreq>
     c28:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <backemffreq+0x1>
     c2c:	40 93 78 00 	sts	0x0078, r20	; 0x800078 <backemffreq+0x2>
     c30:	50 93 79 00 	sts	0x0079, r21	; 0x800079 <backemffreq+0x3>
     c34:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <backemffreq+0x4>
     c38:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <backemffreq+0x5>
     c3c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <backemffreq+0x6>
     c40:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <backemffreq+0x7>
								readadcmotorright = 0;//we have successfully found back-emf, no need to keep reading
     c44:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <readadcmotorright+0x1>
     c48:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <readadcmotorright>
						//possibly enable ADC interrupt and write a separate function to do non-blocking ADC converts and timer stores to not block other code
						//once max has stabilised and corresponding time has been obtained, calculate resonant frequency and adjust duty cycle on next while () iteration (if required) and do resonant_done = 1;
					}
			//	}
				//else{//resonant frequency calculation has priority, so do everything else in this else block
				if (readadcv){
     c4c:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <readadcv>
     c50:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <readadcv+0x1>
     c54:	89 2b       	or	r24, r25
     c56:	09 f1       	breq	.+66     	; 0xc9a <__stack+0x83b>
					/*if (voltage_left_on){
						//read motor_left for VCC
						reading = adc_convert(adc_read(LHSVOLTAGECHANNEL));
						voltagereading = (reading - 220)*2.6997; //store actual voltage value
					}*/
					if (voltage_right_on){
     c58:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <voltage_right_on>
     c5c:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <voltage_right_on+0x1>
     c60:	89 2b       	or	r24, r25
     c62:	b1 f0       	breq	.+44     	; 0xc90 <__stack+0x831>
						//read motor_right for VCC
						reading = adc_convert(adc_read(RHSVOLTAGECHANNEL));
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	fb d9       	rcall	.-3082   	; 0x5e <adc_read>
     c68:	06 da       	rcall	.-3060   	; 0x76 <adc_convert>
     c6a:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <reading+0x1>
     c6e:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <reading>
						voltagereading = (reading - 220)*2.6997; //store actual voltage value
     c72:	6c 5d       	subi	r22, 0xDC	; 220
     c74:	71 09       	sbc	r23, r1
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	1c d3       	rcall	.+1592   	; 0x12b4 <__floatunsisf>
     c7c:	23 ee       	ldi	r18, 0xE3	; 227
     c7e:	37 ec       	ldi	r19, 0xC7	; 199
     c80:	4c e2       	ldi	r20, 0x2C	; 44
     c82:	50 e4       	ldi	r21, 0x40	; 64
     c84:	cb d3       	rcall	.+1942   	; 0x141c <__mulsf3>
     c86:	ea d2       	rcall	.+1492   	; 0x125c <__fixunssfsi>
     c88:	70 93 95 00 	sts	0x0095, r23	; 0x800095 <voltagereading+0x1>
     c8c:	60 93 94 00 	sts	0x0094, r22	; 0x800094 <voltagereading>
					}
					//we have read voltage value (only need to do this once because we are assuming Vcc remains constant between PWM pulses), turn off voltage reading flag
					readadcv = 0;
     c90:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <readadcv+0x1>
     c94:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <readadcv>
     c98:	83 c0       	rjmp	.+262    	; 0xda0 <__stack+0x941>
				}
				else if (readadci){
     c9a:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <readadci>
     c9e:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <readadci+0x1>
     ca2:	89 2b       	or	r24, r25
     ca4:	09 f4       	brne	.+2      	; 0xca8 <__stack+0x849>
     ca6:	7c c0       	rjmp	.+248    	; 0xda0 <__stack+0x941>
					if (currentreadingindex != NUMSAMPLESI){
     ca8:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <currentreadingindex>
     cac:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <currentreadingindex+0x1>
     cb0:	c2 97       	sbiw	r24, 0x32	; 50
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <__stack+0x857>
     cb4:	75 c0       	rjmp	.+234    	; 0xda0 <__stack+0x941>
						//uart_transmit(voltage_left_on + 48);
						//uart_transmit(voltage_right_on + 48);
						//uart_transmit('\n');
						if ((voltage_left_on) || (voltage_right_on)){
     cb6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <voltage_left_on>
     cba:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <voltage_left_on+0x1>
     cbe:	89 2b       	or	r24, r25
     cc0:	31 f4       	brne	.+12     	; 0xcce <__stack+0x86f>
     cc2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <voltage_right_on>
     cc6:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <voltage_right_on+0x1>
     cca:	89 2b       	or	r24, r25
     ccc:	a1 f1       	breq	.+104    	; 0xd36 <__stack+0x8d7>
							//store current ADC samples into array, do NOT reset the index between sampling intervals so we can build up a full array
							//also at the same time, multiply adc current value by the voltage value to get the instantaneous power array
							//store only alternate samples (i % 50 == 0) (so we don't get more than ~50 samples for the whole of T/4)
							reading = adc_convert(adc_read(ISHIFTEDCHANNEL));
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	c6 d9       	rcall	.-3188   	; 0x5e <adc_read>
     cd2:	d1 d9       	rcall	.-3166   	; 0x76 <adc_convert>
     cd4:	9b 01       	movw	r18, r22
     cd6:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <reading+0x1>
     cda:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <reading>
							if((current_i % 2) == 0){
     cde:	40 91 b0 00 	lds	r20, 0x00B0	; 0x8000b0 <current_i>
     ce2:	50 91 b1 00 	lds	r21, 0x00B1	; 0x8000b1 <current_i+0x1>
     ce6:	40 fd       	sbrc	r20, 0
     ce8:	52 c0       	rjmp	.+164    	; 0xd8e <__stack+0x92f>
								currentarray[currentreadingindex] = reading; //store i_sense_shifted voltage
     cea:	e0 91 f3 00 	lds	r30, 0x00F3	; 0x8000f3 <currentreadingindex>
     cee:	f0 91 f4 00 	lds	r31, 0x00F4	; 0x8000f4 <currentreadingindex+0x1>
     cf2:	ee 0f       	add	r30, r30
     cf4:	ff 1f       	adc	r31, r31
     cf6:	ee 0f       	add	r30, r30
     cf8:	ff 1f       	adc	r31, r31
     cfa:	ea 53       	subi	r30, 0x3A	; 58
     cfc:	fe 4f       	sbci	r31, 0xFE	; 254
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	aa 27       	eor	r26, r26
     d04:	bb 27       	eor	r27, r27
     d06:	80 83       	st	Z, r24
     d08:	91 83       	std	Z+1, r25	; 0x01
     d0a:	a2 83       	std	Z+2, r26	; 0x02
     d0c:	b3 83       	std	Z+3, r27	; 0x03
								//powerarray[currentreadingindex] = currentarray[currentreadingindex] * voltagereading; //store power in uW
								++currentreadingindex;
     d0e:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <currentreadingindex>
     d12:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <currentreadingindex+0x1>
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <currentreadingindex+0x1>
     d1c:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <currentreadingindex>
								if (reading > 3000) {//short circuit condition test
     d20:	29 3b       	cpi	r18, 0xB9	; 185
     d22:	3b 40       	sbci	r19, 0x0B	; 11
     d24:	a0 f1       	brcs	.+104    	; 0xd8e <__stack+0x92f>
									shortcircuit = 1;
     d26:	cc 24       	eor	r12, r12
     d28:	c3 94       	inc	r12
     d2a:	d1 2c       	mov	r13, r1
     d2c:	d0 92 93 00 	sts	0x0093, r13	; 0x800093 <shortcircuit+0x1>
     d30:	c0 92 92 00 	sts	0x0092, r12	; 0x800092 <shortcircuit>
     d34:	2c c0       	rjmp	.+88     	; 0xd8e <__stack+0x92f>
								}
							}
						}
						else if ((!voltage_left_on) && (!voltage_right_on)){
     d36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <voltage_left_on>
     d3a:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <voltage_left_on+0x1>
     d3e:	89 2b       	or	r24, r25
     d40:	31 f5       	brne	.+76     	; 0xd8e <__stack+0x92f>
     d42:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <voltage_right_on>
     d46:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <voltage_right_on+0x1>
     d4a:	89 2b       	or	r24, r25
     d4c:	01 f5       	brne	.+64     	; 0xd8e <__stack+0x92f>
							//if PWM is turned off, current is 0
							//therefore store a 0 in the array (again, do not reset the index yet)
							//but make sure to read still ADC to generate the correct number of samples (because we don't have a spare timer)
							//also at the same time, multiply adc current value by the voltage value to get the instantaneous power array
							//store only alternate samples (every 25th sample using (i % 50 == 0)) (so we don't get more than ~50 samples)
							adc_convert(adc_read(ISHIFTEDCHANNEL));
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	86 d9       	rcall	.-3316   	; 0x5e <adc_read>
     d52:	91 d9       	rcall	.-3294   	; 0x76 <adc_convert>
							if ((current_i % 2) == 0){
     d54:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <current_i>
     d58:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <current_i+0x1>
     d5c:	80 fd       	sbrc	r24, 0
     d5e:	17 c0       	rjmp	.+46     	; 0xd8e <__stack+0x92f>
								currentarray[currentreadingindex] = 0;
     d60:	e0 91 f3 00 	lds	r30, 0x00F3	; 0x8000f3 <currentreadingindex>
     d64:	f0 91 f4 00 	lds	r31, 0x00F4	; 0x8000f4 <currentreadingindex+0x1>
     d68:	ee 0f       	add	r30, r30
     d6a:	ff 1f       	adc	r31, r31
     d6c:	ee 0f       	add	r30, r30
     d6e:	ff 1f       	adc	r31, r31
     d70:	ea 53       	subi	r30, 0x3A	; 58
     d72:	fe 4f       	sbci	r31, 0xFE	; 254
     d74:	10 82       	st	Z, r1
     d76:	11 82       	std	Z+1, r1	; 0x01
     d78:	12 82       	std	Z+2, r1	; 0x02
     d7a:	13 82       	std	Z+3, r1	; 0x03
								//powerarray[currentreadingindex] = 0;
								++currentreadingindex;
     d7c:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <currentreadingindex>
     d80:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <currentreadingindex+0x1>
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <currentreadingindex+0x1>
     d8a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <currentreadingindex>
							}
						}
						++current_i;
     d8e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <current_i>
     d92:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <current_i+0x1>
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <current_i+0x1>
     d9c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <current_i>
				//}
			}
		}
		
		//driving frequency adjustment here
		if (backemffound){
     da0:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <backemffound>
     da4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <backemffound+0x1>
     da8:	89 2b       	or	r24, r25
     daa:	09 f4       	brne	.+2      	; 0xdae <__stack+0x94f>
     dac:	77 c0       	rjmp	.+238    	; 0xe9c <__stack+0xa3d>
			char buf[10];
			if (TCNT1 < OCR1A){
     dae:	2c b5       	in	r18, 0x2c	; 44
     db0:	3d b5       	in	r19, 0x2d	; 45
     db2:	8a b5       	in	r24, 0x2a	; 42
     db4:	9b b5       	in	r25, 0x2b	; 43
     db6:	28 17       	cp	r18, r24
     db8:	39 07       	cpc	r19, r25
     dba:	08 f0       	brcs	.+2      	; 0xdbe <__stack+0x95f>
     dbc:	69 c0       	rjmp	.+210    	; 0xe90 <__stack+0xa31>
				//if (((backemftime - OCR1A) < 1000) || (OCR1A - (backemftime) < 1000)){
				backemffound = 0; //reset found flag
     dbe:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <backemffound+0x1>
     dc2:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <backemffound>
				backemf_i = 0;
     dc6:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <backemf_i+0x1>
     dca:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <backemf_i>
				backemf_i_mod = 0;
     dce:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <backemf_i_mod+0x1>
     dd2:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <backemf_i_mod>
				char buf[10];
				//sprintf(buf,"freq: %u\n",backemffreq * 0.25);
				//uart_transmit_string(buf);
				//backemftime = 1250;
				if ((backemftime > 1100) && (backemftime < 1600)){
     dd6:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <backemftime>
     dda:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <backemftime+0x1>
     dde:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <backemftime+0x2>
     de2:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <backemftime+0x3>
     de6:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <backemftime+0x4>
     dea:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <backemftime+0x5>
     dee:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <backemftime+0x6>
     df2:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <backemftime+0x7>
     df6:	2c 34       	cpi	r18, 0x4C	; 76
     df8:	34 40       	sbci	r19, 0x04	; 4
     dfa:	41 05       	cpc	r20, r1
     dfc:	51 05       	cpc	r21, r1
     dfe:	61 05       	cpc	r22, r1
     e00:	71 05       	cpc	r23, r1
     e02:	81 05       	cpc	r24, r1
     e04:	91 05       	cpc	r25, r1
     e06:	09 f0       	breq	.+2      	; 0xe0a <__stack+0x9ab>
     e08:	08 f4       	brcc	.+2      	; 0xe0c <__stack+0x9ad>
     e0a:	42 c0       	rjmp	.+132    	; 0xe90 <__stack+0xa31>
     e0c:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <backemftime>
     e10:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <backemftime+0x1>
     e14:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <backemftime+0x2>
     e18:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <backemftime+0x3>
     e1c:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <backemftime+0x4>
     e20:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <backemftime+0x5>
     e24:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <backemftime+0x6>
     e28:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <backemftime+0x7>
     e2c:	2f 33       	cpi	r18, 0x3F	; 63
     e2e:	36 40       	sbci	r19, 0x06	; 6
     e30:	41 05       	cpc	r20, r1
     e32:	51 05       	cpc	r21, r1
     e34:	61 05       	cpc	r22, r1
     e36:	71 05       	cpc	r23, r1
     e38:	81 05       	cpc	r24, r1
     e3a:	91 05       	cpc	r25, r1
     e3c:	09 f0       	breq	.+2      	; 0xe40 <__stack+0x9e1>
     e3e:	40 f5       	brcc	.+80     	; 0xe90 <__stack+0xa31>
					OCR1A = backemftime; //t/4 = backemf/16
     e40:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <backemftime>
     e44:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <backemftime+0x1>
     e48:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <backemftime+0x2>
     e4c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <backemftime+0x3>
     e50:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <backemftime+0x4>
     e54:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <backemftime+0x5>
     e58:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <backemftime+0x6>
     e5c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <backemftime+0x7>
     e60:	83 2f       	mov	r24, r19
     e62:	92 2f       	mov	r25, r18
     e64:	9b bd       	out	0x2b, r25	; 43
     e66:	8a bd       	out	0x2a, r24	; 42
					OCR1B = backemftime * 2;//t/2 is always 2 * t/4
     e68:	00 91 6e 00 	lds	r16, 0x006E	; 0x80006e <backemftime>
     e6c:	10 91 6f 00 	lds	r17, 0x006F	; 0x80006f <backemftime+0x1>
     e70:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <backemftime+0x2>
     e74:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <backemftime+0x3>
     e78:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <backemftime+0x4>
     e7c:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <backemftime+0x5>
     e80:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <backemftime+0x6>
     e84:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <backemftime+0x7>
     e88:	00 0f       	add	r16, r16
     e8a:	11 1f       	adc	r17, r17
     e8c:	19 bd       	out	0x29, r17	; 41
     e8e:	08 bd       	out	0x28, r16	; 40
				//}
			}
			
			
			//sprintf(buf,"natural time: %u\n",backemftime);
			uart_transmit_string(buf);
     e90:	ce 01       	movw	r24, r28
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	9a d1       	rcall	.+820    	; 0x11ca <uart_transmit_string>
			//sprintf(buf,"driving time: %u\n",OCR1A);
			uart_transmit_string(buf);
     e96:	ce 01       	movw	r24, r28
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	97 d1       	rcall	.+814    	; 0x11ca <uart_transmit_string>
			//}
			//backemffound = 0;
		}
		
		//once we have done adc readings, do rms/power calcs and store the values in their proper places
		if (currentreadingindex == NUMSAMPLESI){
     e9c:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <currentreadingindex>
     ea0:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <currentreadingindex+0x1>
     ea4:	c2 97       	sbiw	r24, 0x32	; 50
     ea6:	09 f0       	breq	.+2      	; 0xeaa <__stack+0xa4b>
     ea8:	4e cb       	rjmp	.-2404   	; 0x546 <__stack+0xe7>
			for (int i = 0; i < NUMSAMPLESI; ++i){
				if (currentarray[i] != 0){
					currentarray[i] = (((currentarray[i] - 200) * 0.2445)) * 10; //store actual current value (mA)
					//currentarray[i] = (((currentarray[i] - 220) * 0.2074)) * 10; //store actual current value (mA)
				}
				powerarray[i] = currentarray[i] * voltagereading;
     eaa:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <voltagereading>
     eae:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <voltagereading+0x1>
     eb2:	3c 8f       	std	Y+28, r19	; 0x1c
     eb4:	2b 8f       	std	Y+27, r18	; 0x1b
     eb6:	c9 01       	movw	r24, r18
     eb8:	a0 e0       	ldi	r26, 0x00	; 0
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	8f 8b       	std	Y+23, r24	; 0x17
     ebe:	98 8f       	std	Y+24, r25	; 0x18
     ec0:	a9 8f       	std	Y+25, r26	; 0x19
     ec2:	ba 8f       	std	Y+26, r27	; 0x1a
     ec4:	40 90 86 00 	lds	r4, 0x0086	; 0x800086 <currentvalue>
     ec8:	50 90 87 00 	lds	r5, 0x0087	; 0x800087 <currentvalue+0x1>
     ecc:	60 90 88 00 	lds	r6, 0x0088	; 0x800088 <currentvalue+0x2>
     ed0:	70 90 89 00 	lds	r7, 0x0089	; 0x800089 <currentvalue+0x3>
     ed4:	80 90 8a 00 	lds	r8, 0x008A	; 0x80008a <currentvalue+0x4>
     ed8:	90 90 8b 00 	lds	r9, 0x008B	; 0x80008b <currentvalue+0x5>
     edc:	b0 91 8c 00 	lds	r27, 0x008C	; 0x80008c <currentvalue+0x6>
     ee0:	bb 8b       	std	Y+19, r27	; 0x13
     ee2:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <currentvalue+0x7>
     ee6:	ec 8b       	std	Y+20, r30	; 0x14
     ee8:	0e ef       	ldi	r16, 0xFE	; 254
     eea:	10 e0       	ldi	r17, 0x00	; 0
     eec:	1e 8b       	std	Y+22, r17	; 0x16
     eee:	0d 8b       	std	Y+21, r16	; 0x15
     ef0:	26 ec       	ldi	r18, 0xC6	; 198
     ef2:	31 e0       	ldi	r19, 0x01	; 1
     ef4:	3c 87       	std	Y+12, r19	; 0x0c
     ef6:	2b 87       	std	Y+11, r18	; 0x0b
		if (currentreadingindex == NUMSAMPLESI){
			//calculate RMS current
			//uart_transmit_string("works\n");
			
			for (int i = 0; i < NUMSAMPLESI; ++i){
				if (currentarray[i] != 0){
     ef8:	eb 85       	ldd	r30, Y+11	; 0x0b
     efa:	fc 85       	ldd	r31, Y+12	; 0x0c
     efc:	80 81       	ld	r24, Z
     efe:	91 81       	ldd	r25, Z+1	; 0x01
     f00:	a2 81       	ldd	r26, Z+2	; 0x02
     f02:	b3 81       	ldd	r27, Z+3	; 0x03
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	a1 05       	cpc	r26, r1
     f08:	b1 05       	cpc	r27, r1
     f0a:	c9 f0       	breq	.+50     	; 0xf3e <__stack+0xadf>
					currentarray[i] = (((currentarray[i] - 200) * 0.2445)) * 10; //store actual current value (mA)
     f0c:	bc 01       	movw	r22, r24
     f0e:	cd 01       	movw	r24, r26
     f10:	68 5c       	subi	r22, 0xC8	; 200
     f12:	71 09       	sbc	r23, r1
     f14:	81 09       	sbc	r24, r1
     f16:	91 09       	sbc	r25, r1
     f18:	cd d1       	rcall	.+922    	; 0x12b4 <__floatunsisf>
     f1a:	25 e3       	ldi	r18, 0x35	; 53
     f1c:	3e e5       	ldi	r19, 0x5E	; 94
     f1e:	4a e7       	ldi	r20, 0x7A	; 122
     f20:	5e e3       	ldi	r21, 0x3E	; 62
     f22:	7c d2       	rcall	.+1272   	; 0x141c <__mulsf3>
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e2       	ldi	r20, 0x20	; 32
     f2a:	51 e4       	ldi	r21, 0x41	; 65
     f2c:	77 d2       	rcall	.+1262   	; 0x141c <__mulsf3>
     f2e:	96 d1       	rcall	.+812    	; 0x125c <__fixunssfsi>
     f30:	ab 85       	ldd	r26, Y+11	; 0x0b
     f32:	bc 85       	ldd	r27, Y+12	; 0x0c
     f34:	6d 93       	st	X+, r22
     f36:	7d 93       	st	X+, r23
     f38:	8d 93       	st	X+, r24
     f3a:	9c 93       	st	X, r25
     f3c:	13 97       	sbiw	r26, 0x03	; 3
					//currentarray[i] = (((currentarray[i] - 220) * 0.2074)) * 10; //store actual current value (mA)
				}
				powerarray[i] = currentarray[i] * voltagereading;
     f3e:	eb 85       	ldd	r30, Y+11	; 0x0b
     f40:	fc 85       	ldd	r31, Y+12	; 0x0c
     f42:	c0 80       	ld	r12, Z
     f44:	d1 80       	ldd	r13, Z+1	; 0x01
     f46:	e2 80       	ldd	r14, Z+2	; 0x02
     f48:	f3 80       	ldd	r15, Z+3	; 0x03
     f4a:	a7 01       	movw	r20, r14
     f4c:	96 01       	movw	r18, r12
     f4e:	6f 89       	ldd	r22, Y+23	; 0x17
     f50:	78 8d       	ldd	r23, Y+24	; 0x18
     f52:	89 8d       	ldd	r24, Y+25	; 0x19
     f54:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f56:	47 d3       	rcall	.+1678   	; 0x15e6 <__mulsi3>
     f58:	ad 89       	ldd	r26, Y+21	; 0x15
     f5a:	be 89       	ldd	r27, Y+22	; 0x16
     f5c:	6d 93       	st	X+, r22
     f5e:	7d 93       	st	X+, r23
     f60:	8d 93       	st	X+, r24
     f62:	9d 93       	st	X+, r25
     f64:	be 8b       	std	Y+22, r27	; 0x16
     f66:	ad 8b       	std	Y+21, r26	; 0x15
				
				currentarray[i] = square(currentarray[i]); //square
     f68:	c7 01       	movw	r24, r14
     f6a:	b6 01       	movw	r22, r12
     f6c:	a3 d1       	rcall	.+838    	; 0x12b4 <__floatunsisf>
     f6e:	fb d2       	rcall	.+1526   	; 0x1566 <square>
     f70:	75 d1       	rcall	.+746    	; 0x125c <__fixunssfsi>
     f72:	eb 85       	ldd	r30, Y+11	; 0x0b
     f74:	fc 85       	ldd	r31, Y+12	; 0x0c
     f76:	61 93       	st	Z+, r22
     f78:	71 93       	st	Z+, r23
     f7a:	81 93       	st	Z+, r24
     f7c:	91 93       	st	Z+, r25
     f7e:	fc 87       	std	Y+12, r31	; 0x0c
     f80:	eb 87       	std	Y+11, r30	; 0x0b
				
				powervalue += powerarray[i]; //summation of power 
				currentvalue += currentarray[i];//summation of current^2
     f82:	5b 01       	movw	r10, r22
     f84:	6c 01       	movw	r12, r24
     f86:	9b 01       	movw	r18, r22
     f88:	a6 01       	movw	r20, r12
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	52 01       	movw	r10, r4
     f94:	63 01       	movw	r12, r6
     f96:	74 01       	movw	r14, r8
     f98:	0b 89       	ldd	r16, Y+19	; 0x13
     f9a:	1c 89       	ldd	r17, Y+20	; 0x14
     f9c:	46 d4       	rcall	.+2188   	; 0x182a <__adddi3>
     f9e:	29 01       	movw	r4, r18
     fa0:	3a 01       	movw	r6, r20
     fa2:	4b 01       	movw	r8, r22
     fa4:	8b 8b       	std	Y+19, r24	; 0x13
     fa6:	9c 8b       	std	Y+20, r25	; 0x14
		//once we have done adc readings, do rms/power calcs and store the values in their proper places
		if (currentreadingindex == NUMSAMPLESI){
			//calculate RMS current
			//uart_transmit_string("works\n");
			
			for (int i = 0; i < NUMSAMPLESI; ++i){
     fa8:	be e8       	ldi	r27, 0x8E	; 142
     faa:	cb 2e       	mov	r12, r27
     fac:	b2 e0       	ldi	r27, 0x02	; 2
     fae:	db 2e       	mov	r13, r27
     fb0:	ce 16       	cp	r12, r30
     fb2:	df 06       	cpc	r13, r31
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <__stack+0xb59>
     fb6:	a0 cf       	rjmp	.-192    	; 0xef8 <__stack+0xa99>
				
				powervalue += powerarray[i]; //summation of power 
				currentvalue += currentarray[i];//summation of current^2
			}
			currentvalue /= NUMSAMPLESI; //mean
			currentvalue = sqrt(currentvalue); //root - gives RMS current in (mA)
     fb8:	22 e3       	ldi	r18, 0x32	; 50
     fba:	a2 2e       	mov	r10, r18
     fbc:	b1 2c       	mov	r11, r1
     fbe:	c1 2c       	mov	r12, r1
     fc0:	d1 2c       	mov	r13, r1
     fc2:	e1 2c       	mov	r14, r1
     fc4:	f1 2c       	mov	r15, r1
     fc6:	00 e0       	ldi	r16, 0x00	; 0
     fc8:	10 e0       	ldi	r17, 0x00	; 0
     fca:	92 01       	movw	r18, r4
     fcc:	c6 d3       	rcall	.+1932   	; 0x175a <__udivdi3>
     fce:	af d1       	rcall	.+862    	; 0x132e <__floatundisf>
     fd0:	8c d2       	rcall	.+1304   	; 0x14ea <sqrt>
			currentvalue /= 2; //since we are operating bidirectional current and only reading the "ON" period of the signals for (T/4 + T/4) = T/2, we need halve our obtained RMS value
     fd2:	0f d1       	rcall	.+542    	; 0x11f2 <__fixunssfdi>
     fd4:	01 e0       	ldi	r16, 0x01	; 1
     fd6:	0d d4       	rcall	.+2074   	; 0x17f2 <__lshrdi3>
     fd8:	49 01       	movw	r8, r18
     fda:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <currentvalue>
     fde:	90 92 87 00 	sts	0x0087, r9	; 0x800087 <currentvalue+0x1>
     fe2:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <currentvalue+0x2>
     fe6:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <currentvalue+0x3>
     fea:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <currentvalue+0x4>
     fee:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <currentvalue+0x5>
     ff2:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <currentvalue+0x6>
     ff6:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <currentvalue+0x7>
			
			powervalue = currentvalue * voltagereading; //power mean (uW)
     ffa:	eb 8c       	ldd	r14, Y+27	; 0x1b
     ffc:	fc 8c       	ldd	r15, Y+28	; 0x1c
     ffe:	67 01       	movw	r12, r14
    1000:	e1 2c       	mov	r14, r1
    1002:	f1 2c       	mov	r15, r1
    1004:	00 e0       	ldi	r16, 0x00	; 0
    1006:	10 e0       	ldi	r17, 0x00	; 0
    1008:	98 01       	movw	r18, r16
    100a:	cb 86       	std	Y+11, r12	; 0x0b
    100c:	dc 86       	std	Y+12, r13	; 0x0c
    100e:	ed 86       	std	Y+13, r14	; 0x0d
    1010:	fe 86       	std	Y+14, r15	; 0x0e
    1012:	0f 87       	std	Y+15, r16	; 0x0f
    1014:	18 8b       	std	Y+16, r17	; 0x10
    1016:	29 8b       	std	Y+17, r18	; 0x11
    1018:	3a 8b       	std	Y+18, r19	; 0x12
    101a:	54 01       	movw	r10, r8
    101c:	6a 01       	movw	r12, r20
    101e:	7b 01       	movw	r14, r22
    1020:	8c 01       	movw	r16, r24
    1022:	2b 85       	ldd	r18, Y+11	; 0x0b
    1024:	3c 85       	ldd	r19, Y+12	; 0x0c
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	40 d3       	rcall	.+1664   	; 0x16b4 <__muldi3>
    1034:	2b 87       	std	Y+11, r18	; 0x0b
    1036:	3b 8b       	std	Y+19, r19	; 0x13
    1038:	2a 01       	movw	r4, r20
    103a:	6c 8b       	std	Y+20, r22	; 0x14
    103c:	7d 8b       	std	Y+21, r23	; 0x15
    103e:	8f 8b       	std	Y+23, r24	; 0x17
    1040:	9d 8f       	std	Y+29, r25	; 0x1d
			powervalue /= 1000; //gives average power in (mW)
    1042:	48 ee       	ldi	r20, 0xE8	; 232
    1044:	a4 2e       	mov	r10, r20
    1046:	53 e0       	ldi	r21, 0x03	; 3
    1048:	b5 2e       	mov	r11, r21
    104a:	c1 2c       	mov	r12, r1
    104c:	d1 2c       	mov	r13, r1
    104e:	e1 2c       	mov	r14, r1
    1050:	f1 2c       	mov	r15, r1
    1052:	00 e0       	ldi	r16, 0x00	; 0
    1054:	10 e0       	ldi	r17, 0x00	; 0
    1056:	a2 01       	movw	r20, r4
    1058:	80 d3       	rcall	.+1792   	; 0x175a <__udivdi3>
    105a:	2e 8f       	std	Y+30, r18	; 0x1e
    105c:	3f 8f       	std	Y+31, r19	; 0x1f
    105e:	48 a3       	std	Y+32, r20	; 0x20
    1060:	59 a3       	std	Y+33, r21	; 0x21
    1062:	3b 01       	movw	r6, r22
    1064:	8a a3       	std	Y+34, r24	; 0x22
    1066:	9b a3       	std	Y+35, r25	; 0x23
    1068:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <__data_end>
    106c:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <__data_end+0x1>
    1070:	40 93 80 00 	sts	0x0080, r20	; 0x800080 <__data_end+0x2>
    1074:	50 93 81 00 	sts	0x0081, r21	; 0x800081 <__data_end+0x3>
    1078:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <__data_end+0x4>
    107c:	70 92 83 00 	sts	0x0083, r7	; 0x800083 <__data_end+0x5>
    1080:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end+0x6>
    1084:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x7>
			//sprintf(buf,"current = %u\n",powervalue);
			//uart_transmit_string(buf);
			//put all the found circuit parameters into the proper format for transmission)
			voltleft = voltagereading/1000;
    1088:	8b 8d       	ldd	r24, Y+27	; 0x1b
    108a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    108c:	68 ee       	ldi	r22, 0xE8	; 232
    108e:	73 e0       	ldi	r23, 0x03	; 3
    1090:	c5 d2       	rcall	.+1418   	; 0x161c <__udivmodhi4>
    1092:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <voltleft+0x1>
    1096:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <voltleft>
			voltright = voltagereading % 1000;
    109a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
    109e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			
			uint32_t freqfull = backemffreq * 0.25; //total frequency = f(T/4) / 4
    10a2:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <backemffreq>
    10a6:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <backemffreq+0x1>
    10aa:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <backemffreq+0x2>
    10ae:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <backemffreq+0x3>
    10b2:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <backemffreq+0x4>
    10b6:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <backemffreq+0x5>
    10ba:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <backemffreq+0x6>
    10be:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <backemffreq+0x7>
    10c2:	35 d1       	rcall	.+618    	; 0x132e <__floatundisf>
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e8       	ldi	r20, 0x80	; 128
    10ca:	5e e3       	ldi	r21, 0x3E	; 62
    10cc:	a7 d1       	rcall	.+846    	; 0x141c <__mulsf3>
    10ce:	c6 d0       	rcall	.+396    	; 0x125c <__fixunssfsi>
			freqleft = freqfull/1000;
    10d0:	28 ee       	ldi	r18, 0xE8	; 232
    10d2:	33 e0       	ldi	r19, 0x03	; 3
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	b5 d2       	rcall	.+1386   	; 0x1644 <__udivmodsi4>
    10da:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <freqleft+0x1>
    10de:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <freqleft>
			freqright = freqfull % 1000;
    10e2:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <freqright+0x1>
    10e6:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <freqright>
			
			current = currentvalue; //current is already in mA
    10ea:	80 92 64 00 	sts	0x0064, r8	; 0x800064 <current>
    10ee:	90 92 65 00 	sts	0x0065, r9	; 0x800065 <current+0x1>
			
			powerleft = powervalue / 1000;
    10f2:	60 e4       	ldi	r22, 0x40	; 64
    10f4:	a6 2e       	mov	r10, r22
    10f6:	72 e4       	ldi	r23, 0x42	; 66
    10f8:	b7 2e       	mov	r11, r23
    10fa:	ef e0       	ldi	r30, 0x0F	; 15
    10fc:	ce 2e       	mov	r12, r30
    10fe:	f1 2c       	mov	r15, r1
    1100:	00 e0       	ldi	r16, 0x00	; 0
    1102:	2b 85       	ldd	r18, Y+11	; 0x0b
    1104:	3b 89       	ldd	r19, Y+19	; 0x13
    1106:	a2 01       	movw	r20, r4
    1108:	6c 89       	ldd	r22, Y+20	; 0x14
    110a:	7d 89       	ldd	r23, Y+21	; 0x15
    110c:	8f 89       	ldd	r24, Y+23	; 0x17
    110e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1110:	24 d3       	rcall	.+1608   	; 0x175a <__udivdi3>
    1112:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <powerleft+0x1>
    1116:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <powerleft>
			powerright = powervalue % 1000;
    111a:	f8 ee       	ldi	r31, 0xE8	; 232
    111c:	af 2e       	mov	r10, r31
    111e:	a3 e0       	ldi	r26, 0x03	; 3
    1120:	ba 2e       	mov	r11, r26
    1122:	c1 2c       	mov	r12, r1
    1124:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1126:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1128:	48 a1       	ldd	r20, Y+32	; 0x20
    112a:	59 a1       	ldd	r21, Y+33	; 0x21
    112c:	b3 01       	movw	r22, r6
    112e:	8a a1       	ldd	r24, Y+34	; 0x22
    1130:	9b a1       	ldd	r25, Y+35	; 0x23
    1132:	11 d3       	rcall	.+1570   	; 0x1756 <__umoddi3>
    1134:	30 93 6b 00 	sts	0x006B, r19	; 0x80006b <powerright+0x1>
    1138:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <powerright>
			
			//reset ADC indices
			current_i = 0;
    113c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <current_i+0x1>
    1140:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <current_i>
			currentreadingindex = 0;
    1144:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <currentreadingindex+0x1>
    1148:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <currentreadingindex>
    114c:	f5 c9       	rjmp	.-3094   	; 0x538 <__stack+0xd9>
				}
				if (i == 87){
					//freq right value
					//uart_transmit((freqright/(pow(10,log(freqright)))) + 48);//only transmit 1st DP
				}
				if (i == 99){
    114e:	13 e6       	ldi	r17, 0x63	; 99
    1150:	41 16       	cp	r4, r17
    1152:	51 04       	cpc	r5, r1
    1154:	09 f0       	breq	.+2      	; 0x1158 <__stack+0xcf9>
    1156:	e8 ca       	rjmp	.-2608   	; 0x728 <__stack+0x2c9>
					//current value
					uart_transmit((current/1000) + 48);
    1158:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current>
    115c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current+0x1>
    1160:	68 ee       	ldi	r22, 0xE8	; 232
    1162:	73 e0       	ldi	r23, 0x03	; 3
    1164:	5b d2       	rcall	.+1206   	; 0x161c <__udivmodhi4>
    1166:	80 e3       	ldi	r24, 0x30	; 48
    1168:	86 0f       	add	r24, r22
    116a:	2b d0       	rcall	.+86     	; 0x11c2 <uart_transmit>
					uart_transmit(((current/100) % 10) + 48);
    116c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current>
    1170:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current+0x1>
    1174:	64 e6       	ldi	r22, 0x64	; 100
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	51 d2       	rcall	.+1186   	; 0x161c <__udivmodhi4>
    117a:	cb 01       	movw	r24, r22
    117c:	b1 01       	movw	r22, r2
    117e:	4e d2       	rcall	.+1180   	; 0x161c <__udivmodhi4>
    1180:	80 5d       	subi	r24, 0xD0	; 208
    1182:	1f d0       	rcall	.+62     	; 0x11c2 <uart_transmit>
					uart_transmit(((current/10) % 10) + 48);
    1184:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current>
    1188:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current+0x1>
    118c:	b1 01       	movw	r22, r2
    118e:	46 d2       	rcall	.+1164   	; 0x161c <__udivmodhi4>
    1190:	cb 01       	movw	r24, r22
    1192:	b1 01       	movw	r22, r2
    1194:	43 d2       	rcall	.+1158   	; 0x161c <__udivmodhi4>
    1196:	80 5d       	subi	r24, 0xD0	; 208
    1198:	14 d0       	rcall	.+40     	; 0x11c2 <uart_transmit>
					uart_transmit((current % 10) + 48);
    119a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current>
    119e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current+0x1>
    11a2:	f1 ca       	rjmp	.-2590   	; 0x786 <__stack+0x327>

000011a4 <uart_init>:
 */ 

#include "uart.h"

void uart_init(){
	UCSRB |= (1<<TXEN); //set transmit and receive bit
    11a4:	53 9a       	sbi	0x0a, 3	; 10
	UCSRB |= (1<<RXCIE);
    11a6:	57 9a       	sbi	0x0a, 7	; 10
	UBRRH = (ubrrvalue >> 8); //load baud rate register with calculated value
    11a8:	10 bc       	out	0x20, r1	; 32
	UBRRL = ubrrvalue;
    11aa:	87 e6       	ldi	r24, 0x67	; 103
    11ac:	89 b9       	out	0x09, r24	; 9
	UCSRC |= ((1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0)); //set 8 bit character size
    11ae:	80 b5       	in	r24, 0x20	; 32
    11b0:	86 68       	ori	r24, 0x86	; 134
    11b2:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1<<UMSEL); //Set Asynchronous operation
    11b4:	80 b5       	in	r24, 0x20	; 32
    11b6:	8f 7b       	andi	r24, 0xBF	; 191
    11b8:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1<<UCSZ2); //set 8 bit character size
    11ba:	80 b5       	in	r24, 0x20	; 32
    11bc:	8b 7f       	andi	r24, 0xFB	; 251
    11be:	80 bd       	out	0x20, r24	; 32
    11c0:	08 95       	ret

000011c2 <uart_transmit>:
		stringtransmit++;
	}
}

void uart_transmit(uint8_t data){
	while (UDREMPTY == 0){ //wait for buffer to empty
    11c2:	5d 9b       	sbis	0x0b, 5	; 11
    11c4:	fe cf       	rjmp	.-4      	; 0x11c2 <uart_transmit>
	}
	UDR = data; //load data register with data byte
    11c6:	8c b9       	out	0x0c, r24	; 12
    11c8:	08 95       	ret

000011ca <uart_transmit_string>:
	UCSRC &= ~(1<<UMSEL); //Set Asynchronous operation
	UCSRC &= ~(1<<UCSZ2); //set 8 bit character size
}

//Transmitter
void uart_transmit_string(char* stringtransmit){
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	ec 01       	movw	r28, r24
	while (*stringtransmit != 0x00){
    11d0:	89 91       	ld	r24, Y+
    11d2:	88 23       	and	r24, r24
    11d4:	11 f0       	breq	.+4      	; 0x11da <uart_transmit_string+0x10>
		uart_transmit(*stringtransmit);
    11d6:	f5 df       	rcall	.-22     	; 0x11c2 <uart_transmit>
    11d8:	fb cf       	rjmp	.-10     	; 0x11d0 <uart_transmit_string+0x6>
		stringtransmit++;
	}
}
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <uart_receive>:
	UDR = data; //load data register with data byte
}

//Receiver
char uart_receive(){
	while (RXCOMP == 0){ //wait for receive to be completed
    11e0:	5f 9b       	sbis	0x0b, 7	; 11
    11e2:	fe cf       	rjmp	.-4      	; 0x11e0 <uart_receive>
	}
	return UDR; //load data register with data byte
    11e4:	8c b1       	in	r24, 0x0c	; 12
    11e6:	08 95       	ret

000011e8 <__fixsfdi>:
    11e8:	be e3       	ldi	r27, 0x3E	; 62
    11ea:	04 d0       	rcall	.+8      	; 0x11f4 <__fixunssfdi+0x2>
    11ec:	08 f4       	brcc	.+2      	; 0x11f0 <__fixsfdi+0x8>
    11ee:	90 e8       	ldi	r25, 0x80	; 128
    11f0:	08 95       	ret

000011f2 <__fixunssfdi>:
    11f2:	bf e3       	ldi	r27, 0x3F	; 63
    11f4:	22 27       	eor	r18, r18
    11f6:	33 27       	eor	r19, r19
    11f8:	a9 01       	movw	r20, r18
    11fa:	ef d0       	rcall	.+478    	; 0x13da <__fp_splitA>
    11fc:	58 f1       	brcs	.+86     	; 0x1254 <__fixunssfdi+0x62>
    11fe:	9f 57       	subi	r25, 0x7F	; 127
    1200:	40 f1       	brcs	.+80     	; 0x1252 <__fixunssfdi+0x60>
    1202:	b9 17       	cp	r27, r25
    1204:	38 f1       	brcs	.+78     	; 0x1254 <__fixunssfdi+0x62>
    1206:	bf e3       	ldi	r27, 0x3F	; 63
    1208:	b9 1b       	sub	r27, r25
    120a:	99 27       	eor	r25, r25
    120c:	b8 50       	subi	r27, 0x08	; 8
    120e:	3a f4       	brpl	.+14     	; 0x121e <__fixunssfdi+0x2c>
    1210:	66 0f       	add	r22, r22
    1212:	77 1f       	adc	r23, r23
    1214:	88 1f       	adc	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	b3 95       	inc	r27
    121a:	d2 f3       	brmi	.-12     	; 0x1210 <__fixunssfdi+0x1e>
    121c:	16 c0       	rjmp	.+44     	; 0x124a <__fixunssfdi+0x58>
    121e:	b8 50       	subi	r27, 0x08	; 8
    1220:	4a f0       	brmi	.+18     	; 0x1234 <__fixunssfdi+0x42>
    1222:	23 2f       	mov	r18, r19
    1224:	34 2f       	mov	r19, r20
    1226:	45 2f       	mov	r20, r21
    1228:	56 2f       	mov	r21, r22
    122a:	67 2f       	mov	r22, r23
    122c:	78 2f       	mov	r23, r24
    122e:	88 27       	eor	r24, r24
    1230:	b8 50       	subi	r27, 0x08	; 8
    1232:	ba f7       	brpl	.-18     	; 0x1222 <__fixunssfdi+0x30>
    1234:	b8 5f       	subi	r27, 0xF8	; 248
    1236:	49 f0       	breq	.+18     	; 0x124a <__fixunssfdi+0x58>
    1238:	86 95       	lsr	r24
    123a:	77 95       	ror	r23
    123c:	67 95       	ror	r22
    123e:	57 95       	ror	r21
    1240:	47 95       	ror	r20
    1242:	37 95       	ror	r19
    1244:	27 95       	ror	r18
    1246:	ba 95       	dec	r27
    1248:	b9 f7       	brne	.-18     	; 0x1238 <__fixunssfdi+0x46>
    124a:	0e f4       	brtc	.+2      	; 0x124e <__fixunssfdi+0x5c>
    124c:	ae d0       	rcall	.+348    	; 0x13aa <__fp_negdi>
    124e:	88 94       	clc
    1250:	08 95       	ret
    1252:	88 94       	clc
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	cb 01       	movw	r24, r22
    125a:	08 95       	ret

0000125c <__fixunssfsi>:
    125c:	be d0       	rcall	.+380    	; 0x13da <__fp_splitA>
    125e:	88 f0       	brcs	.+34     	; 0x1282 <__fixunssfsi+0x26>
    1260:	9f 57       	subi	r25, 0x7F	; 127
    1262:	90 f0       	brcs	.+36     	; 0x1288 <__fixunssfsi+0x2c>
    1264:	b9 2f       	mov	r27, r25
    1266:	99 27       	eor	r25, r25
    1268:	b7 51       	subi	r27, 0x17	; 23
    126a:	a0 f0       	brcs	.+40     	; 0x1294 <__fixunssfsi+0x38>
    126c:	d1 f0       	breq	.+52     	; 0x12a2 <__fixunssfsi+0x46>
    126e:	66 0f       	add	r22, r22
    1270:	77 1f       	adc	r23, r23
    1272:	88 1f       	adc	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	1a f0       	brmi	.+6      	; 0x127e <__fixunssfsi+0x22>
    1278:	ba 95       	dec	r27
    127a:	c9 f7       	brne	.-14     	; 0x126e <__fixunssfsi+0x12>
    127c:	12 c0       	rjmp	.+36     	; 0x12a2 <__fixunssfsi+0x46>
    127e:	b1 30       	cpi	r27, 0x01	; 1
    1280:	81 f0       	breq	.+32     	; 0x12a2 <__fixunssfsi+0x46>
    1282:	c5 d0       	rcall	.+394    	; 0x140e <__fp_zero>
    1284:	b1 e0       	ldi	r27, 0x01	; 1
    1286:	08 95       	ret
    1288:	c2 c0       	rjmp	.+388    	; 0x140e <__fp_zero>
    128a:	67 2f       	mov	r22, r23
    128c:	78 2f       	mov	r23, r24
    128e:	88 27       	eor	r24, r24
    1290:	b8 5f       	subi	r27, 0xF8	; 248
    1292:	39 f0       	breq	.+14     	; 0x12a2 <__fixunssfsi+0x46>
    1294:	b9 3f       	cpi	r27, 0xF9	; 249
    1296:	cc f3       	brlt	.-14     	; 0x128a <__fixunssfsi+0x2e>
    1298:	86 95       	lsr	r24
    129a:	77 95       	ror	r23
    129c:	67 95       	ror	r22
    129e:	b3 95       	inc	r27
    12a0:	d9 f7       	brne	.-10     	; 0x1298 <__fixunssfsi+0x3c>
    12a2:	3e f4       	brtc	.+14     	; 0x12b2 <__fixunssfsi+0x56>
    12a4:	90 95       	com	r25
    12a6:	80 95       	com	r24
    12a8:	70 95       	com	r23
    12aa:	61 95       	neg	r22
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	8f 4f       	sbci	r24, 0xFF	; 255
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	08 95       	ret

000012b4 <__floatunsisf>:
    12b4:	e8 94       	clt
    12b6:	09 c0       	rjmp	.+18     	; 0x12ca <__floatsisf+0x12>

000012b8 <__floatsisf>:
    12b8:	97 fb       	bst	r25, 7
    12ba:	3e f4       	brtc	.+14     	; 0x12ca <__floatsisf+0x12>
    12bc:	90 95       	com	r25
    12be:	80 95       	com	r24
    12c0:	70 95       	com	r23
    12c2:	61 95       	neg	r22
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	8f 4f       	sbci	r24, 0xFF	; 255
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	99 23       	and	r25, r25
    12cc:	a9 f0       	breq	.+42     	; 0x12f8 <__floatsisf+0x40>
    12ce:	f9 2f       	mov	r31, r25
    12d0:	96 e9       	ldi	r25, 0x96	; 150
    12d2:	bb 27       	eor	r27, r27
    12d4:	93 95       	inc	r25
    12d6:	f6 95       	lsr	r31
    12d8:	87 95       	ror	r24
    12da:	77 95       	ror	r23
    12dc:	67 95       	ror	r22
    12de:	b7 95       	ror	r27
    12e0:	f1 11       	cpse	r31, r1
    12e2:	f8 cf       	rjmp	.-16     	; 0x12d4 <__floatsisf+0x1c>
    12e4:	fa f4       	brpl	.+62     	; 0x1324 <__floatsisf+0x6c>
    12e6:	bb 0f       	add	r27, r27
    12e8:	11 f4       	brne	.+4      	; 0x12ee <__floatsisf+0x36>
    12ea:	60 ff       	sbrs	r22, 0
    12ec:	1b c0       	rjmp	.+54     	; 0x1324 <__floatsisf+0x6c>
    12ee:	6f 5f       	subi	r22, 0xFF	; 255
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	8f 4f       	sbci	r24, 0xFF	; 255
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	16 c0       	rjmp	.+44     	; 0x1324 <__floatsisf+0x6c>
    12f8:	88 23       	and	r24, r24
    12fa:	11 f0       	breq	.+4      	; 0x1300 <__floatsisf+0x48>
    12fc:	96 e9       	ldi	r25, 0x96	; 150
    12fe:	11 c0       	rjmp	.+34     	; 0x1322 <__floatsisf+0x6a>
    1300:	77 23       	and	r23, r23
    1302:	21 f0       	breq	.+8      	; 0x130c <__floatsisf+0x54>
    1304:	9e e8       	ldi	r25, 0x8E	; 142
    1306:	87 2f       	mov	r24, r23
    1308:	76 2f       	mov	r23, r22
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <__floatsisf+0x5e>
    130c:	66 23       	and	r22, r22
    130e:	71 f0       	breq	.+28     	; 0x132c <__floatsisf+0x74>
    1310:	96 e8       	ldi	r25, 0x86	; 134
    1312:	86 2f       	mov	r24, r22
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	2a f0       	brmi	.+10     	; 0x1324 <__floatsisf+0x6c>
    131a:	9a 95       	dec	r25
    131c:	66 0f       	add	r22, r22
    131e:	77 1f       	adc	r23, r23
    1320:	88 1f       	adc	r24, r24
    1322:	da f7       	brpl	.-10     	; 0x131a <__floatsisf+0x62>
    1324:	88 0f       	add	r24, r24
    1326:	96 95       	lsr	r25
    1328:	87 95       	ror	r24
    132a:	97 f9       	bld	r25, 7
    132c:	08 95       	ret

0000132e <__floatundisf>:
    132e:	e8 94       	clt

00001330 <__fp_di2sf>:
    1330:	f9 2f       	mov	r31, r25
    1332:	96 eb       	ldi	r25, 0xB6	; 182
    1334:	ff 23       	and	r31, r31
    1336:	81 f0       	breq	.+32     	; 0x1358 <__fp_di2sf+0x28>
    1338:	12 16       	cp	r1, r18
    133a:	13 06       	cpc	r1, r19
    133c:	14 06       	cpc	r1, r20
    133e:	44 0b       	sbc	r20, r20
    1340:	93 95       	inc	r25
    1342:	f6 95       	lsr	r31
    1344:	87 95       	ror	r24
    1346:	77 95       	ror	r23
    1348:	67 95       	ror	r22
    134a:	57 95       	ror	r21
    134c:	40 40       	sbci	r20, 0x00	; 0
    134e:	ff 23       	and	r31, r31
    1350:	b9 f7       	brne	.-18     	; 0x1340 <__fp_di2sf+0x10>
    1352:	1b c0       	rjmp	.+54     	; 0x138a <__fp_di2sf+0x5a>
    1354:	99 27       	eor	r25, r25
    1356:	08 95       	ret
    1358:	88 23       	and	r24, r24
    135a:	51 f4       	brne	.+20     	; 0x1370 <__fp_di2sf+0x40>
    135c:	98 50       	subi	r25, 0x08	; 8
    135e:	d2 f7       	brpl	.-12     	; 0x1354 <__fp_di2sf+0x24>
    1360:	87 2b       	or	r24, r23
    1362:	76 2f       	mov	r23, r22
    1364:	65 2f       	mov	r22, r21
    1366:	54 2f       	mov	r21, r20
    1368:	43 2f       	mov	r20, r19
    136a:	32 2f       	mov	r19, r18
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	b1 f3       	breq	.-20     	; 0x135c <__fp_di2sf+0x2c>
    1370:	12 16       	cp	r1, r18
    1372:	13 06       	cpc	r1, r19
    1374:	14 06       	cpc	r1, r20
    1376:	44 0b       	sbc	r20, r20
    1378:	88 23       	and	r24, r24
    137a:	3a f0       	brmi	.+14     	; 0x138a <__fp_di2sf+0x5a>
    137c:	9a 95       	dec	r25
    137e:	44 0f       	add	r20, r20
    1380:	55 1f       	adc	r21, r21
    1382:	66 1f       	adc	r22, r22
    1384:	77 1f       	adc	r23, r23
    1386:	88 1f       	adc	r24, r24
    1388:	ca f7       	brpl	.-14     	; 0x137c <__fp_di2sf+0x4c>
    138a:	55 23       	and	r21, r21
    138c:	4a f4       	brpl	.+18     	; 0x13a0 <__fp_di2sf+0x70>
    138e:	44 0f       	add	r20, r20
    1390:	55 1f       	adc	r21, r21
    1392:	11 f4       	brne	.+4      	; 0x1398 <__fp_di2sf+0x68>
    1394:	60 ff       	sbrs	r22, 0
    1396:	04 c0       	rjmp	.+8      	; 0x13a0 <__fp_di2sf+0x70>
    1398:	6f 5f       	subi	r22, 0xFF	; 255
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	8f 4f       	sbci	r24, 0xFF	; 255
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	88 0f       	add	r24, r24
    13a2:	96 95       	lsr	r25
    13a4:	87 95       	ror	r24
    13a6:	97 f9       	bld	r25, 7
    13a8:	08 95       	ret

000013aa <__fp_negdi>:
    13aa:	90 95       	com	r25
    13ac:	80 95       	com	r24
    13ae:	70 95       	com	r23
    13b0:	60 95       	com	r22
    13b2:	50 95       	com	r21
    13b4:	40 95       	com	r20
    13b6:	30 95       	com	r19
    13b8:	21 95       	neg	r18
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	4f 4f       	sbci	r20, 0xFF	; 255
    13be:	5f 4f       	sbci	r21, 0xFF	; 255
    13c0:	6f 4f       	sbci	r22, 0xFF	; 255
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	8f 4f       	sbci	r24, 0xFF	; 255
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	08 95       	ret

000013ca <__fp_split3>:
    13ca:	57 fd       	sbrc	r21, 7
    13cc:	90 58       	subi	r25, 0x80	; 128
    13ce:	44 0f       	add	r20, r20
    13d0:	55 1f       	adc	r21, r21
    13d2:	59 f0       	breq	.+22     	; 0x13ea <__fp_splitA+0x10>
    13d4:	5f 3f       	cpi	r21, 0xFF	; 255
    13d6:	71 f0       	breq	.+28     	; 0x13f4 <__fp_splitA+0x1a>
    13d8:	47 95       	ror	r20

000013da <__fp_splitA>:
    13da:	88 0f       	add	r24, r24
    13dc:	97 fb       	bst	r25, 7
    13de:	99 1f       	adc	r25, r25
    13e0:	61 f0       	breq	.+24     	; 0x13fa <__fp_splitA+0x20>
    13e2:	9f 3f       	cpi	r25, 0xFF	; 255
    13e4:	79 f0       	breq	.+30     	; 0x1404 <__fp_splitA+0x2a>
    13e6:	87 95       	ror	r24
    13e8:	08 95       	ret
    13ea:	12 16       	cp	r1, r18
    13ec:	13 06       	cpc	r1, r19
    13ee:	14 06       	cpc	r1, r20
    13f0:	55 1f       	adc	r21, r21
    13f2:	f2 cf       	rjmp	.-28     	; 0x13d8 <__fp_split3+0xe>
    13f4:	46 95       	lsr	r20
    13f6:	f1 df       	rcall	.-30     	; 0x13da <__fp_splitA>
    13f8:	08 c0       	rjmp	.+16     	; 0x140a <__fp_splitA+0x30>
    13fa:	16 16       	cp	r1, r22
    13fc:	17 06       	cpc	r1, r23
    13fe:	18 06       	cpc	r1, r24
    1400:	99 1f       	adc	r25, r25
    1402:	f1 cf       	rjmp	.-30     	; 0x13e6 <__fp_splitA+0xc>
    1404:	86 95       	lsr	r24
    1406:	71 05       	cpc	r23, r1
    1408:	61 05       	cpc	r22, r1
    140a:	08 94       	sec
    140c:	08 95       	ret

0000140e <__fp_zero>:
    140e:	e8 94       	clt

00001410 <__fp_szero>:
    1410:	bb 27       	eor	r27, r27
    1412:	66 27       	eor	r22, r22
    1414:	77 27       	eor	r23, r23
    1416:	cb 01       	movw	r24, r22
    1418:	97 f9       	bld	r25, 7
    141a:	08 95       	ret

0000141c <__mulsf3>:
    141c:	0b d0       	rcall	.+22     	; 0x1434 <__mulsf3x>
    141e:	d2 c0       	rjmp	.+420    	; 0x15c4 <__fp_round>
    1420:	c3 d0       	rcall	.+390    	; 0x15a8 <__fp_pscA>
    1422:	28 f0       	brcs	.+10     	; 0x142e <__mulsf3+0x12>
    1424:	c8 d0       	rcall	.+400    	; 0x15b6 <__fp_pscB>
    1426:	18 f0       	brcs	.+6      	; 0x142e <__mulsf3+0x12>
    1428:	95 23       	and	r25, r21
    142a:	09 f0       	breq	.+2      	; 0x142e <__mulsf3+0x12>
    142c:	9f c0       	rjmp	.+318    	; 0x156c <__fp_inf>
    142e:	b2 c0       	rjmp	.+356    	; 0x1594 <__fp_nan>
    1430:	11 24       	eor	r1, r1
    1432:	ee cf       	rjmp	.-36     	; 0x1410 <__fp_szero>

00001434 <__mulsf3x>:
    1434:	ca df       	rcall	.-108    	; 0x13ca <__fp_split3>
    1436:	a0 f3       	brcs	.-24     	; 0x1420 <__mulsf3+0x4>

00001438 <__mulsf3_pse>:
    1438:	95 9f       	mul	r25, r21
    143a:	d1 f3       	breq	.-12     	; 0x1430 <__mulsf3+0x14>
    143c:	95 0f       	add	r25, r21
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	55 1f       	adc	r21, r21
    1442:	62 9f       	mul	r22, r18
    1444:	f0 01       	movw	r30, r0
    1446:	72 9f       	mul	r23, r18
    1448:	bb 27       	eor	r27, r27
    144a:	f0 0d       	add	r31, r0
    144c:	b1 1d       	adc	r27, r1
    144e:	63 9f       	mul	r22, r19
    1450:	aa 27       	eor	r26, r26
    1452:	f0 0d       	add	r31, r0
    1454:	b1 1d       	adc	r27, r1
    1456:	aa 1f       	adc	r26, r26
    1458:	64 9f       	mul	r22, r20
    145a:	66 27       	eor	r22, r22
    145c:	b0 0d       	add	r27, r0
    145e:	a1 1d       	adc	r26, r1
    1460:	66 1f       	adc	r22, r22
    1462:	82 9f       	mul	r24, r18
    1464:	22 27       	eor	r18, r18
    1466:	b0 0d       	add	r27, r0
    1468:	a1 1d       	adc	r26, r1
    146a:	62 1f       	adc	r22, r18
    146c:	73 9f       	mul	r23, r19
    146e:	b0 0d       	add	r27, r0
    1470:	a1 1d       	adc	r26, r1
    1472:	62 1f       	adc	r22, r18
    1474:	83 9f       	mul	r24, r19
    1476:	a0 0d       	add	r26, r0
    1478:	61 1d       	adc	r22, r1
    147a:	22 1f       	adc	r18, r18
    147c:	74 9f       	mul	r23, r20
    147e:	33 27       	eor	r19, r19
    1480:	a0 0d       	add	r26, r0
    1482:	61 1d       	adc	r22, r1
    1484:	23 1f       	adc	r18, r19
    1486:	84 9f       	mul	r24, r20
    1488:	60 0d       	add	r22, r0
    148a:	21 1d       	adc	r18, r1
    148c:	82 2f       	mov	r24, r18
    148e:	76 2f       	mov	r23, r22
    1490:	6a 2f       	mov	r22, r26
    1492:	11 24       	eor	r1, r1
    1494:	9f 57       	subi	r25, 0x7F	; 127
    1496:	50 40       	sbci	r21, 0x00	; 0
    1498:	8a f0       	brmi	.+34     	; 0x14bc <__mulsf3_pse+0x84>
    149a:	e1 f0       	breq	.+56     	; 0x14d4 <__mulsf3_pse+0x9c>
    149c:	88 23       	and	r24, r24
    149e:	4a f0       	brmi	.+18     	; 0x14b2 <__mulsf3_pse+0x7a>
    14a0:	ee 0f       	add	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	bb 1f       	adc	r27, r27
    14a6:	66 1f       	adc	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	88 1f       	adc	r24, r24
    14ac:	91 50       	subi	r25, 0x01	; 1
    14ae:	50 40       	sbci	r21, 0x00	; 0
    14b0:	a9 f7       	brne	.-22     	; 0x149c <__mulsf3_pse+0x64>
    14b2:	9e 3f       	cpi	r25, 0xFE	; 254
    14b4:	51 05       	cpc	r21, r1
    14b6:	70 f0       	brcs	.+28     	; 0x14d4 <__mulsf3_pse+0x9c>
    14b8:	59 c0       	rjmp	.+178    	; 0x156c <__fp_inf>
    14ba:	aa cf       	rjmp	.-172    	; 0x1410 <__fp_szero>
    14bc:	5f 3f       	cpi	r21, 0xFF	; 255
    14be:	ec f3       	brlt	.-6      	; 0x14ba <__mulsf3_pse+0x82>
    14c0:	98 3e       	cpi	r25, 0xE8	; 232
    14c2:	dc f3       	brlt	.-10     	; 0x14ba <__mulsf3_pse+0x82>
    14c4:	86 95       	lsr	r24
    14c6:	77 95       	ror	r23
    14c8:	67 95       	ror	r22
    14ca:	b7 95       	ror	r27
    14cc:	f7 95       	ror	r31
    14ce:	e7 95       	ror	r30
    14d0:	9f 5f       	subi	r25, 0xFF	; 255
    14d2:	c1 f7       	brne	.-16     	; 0x14c4 <__mulsf3_pse+0x8c>
    14d4:	fe 2b       	or	r31, r30
    14d6:	88 0f       	add	r24, r24
    14d8:	91 1d       	adc	r25, r1
    14da:	96 95       	lsr	r25
    14dc:	87 95       	ror	r24
    14de:	97 f9       	bld	r25, 7
    14e0:	08 95       	ret
    14e2:	11 f4       	brne	.+4      	; 0x14e8 <__mulsf3_pse+0xb0>
    14e4:	0e f4       	brtc	.+2      	; 0x14e8 <__mulsf3_pse+0xb0>
    14e6:	56 c0       	rjmp	.+172    	; 0x1594 <__fp_nan>
    14e8:	47 c0       	rjmp	.+142    	; 0x1578 <__fp_mpack>

000014ea <sqrt>:
    14ea:	77 df       	rcall	.-274    	; 0x13da <__fp_splitA>
    14ec:	d0 f3       	brcs	.-12     	; 0x14e2 <__mulsf3_pse+0xaa>
    14ee:	99 23       	and	r25, r25
    14f0:	d9 f3       	breq	.-10     	; 0x14e8 <__mulsf3_pse+0xb0>
    14f2:	ce f3       	brts	.-14     	; 0x14e6 <__mulsf3_pse+0xae>
    14f4:	9f 57       	subi	r25, 0x7F	; 127
    14f6:	55 0b       	sbc	r21, r21
    14f8:	87 ff       	sbrs	r24, 7
    14fa:	4f d0       	rcall	.+158    	; 0x159a <__fp_norm2>
    14fc:	00 24       	eor	r0, r0
    14fe:	a0 e6       	ldi	r26, 0x60	; 96
    1500:	40 ea       	ldi	r20, 0xA0	; 160
    1502:	90 01       	movw	r18, r0
    1504:	80 58       	subi	r24, 0x80	; 128
    1506:	56 95       	lsr	r21
    1508:	97 95       	ror	r25
    150a:	28 f4       	brcc	.+10     	; 0x1516 <sqrt+0x2c>
    150c:	80 5c       	subi	r24, 0xC0	; 192
    150e:	66 0f       	add	r22, r22
    1510:	77 1f       	adc	r23, r23
    1512:	88 1f       	adc	r24, r24
    1514:	20 f0       	brcs	.+8      	; 0x151e <sqrt+0x34>
    1516:	26 17       	cp	r18, r22
    1518:	37 07       	cpc	r19, r23
    151a:	48 07       	cpc	r20, r24
    151c:	30 f4       	brcc	.+12     	; 0x152a <sqrt+0x40>
    151e:	62 1b       	sub	r22, r18
    1520:	73 0b       	sbc	r23, r19
    1522:	84 0b       	sbc	r24, r20
    1524:	20 29       	or	r18, r0
    1526:	31 29       	or	r19, r1
    1528:	4a 2b       	or	r20, r26
    152a:	a6 95       	lsr	r26
    152c:	17 94       	ror	r1
    152e:	07 94       	ror	r0
    1530:	20 25       	eor	r18, r0
    1532:	31 25       	eor	r19, r1
    1534:	4a 27       	eor	r20, r26
    1536:	58 f7       	brcc	.-42     	; 0x150e <sqrt+0x24>
    1538:	66 0f       	add	r22, r22
    153a:	77 1f       	adc	r23, r23
    153c:	88 1f       	adc	r24, r24
    153e:	20 f0       	brcs	.+8      	; 0x1548 <sqrt+0x5e>
    1540:	26 17       	cp	r18, r22
    1542:	37 07       	cpc	r19, r23
    1544:	48 07       	cpc	r20, r24
    1546:	30 f4       	brcc	.+12     	; 0x1554 <sqrt+0x6a>
    1548:	62 0b       	sbc	r22, r18
    154a:	73 0b       	sbc	r23, r19
    154c:	84 0b       	sbc	r24, r20
    154e:	20 0d       	add	r18, r0
    1550:	31 1d       	adc	r19, r1
    1552:	41 1d       	adc	r20, r1
    1554:	a0 95       	com	r26
    1556:	81 f7       	brne	.-32     	; 0x1538 <sqrt+0x4e>
    1558:	b9 01       	movw	r22, r18
    155a:	84 2f       	mov	r24, r20
    155c:	91 58       	subi	r25, 0x81	; 129
    155e:	88 0f       	add	r24, r24
    1560:	96 95       	lsr	r25
    1562:	87 95       	ror	r24
    1564:	08 95       	ret

00001566 <square>:
    1566:	9b 01       	movw	r18, r22
    1568:	ac 01       	movw	r20, r24
    156a:	58 cf       	rjmp	.-336    	; 0x141c <__mulsf3>

0000156c <__fp_inf>:
    156c:	97 f9       	bld	r25, 7
    156e:	9f 67       	ori	r25, 0x7F	; 127
    1570:	80 e8       	ldi	r24, 0x80	; 128
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	08 95       	ret

00001578 <__fp_mpack>:
    1578:	9f 3f       	cpi	r25, 0xFF	; 255
    157a:	31 f0       	breq	.+12     	; 0x1588 <__fp_mpack_finite+0xc>

0000157c <__fp_mpack_finite>:
    157c:	91 50       	subi	r25, 0x01	; 1
    157e:	20 f4       	brcc	.+8      	; 0x1588 <__fp_mpack_finite+0xc>
    1580:	87 95       	ror	r24
    1582:	77 95       	ror	r23
    1584:	67 95       	ror	r22
    1586:	b7 95       	ror	r27
    1588:	88 0f       	add	r24, r24
    158a:	91 1d       	adc	r25, r1
    158c:	96 95       	lsr	r25
    158e:	87 95       	ror	r24
    1590:	97 f9       	bld	r25, 7
    1592:	08 95       	ret

00001594 <__fp_nan>:
    1594:	9f ef       	ldi	r25, 0xFF	; 255
    1596:	80 ec       	ldi	r24, 0xC0	; 192
    1598:	08 95       	ret

0000159a <__fp_norm2>:
    159a:	91 50       	subi	r25, 0x01	; 1
    159c:	50 40       	sbci	r21, 0x00	; 0
    159e:	66 0f       	add	r22, r22
    15a0:	77 1f       	adc	r23, r23
    15a2:	88 1f       	adc	r24, r24
    15a4:	d2 f7       	brpl	.-12     	; 0x159a <__fp_norm2>
    15a6:	08 95       	ret

000015a8 <__fp_pscA>:
    15a8:	00 24       	eor	r0, r0
    15aa:	0a 94       	dec	r0
    15ac:	16 16       	cp	r1, r22
    15ae:	17 06       	cpc	r1, r23
    15b0:	18 06       	cpc	r1, r24
    15b2:	09 06       	cpc	r0, r25
    15b4:	08 95       	ret

000015b6 <__fp_pscB>:
    15b6:	00 24       	eor	r0, r0
    15b8:	0a 94       	dec	r0
    15ba:	12 16       	cp	r1, r18
    15bc:	13 06       	cpc	r1, r19
    15be:	14 06       	cpc	r1, r20
    15c0:	05 06       	cpc	r0, r21
    15c2:	08 95       	ret

000015c4 <__fp_round>:
    15c4:	09 2e       	mov	r0, r25
    15c6:	03 94       	inc	r0
    15c8:	00 0c       	add	r0, r0
    15ca:	11 f4       	brne	.+4      	; 0x15d0 <__fp_round+0xc>
    15cc:	88 23       	and	r24, r24
    15ce:	52 f0       	brmi	.+20     	; 0x15e4 <__fp_round+0x20>
    15d0:	bb 0f       	add	r27, r27
    15d2:	40 f4       	brcc	.+16     	; 0x15e4 <__fp_round+0x20>
    15d4:	bf 2b       	or	r27, r31
    15d6:	11 f4       	brne	.+4      	; 0x15dc <__fp_round+0x18>
    15d8:	60 ff       	sbrs	r22, 0
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <__fp_round+0x20>
    15dc:	6f 5f       	subi	r22, 0xFF	; 255
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	8f 4f       	sbci	r24, 0xFF	; 255
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
    15e4:	08 95       	ret

000015e6 <__mulsi3>:
    15e6:	db 01       	movw	r26, r22
    15e8:	8f 93       	push	r24
    15ea:	9f 93       	push	r25
    15ec:	59 d0       	rcall	.+178    	; 0x16a0 <__muluhisi3>
    15ee:	bf 91       	pop	r27
    15f0:	af 91       	pop	r26
    15f2:	a2 9f       	mul	r26, r18
    15f4:	80 0d       	add	r24, r0
    15f6:	91 1d       	adc	r25, r1
    15f8:	a3 9f       	mul	r26, r19
    15fa:	90 0d       	add	r25, r0
    15fc:	b2 9f       	mul	r27, r18
    15fe:	90 0d       	add	r25, r0
    1600:	11 24       	eor	r1, r1
    1602:	08 95       	ret

00001604 <__udivmodqi4>:
    1604:	99 1b       	sub	r25, r25
    1606:	79 e0       	ldi	r23, 0x09	; 9
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <__udivmodqi4_ep>

0000160a <__udivmodqi4_loop>:
    160a:	99 1f       	adc	r25, r25
    160c:	96 17       	cp	r25, r22
    160e:	08 f0       	brcs	.+2      	; 0x1612 <__udivmodqi4_ep>
    1610:	96 1b       	sub	r25, r22

00001612 <__udivmodqi4_ep>:
    1612:	88 1f       	adc	r24, r24
    1614:	7a 95       	dec	r23
    1616:	c9 f7       	brne	.-14     	; 0x160a <__udivmodqi4_loop>
    1618:	80 95       	com	r24
    161a:	08 95       	ret

0000161c <__udivmodhi4>:
    161c:	aa 1b       	sub	r26, r26
    161e:	bb 1b       	sub	r27, r27
    1620:	51 e1       	ldi	r21, 0x11	; 17
    1622:	07 c0       	rjmp	.+14     	; 0x1632 <__udivmodhi4_ep>

00001624 <__udivmodhi4_loop>:
    1624:	aa 1f       	adc	r26, r26
    1626:	bb 1f       	adc	r27, r27
    1628:	a6 17       	cp	r26, r22
    162a:	b7 07       	cpc	r27, r23
    162c:	10 f0       	brcs	.+4      	; 0x1632 <__udivmodhi4_ep>
    162e:	a6 1b       	sub	r26, r22
    1630:	b7 0b       	sbc	r27, r23

00001632 <__udivmodhi4_ep>:
    1632:	88 1f       	adc	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	5a 95       	dec	r21
    1638:	a9 f7       	brne	.-22     	; 0x1624 <__udivmodhi4_loop>
    163a:	80 95       	com	r24
    163c:	90 95       	com	r25
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	08 95       	ret

00001644 <__udivmodsi4>:
    1644:	a1 e2       	ldi	r26, 0x21	; 33
    1646:	1a 2e       	mov	r1, r26
    1648:	aa 1b       	sub	r26, r26
    164a:	bb 1b       	sub	r27, r27
    164c:	fd 01       	movw	r30, r26
    164e:	0d c0       	rjmp	.+26     	; 0x166a <__udivmodsi4_ep>

00001650 <__udivmodsi4_loop>:
    1650:	aa 1f       	adc	r26, r26
    1652:	bb 1f       	adc	r27, r27
    1654:	ee 1f       	adc	r30, r30
    1656:	ff 1f       	adc	r31, r31
    1658:	a2 17       	cp	r26, r18
    165a:	b3 07       	cpc	r27, r19
    165c:	e4 07       	cpc	r30, r20
    165e:	f5 07       	cpc	r31, r21
    1660:	20 f0       	brcs	.+8      	; 0x166a <__udivmodsi4_ep>
    1662:	a2 1b       	sub	r26, r18
    1664:	b3 0b       	sbc	r27, r19
    1666:	e4 0b       	sbc	r30, r20
    1668:	f5 0b       	sbc	r31, r21

0000166a <__udivmodsi4_ep>:
    166a:	66 1f       	adc	r22, r22
    166c:	77 1f       	adc	r23, r23
    166e:	88 1f       	adc	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	1a 94       	dec	r1
    1674:	69 f7       	brne	.-38     	; 0x1650 <__udivmodsi4_loop>
    1676:	60 95       	com	r22
    1678:	70 95       	com	r23
    167a:	80 95       	com	r24
    167c:	90 95       	com	r25
    167e:	9b 01       	movw	r18, r22
    1680:	ac 01       	movw	r20, r24
    1682:	bd 01       	movw	r22, r26
    1684:	cf 01       	movw	r24, r30
    1686:	08 95       	ret

00001688 <__umulhisi3>:
    1688:	a2 9f       	mul	r26, r18
    168a:	b0 01       	movw	r22, r0
    168c:	b3 9f       	mul	r27, r19
    168e:	c0 01       	movw	r24, r0
    1690:	a3 9f       	mul	r26, r19
    1692:	01 d0       	rcall	.+2      	; 0x1696 <__umulhisi3+0xe>
    1694:	b2 9f       	mul	r27, r18
    1696:	70 0d       	add	r23, r0
    1698:	81 1d       	adc	r24, r1
    169a:	11 24       	eor	r1, r1
    169c:	91 1d       	adc	r25, r1
    169e:	08 95       	ret

000016a0 <__muluhisi3>:
    16a0:	f3 df       	rcall	.-26     	; 0x1688 <__umulhisi3>
    16a2:	a5 9f       	mul	r26, r21
    16a4:	90 0d       	add	r25, r0
    16a6:	b4 9f       	mul	r27, r20
    16a8:	90 0d       	add	r25, r0
    16aa:	a4 9f       	mul	r26, r20
    16ac:	80 0d       	add	r24, r0
    16ae:	91 1d       	adc	r25, r1
    16b0:	11 24       	eor	r1, r1
    16b2:	08 95       	ret

000016b4 <__muldi3>:
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	1f 93       	push	r17
    16ba:	0f 93       	push	r16
    16bc:	9a 9d       	mul	r25, r10
    16be:	f0 2d       	mov	r31, r0
    16c0:	21 9f       	mul	r18, r17
    16c2:	f0 0d       	add	r31, r0
    16c4:	8b 9d       	mul	r24, r11
    16c6:	f0 0d       	add	r31, r0
    16c8:	8a 9d       	mul	r24, r10
    16ca:	e0 2d       	mov	r30, r0
    16cc:	f1 0d       	add	r31, r1
    16ce:	03 9f       	mul	r16, r19
    16d0:	f0 0d       	add	r31, r0
    16d2:	02 9f       	mul	r16, r18
    16d4:	e0 0d       	add	r30, r0
    16d6:	f1 1d       	adc	r31, r1
    16d8:	4e 9d       	mul	r20, r14
    16da:	e0 0d       	add	r30, r0
    16dc:	f1 1d       	adc	r31, r1
    16de:	5e 9d       	mul	r21, r14
    16e0:	f0 0d       	add	r31, r0
    16e2:	4f 9d       	mul	r20, r15
    16e4:	f0 0d       	add	r31, r0
    16e6:	7f 93       	push	r23
    16e8:	6f 93       	push	r22
    16ea:	bf 92       	push	r11
    16ec:	af 92       	push	r10
    16ee:	5f 93       	push	r21
    16f0:	4f 93       	push	r20
    16f2:	d5 01       	movw	r26, r10
    16f4:	c9 df       	rcall	.-110    	; 0x1688 <__umulhisi3>
    16f6:	8b 01       	movw	r16, r22
    16f8:	ac 01       	movw	r20, r24
    16fa:	d7 01       	movw	r26, r14
    16fc:	c5 df       	rcall	.-118    	; 0x1688 <__umulhisi3>
    16fe:	eb 01       	movw	r28, r22
    1700:	e8 0f       	add	r30, r24
    1702:	f9 1f       	adc	r31, r25
    1704:	d6 01       	movw	r26, r12
    1706:	1f d0       	rcall	.+62     	; 0x1746 <__muldi3_6>
    1708:	2f 91       	pop	r18
    170a:	3f 91       	pop	r19
    170c:	d6 01       	movw	r26, r12
    170e:	bc df       	rcall	.-136    	; 0x1688 <__umulhisi3>
    1710:	c6 0f       	add	r28, r22
    1712:	d7 1f       	adc	r29, r23
    1714:	e8 1f       	adc	r30, r24
    1716:	f9 1f       	adc	r31, r25
    1718:	af 91       	pop	r26
    171a:	bf 91       	pop	r27
    171c:	14 d0       	rcall	.+40     	; 0x1746 <__muldi3_6>
    171e:	2f 91       	pop	r18
    1720:	3f 91       	pop	r19
    1722:	b2 df       	rcall	.-156    	; 0x1688 <__umulhisi3>
    1724:	c6 0f       	add	r28, r22
    1726:	d7 1f       	adc	r29, r23
    1728:	e8 1f       	adc	r30, r24
    172a:	f9 1f       	adc	r31, r25
    172c:	d6 01       	movw	r26, r12
    172e:	ac df       	rcall	.-168    	; 0x1688 <__umulhisi3>
    1730:	e6 0f       	add	r30, r22
    1732:	f7 1f       	adc	r31, r23
    1734:	98 01       	movw	r18, r16
    1736:	be 01       	movw	r22, r28
    1738:	cf 01       	movw	r24, r30
    173a:	11 24       	eor	r1, r1
    173c:	0f 91       	pop	r16
    173e:	1f 91       	pop	r17
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <__muldi3_6>:
    1746:	a0 df       	rcall	.-192    	; 0x1688 <__umulhisi3>
    1748:	46 0f       	add	r20, r22
    174a:	57 1f       	adc	r21, r23
    174c:	c8 1f       	adc	r28, r24
    174e:	d9 1f       	adc	r29, r25
    1750:	08 f4       	brcc	.+2      	; 0x1754 <__muldi3_6+0xe>
    1752:	31 96       	adiw	r30, 0x01	; 1
    1754:	08 95       	ret

00001756 <__umoddi3>:
    1756:	68 94       	set
    1758:	01 c0       	rjmp	.+2      	; 0x175c <__udivdi3_umoddi3>

0000175a <__udivdi3>:
    175a:	e8 94       	clt

0000175c <__udivdi3_umoddi3>:
    175c:	8f 92       	push	r8
    175e:	9f 92       	push	r9
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	05 d0       	rcall	.+10     	; 0x1770 <__udivmod64>
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	9f 90       	pop	r9
    176c:	8f 90       	pop	r8
    176e:	08 95       	ret

00001770 <__udivmod64>:
    1770:	88 24       	eor	r8, r8
    1772:	99 24       	eor	r9, r9
    1774:	f4 01       	movw	r30, r8
    1776:	e4 01       	movw	r28, r8
    1778:	b0 e4       	ldi	r27, 0x40	; 64
    177a:	1b 2e       	mov	r1, r27
    177c:	d4 01       	movw	r26, r8
    177e:	9d 15       	cp	r25, r13
    1780:	8e 04       	cpc	r8, r14
    1782:	9f 04       	cpc	r9, r15
    1784:	e0 07       	cpc	r30, r16
    1786:	f1 07       	cpc	r31, r17
    1788:	38 f4       	brcc	.+14     	; 0x1798 <__udivmod64+0x28>
    178a:	fc 01       	movw	r30, r24
    178c:	4b 01       	movw	r8, r22
    178e:	ca 01       	movw	r24, r20
    1790:	b9 01       	movw	r22, r18
    1792:	ad 01       	movw	r20, r26
    1794:	9e 01       	movw	r18, r28
    1796:	16 94       	lsr	r1
    1798:	22 0f       	add	r18, r18
    179a:	33 1f       	adc	r19, r19
    179c:	44 1f       	adc	r20, r20
    179e:	55 1f       	adc	r21, r21
    17a0:	66 1f       	adc	r22, r22
    17a2:	77 1f       	adc	r23, r23
    17a4:	88 1f       	adc	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	88 1c       	adc	r8, r8
    17aa:	99 1c       	adc	r9, r9
    17ac:	ee 1f       	adc	r30, r30
    17ae:	ff 1f       	adc	r31, r31
    17b0:	cc 1f       	adc	r28, r28
    17b2:	dd 1f       	adc	r29, r29
    17b4:	aa 1f       	adc	r26, r26
    17b6:	bb 1f       	adc	r27, r27
    17b8:	8a 14       	cp	r8, r10
    17ba:	9b 04       	cpc	r9, r11
    17bc:	ec 05       	cpc	r30, r12
    17be:	fd 05       	cpc	r31, r13
    17c0:	ce 05       	cpc	r28, r14
    17c2:	df 05       	cpc	r29, r15
    17c4:	a0 07       	cpc	r26, r16
    17c6:	b1 07       	cpc	r27, r17
    17c8:	48 f0       	brcs	.+18     	; 0x17dc <__udivmod64+0x6c>
    17ca:	8a 18       	sub	r8, r10
    17cc:	9b 08       	sbc	r9, r11
    17ce:	ec 09       	sbc	r30, r12
    17d0:	fd 09       	sbc	r31, r13
    17d2:	ce 09       	sbc	r28, r14
    17d4:	df 09       	sbc	r29, r15
    17d6:	a0 0b       	sbc	r26, r16
    17d8:	b1 0b       	sbc	r27, r17
    17da:	21 60       	ori	r18, 0x01	; 1
    17dc:	1a 94       	dec	r1
    17de:	e1 f6       	brne	.-72     	; 0x1798 <__udivmod64+0x28>
    17e0:	2e f4       	brtc	.+10     	; 0x17ec <__udivmod64+0x7c>
    17e2:	94 01       	movw	r18, r8
    17e4:	af 01       	movw	r20, r30
    17e6:	be 01       	movw	r22, r28
    17e8:	cd 01       	movw	r24, r26
    17ea:	00 0c       	add	r0, r0
    17ec:	08 95       	ret

000017ee <__ashrdi3>:
    17ee:	97 fb       	bst	r25, 7
    17f0:	10 f8       	bld	r1, 0

000017f2 <__lshrdi3>:
    17f2:	16 94       	lsr	r1
    17f4:	00 08       	sbc	r0, r0
    17f6:	0f 93       	push	r16
    17f8:	08 30       	cpi	r16, 0x08	; 8
    17fa:	98 f0       	brcs	.+38     	; 0x1822 <__lshrdi3+0x30>
    17fc:	08 50       	subi	r16, 0x08	; 8
    17fe:	23 2f       	mov	r18, r19
    1800:	34 2f       	mov	r19, r20
    1802:	45 2f       	mov	r20, r21
    1804:	56 2f       	mov	r21, r22
    1806:	67 2f       	mov	r22, r23
    1808:	78 2f       	mov	r23, r24
    180a:	89 2f       	mov	r24, r25
    180c:	90 2d       	mov	r25, r0
    180e:	f4 cf       	rjmp	.-24     	; 0x17f8 <__lshrdi3+0x6>
    1810:	05 94       	asr	r0
    1812:	97 95       	ror	r25
    1814:	87 95       	ror	r24
    1816:	77 95       	ror	r23
    1818:	67 95       	ror	r22
    181a:	57 95       	ror	r21
    181c:	47 95       	ror	r20
    181e:	37 95       	ror	r19
    1820:	27 95       	ror	r18
    1822:	0a 95       	dec	r16
    1824:	aa f7       	brpl	.-22     	; 0x1810 <__lshrdi3+0x1e>
    1826:	0f 91       	pop	r16
    1828:	08 95       	ret

0000182a <__adddi3>:
    182a:	2a 0d       	add	r18, r10
    182c:	3b 1d       	adc	r19, r11
    182e:	4c 1d       	adc	r20, r12
    1830:	5d 1d       	adc	r21, r13
    1832:	6e 1d       	adc	r22, r14
    1834:	7f 1d       	adc	r23, r15
    1836:	80 1f       	adc	r24, r16
    1838:	91 1f       	adc	r25, r17
    183a:	08 95       	ret

0000183c <__adddi3_s8>:
    183c:	00 24       	eor	r0, r0
    183e:	a7 fd       	sbrc	r26, 7
    1840:	00 94       	com	r0
    1842:	2a 0f       	add	r18, r26
    1844:	30 1d       	adc	r19, r0
    1846:	40 1d       	adc	r20, r0
    1848:	50 1d       	adc	r21, r0
    184a:	60 1d       	adc	r22, r0
    184c:	70 1d       	adc	r23, r0
    184e:	80 1d       	adc	r24, r0
    1850:	90 1d       	adc	r25, r0
    1852:	08 95       	ret

00001854 <eeprom_read_byte>:
    1854:	e1 99       	sbic	0x1c, 1	; 28
    1856:	fe cf       	rjmp	.-4      	; 0x1854 <eeprom_read_byte>
    1858:	9f bb       	out	0x1f, r25	; 31
    185a:	8e bb       	out	0x1e, r24	; 30
    185c:	e0 9a       	sbi	0x1c, 0	; 28
    185e:	99 27       	eor	r25, r25
    1860:	8d b3       	in	r24, 0x1d	; 29
    1862:	08 95       	ret

00001864 <_exit>:
    1864:	f8 94       	cli

00001866 <__stop_program>:
    1866:	ff cf       	rjmp	.-2      	; 0x1866 <__stop_program>
