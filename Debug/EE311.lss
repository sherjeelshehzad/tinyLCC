
EE311.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  00001320  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080014a  0080014a  0000149e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000149e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf0  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000797  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079a  00000000  00000000  00002a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  000031f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049e  00000000  00000000  0000335c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000351  00000000  00000000  000037fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003b4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	c6 c0       	rjmp	.+396    	; 0x194 <__vector_3>
       8:	e2 c0       	rjmp	.+452    	; 0x1ce <__vector_4>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	59 c0       	rjmp	.+178    	; 0xc0 <__vector_6>
       e:	79 c0       	rjmp	.+242    	; 0x102 <__vector_7>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	23 c0       	rjmp	.+70     	; 0x5e <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	11 e0       	ldi	r17, 0x01	; 1
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 e2       	ldi	r30, 0x20	; 32
      3a:	f3 e1       	ldi	r31, 0x13	; 19
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	aa 34       	cpi	r26, 0x4A	; 74
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	21 e0       	ldi	r18, 0x01	; 1
      4a:	aa e4       	ldi	r26, 0x4A	; 74
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	af 35       	cpi	r26, 0x5F	; 95
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	e0 d0       	rcall	.+448    	; 0x21a <main>
      5a:	60 c9       	rjmp	.-3392   	; 0xfffff31c <__eeprom_end+0xff7ef31c>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_11>:
 *  Author: sshe325
 */ 

#include "interrupts.h"

ISR(USART_RXC_vect){
      5e:	1f 92       	push	r1
      60:	0f 92       	push	r0
      62:	0f b6       	in	r0, 0x3f	; 63
      64:	0f 92       	push	r0
      66:	11 24       	eor	r1, r1
      68:	cf 93       	push	r28
      6a:	df 93       	push	r29
      6c:	00 d0       	rcall	.+0      	; 0x6e <__vector_11+0x10>
      6e:	cd b7       	in	r28, 0x3d	; 61
      70:	de b7       	in	r29, 0x3e	; 62
	//dynamically allocate and reallocate space for string
	str_buffer = calloc(1,sizeof(char));
      72:	61 e0       	ldi	r22, 0x01	; 1
      74:	70 e0       	ldi	r23, 0x00	; 0
      76:	81 e0       	ldi	r24, 0x01	; 1
      78:	90 e0       	ldi	r25, 0x00	; 0
      7a:	c1 d2       	rcall	.+1410   	; 0x5fe <calloc>
      7c:	8c 01       	movw	r16, r24
      7e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <str_buffer+0x1>
      82:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <str_buffer>
	char* buffer_ptr = str_buffer;
	int size = 1;
	*str_buffer = uart_receive();
      86:	b8 d2       	rcall	.+1392   	; 0x5f8 <uart_receive>
      88:	f8 01       	movw	r30, r16
      8a:	80 83       	st	Z, r24

ISR(USART_RXC_vect){
	//dynamically allocate and reallocate space for string
	str_buffer = calloc(1,sizeof(char));
	char* buffer_ptr = str_buffer;
	int size = 1;
      8c:	01 e0       	ldi	r16, 0x01	; 1
      8e:	10 e0       	ldi	r17, 0x00	; 0
	*str_buffer = uart_receive();
	//only end receive when we receive a newline
	while ((*buffer_ptr != '\n') || (*buffer_ptr != '\r')){
		str_buffer = realloc(str_buffer,(++size)*sizeof(char));
      90:	0f 5f       	subi	r16, 0xFF	; 255
      92:	1f 4f       	sbci	r17, 0xFF	; 255
      94:	b8 01       	movw	r22, r16
      96:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <str_buffer>
      9a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <str_buffer+0x1>
      9e:	ea d3       	rcall	.+2004   	; 0x874 <realloc>
      a0:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <str_buffer+0x1>
      a4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <str_buffer>
		//make a null terminated string for strcat()
		char uart_char[2];
		uart_char[0] = uart_receive();
      a8:	a7 d2       	rcall	.+1358   	; 0x5f8 <uart_receive>
      aa:	89 83       	std	Y+1, r24	; 0x01
		uart_char[1] = '\0';
      ac:	1a 82       	std	Y+2, r1	; 0x02
		strcat(str_buffer,uart_char);
      ae:	be 01       	movw	r22, r28
      b0:	6f 5f       	subi	r22, 0xFF	; 255
      b2:	7f 4f       	sbci	r23, 0xFF	; 255
      b4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <str_buffer>
      b8:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <str_buffer+0x1>
      bc:	c7 d5       	rcall	.+2958   	; 0xc4c <strcat>
      be:	e8 cf       	rjmp	.-48     	; 0x90 <__vector_11+0x32>

000000c0 <__vector_6>:
	//set flag to indicate received data
	data_received = 1;
}

//interrupt to handle T/4 or 3T/4 time crossing
ISR(TIMER1_COMPA_vect){
      c0:	1f 92       	push	r1
      c2:	0f 92       	push	r0
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	0f 92       	push	r0
      c8:	11 24       	eor	r1, r1
      ca:	8f 93       	push	r24
      cc:	9f 93       	push	r25
		//turn off PWM
		TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
      ce:	85 b5       	in	r24, 0x25	; 37
      d0:	88 7f       	andi	r24, 0xF8	; 248
      d2:	85 bd       	out	0x25, r24	; 37
		//turn off right PMOS
		//PORTD &= ~(1<<PD7);
		//turn on right NMOS
		//PORTB &= ~(1<<PB0);
		
		if (!t2){
      d4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <t2>
      d8:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <t2+0x1>
      dc:	89 2b       	or	r24, r25
      de:	29 f4       	brne	.+10     	; 0xea <__vector_6+0x2a>
			//left to right current
			//turn off PMOSes, turn on left NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
      e0:	c2 98       	cbi	0x18, 2	; 24
			//turn on left NMOS
			PORTB &= ~(1<<PB1);
      e2:	c1 98       	cbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
      e4:	97 98       	cbi	0x12, 7	; 18
			//turn off right NMOS
			PORTB |= (1<<PB0);
      e6:	c0 9a       	sbi	0x18, 0	; 24
      e8:	04 c0       	rjmp	.+8      	; 0xf2 <__vector_6+0x32>
		}
		else{
			//right to left current
			//turn off PMOSes, turn on right NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
      ea:	c2 98       	cbi	0x18, 2	; 24
			//turn on left NMOS
			PORTB |= (1<<PB1);
      ec:	c1 9a       	sbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
      ee:	97 98       	cbi	0x12, 7	; 18
			//turn off right NMOS
			PORTB &= ~(1<<PB0);
      f0:	c0 98       	cbi	0x18, 0	; 24
		}
			
		//reset PWM timer counter
		TCNT2 = 0;
      f2:	14 bc       	out	0x24, r1	; 36
}
      f4:	9f 91       	pop	r25
      f6:	8f 91       	pop	r24
      f8:	0f 90       	pop	r0
      fa:	0f be       	out	0x3f, r0	; 63
      fc:	0f 90       	pop	r0
      fe:	1f 90       	pop	r1
     100:	18 95       	reti

00000102 <__vector_7>:

//interrupt to handle T or T/2 time crossing
ISR(TIMER1_COMPB_vect){
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	8f 93       	push	r24
     10e:	9f 93       	push	r25
		TCCR1B |= (1<<CS12);
		TCCR1B &= ~((1<<CS11) | (1<<CS10));
		stop_counter = 0;
	}*/

		if (t2){
     110:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <t2>
     114:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <t2+0x1>
     118:	89 2b       	or	r24, r25
     11a:	d1 f0       	breq	.+52     	; 0x150 <__vector_7+0x4e>
			t2 = 0;
     11c:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <t2+0x1>
     120:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <t2>
			//turn off timer1
			TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     124:	8e b5       	in	r24, 0x2e	; 46
     126:	88 7f       	andi	r24, 0xF8	; 248
     128:	8e bd       	out	0x2e, r24	; 46
			//turn off PWM
			TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     12a:	85 b5       	in	r24, 0x25	; 37
     12c:	88 7f       	andi	r24, 0xF8	; 248
     12e:	85 bd       	out	0x25, r24	; 37
			//reset timer1 counter
			TCNT1 = 0;
     130:	1d bc       	out	0x2d, r1	; 45
     132:	1c bc       	out	0x2c, r1	; 44
			//reset PWM timer counter
			TCNT2 = 0;
     134:	14 bc       	out	0x24, r1	; 36
			//turn on timer 1 again (prescaler /256)
			TCCR1B |= (1<<CS12);
     136:	8e b5       	in	r24, 0x2e	; 46
     138:	84 60       	ori	r24, 0x04	; 4
     13a:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &= ~((1<<CS11) | (1<<CS10));
     13c:	8e b5       	in	r24, 0x2e	; 46
     13e:	8c 7f       	andi	r24, 0xFC	; 252
     140:	8e bd       	out	0x2e, r24	; 46
			//turn on PWM timer counter (prescaler /64)
			//TCCR2 |= (1<<CS22);
			//TCCR2 &= ~((1<<CS21) | (1<<CS20));
			//turn on PWM timer counter (prescaler /256)
			TCCR2 |= ((1<<CS22) | (1<<CS21));
     142:	85 b5       	in	r24, 0x25	; 37
     144:	86 60       	ori	r24, 0x06	; 6
     146:	85 bd       	out	0x25, r24	; 37
			TCCR2 &= ~((1<<CS20));
     148:	85 b5       	in	r24, 0x25	; 37
     14a:	8e 7f       	andi	r24, 0xFE	; 254
     14c:	85 bd       	out	0x25, r24	; 37
     14e:	1b c0       	rjmp	.+54     	; 0x186 <__vector_7+0x84>
			//T time crossing has been handled, T/2 is next
		}
		else{
			t2 = 1;
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <t2+0x1>
     158:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <t2>
			//turn off timer1
			TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     15c:	8e b5       	in	r24, 0x2e	; 46
     15e:	88 7f       	andi	r24, 0xF8	; 248
     160:	8e bd       	out	0x2e, r24	; 46
			//turn off PWM
			TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     162:	85 b5       	in	r24, 0x25	; 37
     164:	88 7f       	andi	r24, 0xF8	; 248
     166:	85 bd       	out	0x25, r24	; 37
			//reset timer1 counter
			TCNT1 = 0;
     168:	1d bc       	out	0x2d, r1	; 45
     16a:	1c bc       	out	0x2c, r1	; 44
			//reset PWM timer counter
			TCNT2 = 0;
     16c:	14 bc       	out	0x24, r1	; 36
			//turn on timer 1 again (prescaler /256)
			TCCR1B |= (1<<CS12);
     16e:	8e b5       	in	r24, 0x2e	; 46
     170:	84 60       	ori	r24, 0x04	; 4
     172:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &= ~((1<<CS11) | (1<<CS10));
     174:	8e b5       	in	r24, 0x2e	; 46
     176:	8c 7f       	andi	r24, 0xFC	; 252
     178:	8e bd       	out	0x2e, r24	; 46
			//turn on PWM timer counter (prescaler /64)
			//TCCR2 |= (1<<CS22);
			//TCCR2 &= ~((1<<CS21) | (1<<CS20));
			//turn on PWM timer counter (prescaler /256)
			TCCR2 |= ((1<<CS22) | (1<<CS21));
     17a:	85 b5       	in	r24, 0x25	; 37
     17c:	86 60       	ori	r24, 0x06	; 6
     17e:	85 bd       	out	0x25, r24	; 37
			TCCR2 &= ~((1<<CS20));
     180:	85 b5       	in	r24, 0x25	; 37
     182:	8e 7f       	andi	r24, 0xFE	; 254
     184:	85 bd       	out	0x25, r24	; 37
		}
		//++stop_counter;
		
}
     186:	9f 91       	pop	r25
     188:	8f 91       	pop	r24
     18a:	0f 90       	pop	r0
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	0f 90       	pop	r0
     190:	1f 90       	pop	r1
     192:	18 95       	reti

00000194 <__vector_3>:

//PWM duty cycle expired, shut off signal
ISR(TIMER2_COMP_vect){
     194:	1f 92       	push	r1
     196:	0f 92       	push	r0
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	0f 92       	push	r0
     19c:	11 24       	eor	r1, r1
     19e:	8f 93       	push	r24
     1a0:	9f 93       	push	r25
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
		//turn off right NMOS
		PORTB |= (1<<PB0);
	}*/
	if (t2){
     1a2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <t2>
     1a6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <t2+0x1>
     1aa:	89 2b       	or	r24, r25
     1ac:	29 f0       	breq	.+10     	; 0x1b8 <__vector_3+0x24>
		//right to left current
		//turn off PMOSes, turn on left NMOS so motor brakes
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     1ae:	c2 98       	cbi	0x18, 2	; 24
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     1b0:	c1 98       	cbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     1b2:	97 98       	cbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     1b4:	c0 9a       	sbi	0x18, 0	; 24
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <__vector_3+0x2c>
	}
	else{
		//left to right current
		//turn off PMOSes, turn on right NMOS so motor brakes?!
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     1b8:	c2 98       	cbi	0x18, 2	; 24
		//turn on left NMOS
		PORTB |= (1<<PB1);
     1ba:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     1bc:	97 98       	cbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB &= ~(1<<PB0);
     1be:	c0 98       	cbi	0x18, 0	; 24
	}
}
     1c0:	9f 91       	pop	r25
     1c2:	8f 91       	pop	r24
     1c4:	0f 90       	pop	r0
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	0f 90       	pop	r0
     1ca:	1f 90       	pop	r1
     1cc:	18 95       	reti

000001ce <__vector_4>:

//PWM restarted, change switches according to current current direction
ISR(TIMER2_OVF_vect){
     1ce:	1f 92       	push	r1
     1d0:	0f 92       	push	r0
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	0f 92       	push	r0
     1d6:	11 24       	eor	r1, r1
     1d8:	8f 93       	push	r24
     1da:	9f 93       	push	r25
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     1dc:	85 b5       	in	r24, 0x25	; 37
     1de:	88 7f       	andi	r24, 0xF8	; 248
     1e0:	85 bd       	out	0x25, r24	; 37
	if (t2){
     1e2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <t2>
     1e6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <t2+0x1>
     1ea:	89 2b       	or	r24, r25
     1ec:	29 f0       	breq	.+10     	; 0x1f8 <__vector_4+0x2a>
		//right to left current
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     1ee:	c2 98       	cbi	0x18, 2	; 24
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     1f0:	c1 98       	cbi	0x18, 1	; 24
		//turn on right PMOS
		PORTD |= (1<<PD7);
     1f2:	97 9a       	sbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     1f4:	c0 9a       	sbi	0x18, 0	; 24
     1f6:	04 c0       	rjmp	.+8      	; 0x200 <__vector_4+0x32>
	}
	else{
		//left to right current
		//turn on left PMOS
		PORTB |= (1<<PB2);
     1f8:	c2 9a       	sbi	0x18, 2	; 24
		//turn off left NMOS
		PORTB |= (1<<PB1);
     1fa:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     1fc:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     1fe:	c0 98       	cbi	0x18, 0	; 24
	}
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     200:	85 b5       	in	r24, 0x25	; 37
     202:	86 60       	ori	r24, 0x06	; 6
     204:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     206:	85 b5       	in	r24, 0x25	; 37
     208:	8e 7f       	andi	r24, 0xFE	; 254
     20a:	85 bd       	out	0x25, r24	; 37
     20c:	9f 91       	pop	r25
     20e:	8f 91       	pop	r24
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <main>:
volatile unsigned int current = 1200;
volatile unsigned int voltleft = 12;
volatile unsigned int voltright = 21;

int main(void)
{
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	c4 5a       	subi	r28, 0xA4	; 164
     224:	d1 09       	sbc	r29, r1
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	f8 94       	cli
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	cd bf       	out	0x3d, r28	; 61
	t2 = 0; //flag for if T/2 time crossing is next to be handled
     230:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <t2+0x1>
     234:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <t2>
	stop_counter = 0; //counter to stop PWM every STOPCYCLE/2 number of cycles
     238:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <stop_counter+0x1>
     23c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <stop_counter>
	data_received = 0; //set data received flag to 0 initially
     240:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <data_received+0x1>
     244:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <data_received>
	//set PWM ports as output
	DDRB |= ((1<<PB2)|(1<<PB1)|(1<<PB0));
     248:	87 b3       	in	r24, 0x17	; 23
     24a:	87 60       	ori	r24, 0x07	; 7
     24c:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<PD7);
     24e:	8f 9a       	sbi	0x11, 7	; 17
	
	//set normal timer mode
	TCCR2 &= ~(1<<WGM20);
     250:	85 b5       	in	r24, 0x25	; 37
     252:	8f 7b       	andi	r24, 0xBF	; 191
     254:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(1<<WGM21);
     256:	85 b5       	in	r24, 0x25	; 37
     258:	87 7f       	andi	r24, 0xF7	; 247
     25a:	85 bd       	out	0x25, r24	; 37
	
	//disconnect OC2 port
	TCCR2 &= ~((1<<COM21) | (1<<COM20));
     25c:	85 b5       	in	r24, 0x25	; 37
     25e:	8f 7c       	andi	r24, 0xCF	; 207
     260:	85 bd       	out	0x25, r24	; 37
	
	//set output compare value for timer 2 between 0-255 (OCR2/255 % duty cycle)
	duty_request = 255;
     262:	8f ef       	ldi	r24, 0xFF	; 255
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <duty_request+0x1>
     26a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <duty_request>
	OCR2 = duty_request;
     26e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <duty_request>
     272:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <duty_request+0x1>
     276:	83 bd       	out	0x23, r24	; 35
	
	//set prescaler of 64 (gives effective PWM frequency of 980Hz)
	//TCCR2 |= (1<<CS22);
	//TCCR2 &= ~((1<<CS21) | (1<<CS20));
	//set prescaler of 256 (gives effective PWM frequency of 245Hz)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     278:	85 b5       	in	r24, 0x25	; 37
     27a:	86 60       	ori	r24, 0x06	; 6
     27c:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     27e:	85 b5       	in	r24, 0x25	; 37
     280:	8e 7f       	andi	r24, 0xFE	; 254
     282:	85 bd       	out	0x25, r24	; 37
	
	//turn off PMOSes, turn on NMOSes so motor brakes?!
	//turn off left PMOS
	PORTB &= ~(1<<PB2);
     284:	c2 98       	cbi	0x18, 2	; 24
	//turn on left NMOS
	PORTB &= ~(1<<PB1);
     286:	c1 98       	cbi	0x18, 1	; 24
	//turn off right PMOS
	PORTD &= ~(1<<PD7);
     288:	97 98       	cbi	0x12, 7	; 18
	//turn on right NMOS
	PORTB &= ~(1<<PB0);
     28a:	c0 98       	cbi	0x18, 0	; 24
	
	//set timer 1 to normal mode
	TCCR1B &= ~((1<<WGM13) | (1<<WGM12));
     28c:	8e b5       	in	r24, 0x2e	; 46
     28e:	87 7e       	andi	r24, 0xE7	; 231
     290:	8e bd       	out	0x2e, r24	; 46
	TCCR1A &= ~((1<<WGM11) | (1<<WGM10));
     292:	8f b5       	in	r24, 0x2f	; 47
     294:	8c 7f       	andi	r24, 0xFC	; 252
     296:	8f bd       	out	0x2f, r24	; 47
	
	//set prescaler to /256
	TCCR1B |= (1<<CS12);
     298:	8e b5       	in	r24, 0x2e	; 46
     29a:	84 60       	ori	r24, 0x04	; 4
     29c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1<<CS11) | (1<<CS10));
     29e:	8e b5       	in	r24, 0x2e	; 46
     2a0:	8c 7f       	andi	r24, 0xFC	; 252
     2a2:	8e bd       	out	0x2e, r24	; 46
	
	//set timer 1 overflow A and B compare values
	OCR1A = 1250; //for T/4
     2a4:	82 ee       	ldi	r24, 0xE2	; 226
     2a6:	94 e0       	ldi	r25, 0x04	; 4
     2a8:	9b bd       	out	0x2b, r25	; 43
     2aa:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 2500; //for 12.5Hz resonant frequency (for T/2)
     2ac:	84 ec       	ldi	r24, 0xC4	; 196
     2ae:	99 e0       	ldi	r25, 0x09	; 9
     2b0:	99 bd       	out	0x29, r25	; 41
     2b2:	88 bd       	out	0x28, r24	; 40
	//enable timer 2 compare match interrupt and overflow interrupt
	TIMSK |= ((1<<OCIE2) | (1<<TOIE2));
     2b4:	89 b7       	in	r24, 0x39	; 57
     2b6:	80 6c       	ori	r24, 0xC0	; 192
     2b8:	89 bf       	out	0x39, r24	; 57
	//enable timer 1 compare match A and B interrupts
	TIMSK |= ((1<<OCIE1A) | (1<<OCIE1B));
     2ba:	89 b7       	in	r24, 0x39	; 57
     2bc:	88 61       	ori	r24, 0x18	; 24
     2be:	89 bf       	out	0x39, r24	; 57
	//mark T PWM pulse to be handled next
	t2 = 0;
     2c0:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <t2+0x1>
     2c4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <t2>
	
	//enable and initialise UART
	uart_init();
     2c8:	74 d1       	rcall	.+744    	; 0x5b2 <uart_init>
	//enable global interrupts
	sei();
     2ca:	78 94       	sei
		if (OCR2 != duty_request)
			OCR2 = duty_request; //if the duty cycle has been changed, set it to the newly received value
		
		//if data has been received, parse json
		if (data_received){
			const char left_bracket[2] = "{";
     2cc:	0f 2e       	mov	r0, r31
     2ce:	fb e7       	ldi	r31, 0x7B	; 123
     2d0:	af 2e       	mov	r10, r31
     2d2:	b1 2c       	mov	r11, r1
     2d4:	f0 2d       	mov	r31, r0
					}
				}
				//we have processed everything
				//free memory, and continue to next iteration
				data_received = 0;
				transmit_data = 1;
     2d6:	22 24       	eor	r2, r2
     2d8:	23 94       	inc	r2
     2da:	31 2c       	mov	r3, r1
					memcpy(check_req, &splitstrings[2][1], 3);
					check_req[3] = '\0';
					if (strcmp(check_req,"req") == 0){
						//if true, check mass flow request value
						char check_reqval[8];
						memcpy(check_reqval, &splitstrings[2][8], 7);
     2dc:	ce 01       	movw	r24, r28
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	3c 01       	movw	r6, r24
			
			if (transmit_data){
				//disable receiver while transmitting to avoid echo-back
				UCSRB &= ~(1<<RXEN);
				char transmit_buffer[150];
				sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3d\",\n%11s\"cur\": \"%3d\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%d.%dW\",\n%11s\"freq\": \"%d.%dHz\",\n%11s\"curr\": \"%dmA\",\n%11s\"volt\": \"%d.%dV\",\n%7s}\n%3s}\n}", "", "", "", "", "", duty_request, "", OCR2, "", "", "", "", "", powerleft, powerright, "", freqleft, freqright, "", current, "", voltleft, voltright, "", "");
     2e2:	07 e7       	ldi	r16, 0x77	; 119
     2e4:	10 e0       	ldi	r17, 0x00	; 0
     2e6:	0f 2e       	mov	r0, r31
     2e8:	fc e7       	ldi	r31, 0x7C	; 124
     2ea:	4f 2e       	mov	r4, r31
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	5f 2e       	mov	r5, r31
     2f0:	f0 2d       	mov	r31, r0
	//enable global interrupts
	sei();
    while (1)
    {
		//add gradual increase logic to couple with resonant frequency detection module
		if (OCR2 != duty_request)
     2f2:	83 b5       	in	r24, 0x23	; 35
     2f4:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <duty_request>
     2f8:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <duty_request+0x1>
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	82 17       	cp	r24, r18
     300:	93 07       	cpc	r25, r19
     302:	29 f0       	breq	.+10     	; 0x30e <main+0xf4>
			OCR2 = duty_request; //if the duty cycle has been changed, set it to the newly received value
     304:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <duty_request>
     308:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <duty_request+0x1>
     30c:	83 bd       	out	0x23, r24	; 35
		
		//if data has been received, parse json
		if (data_received){
     30e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <data_received>
     312:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <data_received+0x1>
     316:	89 2b       	or	r24, r25
     318:	61 f3       	breq	.-40     	; 0x2f2 <main+0xd8>
			const char left_bracket[2] = "{";
     31a:	cd 55       	subi	r28, 0x5D	; 93
     31c:	df 4f       	sbci	r29, 0xFF	; 255
     31e:	b9 82       	std	Y+1, r11	; 0x01
     320:	a8 82       	st	Y, r10
     322:	c3 5a       	subi	r28, 0xA3	; 163
     324:	d0 40       	sbci	r29, 0x00	; 0
			char** splitstrings; //pointer to hold arrays of c-strings
			unsigned int k = 1; //iterator for array of c-strings
			
			splitstrings = (char**)malloc(10*sizeof(char*));
     326:	84 e1       	ldi	r24, 0x14	; 20
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	83 d1       	rcall	.+774    	; 0x632 <malloc>
     32c:	4c 01       	movw	r8, r24
     32e:	7c 01       	movw	r14, r24
     330:	6c 01       	movw	r12, r24
     332:	94 e1       	ldi	r25, 0x14	; 20
     334:	c9 0e       	add	r12, r25
     336:	d1 1c       	adc	r13, r1
			
			for (int j = 0; j < 10; ++j){
				splitstrings[j] = (char*) malloc(10);
     338:	8a e0       	ldi	r24, 0x0A	; 10
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	7a d1       	rcall	.+756    	; 0x632 <malloc>
     33e:	d7 01       	movw	r26, r14
     340:	8d 93       	st	X+, r24
     342:	9d 93       	st	X+, r25
     344:	7d 01       	movw	r14, r26
			char** splitstrings; //pointer to hold arrays of c-strings
			unsigned int k = 1; //iterator for array of c-strings
			
			splitstrings = (char**)malloc(10*sizeof(char*));
			
			for (int j = 0; j < 10; ++j){
     346:	ac 15       	cp	r26, r12
     348:	bd 05       	cpc	r27, r13
     34a:	b1 f7       	brne	.-20     	; 0x338 <main+0x11e>
				splitstrings[j] = (char*) malloc(10);
			}
			
			splitstrings[0] = strtok(str_buffer,left_bracket);
     34c:	be 01       	movw	r22, r28
     34e:	6d 55       	subi	r22, 0x5D	; 93
     350:	7f 4f       	sbci	r23, 0xFF	; 255
     352:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <str_buffer>
     356:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <str_buffer+0x1>
     35a:	64 d4       	rcall	.+2248   	; 0xc24 <strtok>
     35c:	f4 01       	movw	r30, r8
     35e:	91 83       	std	Z+1, r25	; 0x01
     360:	80 83       	st	Z, r24
			
			while (splitstrings[k-1] != NULL){
     362:	89 2b       	or	r24, r25
     364:	81 f0       	breq	.+32     	; 0x386 <main+0x16c>
     366:	74 01       	movw	r14, r8
     368:	f2 e0       	ldi	r31, 0x02	; 2
     36a:	ef 0e       	add	r14, r31
     36c:	f1 1c       	adc	r15, r1
				splitstrings[k] = strtok(NULL,left_bracket);
     36e:	be 01       	movw	r22, r28
     370:	6d 55       	subi	r22, 0x5D	; 93
     372:	7f 4f       	sbci	r23, 0xFF	; 255
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	55 d4       	rcall	.+2218   	; 0xc24 <strtok>
     37a:	d7 01       	movw	r26, r14
     37c:	8d 93       	st	X+, r24
     37e:	9d 93       	st	X+, r25
     380:	7d 01       	movw	r14, r26
				splitstrings[j] = (char*) malloc(10);
			}
			
			splitstrings[0] = strtok(str_buffer,left_bracket);
			
			while (splitstrings[k-1] != NULL){
     382:	89 2b       	or	r24, r25
     384:	a1 f7       	brne	.-24     	; 0x36e <main+0x154>
				++k;
			}
			
			//extract and validate data from JSON
			//check if id == 3
			if (splitstrings[0][1] == '3'){
     386:	d4 01       	movw	r26, r8
     388:	ed 91       	ld	r30, X+
     38a:	fc 91       	ld	r31, X
     38c:	11 97       	sbiw	r26, 0x01	; 1
     38e:	81 81       	ldd	r24, Z+1	; 0x01
     390:	83 33       	cpi	r24, 0x33	; 51
     392:	09 f0       	breq	.+2      	; 0x396 <main+0x17c>
     394:	9f c0       	rjmp	.+318    	; 0x4d4 <__stack+0x75>
				//if true, check mfc key
				char check_mfc[4];
				memcpy(check_mfc, &splitstrings[1][1], 3);
     396:	12 96       	adiw	r26, 0x02	; 2
     398:	ed 91       	ld	r30, X+
     39a:	fc 91       	ld	r31, X
     39c:	13 97       	sbiw	r26, 0x03	; 3
     39e:	81 81       	ldd	r24, Z+1	; 0x01
     3a0:	92 81       	ldd	r25, Z+2	; 0x02
     3a2:	c1 56       	subi	r28, 0x61	; 97
     3a4:	df 4f       	sbci	r29, 0xFF	; 255
     3a6:	99 83       	std	Y+1, r25	; 0x01
     3a8:	88 83       	st	Y, r24
     3aa:	cf 59       	subi	r28, 0x9F	; 159
     3ac:	d0 40       	sbci	r29, 0x00	; 0
     3ae:	83 81       	ldd	r24, Z+3	; 0x03
     3b0:	cf 55       	subi	r28, 0x5F	; 95
     3b2:	df 4f       	sbci	r29, 0xFF	; 255
     3b4:	88 83       	st	Y, r24
     3b6:	c1 5a       	subi	r28, 0xA1	; 161
     3b8:	d0 40       	sbci	r29, 0x00	; 0
				check_mfc[3] = '\0';
     3ba:	ce 55       	subi	r28, 0x5E	; 94
     3bc:	df 4f       	sbci	r29, 0xFF	; 255
     3be:	18 82       	st	Y, r1
     3c0:	c2 5a       	subi	r28, 0xA2	; 162
     3c2:	d0 40       	sbci	r29, 0x00	; 0
				//check for valid MFC key
				if (strcmp(check_mfc,"mfc") == 0){
     3c4:	64 e7       	ldi	r22, 0x74	; 116
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	ce 01       	movw	r24, r28
     3ca:	81 56       	subi	r24, 0x61	; 97
     3cc:	9f 4f       	sbci	r25, 0xFF	; 255
     3ce:	54 d4       	rcall	.+2216   	; 0xc78 <strcmp>
     3d0:	89 2b       	or	r24, r25
     3d2:	09 f0       	breq	.+2      	; 0x3d6 <main+0x1bc>
     3d4:	70 c0       	rjmp	.+224    	; 0x4b6 <__stack+0x57>
					//if true, check if req key is present
					char check_req[4];
					memcpy(check_req, &splitstrings[2][1], 3);
     3d6:	f4 01       	movw	r30, r8
     3d8:	e4 80       	ldd	r14, Z+4	; 0x04
     3da:	f5 80       	ldd	r15, Z+5	; 0x05
     3dc:	d7 01       	movw	r26, r14
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	8d 91       	ld	r24, X+
     3e2:	9c 91       	ld	r25, X
     3e4:	12 97       	sbiw	r26, 0x02	; 2
     3e6:	c5 56       	subi	r28, 0x65	; 101
     3e8:	df 4f       	sbci	r29, 0xFF	; 255
     3ea:	99 83       	std	Y+1, r25	; 0x01
     3ec:	88 83       	st	Y, r24
     3ee:	cb 59       	subi	r28, 0x9B	; 155
     3f0:	d0 40       	sbci	r29, 0x00	; 0
     3f2:	13 96       	adiw	r26, 0x03	; 3
     3f4:	8c 91       	ld	r24, X
     3f6:	c3 56       	subi	r28, 0x63	; 99
     3f8:	df 4f       	sbci	r29, 0xFF	; 255
     3fa:	88 83       	st	Y, r24
     3fc:	cd 59       	subi	r28, 0x9D	; 157
     3fe:	d0 40       	sbci	r29, 0x00	; 0
					check_req[3] = '\0';
     400:	c2 56       	subi	r28, 0x62	; 98
     402:	df 4f       	sbci	r29, 0xFF	; 255
     404:	18 82       	st	Y, r1
     406:	ce 59       	subi	r28, 0x9E	; 158
     408:	d0 40       	sbci	r29, 0x00	; 0
					if (strcmp(check_req,"req") == 0){
     40a:	68 e7       	ldi	r22, 0x78	; 120
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	ce 01       	movw	r24, r28
     410:	85 56       	subi	r24, 0x65	; 101
     412:	9f 4f       	sbci	r25, 0xFF	; 255
     414:	31 d4       	rcall	.+2146   	; 0xc78 <strcmp>
     416:	89 2b       	or	r24, r25
     418:	09 f0       	breq	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41a:	4d c0       	rjmp	.+154    	; 0x4b6 <__stack+0x57>
						//if true, check mass flow request value
						char check_reqval[8];
						memcpy(check_reqval, &splitstrings[2][8], 7);
     41c:	f7 01       	movw	r30, r14
     41e:	38 96       	adiw	r30, 0x08	; 8
     420:	87 e0       	ldi	r24, 0x07	; 7
     422:	d3 01       	movw	r26, r6
     424:	01 90       	ld	r0, Z+
     426:	0d 92       	st	X+, r0
     428:	8a 95       	dec	r24
     42a:	e1 f7       	brne	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
						//isolate value from key-value pair using apostrophe as the delimiter
						check_reqval[7] = '\0';
     42c:	18 86       	std	Y+8, r1	; 0x08
						char check_val[4];
						char* commapos = strchr(check_reqval, '"');
     42e:	62 e2       	ldi	r22, 0x22	; 34
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	c3 01       	movw	r24, r6
     434:	16 d4       	rcall	.+2092   	; 0xc62 <strchr>
						memcpy(check_val, check_reqval, (commapos - check_reqval));
     436:	7c 01       	movw	r14, r24
     438:	e6 18       	sub	r14, r6
     43a:	f7 08       	sbc	r15, r7
     43c:	a7 01       	movw	r20, r14
     43e:	b3 01       	movw	r22, r6
     440:	ce 01       	movw	r24, r28
     442:	89 56       	subi	r24, 0x69	; 105
     444:	9f 4f       	sbci	r25, 0xFF	; 255
     446:	f2 d3       	rcall	.+2020   	; 0xc2c <memcpy>
						check_val[commapos - check_reqval] = '\0';
     448:	e7 e9       	ldi	r30, 0x97	; 151
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	ec 0f       	add	r30, r28
     44e:	fd 1f       	adc	r31, r29
     450:	ee 0d       	add	r30, r14
     452:	ff 1d       	adc	r31, r15
     454:	10 82       	st	Z, r1
						if (check_val[0] != '\0'){
     456:	c9 56       	subi	r28, 0x69	; 105
     458:	df 4f       	sbci	r29, 0xFF	; 255
     45a:	88 81       	ld	r24, Y
     45c:	c7 59       	subi	r28, 0x97	; 151
     45e:	d0 40       	sbci	r29, 0x00	; 0
     460:	88 23       	and	r24, r24
     462:	49 f1       	breq	.+82     	; 0x4b6 <__stack+0x57>
							//if value was not empty
							unsigned int notzero = 0;
							//check if value is 0
							//we need to check if we received a 0 since strtol() returns a 0 on invalid inputs as well
							for (int n = 0; n < (commapos - check_reqval);++n){
     464:	1e 14       	cp	r1, r14
     466:	1f 04       	cpc	r1, r15
     468:	14 f5       	brge	.+68     	; 0x4ae <__stack+0x4f>
     46a:	fe 01       	movw	r30, r28
     46c:	e9 56       	subi	r30, 0x69	; 105
     46e:	ff 4f       	sbci	r31, 0xFF	; 255
     470:	ee 0e       	add	r14, r30
     472:	ff 1e       	adc	r15, r31
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	30 e0       	ldi	r19, 0x00	; 0
								if (check_val[n] != '0'){
     478:	81 91       	ld	r24, Z+
     47a:	80 33       	cpi	r24, 0x30	; 48
     47c:	09 f0       	breq	.+2      	; 0x480 <__stack+0x21>
									notzero = 1;
     47e:	91 01       	movw	r18, r2
						if (check_val[0] != '\0'){
							//if value was not empty
							unsigned int notzero = 0;
							//check if value is 0
							//we need to check if we received a 0 since strtol() returns a 0 on invalid inputs as well
							for (int n = 0; n < (commapos - check_reqval);++n){
     480:	ee 15       	cp	r30, r14
     482:	ff 05       	cpc	r31, r15
     484:	c9 f7       	brne	.-14     	; 0x478 <__stack+0x19>
								if (check_val[n] != '0'){
									notzero = 1;
								}
							}
							if (notzero == 1){
     486:	21 30       	cpi	r18, 0x01	; 1
     488:	31 05       	cpc	r19, r1
     48a:	89 f4       	brne	.+34     	; 0x4ae <__stack+0x4f>
								int duty_received = strtol(check_val,NULL,10); //turn duty cycle into a base 10 value
     48c:	4a e0       	ldi	r20, 0x0A	; 10
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	ce 01       	movw	r24, r28
     496:	89 56       	subi	r24, 0x69	; 105
     498:	9f 4f       	sbci	r25, 0xFF	; 255
     49a:	ab d2       	rcall	.+1366   	; 0x9f2 <strtol>
								if ((duty_received >= 0) && (duty_received <= 255)){
     49c:	6f 3f       	cpi	r22, 0xFF	; 255
     49e:	71 05       	cpc	r23, r1
     4a0:	09 f0       	breq	.+2      	; 0x4a4 <__stack+0x45>
     4a2:	48 f4       	brcc	.+18     	; 0x4b6 <__stack+0x57>
									//if true, duty request value is valid
									duty_request = duty_received;
     4a4:	70 93 58 01 	sts	0x0158, r23	; 0x800158 <duty_request+0x1>
     4a8:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <duty_request>
     4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <__stack+0x57>
								}
							}
							else{
								duty_request = 0; //stop the motor
     4ae:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <duty_request+0x1>
     4b2:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <duty_request>
						}
					}
				}
				//we have processed everything
				//free memory, and continue to next iteration
				data_received = 0;
     4b6:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <data_received+0x1>
     4ba:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <data_received>
				transmit_data = 1;
     4be:	30 92 4d 01 	sts	0x014D, r3	; 0x80014d <transmit_data+0x1>
     4c2:	20 92 4c 01 	sts	0x014C, r2	; 0x80014c <transmit_data>
				//DONT FORGET TO FREE MEMORY
				free(str_buffer);
     4c6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <str_buffer>
     4ca:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <str_buffer+0x1>
     4ce:	49 d1       	rcall	.+658    	; 0x762 <free>
				free(splitstrings);
     4d0:	c4 01       	movw	r24, r8
     4d2:	47 d1       	rcall	.+654    	; 0x762 <free>
			}
			
			if (transmit_data){
     4d4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <transmit_data>
     4d8:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <transmit_data+0x1>
     4dc:	89 2b       	or	r24, r25
     4de:	09 f4       	brne	.+2      	; 0x4e2 <__stack+0x83>
     4e0:	08 cf       	rjmp	.-496    	; 0x2f2 <main+0xd8>
				//disable receiver while transmitting to avoid echo-back
				UCSRB &= ~(1<<RXEN);
     4e2:	54 98       	cbi	0x0a, 4	; 10
				char transmit_buffer[150];
				sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3d\",\n%11s\"cur\": \"%3d\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%d.%dW\",\n%11s\"freq\": \"%d.%dHz\",\n%11s\"curr\": \"%dmA\",\n%11s\"volt\": \"%d.%dV\",\n%7s}\n%3s}\n}", "", "", "", "", "", duty_request, "", OCR2, "", "", "", "", "", powerleft, powerright, "", freqleft, freqright, "", current, "", voltleft, voltright, "", "");
     4e4:	c0 90 66 00 	lds	r12, 0x0066	; 0x800066 <voltright>
     4e8:	d0 90 67 00 	lds	r13, 0x0067	; 0x800067 <voltright+0x1>
     4ec:	e0 90 68 00 	lds	r14, 0x0068	; 0x800068 <voltleft>
     4f0:	f0 90 69 00 	lds	r15, 0x0069	; 0x800069 <voltleft+0x1>
     4f4:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <current>
     4f8:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <current+0x1>
     4fc:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <freqright>
     500:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <freqright+0x1>
     504:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <freqleft>
     508:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <freqleft+0x1>
     50c:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <powerright>
     510:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <powerright+0x1>
     514:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <powerleft>
     518:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <powerleft+0x1>
     51c:	93 b4       	in	r9, 0x23	; 35
     51e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <duty_request>
     522:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <duty_request+0x1>
     526:	1f 93       	push	r17
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	0f 93       	push	r16
     52e:	df 92       	push	r13
     530:	cf 92       	push	r12
     532:	ff 92       	push	r15
     534:	ef 92       	push	r14
     536:	1f 93       	push	r17
     538:	0f 93       	push	r16
     53a:	bf 93       	push	r27
     53c:	af 93       	push	r26
     53e:	1f 93       	push	r17
     540:	0f 93       	push	r16
     542:	ff 93       	push	r31
     544:	ef 93       	push	r30
     546:	7f 93       	push	r23
     548:	6f 93       	push	r22
     54a:	1f 93       	push	r17
     54c:	0f 93       	push	r16
     54e:	5f 93       	push	r21
     550:	4f 93       	push	r20
     552:	3f 93       	push	r19
     554:	2f 93       	push	r18
     556:	1f 93       	push	r17
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	0f 93       	push	r16
     56a:	1f 92       	push	r1
     56c:	9f 92       	push	r9
     56e:	1f 93       	push	r17
     570:	0f 93       	push	r16
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	1f 93       	push	r17
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	0f 93       	push	r16
     58a:	5f 92       	push	r5
     58c:	4f 92       	push	r4
     58e:	7f 92       	push	r7
     590:	6f 92       	push	r6
     592:	a2 d3       	rcall	.+1860   	; 0xcd8 <sprintf>
				//TODO: add code to detect and report errors/error messages
				//TODO: also add code to re-transmit errors if detected
				uart_transmit_string(transmit_buffer);
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	c3 01       	movw	r24, r6
     5a0:	1d d0       	rcall	.+58     	; 0x5dc <uart_transmit_string>
				//wait for last transmission to fully complete
				while (UDREMPTY == 0);
     5a2:	5d 9b       	sbis	0x0b, 5	; 11
     5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <__stack+0x143>
				//reenable receiver after transmission is complete
				UCSRB |= (1<<RXEN);
     5a6:	54 9a       	sbi	0x0a, 4	; 10
				transmit_data = 0;
     5a8:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <transmit_data+0x1>
     5ac:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <transmit_data>
     5b0:	a0 ce       	rjmp	.-704    	; 0x2f2 <main+0xd8>

000005b2 <uart_init>:
 */ 

#include "uart.h"

void uart_init(){
	UCSRB |= ((1<<TXEN)|(1<<RXEN)); //set transmit and receive bit
     5b2:	8a b1       	in	r24, 0x0a	; 10
     5b4:	88 61       	ori	r24, 0x18	; 24
     5b6:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1<<RXCIE);
     5b8:	57 9a       	sbi	0x0a, 7	; 10
	UBRRH = (ubrrvalue >> 8); //load baud rate register with calculated value
     5ba:	10 bc       	out	0x20, r1	; 32
	UBRRL = ubrrvalue;
     5bc:	87 e6       	ldi	r24, 0x67	; 103
     5be:	89 b9       	out	0x09, r24	; 9
	UCSRC |= ((1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0)); //set 8 bit character size
     5c0:	80 b5       	in	r24, 0x20	; 32
     5c2:	86 68       	ori	r24, 0x86	; 134
     5c4:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1<<UMSEL); //Set Asynchronous operation
     5c6:	80 b5       	in	r24, 0x20	; 32
     5c8:	8f 7b       	andi	r24, 0xBF	; 191
     5ca:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1<<UCSZ2); //set 8 bit character size
     5cc:	80 b5       	in	r24, 0x20	; 32
     5ce:	8b 7f       	andi	r24, 0xFB	; 251
     5d0:	80 bd       	out	0x20, r24	; 32
     5d2:	08 95       	ret

000005d4 <uart_transmit>:
		stringtransmit++;
	}
}

void uart_transmit(uint8_t data){
	while (UDREMPTY == 0){ //wait for buffer to empty
     5d4:	5d 9b       	sbis	0x0b, 5	; 11
     5d6:	fe cf       	rjmp	.-4      	; 0x5d4 <uart_transmit>
	}
	UDR = data; //load data register with data byte
     5d8:	8c b9       	out	0x0c, r24	; 12
     5da:	08 95       	ret

000005dc <uart_transmit_string>:
	UCSRC &= ~(1<<UMSEL); //Set Asynchronous operation
	UCSRC &= ~(1<<UCSZ2); //set 8 bit character size
}

//Transmitter
void uart_transmit_string(char* stringtransmit){
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
	while (*stringtransmit != 0x00){
     5e2:	88 81       	ld	r24, Y
     5e4:	88 23       	and	r24, r24
     5e6:	29 f0       	breq	.+10     	; 0x5f2 <uart_transmit_string+0x16>
     5e8:	21 96       	adiw	r28, 0x01	; 1
		uart_transmit(*stringtransmit);
     5ea:	f4 df       	rcall	.-24     	; 0x5d4 <uart_transmit>
	UCSRC &= ~(1<<UCSZ2); //set 8 bit character size
}

//Transmitter
void uart_transmit_string(char* stringtransmit){
	while (*stringtransmit != 0x00){
     5ec:	89 91       	ld	r24, Y+
     5ee:	81 11       	cpse	r24, r1
     5f0:	fc cf       	rjmp	.-8      	; 0x5ea <uart_transmit_string+0xe>
		uart_transmit(*stringtransmit);
		stringtransmit++;
	}
}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <uart_receive>:
	UDR = data; //load data register with data byte
}

//Receiver
char uart_receive(){
	while (RXCOMP == 0){ //wait for receive to be completed
     5f8:	8b b1       	in	r24, 0x0b	; 11
	}
	return UDR; //load data register with data byte
     5fa:	8c b1       	in	r24, 0x0c	; 12
     5fc:	08 95       	ret

000005fe <calloc>:
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	86 9f       	mul	r24, r22
     608:	80 01       	movw	r16, r0
     60a:	87 9f       	mul	r24, r23
     60c:	10 0d       	add	r17, r0
     60e:	96 9f       	mul	r25, r22
     610:	10 0d       	add	r17, r0
     612:	11 24       	eor	r1, r1
     614:	c8 01       	movw	r24, r16
     616:	0d d0       	rcall	.+26     	; 0x632 <malloc>
     618:	ec 01       	movw	r28, r24
     61a:	00 97       	sbiw	r24, 0x00	; 0
     61c:	21 f0       	breq	.+8      	; 0x626 <calloc+0x28>
     61e:	a8 01       	movw	r20, r16
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	0c d3       	rcall	.+1560   	; 0xc3e <memset>
     626:	ce 01       	movw	r24, r28
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	08 95       	ret

00000632 <malloc>:
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	82 30       	cpi	r24, 0x02	; 2
     63c:	91 05       	cpc	r25, r1
     63e:	10 f4       	brcc	.+4      	; 0x644 <malloc+0x12>
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <__flp>
     648:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <__flp+0x1>
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	a0 e0       	ldi	r26, 0x00	; 0
     652:	b0 e0       	ldi	r27, 0x00	; 0
     654:	30 97       	sbiw	r30, 0x00	; 0
     656:	19 f1       	breq	.+70     	; 0x69e <malloc+0x6c>
     658:	40 81       	ld	r20, Z
     65a:	51 81       	ldd	r21, Z+1	; 0x01
     65c:	02 81       	ldd	r16, Z+2	; 0x02
     65e:	13 81       	ldd	r17, Z+3	; 0x03
     660:	48 17       	cp	r20, r24
     662:	59 07       	cpc	r21, r25
     664:	c8 f0       	brcs	.+50     	; 0x698 <malloc+0x66>
     666:	84 17       	cp	r24, r20
     668:	95 07       	cpc	r25, r21
     66a:	69 f4       	brne	.+26     	; 0x686 <malloc+0x54>
     66c:	10 97       	sbiw	r26, 0x00	; 0
     66e:	31 f0       	breq	.+12     	; 0x67c <malloc+0x4a>
     670:	12 96       	adiw	r26, 0x02	; 2
     672:	0c 93       	st	X, r16
     674:	12 97       	sbiw	r26, 0x02	; 2
     676:	13 96       	adiw	r26, 0x03	; 3
     678:	1c 93       	st	X, r17
     67a:	27 c0       	rjmp	.+78     	; 0x6ca <malloc+0x98>
     67c:	00 93 5b 01 	sts	0x015B, r16	; 0x80015b <__flp>
     680:	10 93 5c 01 	sts	0x015C, r17	; 0x80015c <__flp+0x1>
     684:	22 c0       	rjmp	.+68     	; 0x6ca <malloc+0x98>
     686:	21 15       	cp	r18, r1
     688:	31 05       	cpc	r19, r1
     68a:	19 f0       	breq	.+6      	; 0x692 <malloc+0x60>
     68c:	42 17       	cp	r20, r18
     68e:	53 07       	cpc	r21, r19
     690:	18 f4       	brcc	.+6      	; 0x698 <malloc+0x66>
     692:	9a 01       	movw	r18, r20
     694:	bd 01       	movw	r22, r26
     696:	ef 01       	movw	r28, r30
     698:	df 01       	movw	r26, r30
     69a:	f8 01       	movw	r30, r16
     69c:	db cf       	rjmp	.-74     	; 0x654 <malloc+0x22>
     69e:	21 15       	cp	r18, r1
     6a0:	31 05       	cpc	r19, r1
     6a2:	f9 f0       	breq	.+62     	; 0x6e2 <malloc+0xb0>
     6a4:	28 1b       	sub	r18, r24
     6a6:	39 0b       	sbc	r19, r25
     6a8:	24 30       	cpi	r18, 0x04	; 4
     6aa:	31 05       	cpc	r19, r1
     6ac:	80 f4       	brcc	.+32     	; 0x6ce <malloc+0x9c>
     6ae:	8a 81       	ldd	r24, Y+2	; 0x02
     6b0:	9b 81       	ldd	r25, Y+3	; 0x03
     6b2:	61 15       	cp	r22, r1
     6b4:	71 05       	cpc	r23, r1
     6b6:	21 f0       	breq	.+8      	; 0x6c0 <malloc+0x8e>
     6b8:	fb 01       	movw	r30, r22
     6ba:	93 83       	std	Z+3, r25	; 0x03
     6bc:	82 83       	std	Z+2, r24	; 0x02
     6be:	04 c0       	rjmp	.+8      	; 0x6c8 <malloc+0x96>
     6c0:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <__flp+0x1>
     6c4:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <__flp>
     6c8:	fe 01       	movw	r30, r28
     6ca:	32 96       	adiw	r30, 0x02	; 2
     6cc:	44 c0       	rjmp	.+136    	; 0x756 <malloc+0x124>
     6ce:	fe 01       	movw	r30, r28
     6d0:	e2 0f       	add	r30, r18
     6d2:	f3 1f       	adc	r31, r19
     6d4:	81 93       	st	Z+, r24
     6d6:	91 93       	st	Z+, r25
     6d8:	22 50       	subi	r18, 0x02	; 2
     6da:	31 09       	sbc	r19, r1
     6dc:	39 83       	std	Y+1, r19	; 0x01
     6de:	28 83       	st	Y, r18
     6e0:	3a c0       	rjmp	.+116    	; 0x756 <malloc+0x124>
     6e2:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <__brkval>
     6e6:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <__brkval+0x1>
     6ea:	23 2b       	or	r18, r19
     6ec:	41 f4       	brne	.+16     	; 0x6fe <malloc+0xcc>
     6ee:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
     6f2:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
     6f6:	30 93 5a 01 	sts	0x015A, r19	; 0x80015a <__brkval+0x1>
     6fa:	20 93 59 01 	sts	0x0159, r18	; 0x800159 <__brkval>
     6fe:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     702:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     706:	21 15       	cp	r18, r1
     708:	31 05       	cpc	r19, r1
     70a:	41 f4       	brne	.+16     	; 0x71c <malloc+0xea>
     70c:	2d b7       	in	r18, 0x3d	; 61
     70e:	3e b7       	in	r19, 0x3e	; 62
     710:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
     714:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
     718:	24 1b       	sub	r18, r20
     71a:	35 0b       	sbc	r19, r21
     71c:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <__brkval>
     720:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <__brkval+0x1>
     724:	e2 17       	cp	r30, r18
     726:	f3 07       	cpc	r31, r19
     728:	a0 f4       	brcc	.+40     	; 0x752 <malloc+0x120>
     72a:	2e 1b       	sub	r18, r30
     72c:	3f 0b       	sbc	r19, r31
     72e:	28 17       	cp	r18, r24
     730:	39 07       	cpc	r19, r25
     732:	78 f0       	brcs	.+30     	; 0x752 <malloc+0x120>
     734:	ac 01       	movw	r20, r24
     736:	4e 5f       	subi	r20, 0xFE	; 254
     738:	5f 4f       	sbci	r21, 0xFF	; 255
     73a:	24 17       	cp	r18, r20
     73c:	35 07       	cpc	r19, r21
     73e:	48 f0       	brcs	.+18     	; 0x752 <malloc+0x120>
     740:	4e 0f       	add	r20, r30
     742:	5f 1f       	adc	r21, r31
     744:	50 93 5a 01 	sts	0x015A, r21	; 0x80015a <__brkval+0x1>
     748:	40 93 59 01 	sts	0x0159, r20	; 0x800159 <__brkval>
     74c:	81 93       	st	Z+, r24
     74e:	91 93       	st	Z+, r25
     750:	02 c0       	rjmp	.+4      	; 0x756 <malloc+0x124>
     752:	e0 e0       	ldi	r30, 0x00	; 0
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	cf 01       	movw	r24, r30
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	08 95       	ret

00000762 <free>:
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	00 97       	sbiw	r24, 0x00	; 0
     768:	09 f4       	brne	.+2      	; 0x76c <free+0xa>
     76a:	81 c0       	rjmp	.+258    	; 0x86e <free+0x10c>
     76c:	fc 01       	movw	r30, r24
     76e:	32 97       	sbiw	r30, 0x02	; 2
     770:	13 82       	std	Z+3, r1	; 0x03
     772:	12 82       	std	Z+2, r1	; 0x02
     774:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <__flp>
     778:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <__flp+0x1>
     77c:	10 97       	sbiw	r26, 0x00	; 0
     77e:	81 f4       	brne	.+32     	; 0x7a0 <free+0x3e>
     780:	20 81       	ld	r18, Z
     782:	31 81       	ldd	r19, Z+1	; 0x01
     784:	82 0f       	add	r24, r18
     786:	93 1f       	adc	r25, r19
     788:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <__brkval>
     78c:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <__brkval+0x1>
     790:	28 17       	cp	r18, r24
     792:	39 07       	cpc	r19, r25
     794:	51 f5       	brne	.+84     	; 0x7ea <free+0x88>
     796:	f0 93 5a 01 	sts	0x015A, r31	; 0x80015a <__brkval+0x1>
     79a:	e0 93 59 01 	sts	0x0159, r30	; 0x800159 <__brkval>
     79e:	67 c0       	rjmp	.+206    	; 0x86e <free+0x10c>
     7a0:	ed 01       	movw	r28, r26
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	ce 17       	cp	r28, r30
     7a8:	df 07       	cpc	r29, r31
     7aa:	40 f4       	brcc	.+16     	; 0x7bc <free+0x5a>
     7ac:	4a 81       	ldd	r20, Y+2	; 0x02
     7ae:	5b 81       	ldd	r21, Y+3	; 0x03
     7b0:	9e 01       	movw	r18, r28
     7b2:	41 15       	cp	r20, r1
     7b4:	51 05       	cpc	r21, r1
     7b6:	f1 f0       	breq	.+60     	; 0x7f4 <free+0x92>
     7b8:	ea 01       	movw	r28, r20
     7ba:	f5 cf       	rjmp	.-22     	; 0x7a6 <free+0x44>
     7bc:	d3 83       	std	Z+3, r29	; 0x03
     7be:	c2 83       	std	Z+2, r28	; 0x02
     7c0:	40 81       	ld	r20, Z
     7c2:	51 81       	ldd	r21, Z+1	; 0x01
     7c4:	84 0f       	add	r24, r20
     7c6:	95 1f       	adc	r25, r21
     7c8:	c8 17       	cp	r28, r24
     7ca:	d9 07       	cpc	r29, r25
     7cc:	59 f4       	brne	.+22     	; 0x7e4 <free+0x82>
     7ce:	88 81       	ld	r24, Y
     7d0:	99 81       	ldd	r25, Y+1	; 0x01
     7d2:	84 0f       	add	r24, r20
     7d4:	95 1f       	adc	r25, r21
     7d6:	02 96       	adiw	r24, 0x02	; 2
     7d8:	91 83       	std	Z+1, r25	; 0x01
     7da:	80 83       	st	Z, r24
     7dc:	8a 81       	ldd	r24, Y+2	; 0x02
     7de:	9b 81       	ldd	r25, Y+3	; 0x03
     7e0:	93 83       	std	Z+3, r25	; 0x03
     7e2:	82 83       	std	Z+2, r24	; 0x02
     7e4:	21 15       	cp	r18, r1
     7e6:	31 05       	cpc	r19, r1
     7e8:	29 f4       	brne	.+10     	; 0x7f4 <free+0x92>
     7ea:	f0 93 5c 01 	sts	0x015C, r31	; 0x80015c <__flp+0x1>
     7ee:	e0 93 5b 01 	sts	0x015B, r30	; 0x80015b <__flp>
     7f2:	3d c0       	rjmp	.+122    	; 0x86e <free+0x10c>
     7f4:	e9 01       	movw	r28, r18
     7f6:	fb 83       	std	Y+3, r31	; 0x03
     7f8:	ea 83       	std	Y+2, r30	; 0x02
     7fa:	49 91       	ld	r20, Y+
     7fc:	59 91       	ld	r21, Y+
     7fe:	c4 0f       	add	r28, r20
     800:	d5 1f       	adc	r29, r21
     802:	ec 17       	cp	r30, r28
     804:	fd 07       	cpc	r31, r29
     806:	61 f4       	brne	.+24     	; 0x820 <free+0xbe>
     808:	80 81       	ld	r24, Z
     80a:	91 81       	ldd	r25, Z+1	; 0x01
     80c:	84 0f       	add	r24, r20
     80e:	95 1f       	adc	r25, r21
     810:	02 96       	adiw	r24, 0x02	; 2
     812:	e9 01       	movw	r28, r18
     814:	99 83       	std	Y+1, r25	; 0x01
     816:	88 83       	st	Y, r24
     818:	82 81       	ldd	r24, Z+2	; 0x02
     81a:	93 81       	ldd	r25, Z+3	; 0x03
     81c:	9b 83       	std	Y+3, r25	; 0x03
     81e:	8a 83       	std	Y+2, r24	; 0x02
     820:	e0 e0       	ldi	r30, 0x00	; 0
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	12 96       	adiw	r26, 0x02	; 2
     826:	8d 91       	ld	r24, X+
     828:	9c 91       	ld	r25, X
     82a:	13 97       	sbiw	r26, 0x03	; 3
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	19 f0       	breq	.+6      	; 0x836 <free+0xd4>
     830:	fd 01       	movw	r30, r26
     832:	dc 01       	movw	r26, r24
     834:	f7 cf       	rjmp	.-18     	; 0x824 <free+0xc2>
     836:	8d 91       	ld	r24, X+
     838:	9c 91       	ld	r25, X
     83a:	11 97       	sbiw	r26, 0x01	; 1
     83c:	9d 01       	movw	r18, r26
     83e:	2e 5f       	subi	r18, 0xFE	; 254
     840:	3f 4f       	sbci	r19, 0xFF	; 255
     842:	82 0f       	add	r24, r18
     844:	93 1f       	adc	r25, r19
     846:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <__brkval>
     84a:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <__brkval+0x1>
     84e:	28 17       	cp	r18, r24
     850:	39 07       	cpc	r19, r25
     852:	69 f4       	brne	.+26     	; 0x86e <free+0x10c>
     854:	30 97       	sbiw	r30, 0x00	; 0
     856:	29 f4       	brne	.+10     	; 0x862 <free+0x100>
     858:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__flp+0x1>
     85c:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <__flp>
     860:	02 c0       	rjmp	.+4      	; 0x866 <free+0x104>
     862:	13 82       	std	Z+3, r1	; 0x03
     864:	12 82       	std	Z+2, r1	; 0x02
     866:	b0 93 5a 01 	sts	0x015A, r27	; 0x80015a <__brkval+0x1>
     86a:	a0 93 59 01 	sts	0x0159, r26	; 0x800159 <__brkval>
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <realloc>:
     874:	a0 e0       	ldi	r26, 0x00	; 0
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	ef e3       	ldi	r30, 0x3F	; 63
     87a:	f4 e0       	ldi	r31, 0x04	; 4
     87c:	10 c5       	rjmp	.+2592   	; 0x129e <__prologue_saves__+0x8>
     87e:	ec 01       	movw	r28, r24
     880:	00 97       	sbiw	r24, 0x00	; 0
     882:	19 f4       	brne	.+6      	; 0x88a <realloc+0x16>
     884:	cb 01       	movw	r24, r22
     886:	d5 de       	rcall	.-598    	; 0x632 <malloc>
     888:	b0 c0       	rjmp	.+352    	; 0x9ea <realloc+0x176>
     88a:	fc 01       	movw	r30, r24
     88c:	e6 0f       	add	r30, r22
     88e:	f7 1f       	adc	r31, r23
     890:	9c 01       	movw	r18, r24
     892:	22 50       	subi	r18, 0x02	; 2
     894:	31 09       	sbc	r19, r1
     896:	e2 17       	cp	r30, r18
     898:	f3 07       	cpc	r31, r19
     89a:	08 f4       	brcc	.+2      	; 0x89e <realloc+0x2a>
     89c:	a4 c0       	rjmp	.+328    	; 0x9e6 <realloc+0x172>
     89e:	d9 01       	movw	r26, r18
     8a0:	0d 91       	ld	r16, X+
     8a2:	1c 91       	ld	r17, X
     8a4:	11 97       	sbiw	r26, 0x01	; 1
     8a6:	06 17       	cp	r16, r22
     8a8:	17 07       	cpc	r17, r23
     8aa:	a8 f0       	brcs	.+42     	; 0x8d6 <realloc+0x62>
     8ac:	05 30       	cpi	r16, 0x05	; 5
     8ae:	11 05       	cpc	r17, r1
     8b0:	08 f4       	brcc	.+2      	; 0x8b4 <realloc+0x40>
     8b2:	97 c0       	rjmp	.+302    	; 0x9e2 <realloc+0x16e>
     8b4:	c8 01       	movw	r24, r16
     8b6:	04 97       	sbiw	r24, 0x04	; 4
     8b8:	86 17       	cp	r24, r22
     8ba:	97 07       	cpc	r25, r23
     8bc:	08 f4       	brcc	.+2      	; 0x8c0 <realloc+0x4c>
     8be:	91 c0       	rjmp	.+290    	; 0x9e2 <realloc+0x16e>
     8c0:	02 50       	subi	r16, 0x02	; 2
     8c2:	11 09       	sbc	r17, r1
     8c4:	06 1b       	sub	r16, r22
     8c6:	17 0b       	sbc	r17, r23
     8c8:	01 93       	st	Z+, r16
     8ca:	11 93       	st	Z+, r17
     8cc:	6d 93       	st	X+, r22
     8ce:	7c 93       	st	X, r23
     8d0:	cf 01       	movw	r24, r30
     8d2:	47 df       	rcall	.-370    	; 0x762 <free>
     8d4:	86 c0       	rjmp	.+268    	; 0x9e2 <realloc+0x16e>
     8d6:	5b 01       	movw	r10, r22
     8d8:	a0 1a       	sub	r10, r16
     8da:	b1 0a       	sbc	r11, r17
     8dc:	4c 01       	movw	r8, r24
     8de:	80 0e       	add	r8, r16
     8e0:	91 1e       	adc	r9, r17
     8e2:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <__flp>
     8e6:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <__flp+0x1>
     8ea:	61 2c       	mov	r6, r1
     8ec:	71 2c       	mov	r7, r1
     8ee:	e1 2c       	mov	r14, r1
     8f0:	f1 2c       	mov	r15, r1
     8f2:	10 97       	sbiw	r26, 0x00	; 0
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <realloc+0x84>
     8f6:	46 c0       	rjmp	.+140    	; 0x984 <realloc+0x110>
     8f8:	8d 91       	ld	r24, X+
     8fa:	9c 91       	ld	r25, X
     8fc:	11 97       	sbiw	r26, 0x01	; 1
     8fe:	a8 15       	cp	r26, r8
     900:	b9 05       	cpc	r27, r9
     902:	b1 f5       	brne	.+108    	; 0x970 <realloc+0xfc>
     904:	6c 01       	movw	r12, r24
     906:	42 e0       	ldi	r20, 0x02	; 2
     908:	c4 0e       	add	r12, r20
     90a:	d1 1c       	adc	r13, r1
     90c:	ca 14       	cp	r12, r10
     90e:	db 04       	cpc	r13, r11
     910:	78 f1       	brcs	.+94     	; 0x970 <realloc+0xfc>
     912:	4c 01       	movw	r8, r24
     914:	8a 18       	sub	r8, r10
     916:	9b 08       	sbc	r9, r11
     918:	64 01       	movw	r12, r8
     91a:	42 e0       	ldi	r20, 0x02	; 2
     91c:	c4 0e       	add	r12, r20
     91e:	d1 1c       	adc	r13, r1
     920:	12 96       	adiw	r26, 0x02	; 2
     922:	bc 90       	ld	r11, X
     924:	12 97       	sbiw	r26, 0x02	; 2
     926:	13 96       	adiw	r26, 0x03	; 3
     928:	ac 91       	ld	r26, X
     92a:	b5 e0       	ldi	r27, 0x05	; 5
     92c:	cb 16       	cp	r12, r27
     92e:	d1 04       	cpc	r13, r1
     930:	40 f0       	brcs	.+16     	; 0x942 <realloc+0xce>
     932:	b2 82       	std	Z+2, r11	; 0x02
     934:	a3 83       	std	Z+3, r26	; 0x03
     936:	91 82       	std	Z+1, r9	; 0x01
     938:	80 82       	st	Z, r8
     93a:	d9 01       	movw	r26, r18
     93c:	6d 93       	st	X+, r22
     93e:	7c 93       	st	X, r23
     940:	09 c0       	rjmp	.+18     	; 0x954 <realloc+0xe0>
     942:	0e 5f       	subi	r16, 0xFE	; 254
     944:	1f 4f       	sbci	r17, 0xFF	; 255
     946:	80 0f       	add	r24, r16
     948:	91 1f       	adc	r25, r17
     94a:	f9 01       	movw	r30, r18
     94c:	91 83       	std	Z+1, r25	; 0x01
     94e:	80 83       	st	Z, r24
     950:	eb 2d       	mov	r30, r11
     952:	fa 2f       	mov	r31, r26
     954:	e1 14       	cp	r14, r1
     956:	f1 04       	cpc	r15, r1
     958:	31 f0       	breq	.+12     	; 0x966 <realloc+0xf2>
     95a:	d7 01       	movw	r26, r14
     95c:	13 96       	adiw	r26, 0x03	; 3
     95e:	fc 93       	st	X, r31
     960:	ee 93       	st	-X, r30
     962:	12 97       	sbiw	r26, 0x02	; 2
     964:	3e c0       	rjmp	.+124    	; 0x9e2 <realloc+0x16e>
     966:	f0 93 5c 01 	sts	0x015C, r31	; 0x80015c <__flp+0x1>
     96a:	e0 93 5b 01 	sts	0x015B, r30	; 0x80015b <__flp>
     96e:	39 c0       	rjmp	.+114    	; 0x9e2 <realloc+0x16e>
     970:	68 16       	cp	r6, r24
     972:	79 06       	cpc	r7, r25
     974:	08 f4       	brcc	.+2      	; 0x978 <realloc+0x104>
     976:	3c 01       	movw	r6, r24
     978:	7d 01       	movw	r14, r26
     97a:	12 96       	adiw	r26, 0x02	; 2
     97c:	0d 90       	ld	r0, X+
     97e:	bc 91       	ld	r27, X
     980:	a0 2d       	mov	r26, r0
     982:	b7 cf       	rjmp	.-146    	; 0x8f2 <realloc+0x7e>
     984:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <__brkval>
     988:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <__brkval+0x1>
     98c:	88 16       	cp	r8, r24
     98e:	99 06       	cpc	r9, r25
     990:	e1 f4       	brne	.+56     	; 0x9ca <realloc+0x156>
     992:	66 16       	cp	r6, r22
     994:	77 06       	cpc	r7, r23
     996:	c8 f4       	brcc	.+50     	; 0x9ca <realloc+0x156>
     998:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     99c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	41 f4       	brne	.+16     	; 0x9b4 <realloc+0x140>
     9a4:	8d b7       	in	r24, 0x3d	; 61
     9a6:	9e b7       	in	r25, 0x3e	; 62
     9a8:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
     9ac:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
     9b0:	84 1b       	sub	r24, r20
     9b2:	95 0b       	sbc	r25, r21
     9b4:	e8 17       	cp	r30, r24
     9b6:	f9 07       	cpc	r31, r25
     9b8:	b0 f4       	brcc	.+44     	; 0x9e6 <realloc+0x172>
     9ba:	f0 93 5a 01 	sts	0x015A, r31	; 0x80015a <__brkval+0x1>
     9be:	e0 93 59 01 	sts	0x0159, r30	; 0x800159 <__brkval>
     9c2:	f9 01       	movw	r30, r18
     9c4:	71 83       	std	Z+1, r23	; 0x01
     9c6:	60 83       	st	Z, r22
     9c8:	0c c0       	rjmp	.+24     	; 0x9e2 <realloc+0x16e>
     9ca:	cb 01       	movw	r24, r22
     9cc:	32 de       	rcall	.-924    	; 0x632 <malloc>
     9ce:	7c 01       	movw	r14, r24
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	49 f0       	breq	.+18     	; 0x9e6 <realloc+0x172>
     9d4:	a8 01       	movw	r20, r16
     9d6:	be 01       	movw	r22, r28
     9d8:	29 d1       	rcall	.+594    	; 0xc2c <memcpy>
     9da:	ce 01       	movw	r24, r28
     9dc:	c2 de       	rcall	.-636    	; 0x762 <free>
     9de:	c7 01       	movw	r24, r14
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <realloc+0x176>
     9e2:	ce 01       	movw	r24, r28
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <realloc+0x176>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	ee e0       	ldi	r30, 0x0E	; 14
     9f0:	72 c4       	rjmp	.+2276   	; 0x12d6 <__epilogue_restores__+0x8>

000009f2 <strtol>:
     9f2:	a0 e0       	ldi	r26, 0x00	; 0
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	ee ef       	ldi	r30, 0xFE	; 254
     9f8:	f4 e0       	ldi	r31, 0x04	; 4
     9fa:	4e c4       	rjmp	.+2204   	; 0x1298 <__prologue_saves__+0x2>
     9fc:	5c 01       	movw	r10, r24
     9fe:	6b 01       	movw	r12, r22
     a00:	7a 01       	movw	r14, r20
     a02:	61 15       	cp	r22, r1
     a04:	71 05       	cpc	r23, r1
     a06:	19 f0       	breq	.+6      	; 0xa0e <strtol+0x1c>
     a08:	fb 01       	movw	r30, r22
     a0a:	91 83       	std	Z+1, r25	; 0x01
     a0c:	80 83       	st	Z, r24
     a0e:	e1 14       	cp	r14, r1
     a10:	f1 04       	cpc	r15, r1
     a12:	29 f0       	breq	.+10     	; 0xa1e <strtol+0x2c>
     a14:	c7 01       	movw	r24, r14
     a16:	02 97       	sbiw	r24, 0x02	; 2
     a18:	83 97       	sbiw	r24, 0x23	; 35
     a1a:	08 f0       	brcs	.+2      	; 0xa1e <strtol+0x2c>
     a1c:	e2 c0       	rjmp	.+452    	; 0xbe2 <strtol+0x1f0>
     a1e:	e5 01       	movw	r28, r10
     a20:	21 96       	adiw	r28, 0x01	; 1
     a22:	f5 01       	movw	r30, r10
     a24:	10 81       	ld	r17, Z
     a26:	81 2f       	mov	r24, r17
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	f4 d0       	rcall	.+488    	; 0xc14 <isspace>
     a2c:	89 2b       	or	r24, r25
     a2e:	11 f0       	breq	.+4      	; 0xa34 <strtol+0x42>
     a30:	5e 01       	movw	r10, r28
     a32:	f5 cf       	rjmp	.-22     	; 0xa1e <strtol+0x2c>
     a34:	1d 32       	cpi	r17, 0x2D	; 45
     a36:	29 f4       	brne	.+10     	; 0xa42 <strtol+0x50>
     a38:	21 96       	adiw	r28, 0x01	; 1
     a3a:	f5 01       	movw	r30, r10
     a3c:	11 81       	ldd	r17, Z+1	; 0x01
     a3e:	01 e0       	ldi	r16, 0x01	; 1
     a40:	07 c0       	rjmp	.+14     	; 0xa50 <strtol+0x5e>
     a42:	1b 32       	cpi	r17, 0x2B	; 43
     a44:	21 f4       	brne	.+8      	; 0xa4e <strtol+0x5c>
     a46:	e5 01       	movw	r28, r10
     a48:	22 96       	adiw	r28, 0x02	; 2
     a4a:	f5 01       	movw	r30, r10
     a4c:	11 81       	ldd	r17, Z+1	; 0x01
     a4e:	00 e0       	ldi	r16, 0x00	; 0
     a50:	e1 14       	cp	r14, r1
     a52:	f1 04       	cpc	r15, r1
     a54:	09 f1       	breq	.+66     	; 0xa98 <strtol+0xa6>
     a56:	f0 e1       	ldi	r31, 0x10	; 16
     a58:	ef 16       	cp	r14, r31
     a5a:	f1 04       	cpc	r15, r1
     a5c:	29 f4       	brne	.+10     	; 0xa68 <strtol+0x76>
     a5e:	3e c0       	rjmp	.+124    	; 0xadc <strtol+0xea>
     a60:	10 e3       	ldi	r17, 0x30	; 48
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	21 f1       	breq	.+72     	; 0xab0 <strtol+0xbe>
     a68:	28 e0       	ldi	r18, 0x08	; 8
     a6a:	e2 16       	cp	r14, r18
     a6c:	f1 04       	cpc	r15, r1
     a6e:	01 f1       	breq	.+64     	; 0xab0 <strtol+0xbe>
     a70:	54 f4       	brge	.+20     	; 0xa86 <strtol+0x94>
     a72:	e2 e0       	ldi	r30, 0x02	; 2
     a74:	ee 16       	cp	r14, r30
     a76:	f1 04       	cpc	r15, r1
     a78:	21 f5       	brne	.+72     	; 0xac2 <strtol+0xd0>
     a7a:	81 2c       	mov	r8, r1
     a7c:	91 2c       	mov	r9, r1
     a7e:	a1 2c       	mov	r10, r1
     a80:	b0 e4       	ldi	r27, 0x40	; 64
     a82:	bb 2e       	mov	r11, r27
     a84:	3d c0       	rjmp	.+122    	; 0xb00 <strtol+0x10e>
     a86:	fa e0       	ldi	r31, 0x0A	; 10
     a88:	ef 16       	cp	r14, r31
     a8a:	f1 04       	cpc	r15, r1
     a8c:	39 f0       	breq	.+14     	; 0xa9c <strtol+0xaa>
     a8e:	20 e1       	ldi	r18, 0x10	; 16
     a90:	e2 16       	cp	r14, r18
     a92:	f1 04       	cpc	r15, r1
     a94:	b1 f4       	brne	.+44     	; 0xac2 <strtol+0xd0>
     a96:	2f c0       	rjmp	.+94     	; 0xaf6 <strtol+0x104>
     a98:	10 33       	cpi	r17, 0x30	; 48
     a9a:	11 f1       	breq	.+68     	; 0xae0 <strtol+0xee>
     a9c:	fa e0       	ldi	r31, 0x0A	; 10
     a9e:	ef 2e       	mov	r14, r31
     aa0:	f1 2c       	mov	r15, r1
     aa2:	ac ec       	ldi	r26, 0xCC	; 204
     aa4:	8a 2e       	mov	r8, r26
     aa6:	98 2c       	mov	r9, r8
     aa8:	a8 2c       	mov	r10, r8
     aaa:	ac e0       	ldi	r26, 0x0C	; 12
     aac:	ba 2e       	mov	r11, r26
     aae:	28 c0       	rjmp	.+80     	; 0xb00 <strtol+0x10e>
     ab0:	78 e0       	ldi	r23, 0x08	; 8
     ab2:	e7 2e       	mov	r14, r23
     ab4:	f1 2c       	mov	r15, r1
     ab6:	81 2c       	mov	r8, r1
     ab8:	91 2c       	mov	r9, r1
     aba:	a1 2c       	mov	r10, r1
     abc:	e0 e1       	ldi	r30, 0x10	; 16
     abe:	be 2e       	mov	r11, r30
     ac0:	1f c0       	rjmp	.+62     	; 0xb00 <strtol+0x10e>
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e8       	ldi	r25, 0x80	; 128
     aca:	97 01       	movw	r18, r14
     acc:	0f 2c       	mov	r0, r15
     ace:	00 0c       	add	r0, r0
     ad0:	44 0b       	sbc	r20, r20
     ad2:	55 0b       	sbc	r21, r21
     ad4:	b4 d3       	rcall	.+1896   	; 0x123e <__udivmodsi4>
     ad6:	49 01       	movw	r8, r18
     ad8:	5a 01       	movw	r10, r20
     ada:	12 c0       	rjmp	.+36     	; 0xb00 <strtol+0x10e>
     adc:	10 33       	cpi	r17, 0x30	; 48
     ade:	59 f4       	brne	.+22     	; 0xaf6 <strtol+0x104>
     ae0:	88 81       	ld	r24, Y
     ae2:	8f 7d       	andi	r24, 0xDF	; 223
     ae4:	88 35       	cpi	r24, 0x58	; 88
     ae6:	09 f0       	breq	.+2      	; 0xaea <strtol+0xf8>
     ae8:	bb cf       	rjmp	.-138    	; 0xa60 <strtol+0x6e>
     aea:	19 81       	ldd	r17, Y+1	; 0x01
     aec:	22 96       	adiw	r28, 0x02	; 2
     aee:	02 60       	ori	r16, 0x02	; 2
     af0:	80 e1       	ldi	r24, 0x10	; 16
     af2:	e8 2e       	mov	r14, r24
     af4:	f1 2c       	mov	r15, r1
     af6:	81 2c       	mov	r8, r1
     af8:	91 2c       	mov	r9, r1
     afa:	a1 2c       	mov	r10, r1
     afc:	68 e0       	ldi	r22, 0x08	; 8
     afe:	b6 2e       	mov	r11, r22
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	cb 01       	movw	r24, r22
     b08:	27 01       	movw	r4, r14
     b0a:	0f 2c       	mov	r0, r15
     b0c:	00 0c       	add	r0, r0
     b0e:	66 08       	sbc	r6, r6
     b10:	77 08       	sbc	r7, r7
     b12:	fe 01       	movw	r30, r28
     b14:	50 ed       	ldi	r21, 0xD0	; 208
     b16:	35 2e       	mov	r3, r21
     b18:	31 0e       	add	r3, r17
     b1a:	29 e0       	ldi	r18, 0x09	; 9
     b1c:	23 15       	cp	r18, r3
     b1e:	70 f4       	brcc	.+28     	; 0xb3c <strtol+0x14a>
     b20:	2f eb       	ldi	r18, 0xBF	; 191
     b22:	21 0f       	add	r18, r17
     b24:	2a 31       	cpi	r18, 0x1A	; 26
     b26:	18 f4       	brcc	.+6      	; 0xb2e <strtol+0x13c>
     b28:	39 ec       	ldi	r19, 0xC9	; 201
     b2a:	33 2e       	mov	r3, r19
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <strtol+0x148>
     b2e:	2f e9       	ldi	r18, 0x9F	; 159
     b30:	21 0f       	add	r18, r17
     b32:	2a 31       	cpi	r18, 0x1A	; 26
     b34:	10 f5       	brcc	.+68     	; 0xb7a <strtol+0x188>
     b36:	29 ea       	ldi	r18, 0xA9	; 169
     b38:	32 2e       	mov	r3, r18
     b3a:	31 0e       	add	r3, r17
     b3c:	23 2d       	mov	r18, r3
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	2e 15       	cp	r18, r14
     b42:	3f 05       	cpc	r19, r15
     b44:	d4 f4       	brge	.+52     	; 0xb7a <strtol+0x188>
     b46:	47 fd       	sbrc	r20, 7
     b48:	15 c0       	rjmp	.+42     	; 0xb74 <strtol+0x182>
     b4a:	86 16       	cp	r8, r22
     b4c:	97 06       	cpc	r9, r23
     b4e:	a8 06       	cpc	r10, r24
     b50:	b9 06       	cpc	r11, r25
     b52:	68 f0       	brcs	.+26     	; 0xb6e <strtol+0x17c>
     b54:	a3 01       	movw	r20, r6
     b56:	92 01       	movw	r18, r4
     b58:	63 d3       	rcall	.+1734   	; 0x1220 <__mulsi3>
     b5a:	63 0d       	add	r22, r3
     b5c:	71 1d       	adc	r23, r1
     b5e:	81 1d       	adc	r24, r1
     b60:	91 1d       	adc	r25, r1
     b62:	61 30       	cpi	r22, 0x01	; 1
     b64:	71 05       	cpc	r23, r1
     b66:	81 05       	cpc	r24, r1
     b68:	20 e8       	ldi	r18, 0x80	; 128
     b6a:	92 07       	cpc	r25, r18
     b6c:	10 f0       	brcs	.+4      	; 0xb72 <strtol+0x180>
     b6e:	4f ef       	ldi	r20, 0xFF	; 255
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <strtol+0x182>
     b72:	41 e0       	ldi	r20, 0x01	; 1
     b74:	21 96       	adiw	r28, 0x01	; 1
     b76:	10 81       	ld	r17, Z
     b78:	cc cf       	rjmp	.-104    	; 0xb12 <strtol+0x120>
     b7a:	20 2f       	mov	r18, r16
     b7c:	21 70       	andi	r18, 0x01	; 1
     b7e:	c1 14       	cp	r12, r1
     b80:	d1 04       	cpc	r13, r1
     b82:	71 f0       	breq	.+28     	; 0xba0 <strtol+0x1ae>
     b84:	44 23       	and	r20, r20
     b86:	29 f0       	breq	.+10     	; 0xb92 <strtol+0x1a0>
     b88:	21 97       	sbiw	r28, 0x01	; 1
     b8a:	f6 01       	movw	r30, r12
     b8c:	d1 83       	std	Z+1, r29	; 0x01
     b8e:	c0 83       	st	Z, r28
     b90:	07 c0       	rjmp	.+14     	; 0xba0 <strtol+0x1ae>
     b92:	01 ff       	sbrs	r16, 1
     b94:	19 c0       	rjmp	.+50     	; 0xbc8 <strtol+0x1d6>
     b96:	22 97       	sbiw	r28, 0x02	; 2
     b98:	f6 01       	movw	r30, r12
     b9a:	d1 83       	std	Z+1, r29	; 0x01
     b9c:	c0 83       	st	Z, r28
     b9e:	14 c0       	rjmp	.+40     	; 0xbc8 <strtol+0x1d6>
     ba0:	47 ff       	sbrs	r20, 7
     ba2:	12 c0       	rjmp	.+36     	; 0xbc8 <strtol+0x1d6>
     ba4:	22 23       	and	r18, r18
     ba6:	29 f0       	breq	.+10     	; 0xbb2 <strtol+0x1c0>
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e8       	ldi	r25, 0x80	; 128
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <strtol+0x1c8>
     bb2:	6f ef       	ldi	r22, 0xFF	; 255
     bb4:	7f ef       	ldi	r23, 0xFF	; 255
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	9f e7       	ldi	r25, 0x7F	; 127
     bba:	22 e2       	ldi	r18, 0x22	; 34
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	30 93 5e 01 	sts	0x015E, r19	; 0x80015e <errno+0x1>
     bc2:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <errno>
     bc6:	09 c0       	rjmp	.+18     	; 0xbda <strtol+0x1e8>
     bc8:	22 23       	and	r18, r18
     bca:	81 f0       	breq	.+32     	; 0xbec <strtol+0x1fa>
     bcc:	90 95       	com	r25
     bce:	80 95       	com	r24
     bd0:	70 95       	com	r23
     bd2:	61 95       	neg	r22
     bd4:	7f 4f       	sbci	r23, 0xFF	; 255
     bd6:	8f 4f       	sbci	r24, 0xFF	; 255
     bd8:	9f 4f       	sbci	r25, 0xFF	; 255
     bda:	46 2f       	mov	r20, r22
     bdc:	37 2f       	mov	r19, r23
     bde:	28 2f       	mov	r18, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <strtol+0x214>
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0d c0       	rjmp	.+26     	; 0xc06 <strtol+0x214>
     bec:	97 ff       	sbrs	r25, 7
     bee:	f5 cf       	rjmp	.-22     	; 0xbda <strtol+0x1e8>
     bf0:	82 e2       	ldi	r24, 0x22	; 34
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <errno+0x1>
     bf8:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <errno>
     bfc:	6f ef       	ldi	r22, 0xFF	; 255
     bfe:	7f ef       	ldi	r23, 0xFF	; 255
     c00:	8f ef       	ldi	r24, 0xFF	; 255
     c02:	9f e7       	ldi	r25, 0x7F	; 127
     c04:	ea cf       	rjmp	.-44     	; 0xbda <strtol+0x1e8>
     c06:	64 2f       	mov	r22, r20
     c08:	73 2f       	mov	r23, r19
     c0a:	82 2f       	mov	r24, r18
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	e1 e1       	ldi	r30, 0x11	; 17
     c12:	5e c3       	rjmp	.+1724   	; 0x12d0 <__epilogue_restores__+0x2>

00000c14 <isspace>:
     c14:	91 11       	cpse	r25, r1
     c16:	51 c2       	rjmp	.+1186   	; 0x10ba <__ctype_isfalse>
     c18:	80 32       	cpi	r24, 0x20	; 32
     c1a:	19 f0       	breq	.+6      	; 0xc22 <isspace+0xe>
     c1c:	89 50       	subi	r24, 0x09	; 9
     c1e:	85 50       	subi	r24, 0x05	; 5
     c20:	d0 f7       	brcc	.-12     	; 0xc16 <isspace+0x2>
     c22:	08 95       	ret

00000c24 <strtok>:
     c24:	4a e4       	ldi	r20, 0x4A	; 74
     c26:	51 e0       	ldi	r21, 0x01	; 1
     c28:	30 d0       	rcall	.+96     	; 0xc8a <strtok_r>
     c2a:	08 95       	ret

00000c2c <memcpy>:
     c2c:	fb 01       	movw	r30, r22
     c2e:	dc 01       	movw	r26, r24
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <memcpy+0xa>
     c32:	01 90       	ld	r0, Z+
     c34:	0d 92       	st	X+, r0
     c36:	41 50       	subi	r20, 0x01	; 1
     c38:	50 40       	sbci	r21, 0x00	; 0
     c3a:	d8 f7       	brcc	.-10     	; 0xc32 <memcpy+0x6>
     c3c:	08 95       	ret

00000c3e <memset>:
     c3e:	dc 01       	movw	r26, r24
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <memset+0x6>
     c42:	6d 93       	st	X+, r22
     c44:	41 50       	subi	r20, 0x01	; 1
     c46:	50 40       	sbci	r21, 0x00	; 0
     c48:	e0 f7       	brcc	.-8      	; 0xc42 <memset+0x4>
     c4a:	08 95       	ret

00000c4c <strcat>:
     c4c:	fb 01       	movw	r30, r22
     c4e:	dc 01       	movw	r26, r24
     c50:	0d 90       	ld	r0, X+
     c52:	00 20       	and	r0, r0
     c54:	e9 f7       	brne	.-6      	; 0xc50 <strcat+0x4>
     c56:	11 97       	sbiw	r26, 0x01	; 1
     c58:	01 90       	ld	r0, Z+
     c5a:	0d 92       	st	X+, r0
     c5c:	00 20       	and	r0, r0
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <strcat+0xc>
     c60:	08 95       	ret

00000c62 <strchr>:
     c62:	fc 01       	movw	r30, r24
     c64:	81 91       	ld	r24, Z+
     c66:	86 17       	cp	r24, r22
     c68:	21 f0       	breq	.+8      	; 0xc72 <strchr+0x10>
     c6a:	88 23       	and	r24, r24
     c6c:	d9 f7       	brne	.-10     	; 0xc64 <strchr+0x2>
     c6e:	99 27       	eor	r25, r25
     c70:	08 95       	ret
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	cf 01       	movw	r24, r30
     c76:	08 95       	ret

00000c78 <strcmp>:
     c78:	fb 01       	movw	r30, r22
     c7a:	dc 01       	movw	r26, r24
     c7c:	8d 91       	ld	r24, X+
     c7e:	01 90       	ld	r0, Z+
     c80:	80 19       	sub	r24, r0
     c82:	01 10       	cpse	r0, r1
     c84:	d9 f3       	breq	.-10     	; 0xc7c <strcmp+0x4>
     c86:	99 0b       	sbc	r25, r25
     c88:	08 95       	ret

00000c8a <strtok_r>:
     c8a:	fa 01       	movw	r30, r20
     c8c:	a1 91       	ld	r26, Z+
     c8e:	b0 81       	ld	r27, Z
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	19 f4       	brne	.+6      	; 0xc9a <strtok_r+0x10>
     c94:	10 97       	sbiw	r26, 0x00	; 0
     c96:	e1 f0       	breq	.+56     	; 0xcd0 <strtok_r+0x46>
     c98:	cd 01       	movw	r24, r26
     c9a:	dc 01       	movw	r26, r24
     c9c:	cd 01       	movw	r24, r26
     c9e:	0d 90       	ld	r0, X+
     ca0:	00 20       	and	r0, r0
     ca2:	11 f4       	brne	.+4      	; 0xca8 <strtok_r+0x1e>
     ca4:	c0 01       	movw	r24, r0
     ca6:	13 c0       	rjmp	.+38     	; 0xcce <strtok_r+0x44>
     ca8:	fb 01       	movw	r30, r22
     caa:	21 91       	ld	r18, Z+
     cac:	22 23       	and	r18, r18
     cae:	19 f0       	breq	.+6      	; 0xcb6 <strtok_r+0x2c>
     cb0:	20 15       	cp	r18, r0
     cb2:	d9 f7       	brne	.-10     	; 0xcaa <strtok_r+0x20>
     cb4:	f3 cf       	rjmp	.-26     	; 0xc9c <strtok_r+0x12>
     cb6:	fb 01       	movw	r30, r22
     cb8:	21 91       	ld	r18, Z+
     cba:	20 15       	cp	r18, r0
     cbc:	19 f4       	brne	.+6      	; 0xcc4 <strtok_r+0x3a>
     cbe:	1e 92       	st	-X, r1
     cc0:	11 96       	adiw	r26, 0x01	; 1
     cc2:	06 c0       	rjmp	.+12     	; 0xcd0 <strtok_r+0x46>
     cc4:	22 23       	and	r18, r18
     cc6:	c1 f7       	brne	.-16     	; 0xcb8 <strtok_r+0x2e>
     cc8:	0d 90       	ld	r0, X+
     cca:	00 20       	and	r0, r0
     ccc:	a1 f7       	brne	.-24     	; 0xcb6 <strtok_r+0x2c>
     cce:	d0 01       	movw	r26, r0
     cd0:	fa 01       	movw	r30, r20
     cd2:	a1 93       	st	Z+, r26
     cd4:	b0 83       	st	Z, r27
     cd6:	08 95       	ret

00000cd8 <sprintf>:
     cd8:	ae e0       	ldi	r26, 0x0E	; 14
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e1 e7       	ldi	r30, 0x71	; 113
     cde:	f6 e0       	ldi	r31, 0x06	; 6
     ce0:	e8 c2       	rjmp	.+1488   	; 0x12b2 <__prologue_saves__+0x1c>
     ce2:	0d 89       	ldd	r16, Y+21	; 0x15
     ce4:	1e 89       	ldd	r17, Y+22	; 0x16
     ce6:	86 e0       	ldi	r24, 0x06	; 6
     ce8:	8c 83       	std	Y+4, r24	; 0x04
     cea:	1a 83       	std	Y+2, r17	; 0x02
     cec:	09 83       	std	Y+1, r16	; 0x01
     cee:	8f ef       	ldi	r24, 0xFF	; 255
     cf0:	9f e7       	ldi	r25, 0x7F	; 127
     cf2:	9e 83       	std	Y+6, r25	; 0x06
     cf4:	8d 83       	std	Y+5, r24	; 0x05
     cf6:	ae 01       	movw	r20, r28
     cf8:	47 5e       	subi	r20, 0xE7	; 231
     cfa:	5f 4f       	sbci	r21, 0xFF	; 255
     cfc:	6f 89       	ldd	r22, Y+23	; 0x17
     cfe:	78 8d       	ldd	r23, Y+24	; 0x18
     d00:	ce 01       	movw	r24, r28
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	08 d0       	rcall	.+16     	; 0xd16 <vfprintf>
     d06:	ef 81       	ldd	r30, Y+7	; 0x07
     d08:	f8 85       	ldd	r31, Y+8	; 0x08
     d0a:	e0 0f       	add	r30, r16
     d0c:	f1 1f       	adc	r31, r17
     d0e:	10 82       	st	Z, r1
     d10:	2e 96       	adiw	r28, 0x0e	; 14
     d12:	e4 e0       	ldi	r30, 0x04	; 4
     d14:	ea c2       	rjmp	.+1492   	; 0x12ea <__epilogue_restores__+0x1c>

00000d16 <vfprintf>:
     d16:	ab e0       	ldi	r26, 0x0B	; 11
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e0 e9       	ldi	r30, 0x90	; 144
     d1c:	f6 e0       	ldi	r31, 0x06	; 6
     d1e:	bb c2       	rjmp	.+1398   	; 0x1296 <__prologue_saves__>
     d20:	6c 01       	movw	r12, r24
     d22:	7b 01       	movw	r14, r22
     d24:	8a 01       	movw	r16, r20
     d26:	fc 01       	movw	r30, r24
     d28:	17 82       	std	Z+7, r1	; 0x07
     d2a:	16 82       	std	Z+6, r1	; 0x06
     d2c:	83 81       	ldd	r24, Z+3	; 0x03
     d2e:	81 ff       	sbrs	r24, 1
     d30:	bf c1       	rjmp	.+894    	; 0x10b0 <vfprintf+0x39a>
     d32:	ce 01       	movw	r24, r28
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	3c 01       	movw	r6, r24
     d38:	f6 01       	movw	r30, r12
     d3a:	93 81       	ldd	r25, Z+3	; 0x03
     d3c:	f7 01       	movw	r30, r14
     d3e:	93 fd       	sbrc	r25, 3
     d40:	85 91       	lpm	r24, Z+
     d42:	93 ff       	sbrs	r25, 3
     d44:	81 91       	ld	r24, Z+
     d46:	7f 01       	movw	r14, r30
     d48:	88 23       	and	r24, r24
     d4a:	09 f4       	brne	.+2      	; 0xd4e <vfprintf+0x38>
     d4c:	ad c1       	rjmp	.+858    	; 0x10a8 <vfprintf+0x392>
     d4e:	85 32       	cpi	r24, 0x25	; 37
     d50:	39 f4       	brne	.+14     	; 0xd60 <vfprintf+0x4a>
     d52:	93 fd       	sbrc	r25, 3
     d54:	85 91       	lpm	r24, Z+
     d56:	93 ff       	sbrs	r25, 3
     d58:	81 91       	ld	r24, Z+
     d5a:	7f 01       	movw	r14, r30
     d5c:	85 32       	cpi	r24, 0x25	; 37
     d5e:	21 f4       	brne	.+8      	; 0xd68 <vfprintf+0x52>
     d60:	b6 01       	movw	r22, r12
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	c3 d1       	rcall	.+902    	; 0x10ec <fputc>
     d66:	e8 cf       	rjmp	.-48     	; 0xd38 <vfprintf+0x22>
     d68:	91 2c       	mov	r9, r1
     d6a:	21 2c       	mov	r2, r1
     d6c:	31 2c       	mov	r3, r1
     d6e:	ff e1       	ldi	r31, 0x1F	; 31
     d70:	f3 15       	cp	r31, r3
     d72:	d8 f0       	brcs	.+54     	; 0xdaa <vfprintf+0x94>
     d74:	8b 32       	cpi	r24, 0x2B	; 43
     d76:	79 f0       	breq	.+30     	; 0xd96 <vfprintf+0x80>
     d78:	38 f4       	brcc	.+14     	; 0xd88 <vfprintf+0x72>
     d7a:	80 32       	cpi	r24, 0x20	; 32
     d7c:	79 f0       	breq	.+30     	; 0xd9c <vfprintf+0x86>
     d7e:	83 32       	cpi	r24, 0x23	; 35
     d80:	a1 f4       	brne	.+40     	; 0xdaa <vfprintf+0x94>
     d82:	23 2d       	mov	r18, r3
     d84:	20 61       	ori	r18, 0x10	; 16
     d86:	1d c0       	rjmp	.+58     	; 0xdc2 <vfprintf+0xac>
     d88:	8d 32       	cpi	r24, 0x2D	; 45
     d8a:	61 f0       	breq	.+24     	; 0xda4 <vfprintf+0x8e>
     d8c:	80 33       	cpi	r24, 0x30	; 48
     d8e:	69 f4       	brne	.+26     	; 0xdaa <vfprintf+0x94>
     d90:	23 2d       	mov	r18, r3
     d92:	21 60       	ori	r18, 0x01	; 1
     d94:	16 c0       	rjmp	.+44     	; 0xdc2 <vfprintf+0xac>
     d96:	83 2d       	mov	r24, r3
     d98:	82 60       	ori	r24, 0x02	; 2
     d9a:	38 2e       	mov	r3, r24
     d9c:	e3 2d       	mov	r30, r3
     d9e:	e4 60       	ori	r30, 0x04	; 4
     da0:	3e 2e       	mov	r3, r30
     da2:	2a c0       	rjmp	.+84     	; 0xdf8 <vfprintf+0xe2>
     da4:	f3 2d       	mov	r31, r3
     da6:	f8 60       	ori	r31, 0x08	; 8
     da8:	1d c0       	rjmp	.+58     	; 0xde4 <vfprintf+0xce>
     daa:	37 fc       	sbrc	r3, 7
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <vfprintf+0xf2>
     dae:	20 ed       	ldi	r18, 0xD0	; 208
     db0:	28 0f       	add	r18, r24
     db2:	2a 30       	cpi	r18, 0x0A	; 10
     db4:	40 f0       	brcs	.+16     	; 0xdc6 <vfprintf+0xb0>
     db6:	8e 32       	cpi	r24, 0x2E	; 46
     db8:	b9 f4       	brne	.+46     	; 0xde8 <vfprintf+0xd2>
     dba:	36 fc       	sbrc	r3, 6
     dbc:	75 c1       	rjmp	.+746    	; 0x10a8 <vfprintf+0x392>
     dbe:	23 2d       	mov	r18, r3
     dc0:	20 64       	ori	r18, 0x40	; 64
     dc2:	32 2e       	mov	r3, r18
     dc4:	19 c0       	rjmp	.+50     	; 0xdf8 <vfprintf+0xe2>
     dc6:	36 fe       	sbrs	r3, 6
     dc8:	06 c0       	rjmp	.+12     	; 0xdd6 <vfprintf+0xc0>
     dca:	8a e0       	ldi	r24, 0x0A	; 10
     dcc:	98 9e       	mul	r9, r24
     dce:	20 0d       	add	r18, r0
     dd0:	11 24       	eor	r1, r1
     dd2:	92 2e       	mov	r9, r18
     dd4:	11 c0       	rjmp	.+34     	; 0xdf8 <vfprintf+0xe2>
     dd6:	ea e0       	ldi	r30, 0x0A	; 10
     dd8:	2e 9e       	mul	r2, r30
     dda:	20 0d       	add	r18, r0
     ddc:	11 24       	eor	r1, r1
     dde:	22 2e       	mov	r2, r18
     de0:	f3 2d       	mov	r31, r3
     de2:	f0 62       	ori	r31, 0x20	; 32
     de4:	3f 2e       	mov	r3, r31
     de6:	08 c0       	rjmp	.+16     	; 0xdf8 <vfprintf+0xe2>
     de8:	8c 36       	cpi	r24, 0x6C	; 108
     dea:	21 f4       	brne	.+8      	; 0xdf4 <vfprintf+0xde>
     dec:	83 2d       	mov	r24, r3
     dee:	80 68       	ori	r24, 0x80	; 128
     df0:	38 2e       	mov	r3, r24
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <vfprintf+0xe2>
     df4:	88 36       	cpi	r24, 0x68	; 104
     df6:	41 f4       	brne	.+16     	; 0xe08 <vfprintf+0xf2>
     df8:	f7 01       	movw	r30, r14
     dfa:	93 fd       	sbrc	r25, 3
     dfc:	85 91       	lpm	r24, Z+
     dfe:	93 ff       	sbrs	r25, 3
     e00:	81 91       	ld	r24, Z+
     e02:	7f 01       	movw	r14, r30
     e04:	81 11       	cpse	r24, r1
     e06:	b3 cf       	rjmp	.-154    	; 0xd6e <vfprintf+0x58>
     e08:	98 2f       	mov	r25, r24
     e0a:	9f 7d       	andi	r25, 0xDF	; 223
     e0c:	95 54       	subi	r25, 0x45	; 69
     e0e:	93 30       	cpi	r25, 0x03	; 3
     e10:	28 f4       	brcc	.+10     	; 0xe1c <vfprintf+0x106>
     e12:	0c 5f       	subi	r16, 0xFC	; 252
     e14:	1f 4f       	sbci	r17, 0xFF	; 255
     e16:	9f e3       	ldi	r25, 0x3F	; 63
     e18:	99 83       	std	Y+1, r25	; 0x01
     e1a:	0d c0       	rjmp	.+26     	; 0xe36 <vfprintf+0x120>
     e1c:	83 36       	cpi	r24, 0x63	; 99
     e1e:	31 f0       	breq	.+12     	; 0xe2c <vfprintf+0x116>
     e20:	83 37       	cpi	r24, 0x73	; 115
     e22:	71 f0       	breq	.+28     	; 0xe40 <vfprintf+0x12a>
     e24:	83 35       	cpi	r24, 0x53	; 83
     e26:	09 f0       	breq	.+2      	; 0xe2a <vfprintf+0x114>
     e28:	55 c0       	rjmp	.+170    	; 0xed4 <vfprintf+0x1be>
     e2a:	20 c0       	rjmp	.+64     	; 0xe6c <vfprintf+0x156>
     e2c:	f8 01       	movw	r30, r16
     e2e:	80 81       	ld	r24, Z
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	0e 5f       	subi	r16, 0xFE	; 254
     e34:	1f 4f       	sbci	r17, 0xFF	; 255
     e36:	88 24       	eor	r8, r8
     e38:	83 94       	inc	r8
     e3a:	91 2c       	mov	r9, r1
     e3c:	53 01       	movw	r10, r6
     e3e:	12 c0       	rjmp	.+36     	; 0xe64 <vfprintf+0x14e>
     e40:	28 01       	movw	r4, r16
     e42:	f2 e0       	ldi	r31, 0x02	; 2
     e44:	4f 0e       	add	r4, r31
     e46:	51 1c       	adc	r5, r1
     e48:	f8 01       	movw	r30, r16
     e4a:	a0 80       	ld	r10, Z
     e4c:	b1 80       	ldd	r11, Z+1	; 0x01
     e4e:	36 fe       	sbrs	r3, 6
     e50:	03 c0       	rjmp	.+6      	; 0xe58 <vfprintf+0x142>
     e52:	69 2d       	mov	r22, r9
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <vfprintf+0x146>
     e58:	6f ef       	ldi	r22, 0xFF	; 255
     e5a:	7f ef       	ldi	r23, 0xFF	; 255
     e5c:	c5 01       	movw	r24, r10
     e5e:	3b d1       	rcall	.+630    	; 0x10d6 <strnlen>
     e60:	4c 01       	movw	r8, r24
     e62:	82 01       	movw	r16, r4
     e64:	f3 2d       	mov	r31, r3
     e66:	ff 77       	andi	r31, 0x7F	; 127
     e68:	3f 2e       	mov	r3, r31
     e6a:	15 c0       	rjmp	.+42     	; 0xe96 <vfprintf+0x180>
     e6c:	28 01       	movw	r4, r16
     e6e:	22 e0       	ldi	r18, 0x02	; 2
     e70:	42 0e       	add	r4, r18
     e72:	51 1c       	adc	r5, r1
     e74:	f8 01       	movw	r30, r16
     e76:	a0 80       	ld	r10, Z
     e78:	b1 80       	ldd	r11, Z+1	; 0x01
     e7a:	36 fe       	sbrs	r3, 6
     e7c:	03 c0       	rjmp	.+6      	; 0xe84 <vfprintf+0x16e>
     e7e:	69 2d       	mov	r22, r9
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <vfprintf+0x172>
     e84:	6f ef       	ldi	r22, 0xFF	; 255
     e86:	7f ef       	ldi	r23, 0xFF	; 255
     e88:	c5 01       	movw	r24, r10
     e8a:	1a d1       	rcall	.+564    	; 0x10c0 <strnlen_P>
     e8c:	4c 01       	movw	r8, r24
     e8e:	f3 2d       	mov	r31, r3
     e90:	f0 68       	ori	r31, 0x80	; 128
     e92:	3f 2e       	mov	r3, r31
     e94:	82 01       	movw	r16, r4
     e96:	33 fc       	sbrc	r3, 3
     e98:	19 c0       	rjmp	.+50     	; 0xecc <vfprintf+0x1b6>
     e9a:	82 2d       	mov	r24, r2
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	88 16       	cp	r8, r24
     ea0:	99 06       	cpc	r9, r25
     ea2:	a0 f4       	brcc	.+40     	; 0xecc <vfprintf+0x1b6>
     ea4:	b6 01       	movw	r22, r12
     ea6:	80 e2       	ldi	r24, 0x20	; 32
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	20 d1       	rcall	.+576    	; 0x10ec <fputc>
     eac:	2a 94       	dec	r2
     eae:	f5 cf       	rjmp	.-22     	; 0xe9a <vfprintf+0x184>
     eb0:	f5 01       	movw	r30, r10
     eb2:	37 fc       	sbrc	r3, 7
     eb4:	85 91       	lpm	r24, Z+
     eb6:	37 fe       	sbrs	r3, 7
     eb8:	81 91       	ld	r24, Z+
     eba:	5f 01       	movw	r10, r30
     ebc:	b6 01       	movw	r22, r12
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	15 d1       	rcall	.+554    	; 0x10ec <fputc>
     ec2:	21 10       	cpse	r2, r1
     ec4:	2a 94       	dec	r2
     ec6:	21 e0       	ldi	r18, 0x01	; 1
     ec8:	82 1a       	sub	r8, r18
     eca:	91 08       	sbc	r9, r1
     ecc:	81 14       	cp	r8, r1
     ece:	91 04       	cpc	r9, r1
     ed0:	79 f7       	brne	.-34     	; 0xeb0 <vfprintf+0x19a>
     ed2:	e1 c0       	rjmp	.+450    	; 0x1096 <vfprintf+0x380>
     ed4:	84 36       	cpi	r24, 0x64	; 100
     ed6:	11 f0       	breq	.+4      	; 0xedc <vfprintf+0x1c6>
     ed8:	89 36       	cpi	r24, 0x69	; 105
     eda:	39 f5       	brne	.+78     	; 0xf2a <vfprintf+0x214>
     edc:	f8 01       	movw	r30, r16
     ede:	37 fe       	sbrs	r3, 7
     ee0:	07 c0       	rjmp	.+14     	; 0xef0 <vfprintf+0x1da>
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	0c 5f       	subi	r16, 0xFC	; 252
     eec:	1f 4f       	sbci	r17, 0xFF	; 255
     eee:	08 c0       	rjmp	.+16     	; 0xf00 <vfprintf+0x1ea>
     ef0:	60 81       	ld	r22, Z
     ef2:	71 81       	ldd	r23, Z+1	; 0x01
     ef4:	07 2e       	mov	r0, r23
     ef6:	00 0c       	add	r0, r0
     ef8:	88 0b       	sbc	r24, r24
     efa:	99 0b       	sbc	r25, r25
     efc:	0e 5f       	subi	r16, 0xFE	; 254
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	f3 2d       	mov	r31, r3
     f02:	ff 76       	andi	r31, 0x6F	; 111
     f04:	3f 2e       	mov	r3, r31
     f06:	97 ff       	sbrs	r25, 7
     f08:	09 c0       	rjmp	.+18     	; 0xf1c <vfprintf+0x206>
     f0a:	90 95       	com	r25
     f0c:	80 95       	com	r24
     f0e:	70 95       	com	r23
     f10:	61 95       	neg	r22
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	8f 4f       	sbci	r24, 0xFF	; 255
     f16:	9f 4f       	sbci	r25, 0xFF	; 255
     f18:	f0 68       	ori	r31, 0x80	; 128
     f1a:	3f 2e       	mov	r3, r31
     f1c:	2a e0       	ldi	r18, 0x0A	; 10
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	a3 01       	movw	r20, r6
     f22:	20 d1       	rcall	.+576    	; 0x1164 <__ultoa_invert>
     f24:	88 2e       	mov	r8, r24
     f26:	86 18       	sub	r8, r6
     f28:	44 c0       	rjmp	.+136    	; 0xfb2 <vfprintf+0x29c>
     f2a:	85 37       	cpi	r24, 0x75	; 117
     f2c:	31 f4       	brne	.+12     	; 0xf3a <vfprintf+0x224>
     f2e:	23 2d       	mov	r18, r3
     f30:	2f 7e       	andi	r18, 0xEF	; 239
     f32:	b2 2e       	mov	r11, r18
     f34:	2a e0       	ldi	r18, 0x0A	; 10
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	25 c0       	rjmp	.+74     	; 0xf84 <vfprintf+0x26e>
     f3a:	93 2d       	mov	r25, r3
     f3c:	99 7f       	andi	r25, 0xF9	; 249
     f3e:	b9 2e       	mov	r11, r25
     f40:	8f 36       	cpi	r24, 0x6F	; 111
     f42:	c1 f0       	breq	.+48     	; 0xf74 <vfprintf+0x25e>
     f44:	18 f4       	brcc	.+6      	; 0xf4c <vfprintf+0x236>
     f46:	88 35       	cpi	r24, 0x58	; 88
     f48:	79 f0       	breq	.+30     	; 0xf68 <vfprintf+0x252>
     f4a:	ae c0       	rjmp	.+348    	; 0x10a8 <vfprintf+0x392>
     f4c:	80 37       	cpi	r24, 0x70	; 112
     f4e:	19 f0       	breq	.+6      	; 0xf56 <vfprintf+0x240>
     f50:	88 37       	cpi	r24, 0x78	; 120
     f52:	21 f0       	breq	.+8      	; 0xf5c <vfprintf+0x246>
     f54:	a9 c0       	rjmp	.+338    	; 0x10a8 <vfprintf+0x392>
     f56:	e9 2f       	mov	r30, r25
     f58:	e0 61       	ori	r30, 0x10	; 16
     f5a:	be 2e       	mov	r11, r30
     f5c:	b4 fe       	sbrs	r11, 4
     f5e:	0d c0       	rjmp	.+26     	; 0xf7a <vfprintf+0x264>
     f60:	fb 2d       	mov	r31, r11
     f62:	f4 60       	ori	r31, 0x04	; 4
     f64:	bf 2e       	mov	r11, r31
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <vfprintf+0x264>
     f68:	34 fe       	sbrs	r3, 4
     f6a:	0a c0       	rjmp	.+20     	; 0xf80 <vfprintf+0x26a>
     f6c:	29 2f       	mov	r18, r25
     f6e:	26 60       	ori	r18, 0x06	; 6
     f70:	b2 2e       	mov	r11, r18
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <vfprintf+0x26a>
     f74:	28 e0       	ldi	r18, 0x08	; 8
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	05 c0       	rjmp	.+10     	; 0xf84 <vfprintf+0x26e>
     f7a:	20 e1       	ldi	r18, 0x10	; 16
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <vfprintf+0x26e>
     f80:	20 e1       	ldi	r18, 0x10	; 16
     f82:	32 e0       	ldi	r19, 0x02	; 2
     f84:	f8 01       	movw	r30, r16
     f86:	b7 fe       	sbrs	r11, 7
     f88:	07 c0       	rjmp	.+14     	; 0xf98 <vfprintf+0x282>
     f8a:	60 81       	ld	r22, Z
     f8c:	71 81       	ldd	r23, Z+1	; 0x01
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	93 81       	ldd	r25, Z+3	; 0x03
     f92:	0c 5f       	subi	r16, 0xFC	; 252
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	06 c0       	rjmp	.+12     	; 0xfa4 <vfprintf+0x28e>
     f98:	60 81       	ld	r22, Z
     f9a:	71 81       	ldd	r23, Z+1	; 0x01
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 5f       	subi	r16, 0xFE	; 254
     fa2:	1f 4f       	sbci	r17, 0xFF	; 255
     fa4:	a3 01       	movw	r20, r6
     fa6:	de d0       	rcall	.+444    	; 0x1164 <__ultoa_invert>
     fa8:	88 2e       	mov	r8, r24
     faa:	86 18       	sub	r8, r6
     fac:	fb 2d       	mov	r31, r11
     fae:	ff 77       	andi	r31, 0x7F	; 127
     fb0:	3f 2e       	mov	r3, r31
     fb2:	36 fe       	sbrs	r3, 6
     fb4:	0d c0       	rjmp	.+26     	; 0xfd0 <vfprintf+0x2ba>
     fb6:	23 2d       	mov	r18, r3
     fb8:	2e 7f       	andi	r18, 0xFE	; 254
     fba:	a2 2e       	mov	r10, r18
     fbc:	89 14       	cp	r8, r9
     fbe:	58 f4       	brcc	.+22     	; 0xfd6 <vfprintf+0x2c0>
     fc0:	34 fe       	sbrs	r3, 4
     fc2:	0b c0       	rjmp	.+22     	; 0xfda <vfprintf+0x2c4>
     fc4:	32 fc       	sbrc	r3, 2
     fc6:	09 c0       	rjmp	.+18     	; 0xfda <vfprintf+0x2c4>
     fc8:	83 2d       	mov	r24, r3
     fca:	8e 7e       	andi	r24, 0xEE	; 238
     fcc:	a8 2e       	mov	r10, r24
     fce:	05 c0       	rjmp	.+10     	; 0xfda <vfprintf+0x2c4>
     fd0:	b8 2c       	mov	r11, r8
     fd2:	a3 2c       	mov	r10, r3
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <vfprintf+0x2c6>
     fd6:	b8 2c       	mov	r11, r8
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <vfprintf+0x2c6>
     fda:	b9 2c       	mov	r11, r9
     fdc:	a4 fe       	sbrs	r10, 4
     fde:	0f c0       	rjmp	.+30     	; 0xffe <vfprintf+0x2e8>
     fe0:	fe 01       	movw	r30, r28
     fe2:	e8 0d       	add	r30, r8
     fe4:	f1 1d       	adc	r31, r1
     fe6:	80 81       	ld	r24, Z
     fe8:	80 33       	cpi	r24, 0x30	; 48
     fea:	21 f4       	brne	.+8      	; 0xff4 <vfprintf+0x2de>
     fec:	9a 2d       	mov	r25, r10
     fee:	99 7e       	andi	r25, 0xE9	; 233
     ff0:	a9 2e       	mov	r10, r25
     ff2:	09 c0       	rjmp	.+18     	; 0x1006 <vfprintf+0x2f0>
     ff4:	a2 fe       	sbrs	r10, 2
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <vfprintf+0x2ee>
     ff8:	b3 94       	inc	r11
     ffa:	b3 94       	inc	r11
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <vfprintf+0x2f0>
     ffe:	8a 2d       	mov	r24, r10
    1000:	86 78       	andi	r24, 0x86	; 134
    1002:	09 f0       	breq	.+2      	; 0x1006 <vfprintf+0x2f0>
    1004:	b3 94       	inc	r11
    1006:	a3 fc       	sbrc	r10, 3
    1008:	10 c0       	rjmp	.+32     	; 0x102a <vfprintf+0x314>
    100a:	a0 fe       	sbrs	r10, 0
    100c:	06 c0       	rjmp	.+12     	; 0x101a <vfprintf+0x304>
    100e:	b2 14       	cp	r11, r2
    1010:	80 f4       	brcc	.+32     	; 0x1032 <vfprintf+0x31c>
    1012:	28 0c       	add	r2, r8
    1014:	92 2c       	mov	r9, r2
    1016:	9b 18       	sub	r9, r11
    1018:	0d c0       	rjmp	.+26     	; 0x1034 <vfprintf+0x31e>
    101a:	b2 14       	cp	r11, r2
    101c:	58 f4       	brcc	.+22     	; 0x1034 <vfprintf+0x31e>
    101e:	b6 01       	movw	r22, r12
    1020:	80 e2       	ldi	r24, 0x20	; 32
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	63 d0       	rcall	.+198    	; 0x10ec <fputc>
    1026:	b3 94       	inc	r11
    1028:	f8 cf       	rjmp	.-16     	; 0x101a <vfprintf+0x304>
    102a:	b2 14       	cp	r11, r2
    102c:	18 f4       	brcc	.+6      	; 0x1034 <vfprintf+0x31e>
    102e:	2b 18       	sub	r2, r11
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <vfprintf+0x320>
    1032:	98 2c       	mov	r9, r8
    1034:	21 2c       	mov	r2, r1
    1036:	a4 fe       	sbrs	r10, 4
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <vfprintf+0x342>
    103a:	b6 01       	movw	r22, r12
    103c:	80 e3       	ldi	r24, 0x30	; 48
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	55 d0       	rcall	.+170    	; 0x10ec <fputc>
    1042:	a2 fe       	sbrs	r10, 2
    1044:	16 c0       	rjmp	.+44     	; 0x1072 <vfprintf+0x35c>
    1046:	a1 fc       	sbrc	r10, 1
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <vfprintf+0x33a>
    104a:	88 e7       	ldi	r24, 0x78	; 120
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <vfprintf+0x33e>
    1050:	88 e5       	ldi	r24, 0x58	; 88
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	b6 01       	movw	r22, r12
    1056:	0c c0       	rjmp	.+24     	; 0x1070 <vfprintf+0x35a>
    1058:	8a 2d       	mov	r24, r10
    105a:	86 78       	andi	r24, 0x86	; 134
    105c:	51 f0       	breq	.+20     	; 0x1072 <vfprintf+0x35c>
    105e:	a1 fe       	sbrs	r10, 1
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <vfprintf+0x350>
    1062:	8b e2       	ldi	r24, 0x2B	; 43
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <vfprintf+0x352>
    1066:	80 e2       	ldi	r24, 0x20	; 32
    1068:	a7 fc       	sbrc	r10, 7
    106a:	8d e2       	ldi	r24, 0x2D	; 45
    106c:	b6 01       	movw	r22, r12
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	3d d0       	rcall	.+122    	; 0x10ec <fputc>
    1072:	89 14       	cp	r8, r9
    1074:	30 f4       	brcc	.+12     	; 0x1082 <vfprintf+0x36c>
    1076:	b6 01       	movw	r22, r12
    1078:	80 e3       	ldi	r24, 0x30	; 48
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	37 d0       	rcall	.+110    	; 0x10ec <fputc>
    107e:	9a 94       	dec	r9
    1080:	f8 cf       	rjmp	.-16     	; 0x1072 <vfprintf+0x35c>
    1082:	8a 94       	dec	r8
    1084:	f3 01       	movw	r30, r6
    1086:	e8 0d       	add	r30, r8
    1088:	f1 1d       	adc	r31, r1
    108a:	80 81       	ld	r24, Z
    108c:	b6 01       	movw	r22, r12
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	2d d0       	rcall	.+90     	; 0x10ec <fputc>
    1092:	81 10       	cpse	r8, r1
    1094:	f6 cf       	rjmp	.-20     	; 0x1082 <vfprintf+0x36c>
    1096:	22 20       	and	r2, r2
    1098:	09 f4       	brne	.+2      	; 0x109c <vfprintf+0x386>
    109a:	4e ce       	rjmp	.-868    	; 0xd38 <vfprintf+0x22>
    109c:	b6 01       	movw	r22, r12
    109e:	80 e2       	ldi	r24, 0x20	; 32
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	24 d0       	rcall	.+72     	; 0x10ec <fputc>
    10a4:	2a 94       	dec	r2
    10a6:	f7 cf       	rjmp	.-18     	; 0x1096 <vfprintf+0x380>
    10a8:	f6 01       	movw	r30, r12
    10aa:	86 81       	ldd	r24, Z+6	; 0x06
    10ac:	97 81       	ldd	r25, Z+7	; 0x07
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <vfprintf+0x39e>
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	9f ef       	ldi	r25, 0xFF	; 255
    10b4:	2b 96       	adiw	r28, 0x0b	; 11
    10b6:	e2 e1       	ldi	r30, 0x12	; 18
    10b8:	0a c1       	rjmp	.+532    	; 0x12ce <__epilogue_restores__>

000010ba <__ctype_isfalse>:
    10ba:	99 27       	eor	r25, r25
    10bc:	88 27       	eor	r24, r24

000010be <__ctype_istrue>:
    10be:	08 95       	ret

000010c0 <strnlen_P>:
    10c0:	fc 01       	movw	r30, r24
    10c2:	05 90       	lpm	r0, Z+
    10c4:	61 50       	subi	r22, 0x01	; 1
    10c6:	70 40       	sbci	r23, 0x00	; 0
    10c8:	01 10       	cpse	r0, r1
    10ca:	d8 f7       	brcc	.-10     	; 0x10c2 <strnlen_P+0x2>
    10cc:	80 95       	com	r24
    10ce:	90 95       	com	r25
    10d0:	8e 0f       	add	r24, r30
    10d2:	9f 1f       	adc	r25, r31
    10d4:	08 95       	ret

000010d6 <strnlen>:
    10d6:	fc 01       	movw	r30, r24
    10d8:	61 50       	subi	r22, 0x01	; 1
    10da:	70 40       	sbci	r23, 0x00	; 0
    10dc:	01 90       	ld	r0, Z+
    10de:	01 10       	cpse	r0, r1
    10e0:	d8 f7       	brcc	.-10     	; 0x10d8 <strnlen+0x2>
    10e2:	80 95       	com	r24
    10e4:	90 95       	com	r25
    10e6:	8e 0f       	add	r24, r30
    10e8:	9f 1f       	adc	r25, r31
    10ea:	08 95       	ret

000010ec <fputc>:
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	fb 01       	movw	r30, r22
    10f6:	23 81       	ldd	r18, Z+3	; 0x03
    10f8:	21 fd       	sbrc	r18, 1
    10fa:	03 c0       	rjmp	.+6      	; 0x1102 <fputc+0x16>
    10fc:	8f ef       	ldi	r24, 0xFF	; 255
    10fe:	9f ef       	ldi	r25, 0xFF	; 255
    1100:	2c c0       	rjmp	.+88     	; 0x115a <fputc+0x6e>
    1102:	22 ff       	sbrs	r18, 2
    1104:	16 c0       	rjmp	.+44     	; 0x1132 <fputc+0x46>
    1106:	46 81       	ldd	r20, Z+6	; 0x06
    1108:	57 81       	ldd	r21, Z+7	; 0x07
    110a:	24 81       	ldd	r18, Z+4	; 0x04
    110c:	35 81       	ldd	r19, Z+5	; 0x05
    110e:	42 17       	cp	r20, r18
    1110:	53 07       	cpc	r21, r19
    1112:	44 f4       	brge	.+16     	; 0x1124 <fputc+0x38>
    1114:	a0 81       	ld	r26, Z
    1116:	b1 81       	ldd	r27, Z+1	; 0x01
    1118:	9d 01       	movw	r18, r26
    111a:	2f 5f       	subi	r18, 0xFF	; 255
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	31 83       	std	Z+1, r19	; 0x01
    1120:	20 83       	st	Z, r18
    1122:	8c 93       	st	X, r24
    1124:	26 81       	ldd	r18, Z+6	; 0x06
    1126:	37 81       	ldd	r19, Z+7	; 0x07
    1128:	2f 5f       	subi	r18, 0xFF	; 255
    112a:	3f 4f       	sbci	r19, 0xFF	; 255
    112c:	37 83       	std	Z+7, r19	; 0x07
    112e:	26 83       	std	Z+6, r18	; 0x06
    1130:	14 c0       	rjmp	.+40     	; 0x115a <fputc+0x6e>
    1132:	8b 01       	movw	r16, r22
    1134:	ec 01       	movw	r28, r24
    1136:	fb 01       	movw	r30, r22
    1138:	00 84       	ldd	r0, Z+8	; 0x08
    113a:	f1 85       	ldd	r31, Z+9	; 0x09
    113c:	e0 2d       	mov	r30, r0
    113e:	09 95       	icall
    1140:	89 2b       	or	r24, r25
    1142:	e1 f6       	brne	.-72     	; 0x10fc <fputc+0x10>
    1144:	d8 01       	movw	r26, r16
    1146:	16 96       	adiw	r26, 0x06	; 6
    1148:	8d 91       	ld	r24, X+
    114a:	9c 91       	ld	r25, X
    114c:	17 97       	sbiw	r26, 0x07	; 7
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	17 96       	adiw	r26, 0x07	; 7
    1152:	9c 93       	st	X, r25
    1154:	8e 93       	st	-X, r24
    1156:	16 97       	sbiw	r26, 0x06	; 6
    1158:	ce 01       	movw	r24, r28
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	08 95       	ret

00001164 <__ultoa_invert>:
    1164:	fa 01       	movw	r30, r20
    1166:	aa 27       	eor	r26, r26
    1168:	28 30       	cpi	r18, 0x08	; 8
    116a:	51 f1       	breq	.+84     	; 0x11c0 <__ultoa_invert+0x5c>
    116c:	20 31       	cpi	r18, 0x10	; 16
    116e:	81 f1       	breq	.+96     	; 0x11d0 <__ultoa_invert+0x6c>
    1170:	e8 94       	clt
    1172:	6f 93       	push	r22
    1174:	6e 7f       	andi	r22, 0xFE	; 254
    1176:	6e 5f       	subi	r22, 0xFE	; 254
    1178:	7f 4f       	sbci	r23, 0xFF	; 255
    117a:	8f 4f       	sbci	r24, 0xFF	; 255
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	af 4f       	sbci	r26, 0xFF	; 255
    1180:	b1 e0       	ldi	r27, 0x01	; 1
    1182:	3e d0       	rcall	.+124    	; 0x1200 <__ultoa_invert+0x9c>
    1184:	b4 e0       	ldi	r27, 0x04	; 4
    1186:	3c d0       	rcall	.+120    	; 0x1200 <__ultoa_invert+0x9c>
    1188:	67 0f       	add	r22, r23
    118a:	78 1f       	adc	r23, r24
    118c:	89 1f       	adc	r24, r25
    118e:	9a 1f       	adc	r25, r26
    1190:	a1 1d       	adc	r26, r1
    1192:	68 0f       	add	r22, r24
    1194:	79 1f       	adc	r23, r25
    1196:	8a 1f       	adc	r24, r26
    1198:	91 1d       	adc	r25, r1
    119a:	a1 1d       	adc	r26, r1
    119c:	6a 0f       	add	r22, r26
    119e:	71 1d       	adc	r23, r1
    11a0:	81 1d       	adc	r24, r1
    11a2:	91 1d       	adc	r25, r1
    11a4:	a1 1d       	adc	r26, r1
    11a6:	20 d0       	rcall	.+64     	; 0x11e8 <__ultoa_invert+0x84>
    11a8:	09 f4       	brne	.+2      	; 0x11ac <__ultoa_invert+0x48>
    11aa:	68 94       	set
    11ac:	3f 91       	pop	r19
    11ae:	2a e0       	ldi	r18, 0x0A	; 10
    11b0:	26 9f       	mul	r18, r22
    11b2:	11 24       	eor	r1, r1
    11b4:	30 19       	sub	r19, r0
    11b6:	30 5d       	subi	r19, 0xD0	; 208
    11b8:	31 93       	st	Z+, r19
    11ba:	de f6       	brtc	.-74     	; 0x1172 <__ultoa_invert+0xe>
    11bc:	cf 01       	movw	r24, r30
    11be:	08 95       	ret
    11c0:	46 2f       	mov	r20, r22
    11c2:	47 70       	andi	r20, 0x07	; 7
    11c4:	40 5d       	subi	r20, 0xD0	; 208
    11c6:	41 93       	st	Z+, r20
    11c8:	b3 e0       	ldi	r27, 0x03	; 3
    11ca:	0f d0       	rcall	.+30     	; 0x11ea <__ultoa_invert+0x86>
    11cc:	c9 f7       	brne	.-14     	; 0x11c0 <__ultoa_invert+0x5c>
    11ce:	f6 cf       	rjmp	.-20     	; 0x11bc <__ultoa_invert+0x58>
    11d0:	46 2f       	mov	r20, r22
    11d2:	4f 70       	andi	r20, 0x0F	; 15
    11d4:	40 5d       	subi	r20, 0xD0	; 208
    11d6:	4a 33       	cpi	r20, 0x3A	; 58
    11d8:	18 f0       	brcs	.+6      	; 0x11e0 <__ultoa_invert+0x7c>
    11da:	49 5d       	subi	r20, 0xD9	; 217
    11dc:	31 fd       	sbrc	r19, 1
    11de:	40 52       	subi	r20, 0x20	; 32
    11e0:	41 93       	st	Z+, r20
    11e2:	02 d0       	rcall	.+4      	; 0x11e8 <__ultoa_invert+0x84>
    11e4:	a9 f7       	brne	.-22     	; 0x11d0 <__ultoa_invert+0x6c>
    11e6:	ea cf       	rjmp	.-44     	; 0x11bc <__ultoa_invert+0x58>
    11e8:	b4 e0       	ldi	r27, 0x04	; 4
    11ea:	a6 95       	lsr	r26
    11ec:	97 95       	ror	r25
    11ee:	87 95       	ror	r24
    11f0:	77 95       	ror	r23
    11f2:	67 95       	ror	r22
    11f4:	ba 95       	dec	r27
    11f6:	c9 f7       	brne	.-14     	; 0x11ea <__ultoa_invert+0x86>
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	61 05       	cpc	r22, r1
    11fc:	71 05       	cpc	r23, r1
    11fe:	08 95       	ret
    1200:	9b 01       	movw	r18, r22
    1202:	ac 01       	movw	r20, r24
    1204:	0a 2e       	mov	r0, r26
    1206:	06 94       	lsr	r0
    1208:	57 95       	ror	r21
    120a:	47 95       	ror	r20
    120c:	37 95       	ror	r19
    120e:	27 95       	ror	r18
    1210:	ba 95       	dec	r27
    1212:	c9 f7       	brne	.-14     	; 0x1206 <__ultoa_invert+0xa2>
    1214:	62 0f       	add	r22, r18
    1216:	73 1f       	adc	r23, r19
    1218:	84 1f       	adc	r24, r20
    121a:	95 1f       	adc	r25, r21
    121c:	a0 1d       	adc	r26, r0
    121e:	08 95       	ret

00001220 <__mulsi3>:
    1220:	db 01       	movw	r26, r22
    1222:	8f 93       	push	r24
    1224:	9f 93       	push	r25
    1226:	2d d0       	rcall	.+90     	; 0x1282 <__muluhisi3>
    1228:	bf 91       	pop	r27
    122a:	af 91       	pop	r26
    122c:	a2 9f       	mul	r26, r18
    122e:	80 0d       	add	r24, r0
    1230:	91 1d       	adc	r25, r1
    1232:	a3 9f       	mul	r26, r19
    1234:	90 0d       	add	r25, r0
    1236:	b2 9f       	mul	r27, r18
    1238:	90 0d       	add	r25, r0
    123a:	11 24       	eor	r1, r1
    123c:	08 95       	ret

0000123e <__udivmodsi4>:
    123e:	a1 e2       	ldi	r26, 0x21	; 33
    1240:	1a 2e       	mov	r1, r26
    1242:	aa 1b       	sub	r26, r26
    1244:	bb 1b       	sub	r27, r27
    1246:	fd 01       	movw	r30, r26
    1248:	0d c0       	rjmp	.+26     	; 0x1264 <__udivmodsi4_ep>

0000124a <__udivmodsi4_loop>:
    124a:	aa 1f       	adc	r26, r26
    124c:	bb 1f       	adc	r27, r27
    124e:	ee 1f       	adc	r30, r30
    1250:	ff 1f       	adc	r31, r31
    1252:	a2 17       	cp	r26, r18
    1254:	b3 07       	cpc	r27, r19
    1256:	e4 07       	cpc	r30, r20
    1258:	f5 07       	cpc	r31, r21
    125a:	20 f0       	brcs	.+8      	; 0x1264 <__udivmodsi4_ep>
    125c:	a2 1b       	sub	r26, r18
    125e:	b3 0b       	sbc	r27, r19
    1260:	e4 0b       	sbc	r30, r20
    1262:	f5 0b       	sbc	r31, r21

00001264 <__udivmodsi4_ep>:
    1264:	66 1f       	adc	r22, r22
    1266:	77 1f       	adc	r23, r23
    1268:	88 1f       	adc	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	1a 94       	dec	r1
    126e:	69 f7       	brne	.-38     	; 0x124a <__udivmodsi4_loop>
    1270:	60 95       	com	r22
    1272:	70 95       	com	r23
    1274:	80 95       	com	r24
    1276:	90 95       	com	r25
    1278:	9b 01       	movw	r18, r22
    127a:	ac 01       	movw	r20, r24
    127c:	bd 01       	movw	r22, r26
    127e:	cf 01       	movw	r24, r30
    1280:	08 95       	ret

00001282 <__muluhisi3>:
    1282:	40 d0       	rcall	.+128    	; 0x1304 <__umulhisi3>
    1284:	a5 9f       	mul	r26, r21
    1286:	90 0d       	add	r25, r0
    1288:	b4 9f       	mul	r27, r20
    128a:	90 0d       	add	r25, r0
    128c:	a4 9f       	mul	r26, r20
    128e:	80 0d       	add	r24, r0
    1290:	91 1d       	adc	r25, r1
    1292:	11 24       	eor	r1, r1
    1294:	08 95       	ret

00001296 <__prologue_saves__>:
    1296:	2f 92       	push	r2
    1298:	3f 92       	push	r3
    129a:	4f 92       	push	r4
    129c:	5f 92       	push	r5
    129e:	6f 92       	push	r6
    12a0:	7f 92       	push	r7
    12a2:	8f 92       	push	r8
    12a4:	9f 92       	push	r9
    12a6:	af 92       	push	r10
    12a8:	bf 92       	push	r11
    12aa:	cf 92       	push	r12
    12ac:	df 92       	push	r13
    12ae:	ef 92       	push	r14
    12b0:	ff 92       	push	r15
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	ca 1b       	sub	r28, r26
    12c0:	db 0b       	sbc	r29, r27
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	09 94       	ijmp

000012ce <__epilogue_restores__>:
    12ce:	2a 88       	ldd	r2, Y+18	; 0x12
    12d0:	39 88       	ldd	r3, Y+17	; 0x11
    12d2:	48 88       	ldd	r4, Y+16	; 0x10
    12d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    12d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    12d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    12da:	8c 84       	ldd	r8, Y+12	; 0x0c
    12dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    12de:	aa 84       	ldd	r10, Y+10	; 0x0a
    12e0:	b9 84       	ldd	r11, Y+9	; 0x09
    12e2:	c8 84       	ldd	r12, Y+8	; 0x08
    12e4:	df 80       	ldd	r13, Y+7	; 0x07
    12e6:	ee 80       	ldd	r14, Y+6	; 0x06
    12e8:	fd 80       	ldd	r15, Y+5	; 0x05
    12ea:	0c 81       	ldd	r16, Y+4	; 0x04
    12ec:	1b 81       	ldd	r17, Y+3	; 0x03
    12ee:	aa 81       	ldd	r26, Y+2	; 0x02
    12f0:	b9 81       	ldd	r27, Y+1	; 0x01
    12f2:	ce 0f       	add	r28, r30
    12f4:	d1 1d       	adc	r29, r1
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	ed 01       	movw	r28, r26
    1302:	08 95       	ret

00001304 <__umulhisi3>:
    1304:	a2 9f       	mul	r26, r18
    1306:	b0 01       	movw	r22, r0
    1308:	b3 9f       	mul	r27, r19
    130a:	c0 01       	movw	r24, r0
    130c:	a3 9f       	mul	r26, r19
    130e:	01 d0       	rcall	.+2      	; 0x1312 <__umulhisi3+0xe>
    1310:	b2 9f       	mul	r27, r18
    1312:	70 0d       	add	r23, r0
    1314:	81 1d       	adc	r24, r1
    1316:	11 24       	eor	r1, r1
    1318:	91 1d       	adc	r25, r1
    131a:	08 95       	ret

0000131c <_exit>:
    131c:	f8 94       	cli

0000131e <__stop_program>:
    131e:	ff cf       	rjmp	.-2      	; 0x131e <__stop_program>
