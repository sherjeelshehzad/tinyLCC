
EE311.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000196e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000196e  00001a02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001d7  0080008a  0080008a  00001a2c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f3d  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000827  00000000  00000000  00002ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a08  00000000  00000000  000032f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00003d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c0  00000000  00000000  00003ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000312  00000000  00000000  0000448c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000479e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	70 c1       	rjmp	.+736    	; 0x2e8 <__vector_3>
       8:	a2 c1       	rjmp	.+836    	; 0x34e <__vector_4>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	97 c0       	rjmp	.+302    	; 0x13c <__vector_6>
       e:	e4 c0       	rjmp	.+456    	; 0x1d8 <__vector_7>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	7d c0       	rjmp	.+250    	; 0x10e <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	4a c0       	rjmp	.+148    	; 0xac <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	ee e6       	ldi	r30, 0x6E	; 110
      3a:	f9 e1       	ldi	r31, 0x19	; 25
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	aa 38       	cpi	r26, 0x8A	; 138
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	22 e0       	ldi	r18, 0x02	; 2
      4a:	aa e8       	ldi	r26, 0x8A	; 138
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a1 36       	cpi	r26, 0x61	; 97
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	b5 d1       	rcall	.+874    	; 0x3c4 <main>
      5a:	87 cc       	rjmp	.-1778   	; 0xfffff96a <__eeprom_end+0xff7ef96a>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <adc_read>:
#include "adc.h"

#define ADCSTATUS (ADCSRA & (1<<ADIF))

uint16_t adc_read(uint8_t channel){
	ADMUX &= 0xF0; //clear previous setting
      5e:	97 b1       	in	r25, 0x07	; 7
      60:	90 7f       	andi	r25, 0xF0	; 240
      62:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel; //add channel setting
      64:	97 b1       	in	r25, 0x07	; 7
      66:	89 2b       	or	r24, r25
      68:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA |= (1<<ADSC); //start conversion
      6a:	36 9a       	sbi	0x06, 6	; 6
	
	while (ADCSTATUS == 0){ //block until conversion finishes
      6c:	34 9b       	sbis	0x06, 4	; 6
      6e:	fe cf       	rjmp	.-4      	; 0x6c <adc_read+0xe>
	}
	return ADC; //return value in mV  
      70:	84 b1       	in	r24, 0x04	; 4
      72:	95 b1       	in	r25, 0x05	; 5
}
      74:	08 95       	ret

00000076 <adc_convert>:

uint32_t adc_convert(uint16_t rawvalue){
	return (uint32_t)((uint32_t)rawvalue*voltagereference/1024);
      76:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <voltagereference>
      7a:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <voltagereference+0x1>
      7e:	9c 01       	movw	r18, r24
      80:	ad d6       	rcall	.+3418   	; 0xddc <__umulhisi3>
      82:	2a e0       	ldi	r18, 0x0A	; 10
      84:	96 95       	lsr	r25
      86:	87 95       	ror	r24
      88:	77 95       	ror	r23
      8a:	67 95       	ror	r22
      8c:	2a 95       	dec	r18
      8e:	d1 f7       	brne	.-12     	; 0x84 <adc_convert+0xe>
}
      90:	08 95       	ret

00000092 <adc_init>:
	uint16_t bgrawvalue = ADC; //store ADC value for bandgap (1.30V)
	voltagereference = (uint32_t)((uint32_t)1300*1024/bgrawvalue); //calculate vref using bandgap
}

void adc_init(){
	ADMUX &= ~(1<<REFS1);
      92:	3f 98       	cbi	0x07, 7	; 7
	ADMUX |= (1<<REFS0); //use AVcc reference
      94:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN); //enable ADC
      96:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= ((1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2)); //use clock divider of /128 for 125khz ADC frequency
      98:	86 b1       	in	r24, 0x06	; 6
      9a:	87 60       	ori	r24, 0x07	; 7
      9c:	86 b9       	out	0x06, r24	; 6
	voltagereference = 5000;
      9e:	88 e8       	ldi	r24, 0x88	; 136
      a0:	93 e1       	ldi	r25, 0x13	; 19
      a2:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <voltagereference+0x1>
      a6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <voltagereference>
      aa:	08 95       	ret

000000ac <__vector_11>:
 *  Author: sshe325
 */ 

#include "interrupts.h"

ISR(USART_RXC_vect){
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	00 d0       	rcall	.+0      	; 0xbc <__vector_11+0x10>
      bc:	cd b7       	in	r28, 0x3d	; 61
      be:	de b7       	in	r29, 0x3e	; 62
	//dynamically allocate and reallocate space for string
	str_buffer = calloc(1,sizeof(char));
      c0:	61 e0       	ldi	r22, 0x01	; 1
      c2:	70 e0       	ldi	r23, 0x00	; 0
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	63 d7       	rcall	.+3782   	; 0xf90 <calloc>
      ca:	8c 01       	movw	r16, r24
      cc:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <str_buffer+0x1>
      d0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <str_buffer>
	char* buffer_ptr = str_buffer;
	int size = 1;
	*str_buffer = uart_receive();
      d4:	3b d4       	rcall	.+2166   	; 0x94c <uart_receive>
      d6:	f8 01       	movw	r30, r16
      d8:	80 83       	st	Z, r24

ISR(USART_RXC_vect){
	//dynamically allocate and reallocate space for string
	str_buffer = calloc(1,sizeof(char));
	char* buffer_ptr = str_buffer;
	int size = 1;
      da:	01 e0       	ldi	r16, 0x01	; 1
      dc:	10 e0       	ldi	r17, 0x00	; 0
	*str_buffer = uart_receive();
	//only end receive when we receive a newline
	while ((*buffer_ptr != '\n') || (*buffer_ptr != '\r')){
		str_buffer = realloc(str_buffer,(++size)*sizeof(char));
      de:	0f 5f       	subi	r16, 0xFF	; 255
      e0:	1f 4f       	sbci	r17, 0xFF	; 255
      e2:	b8 01       	movw	r22, r16
      e4:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <str_buffer>
      e8:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <str_buffer+0x1>
      ec:	8c d8       	rcall	.-3816   	; 0xfffff206 <__eeprom_end+0xff7ef206>
      ee:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <str_buffer+0x1>
      f2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <str_buffer>
		//make a null terminated string for strcat()
		char uart_char[2];
		uart_char[0] = uart_receive();
      f6:	2a d4       	rcall	.+2132   	; 0x94c <uart_receive>
      f8:	89 83       	std	Y+1, r24	; 0x01
		uart_char[1] = '\0';
      fa:	1a 82       	std	Y+2, r1	; 0x02
		strcat(str_buffer,uart_char);
      fc:	be 01       	movw	r22, r28
      fe:	6f 5f       	subi	r22, 0xFF	; 255
     100:	7f 4f       	sbci	r23, 0xFF	; 255
     102:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <str_buffer>
     106:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <str_buffer+0x1>
     10a:	4c d9       	rcall	.-3432   	; 0xfffff3a4 <__eeprom_end+0xff7ef3a4>
     10c:	e8 cf       	rjmp	.-48     	; 0xde <__vector_11+0x32>

0000010e <__vector_9>:
	//set flag to indicate received data
	data_received = 1;
}

//interrupt to increment overflow counter
ISR(TIMER0_OVF_vect){
     10e:	1f 92       	push	r1
     110:	0f 92       	push	r0
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	0f 92       	push	r0
     116:	11 24       	eor	r1, r1
     118:	8f 93       	push	r24
     11a:	9f 93       	push	r25
	++timer0_ovf_count;
     11c:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <timer0_ovf_count>
     120:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <timer0_ovf_count+0x1>
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <timer0_ovf_count+0x1>
     12a:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <timer0_ovf_count>
}
     12e:	9f 91       	pop	r25
     130:	8f 91       	pop	r24
     132:	0f 90       	pop	r0
     134:	0f be       	out	0x3f, r0	; 63
     136:	0f 90       	pop	r0
     138:	1f 90       	pop	r1
     13a:	18 95       	reti

0000013c <__vector_6>:

//interrupt to handle T/4 or 3T/4 time crossing
ISR(TIMER1_COMPA_vect){
     13c:	1f 92       	push	r1
     13e:	0f 92       	push	r0
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	0f 92       	push	r0
     144:	11 24       	eor	r1, r1
     146:	8f 93       	push	r24
     148:	9f 93       	push	r25
		//turn off PWM timer
		TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     14a:	85 b5       	in	r24, 0x25	; 37
     14c:	88 7f       	andi	r24, 0xF8	; 248
     14e:	85 bd       	out	0x25, r24	; 37
		//PORTD &= ~(1<<PD7);
		//turn on right NMOS
		//PORTB &= ~(1<<PB0);
		
		//indicate that RHS/LHS voltage are both off
		voltage_right_on = 0;
     150:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <voltage_right_on+0x1>
     154:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <voltage_right_on>
		voltage_left_on = 0;
     158:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <voltage_left_on+0x1>
     15c:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <voltage_left_on>
		
		//since we have stopped pulsing PWM, stop reading current ADC
		readadci = 0;
     160:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <readadci+0x1>
     164:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <readadci>
		//disable PWM signals
		if (!t2){
     168:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     16c:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
			//right to left current
			//turn off PMOSes, turn on left NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
     170:	c2 98       	cbi	0x18, 2	; 24
		voltage_left_on = 0;
		
		//since we have stopped pulsing PWM, stop reading current ADC
		readadci = 0;
		//disable PWM signals
		if (!t2){
     172:	89 2b       	or	r24, r25
     174:	71 f4       	brne	.+28     	; 0x192 <__vector_6+0x56>
			//right to left current
			//turn off PMOSes, turn on left NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
			//turn on left NMOS
			PORTB &= ~(1<<PB1);
     176:	c1 98       	cbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     178:	97 98       	cbi	0x12, 7	; 18
			//turn off right NMOS
			PORTB |= (1<<PB0);
     17a:	c0 9a       	sbi	0x18, 0	; 24
			//indicate that we are ready to start reading motor LHS back emf
			readadc = 1;
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <readadc+0x1>
     184:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <readadc>
			readadcmotorleft = 1;
     188:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <readadcmotorleft+0x1>
     18c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <readadcmotorleft>
     190:	0d c0       	rjmp	.+26     	; 0x1ac <__vector_6+0x70>
			//left to right current
			//turn off PMOSes, turn on right NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
			//turn off left NMOS
			PORTB |= (1<<PB1);
     192:	c1 9a       	sbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     194:	97 98       	cbi	0x12, 7	; 18
			//turn on right NMOS
			PORTB &= ~(1<<PB0);
     196:	c0 98       	cbi	0x18, 0	; 24
			//indicate that we are ready to start reading motor RHS back emf
			readadc = 1;
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <readadc+0x1>
     1a0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <readadc>
			readadcmotorright = 1;
     1a4:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <readadcmotorright+0x1>
     1a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <readadcmotorright>
			backemffound = 0;
     1ac:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <backemffound+0x1>
     1b0:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <backemffound>
			//reset backemf index
			backemfreadingindex = 0;
     1b4:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <backemfreadingindex+0x1>
     1b8:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <backemfreadingindex>
		}
		//turn on timer 0 with prescaler /256 to measure backemf time
		TCCR0 |= ((1<<CS02));
     1bc:	83 b7       	in	r24, 0x33	; 51
     1be:	84 60       	ori	r24, 0x04	; 4
     1c0:	83 bf       	out	0x33, r24	; 51
		TCCR0 &= ~((1<<CS01)|(1<<CS00));
     1c2:	83 b7       	in	r24, 0x33	; 51
     1c4:	8c 7f       	andi	r24, 0xFC	; 252
     1c6:	83 bf       	out	0x33, r24	; 51
		//reset PWM timer counter
		TCNT2 = 0;
     1c8:	14 bc       	out	0x24, r1	; 36
}
     1ca:	9f 91       	pop	r25
     1cc:	8f 91       	pop	r24
     1ce:	0f 90       	pop	r0
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	0f 90       	pop	r0
     1d4:	1f 90       	pop	r1
     1d6:	18 95       	reti

000001d8 <__vector_7>:

//interrupt to handle T or T/2 time crossing
ISR(TIMER1_COMPB_vect){
     1d8:	1f 92       	push	r1
     1da:	0f 92       	push	r0
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	0f 92       	push	r0
     1e0:	11 24       	eor	r1, r1
     1e2:	8f 93       	push	r24
     1e4:	9f 93       	push	r25
		TCCR1B |= (1<<CS12);
		TCCR1B &= ~((1<<CS11) | (1<<CS10));
		stop_counter = 0;
	}*/
		//back emf pulse has expired (we are driving the motor now), stop reading the adc
		readadcmotorleft = 0;
     1e6:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <readadcmotorleft+0x1>
     1ea:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <readadcmotorleft>
		readadcmotorright = 0;
     1ee:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <readadcmotorright+0x1>
     1f2:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <readadcmotorright>
		if (numcycles >= 50){
     1f6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <numcycles>
     1fa:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <numcycles+0x1>
				backemffreq = 1000000000/backemftime;
				backemffound = 1; //indicate that a back emf value has been "found"
			}*/
		}
		
		if (t2){
     1fe:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     202:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
     206:	89 2b       	or	r24, r25
     208:	29 f0       	breq	.+10     	; 0x214 <__vector_7+0x3c>
			//T time crossing has been handled, T/2 is next
			t2 = 0;
     20a:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <t2+0x1>
     20e:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <t2>
     212:	06 c0       	rjmp	.+12     	; 0x220 <__vector_7+0x48>
			TCCR2 |= ((1<<CS22) | (1<<CS21));
			TCCR2 &= ~((1<<CS20));
			
		}
		else{
			t2 = 1;
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <t2+0x1>
     21c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <t2>
			//turn off timer1
			TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     220:	8e b5       	in	r24, 0x2e	; 46
     222:	88 7f       	andi	r24, 0xF8	; 248
     224:	8e bd       	out	0x2e, r24	; 46
			//turn off PWM
			TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     226:	85 b5       	in	r24, 0x25	; 37
     228:	88 7f       	andi	r24, 0xF8	; 248
     22a:	85 bd       	out	0x25, r24	; 37
			//reset timer1 counter
			TCNT1 = 0;
     22c:	1d bc       	out	0x2d, r1	; 45
     22e:	1c bc       	out	0x2c, r1	; 44
			//reset PWM timer counter
			TCNT2 = 0;
     230:	14 bc       	out	0x24, r1	; 36
			//turn on timer 1 again (prescaler /256)
			TCCR1B |= (1<<CS12);
     232:	8e b5       	in	r24, 0x2e	; 46
     234:	84 60       	ori	r24, 0x04	; 4
     236:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &= ~((1<<CS11) | (1<<CS10));
     238:	8e b5       	in	r24, 0x2e	; 46
     23a:	8c 7f       	andi	r24, 0xFC	; 252
     23c:	8e bd       	out	0x2e, r24	; 46
			//turn on PWM timer counter (prescaler /64)
			//turn on PWM timer counter (prescaler /256)
			TCCR2 |= ((1<<CS22) | (1<<CS21));
     23e:	85 b5       	in	r24, 0x25	; 37
     240:	86 60       	ori	r24, 0x06	; 6
     242:	85 bd       	out	0x25, r24	; 37
			TCCR2 &= ~((1<<CS20));
     244:	85 b5       	in	r24, 0x25	; 37
     246:	8e 7f       	andi	r24, 0xFE	; 254
     248:	85 bd       	out	0x25, r24	; 37
			
		}
		
		//turn on PWM signals
		if (t2){
     24a:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     24e:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
     252:	89 2b       	or	r24, r25
     254:	59 f0       	breq	.+22     	; 0x26c <__vector_7+0x94>
			//right to left current
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
     256:	c2 98       	cbi	0x18, 2	; 24
			//turn on left NMOS
			PORTB &= ~(1<<PB1);
     258:	c1 98       	cbi	0x18, 1	; 24
			//turn on right PMOS
			PORTD |= (1<<PD7);
     25a:	97 9a       	sbi	0x12, 7	; 18
			//turn off right NMOS
			PORTB |= (1<<PB0);
     25c:	c0 9a       	sbi	0x18, 0	; 24
			//indicate that RHS voltage is on
			voltage_right_on = 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <voltage_right_on+0x1>
     266:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <voltage_right_on>
     26a:	0a c0       	rjmp	.+20     	; 0x280 <__vector_7+0xa8>
		}
		else{
			//left to right current
			//turn on left PMOS
			PORTB |= (1<<PB2);
     26c:	c2 9a       	sbi	0x18, 2	; 24
			//turn off left NMOS
			PORTB |= (1<<PB1);
     26e:	c1 9a       	sbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     270:	97 98       	cbi	0x12, 7	; 18
			//turn on right NMOS
			PORTB &= ~(1<<PB0);
     272:	c0 98       	cbi	0x18, 0	; 24
			//indicate that LHS voltage is on
			voltage_left_on = 1;
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <voltage_left_on+0x1>
     27c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <voltage_left_on>
		}
		//indicate that we are ready to read adc from motor RHS to measure voltage and current
		readadc = 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <readadc+0x1>
     288:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <readadc>
		readadcv = 1;
     28c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <readadcv+0x1>
     290:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <readadcv>
		readadci = 1;
     294:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <readadci+0x1>
     298:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <readadci>
		//reset ADC indices
		current_i = 0;
     29c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <current_i+0x1>
     2a0:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <current_i>
		currentreadingindex = 0;
     2a4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <currentreadingindex+0x1>
     2a8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <currentreadingindex>
		//++stop_counter;
		//stop back emf timer since the time to measure it has expired
		TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     2ac:	83 b7       	in	r24, 0x33	; 51
     2ae:	88 7f       	andi	r24, 0xF8	; 248
     2b0:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;
     2b2:	12 be       	out	0x32, r1	; 50
		timer0_ovf_count = 0;
     2b4:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <timer0_ovf_count+0x1>
     2b8:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <timer0_ovf_count>
		if (numcycles != 50) ++numcycles;
     2bc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <numcycles>
     2c0:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <numcycles+0x1>
     2c4:	c2 97       	sbiw	r24, 0x32	; 50
     2c6:	49 f0       	breq	.+18     	; 0x2da <__vector_7+0x102>
     2c8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <numcycles>
     2cc:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <numcycles+0x1>
     2d0:	01 96       	adiw	r24, 0x01	; 1
     2d2:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <numcycles+0x1>
     2d6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <numcycles>
}
     2da:	9f 91       	pop	r25
     2dc:	8f 91       	pop	r24
     2de:	0f 90       	pop	r0
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	0f 90       	pop	r0
     2e4:	1f 90       	pop	r1
     2e6:	18 95       	reti

000002e8 <__vector_3>:

//PWM duty cycle expired, shut off PWM signals
ISR(TIMER2_COMP_vect){
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
     2f2:	8f 93       	push	r24
     2f4:	9f 93       	push	r25
		PORTD &= ~(1<<PD7);
		//turn off right NMOS
		PORTB |= (1<<PB0);
	}*/
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     2f6:	85 b5       	in	r24, 0x25	; 37
     2f8:	88 7f       	andi	r24, 0xF8	; 248
     2fa:	85 bd       	out	0x25, r24	; 37
	
	if (t2){
     2fc:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     300:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
		//right to left current
		//turn off PMOSes, turn on left NMOS so motor brakes
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     304:	c2 98       	cbi	0x18, 2	; 24
		PORTB |= (1<<PB0);
	}*/
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
	
	if (t2){
     306:	89 2b       	or	r24, r25
     308:	21 f0       	breq	.+8      	; 0x312 <__vector_3+0x2a>
		//right to left current
		//turn off PMOSes, turn on left NMOS so motor brakes
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     30a:	c1 98       	cbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     30c:	97 98       	cbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     30e:	c0 9a       	sbi	0x18, 0	; 24
     310:	03 c0       	rjmp	.+6      	; 0x318 <__vector_3+0x30>
		//left to right current
		//turn off PMOSes, turn on right NMOS so motor brakes?!
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
		//turn off left NMOS
		PORTB |= (1<<PB1);
     312:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     314:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     316:	c0 98       	cbi	0x18, 0	; 24
	}
	readadc = 1;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <readadc+0x1>
     320:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <readadc>
	//indicate that voltage is off
	voltage_right_on = 0;
     324:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <voltage_right_on+0x1>
     328:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <voltage_right_on>
	voltage_left_on = 0;
     32c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <voltage_left_on+0x1>
     330:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <voltage_left_on>
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     334:	85 b5       	in	r24, 0x25	; 37
     336:	86 60       	ori	r24, 0x06	; 6
     338:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     33a:	85 b5       	in	r24, 0x25	; 37
     33c:	8e 7f       	andi	r24, 0xFE	; 254
     33e:	85 bd       	out	0x25, r24	; 37
}
     340:	9f 91       	pop	r25
     342:	8f 91       	pop	r24
     344:	0f 90       	pop	r0
     346:	0f be       	out	0x3f, r0	; 63
     348:	0f 90       	pop	r0
     34a:	1f 90       	pop	r1
     34c:	18 95       	reti

0000034e <__vector_4>:

//PWM restarted, change switches according to current current direction
ISR(TIMER2_OVF_vect){
     34e:	1f 92       	push	r1
     350:	0f 92       	push	r0
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	0f 92       	push	r0
     356:	11 24       	eor	r1, r1
     358:	8f 93       	push	r24
     35a:	9f 93       	push	r25
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     35c:	85 b5       	in	r24, 0x25	; 37
     35e:	88 7f       	andi	r24, 0xF8	; 248
     360:	85 bd       	out	0x25, r24	; 37
	TCCR2 = 0;
     362:	15 bc       	out	0x25, r1	; 37
	if (t2){
     364:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     368:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
     36c:	89 2b       	or	r24, r25
     36e:	79 f0       	breq	.+30     	; 0x38e <__vector_4+0x40>
		//right to left current
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     370:	c2 98       	cbi	0x18, 2	; 24
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     372:	c1 98       	cbi	0x18, 1	; 24
		//turn on right PMOS
		PORTD |= (1<<PD7);
     374:	97 9a       	sbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     376:	c0 9a       	sbi	0x18, 0	; 24
		//indicate that RHS voltage is on
		readadc = 1;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <readadc+0x1>
     380:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <readadc>
		voltage_right_on = 1;
     384:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <voltage_right_on+0x1>
     388:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <voltage_right_on>
     38c:	0e c0       	rjmp	.+28     	; 0x3aa <__vector_4+0x5c>
	}
	else{
		//left to right current
		//turn on left PMOS
		PORTB |= (1<<PB2);
     38e:	c2 9a       	sbi	0x18, 2	; 24
		//turn off left NMOS
		PORTB |= (1<<PB1);
     390:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     392:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     394:	c0 98       	cbi	0x18, 0	; 24
		//indicate that LHS voltage is on
		readadc = 1;
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <readadc+0x1>
     39e:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <readadc>
		voltage_left_on = 1;
     3a2:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <voltage_left_on+0x1>
     3a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <voltage_left_on>
	}
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     3aa:	85 b5       	in	r24, 0x25	; 37
     3ac:	86 60       	ori	r24, 0x06	; 6
     3ae:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     3b0:	85 b5       	in	r24, 0x25	; 37
     3b2:	8e 7f       	andi	r24, 0xFE	; 254
     3b4:	85 bd       	out	0x25, r24	; 37
     3b6:	9f 91       	pop	r25
     3b8:	8f 91       	pop	r24
     3ba:	0f 90       	pop	r0
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	0f 90       	pop	r0
     3c0:	1f 90       	pop	r1
     3c2:	18 95       	reti

000003c4 <main>:
uint32_t powerarray[NUMSAMPLESI];
uint64_t currentvalue = 0;
uint64_t powervalue = 0;

int main(void)
{
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
     3cc:	64 97       	sbiw	r28, 0x14	; 20
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	cd bf       	out	0x3d, r28	; 61
	//char transmit_buffer[300];
	//sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3s\",\n%11s\"cur\": \"%3s\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%s.%sW\",\n%11s\"freq\": \"%s.%sHz\",\n%11s\"curr\": \"%smA\",\n%11s\"volt\": \"%s.%sV\",\n%7s}\n%3s}\n}", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "");
	//eeprom_write_block(transmit_buffer,0,strlen(transmit_buffer));	
	//eeprom_write_byte(0,'0');
	t2 = 0; //flag for if T/2 time crossing is next to be handled
     3d8:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <t2+0x1>
     3dc:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <t2>
	stop_counter = 0; //counter to stop PWM every STOPCYCLE/2 number of cycles
     3e0:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <stop_counter+0x1>
     3e4:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <stop_counter>
	data_received = 0; //set data received flag to 0 initially
     3e8:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <data_received+0x1>
     3ec:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <data_received>
	timer0_ovf_count = 0;//set timer0 overflow count to 0 initially
     3f0:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <timer0_ovf_count+0x1>
     3f4:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <timer0_ovf_count>
	current_i = 0; //initialise current reading index
     3f8:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <current_i+0x1>
     3fc:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <current_i>
	backemfreadingindex = 0; //initialise backemf reading index
     400:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <backemfreadingindex+0x1>
     404:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <backemfreadingindex>
	readadc = 0;
     408:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <readadc+0x1>
     40c:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <readadc>
	readadcv = 0;
     410:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <readadcv+0x1>
     414:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <readadcv>
	readadci = 0;
     418:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <readadci+0x1>
     41c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <readadci>
	numcycles = 0;
     420:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <numcycles+0x1>
     424:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <numcycles>
	voltagereference = 5000;
     428:	88 e8       	ldi	r24, 0x88	; 136
     42a:	93 e1       	ldi	r25, 0x13	; 19
     42c:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <voltagereference+0x1>
     430:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <voltagereference>
	//set PWM ports as output
	DDRB |= ((1<<PB2)|(1<<PB1)|(1<<PB0));
     434:	87 b3       	in	r24, 0x17	; 23
     436:	87 60       	ori	r24, 0x07	; 7
     438:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<PD7);
     43a:	8f 9a       	sbi	0x11, 7	; 17
	
	//set normal timer mode
	TCCR2 &= ~(1<<WGM20);
     43c:	85 b5       	in	r24, 0x25	; 37
     43e:	8f 7b       	andi	r24, 0xBF	; 191
     440:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(1<<WGM21);
     442:	85 b5       	in	r24, 0x25	; 37
     444:	87 7f       	andi	r24, 0xF7	; 247
     446:	85 bd       	out	0x25, r24	; 37
	
	//disconnect OC2 port
	TCCR2 &= ~((1<<COM21) | (1<<COM20));
     448:	85 b5       	in	r24, 0x25	; 37
     44a:	8f 7c       	andi	r24, 0xCF	; 207
     44c:	85 bd       	out	0x25, r24	; 37
	
	//set output compare value for timer 2 between 0-255 (OCR2/255 % duty cycle)
	duty_request = 255;
     44e:	8f ef       	ldi	r24, 0xFF	; 255
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <duty_request+0x1>
     456:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <duty_request>
	OCR2 = duty_request;
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	83 bd       	out	0x23, r24	; 35
	
	//set prescaler of 64 (gives effective PWM frequency of 980Hz)
	//TCCR2 |= (1<<CS22);
	//TCCR2 &= ~((1<<CS21) | (1<<CS20));
	//set prescaler of 256 (gives effective PWM frequency of 245Hz)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     45e:	85 b5       	in	r24, 0x25	; 37
     460:	86 60       	ori	r24, 0x06	; 6
     462:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     464:	85 b5       	in	r24, 0x25	; 37
     466:	8e 7f       	andi	r24, 0xFE	; 254
     468:	85 bd       	out	0x25, r24	; 37
	
	//turn off PMOSes, turn on NMOSes so motor brakes?!
	//turn off left PMOS
	PORTB &= ~(1<<PB2);
     46a:	c2 98       	cbi	0x18, 2	; 24
	//turn on left NMOS
	PORTB |= (1<<PB1);
     46c:	c1 9a       	sbi	0x18, 1	; 24
	//turn off right PMOS
	PORTD &= ~(1<<PD7);
     46e:	97 98       	cbi	0x12, 7	; 18
	//turn on right NMOS
	PORTB |= (1<<PB0);
     470:	c0 9a       	sbi	0x18, 0	; 24
	
	//set timer 1 to normal mode
	TCCR1B &= ~((1<<WGM13) | (1<<WGM12));
     472:	8e b5       	in	r24, 0x2e	; 46
     474:	87 7e       	andi	r24, 0xE7	; 231
     476:	8e bd       	out	0x2e, r24	; 46
	TCCR1A &= ~((1<<WGM11) | (1<<WGM10));
     478:	8f b5       	in	r24, 0x2f	; 47
     47a:	8c 7f       	andi	r24, 0xFC	; 252
     47c:	8f bd       	out	0x2f, r24	; 47
	
	//set prescaler to /256
	TCCR1B |= (1<<CS12);
     47e:	8e b5       	in	r24, 0x2e	; 46
     480:	84 60       	ori	r24, 0x04	; 4
     482:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1<<CS11) | (1<<CS10));
     484:	8e b5       	in	r24, 0x2e	; 46
     486:	8c 7f       	andi	r24, 0xFC	; 252
     488:	8e bd       	out	0x2e, r24	; 46
	
	//set timer 1 overflow A and B compare values
	OCR1A = 1150; //for T/4
     48a:	8e e7       	ldi	r24, 0x7E	; 126
     48c:	94 e0       	ldi	r25, 0x04	; 4
     48e:	9b bd       	out	0x2b, r25	; 43
     490:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 2300; //for 12.5Hz resonant frequency (for T/2)
     492:	8c ef       	ldi	r24, 0xFC	; 252
     494:	98 e0       	ldi	r25, 0x08	; 8
     496:	99 bd       	out	0x29, r25	; 41
     498:	88 bd       	out	0x28, r24	; 40
	//enable timer 2 compare match interrupt and overflow interrupt
	TIMSK |= ((1<<OCIE2) | (1<<TOIE2));
     49a:	89 b7       	in	r24, 0x39	; 57
     49c:	80 6c       	ori	r24, 0xC0	; 192
     49e:	89 bf       	out	0x39, r24	; 57
	//enable timer 1 compare match A and B interrupts
	TIMSK |= ((1<<OCIE1A) | (1<<OCIE1B));
     4a0:	89 b7       	in	r24, 0x39	; 57
     4a2:	88 61       	ori	r24, 0x18	; 24
     4a4:	89 bf       	out	0x39, r24	; 57
	//enable timer 0 overflow interrupt
	TIMSK |= (1<<TOIE0);
     4a6:	89 b7       	in	r24, 0x39	; 57
     4a8:	81 60       	ori	r24, 0x01	; 1
     4aa:	89 bf       	out	0x39, r24	; 57
	//mark T PWM pulse to be handled next
	t2 = 0;
     4ac:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <t2+0x1>
     4b0:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <t2>
	
	//enable and initialise UART
	uart_init();
     4b4:	2d d2       	rcall	.+1114   	; 0x910 <uart_init>
	//enable and initialise ADC
	adc_init();
     4b6:	ed dd       	rcall	.-1062   	; 0x92 <adc_init>
	//enable global interrupts
	sei();
     4b8:	78 94       	sei
    while (1)
    {
		//gradual duty cycle increase logic to couple with resonant frequency detection module
		//this is because changing the PWM duty cycle also changes the resonant frequency
		if (OCR2 < duty_request)
     4ba:	23 b5       	in	r18, 0x23	; 35
     4bc:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <duty_request>
     4c0:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <duty_request+0x1>
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	28 17       	cp	r18, r24
     4c8:	39 07       	cpc	r19, r25
     4ca:	10 f4       	brcc	.+4      	; 0x4d0 <__stack+0x71>
			OCR2 = duty_request + 1;
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
     4ce:	06 c0       	rjmp	.+12     	; 0x4dc <__stack+0x7d>
		else if (OCR2 > duty_request){
     4d0:	23 b5       	in	r18, 0x23	; 35
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	82 17       	cp	r24, r18
     4d6:	93 07       	cpc	r25, r19
     4d8:	10 f4       	brcc	.+4      	; 0x4de <__stack+0x7f>
			OCR2 = duty_request - 1;
     4da:	81 50       	subi	r24, 0x01	; 1
     4dc:	83 bd       	out	0x23, r24	; 35
			UCSRB |= (1<<RXEN);
			transmit_data = 0;
		}*/
		//uart_transmit(48);
		//if adc has to be read
		if (numcycles >= 50){
     4de:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <numcycles>
     4e2:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <numcycles+0x1>
     4e6:	c2 97       	sbiw	r24, 0x32	; 50
     4e8:	08 f4       	brcc	.+2      	; 0x4ec <__stack+0x8d>
     4ea:	b0 c0       	rjmp	.+352    	; 0x64c <__stack+0x1ed>
			if (readadc){
     4ec:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <readadc>
     4f0:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <readadc+0x1>
     4f4:	89 2b       	or	r24, r25
     4f6:	09 f4       	brne	.+2      	; 0x4fa <__stack+0x9b>
     4f8:	a9 c0       	rjmp	.+338    	; 0x64c <__stack+0x1ed>
						//once max has stabilised and corresponding time has been obtained, calculate resonant frequency and adjust duty cycle on next while () iteration (if required) and do resonant_done = 1;
					}
				}*/
				//else{//resonant frequency calculation has priority, so do everything else in this else block
					
					if (readadcv){
     4fa:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <readadcv>
     4fe:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <readadcv+0x1>
     502:	89 2b       	or	r24, r25
     504:	09 f1       	breq	.+66     	; 0x548 <__stack+0xe9>
						/*if (voltage_left_on){
							//read motor_left for VCC
							reading = adc_convert(adc_read(LHSVOLTAGECHANNEL));
							voltagereading = (reading - 220)*2.6997; //store actual voltage value
						}*/
						if (voltage_right_on){
     506:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <voltage_right_on>
     50a:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <voltage_right_on+0x1>
     50e:	89 2b       	or	r24, r25
     510:	b1 f0       	breq	.+44     	; 0x53e <__stack+0xdf>
							//read motor_right for VCC
							reading = adc_convert(adc_read(RHSVOLTAGECHANNEL));
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	a4 dd       	rcall	.-1208   	; 0x5e <adc_read>
     516:	af dd       	rcall	.-1186   	; 0x76 <adc_convert>
     518:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <reading+0x1>
     51c:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <reading>
							voltagereading = (reading - 220)*2.6997; //store actual voltage value
     520:	6c 5d       	subi	r22, 0xDC	; 220
     522:	71 09       	sbc	r23, r1
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	7b d2       	rcall	.+1270   	; 0xa20 <__floatunsisf>
     52a:	23 ee       	ldi	r18, 0xE3	; 227
     52c:	37 ec       	ldi	r19, 0xC7	; 199
     52e:	4c e2       	ldi	r20, 0x2C	; 44
     530:	50 e4       	ldi	r21, 0x40	; 64
     532:	2a d3       	rcall	.+1620   	; 0xb88 <__mulsf3>
     534:	49 d2       	rcall	.+1170   	; 0x9c8 <__fixunssfsi>
     536:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <voltagereading+0x1>
     53a:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <voltagereading>
						}
						//we have read voltage value (only need to do this once because we are assuming Vcc remains constant between PWM pulses), turn off voltage reading flag
						readadcv = 0;
     53e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <readadcv+0x1>
     542:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <readadcv>
     546:	82 c0       	rjmp	.+260    	; 0x64c <__stack+0x1ed>
					}
					else if (readadci){
     548:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <readadci>
     54c:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <readadci+0x1>
     550:	89 2b       	or	r24, r25
     552:	09 f4       	brne	.+2      	; 0x556 <__stack+0xf7>
     554:	7b c0       	rjmp	.+246    	; 0x64c <__stack+0x1ed>
						if (currentreadingindex != NUMSAMPLESI){
     556:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <currentreadingindex>
     55a:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <currentreadingindex+0x1>
     55e:	c2 97       	sbiw	r24, 0x32	; 50
     560:	09 f4       	brne	.+2      	; 0x564 <__stack+0x105>
     562:	74 c0       	rjmp	.+232    	; 0x64c <__stack+0x1ed>
							//uart_transmit(voltage_left_on + 48);
							//uart_transmit(voltage_right_on + 48);
							//uart_transmit('\n');
							if ((voltage_left_on) || (voltage_right_on)){
     564:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <voltage_left_on>
     568:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <voltage_left_on+0x1>
     56c:	89 2b       	or	r24, r25
     56e:	31 f4       	brne	.+12     	; 0x57c <__stack+0x11d>
     570:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <voltage_right_on>
     574:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <voltage_right_on+0x1>
     578:	89 2b       	or	r24, r25
     57a:	99 f1       	breq	.+102    	; 0x5e2 <__stack+0x183>
								//store current ADC samples into array, do NOT reset the index between sampling intervals so we can build up a full array
								//also at the same time, multiply adc current value by the voltage value to get the instantaneous power array
								//store only alternate samples (i % 50 == 0) (so we don't get more than ~50 samples for the whole of T/4)
								reading = adc_convert(adc_read(ISHIFTEDCHANNEL));
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	6f dd       	rcall	.-1314   	; 0x5e <adc_read>
     580:	7a dd       	rcall	.-1292   	; 0x76 <adc_convert>
     582:	9b 01       	movw	r18, r22
     584:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <reading+0x1>
     588:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <reading>
								if((current_i % 2) == 0){
     58c:	40 91 b0 00 	lds	r20, 0x00B0	; 0x8000b0 <current_i>
     590:	50 91 b1 00 	lds	r21, 0x00B1	; 0x8000b1 <current_i+0x1>
     594:	40 fd       	sbrc	r20, 0
     596:	51 c0       	rjmp	.+162    	; 0x63a <__stack+0x1db>
									currentarray[currentreadingindex] = reading; //store i_sense_shifted voltage
     598:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <currentreadingindex>
     59c:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <currentreadingindex+0x1>
     5a0:	ee 0f       	add	r30, r30
     5a2:	ff 1f       	adc	r31, r31
     5a4:	ee 0f       	add	r30, r30
     5a6:	ff 1f       	adc	r31, r31
     5a8:	ed 56       	subi	r30, 0x6D	; 109
     5aa:	fe 4f       	sbci	r31, 0xFE	; 254
     5ac:	dc 01       	movw	r26, r24
     5ae:	cb 01       	movw	r24, r22
     5b0:	aa 27       	eor	r26, r26
     5b2:	bb 27       	eor	r27, r27
     5b4:	80 83       	st	Z, r24
     5b6:	91 83       	std	Z+1, r25	; 0x01
     5b8:	a2 83       	std	Z+2, r26	; 0x02
     5ba:	b3 83       	std	Z+3, r27	; 0x03
									//powerarray[currentreadingindex] = currentarray[currentreadingindex] * voltagereading; //store power in uW
									++currentreadingindex;
     5bc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <currentreadingindex>
     5c0:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <currentreadingindex+0x1>
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <currentreadingindex+0x1>
     5ca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <currentreadingindex>
									if (reading > 3000) {//short circuit condition test
     5ce:	29 3b       	cpi	r18, 0xB9	; 185
     5d0:	3b 40       	sbci	r19, 0x0B	; 11
     5d2:	98 f1       	brcs	.+102    	; 0x63a <__stack+0x1db>
										shortcircuit = 1;
     5d4:	a1 e0       	ldi	r26, 0x01	; 1
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <shortcircuit+0x1>
     5dc:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <shortcircuit>
     5e0:	2c c0       	rjmp	.+88     	; 0x63a <__stack+0x1db>
									}
								}
							}
							else if ((!voltage_left_on) && (!voltage_right_on)){
     5e2:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <voltage_left_on>
     5e6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <voltage_left_on+0x1>
     5ea:	89 2b       	or	r24, r25
     5ec:	31 f5       	brne	.+76     	; 0x63a <__stack+0x1db>
     5ee:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <voltage_right_on>
     5f2:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <voltage_right_on+0x1>
     5f6:	89 2b       	or	r24, r25
     5f8:	01 f5       	brne	.+64     	; 0x63a <__stack+0x1db>
								//if PWM is turned off, current is 0
								//therefore store a 0 in the array (again, do not reset the index yet)
								//but make sure to read still ADC to generate the correct number of samples (because we don't have a spare timer)
								//also at the same time, multiply adc current value by the voltage value to get the instantaneous power array
								//store only alternate samples (every 25th sample using (i % 50 == 0)) (so we don't get more than ~50 samples)
								adc_convert(adc_read(ISHIFTEDCHANNEL));
     5fa:	82 e0       	ldi	r24, 0x02	; 2
     5fc:	30 dd       	rcall	.-1440   	; 0x5e <adc_read>
     5fe:	3b dd       	rcall	.-1418   	; 0x76 <adc_convert>
								if ((current_i % 2) == 0){
     600:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <current_i>
     604:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <current_i+0x1>
     608:	80 fd       	sbrc	r24, 0
     60a:	17 c0       	rjmp	.+46     	; 0x63a <__stack+0x1db>
									currentarray[currentreadingindex] = 0;
     60c:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <currentreadingindex>
     610:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <currentreadingindex+0x1>
     614:	ee 0f       	add	r30, r30
     616:	ff 1f       	adc	r31, r31
     618:	ee 0f       	add	r30, r30
     61a:	ff 1f       	adc	r31, r31
     61c:	ed 56       	subi	r30, 0x6D	; 109
     61e:	fe 4f       	sbci	r31, 0xFE	; 254
     620:	10 82       	st	Z, r1
     622:	11 82       	std	Z+1, r1	; 0x01
     624:	12 82       	std	Z+2, r1	; 0x02
     626:	13 82       	std	Z+3, r1	; 0x03
									//powerarray[currentreadingindex] = 0;
									++currentreadingindex;
     628:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <currentreadingindex>
     62c:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <currentreadingindex+0x1>
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <currentreadingindex+0x1>
     636:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <currentreadingindex>
								}
							}
							++current_i;
     63a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <current_i>
     63e:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <current_i+0x1>
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <current_i+0x1>
     648:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <current_i>
				//}
			}
		}
		
		//driving frequency adjustment here
		if (backemffound){
     64c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <backemffound>
     650:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <backemffound+0x1>
     654:	89 2b       	or	r24, r25
     656:	59 f0       	breq	.+22     	; 0x66e <__stack+0x20f>
			if (TCNT1 < OCR1A){
     658:	2c b5       	in	r18, 0x2c	; 44
     65a:	3d b5       	in	r19, 0x2d	; 45
     65c:	8a b5       	in	r24, 0x2a	; 42
     65e:	9b b5       	in	r25, 0x2b	; 43
     660:	28 17       	cp	r18, r24
     662:	39 07       	cpc	r19, r25
     664:	20 f4       	brcc	.+8      	; 0x66e <__stack+0x20f>
				//if (((backemftime - OCR1A) < 1000) || (OCR1A - (backemftime) < 1000)){
				backemffound = 0; //reset found flag
     666:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <backemffound+0x1>
     66a:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <backemffound>
				//}
			}
		}
		
		//once we have done adc readings, do rms/power calcs and store the values in their proper places
		if (currentreadingindex == NUMSAMPLESI){
     66e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <currentreadingindex>
     672:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <currentreadingindex+0x1>
     676:	c2 97       	sbiw	r24, 0x32	; 50
     678:	09 f0       	breq	.+2      	; 0x67c <__stack+0x21d>
     67a:	1f cf       	rjmp	.-450    	; 0x4ba <__stack+0x5b>
			for (int i = 0; i < NUMSAMPLESI; ++i){
				if (currentarray[i] != 0){
					currentarray[i] = (((currentarray[i] - 200) * 0.2445)) * 10; //store actual current value (mA)
					//currentarray[i] = (((currentarray[i] - 220) * 0.2074)) * 10; //store actual current value (mA)
				}
				powerarray[i] = currentarray[i] * voltagereading;
     67c:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <voltagereading>
     680:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <voltagereading+0x1>
     684:	f8 8b       	std	Y+16, r31	; 0x10
     686:	ef 87       	std	Y+15, r30	; 0x0f
     688:	cf 01       	movw	r24, r30
     68a:	a0 e0       	ldi	r26, 0x00	; 0
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	89 8b       	std	Y+17, r24	; 0x11
     690:	9a 8b       	std	Y+18, r25	; 0x12
     692:	ab 8b       	std	Y+19, r26	; 0x13
     694:	bc 8b       	std	Y+20, r27	; 0x14
     696:	40 90 92 00 	lds	r4, 0x0092	; 0x800092 <currentvalue>
     69a:	50 90 93 00 	lds	r5, 0x0093	; 0x800093 <currentvalue+0x1>
     69e:	60 90 94 00 	lds	r6, 0x0094	; 0x800094 <currentvalue+0x2>
     6a2:	70 90 95 00 	lds	r7, 0x0095	; 0x800095 <currentvalue+0x3>
     6a6:	80 90 96 00 	lds	r8, 0x0096	; 0x800096 <currentvalue+0x4>
     6aa:	90 90 97 00 	lds	r9, 0x0097	; 0x800097 <currentvalue+0x5>
     6ae:	20 90 98 00 	lds	r2, 0x0098	; 0x800098 <currentvalue+0x6>
     6b2:	30 90 99 00 	lds	r3, 0x0099	; 0x800099 <currentvalue+0x7>
     6b6:	eb ec       	ldi	r30, 0xCB	; 203
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	fe 87       	std	Y+14, r31	; 0x0e
     6bc:	ed 87       	std	Y+13, r30	; 0x0d
     6be:	83 e9       	ldi	r24, 0x93	; 147
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	9c 87       	std	Y+12, r25	; 0x0c
     6c4:	8b 87       	std	Y+11, r24	; 0x0b
		if (currentreadingindex == NUMSAMPLESI){
			//calculate RMS current
			//uart_transmit_string("works\n");
			char buf[10];
			for (int i = 0; i < NUMSAMPLESI; ++i){
				if (currentarray[i] != 0){
     6c6:	eb 85       	ldd	r30, Y+11	; 0x0b
     6c8:	fc 85       	ldd	r31, Y+12	; 0x0c
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	a2 81       	ldd	r26, Z+2	; 0x02
     6d0:	b3 81       	ldd	r27, Z+3	; 0x03
     6d2:	00 97       	sbiw	r24, 0x00	; 0
     6d4:	a1 05       	cpc	r26, r1
     6d6:	b1 05       	cpc	r27, r1
     6d8:	c9 f0       	breq	.+50     	; 0x70c <__stack+0x2ad>
					currentarray[i] = (((currentarray[i] - 200) * 0.2445)) * 10; //store actual current value (mA)
     6da:	bc 01       	movw	r22, r24
     6dc:	cd 01       	movw	r24, r26
     6de:	68 5c       	subi	r22, 0xC8	; 200
     6e0:	71 09       	sbc	r23, r1
     6e2:	81 09       	sbc	r24, r1
     6e4:	91 09       	sbc	r25, r1
     6e6:	9c d1       	rcall	.+824    	; 0xa20 <__floatunsisf>
     6e8:	25 e3       	ldi	r18, 0x35	; 53
     6ea:	3e e5       	ldi	r19, 0x5E	; 94
     6ec:	4a e7       	ldi	r20, 0x7A	; 122
     6ee:	5e e3       	ldi	r21, 0x3E	; 62
     6f0:	4b d2       	rcall	.+1174   	; 0xb88 <__mulsf3>
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	40 e2       	ldi	r20, 0x20	; 32
     6f8:	51 e4       	ldi	r21, 0x41	; 65
     6fa:	46 d2       	rcall	.+1164   	; 0xb88 <__mulsf3>
     6fc:	65 d1       	rcall	.+714    	; 0x9c8 <__fixunssfsi>
     6fe:	ab 85       	ldd	r26, Y+11	; 0x0b
     700:	bc 85       	ldd	r27, Y+12	; 0x0c
     702:	6d 93       	st	X+, r22
     704:	7d 93       	st	X+, r23
     706:	8d 93       	st	X+, r24
     708:	9c 93       	st	X, r25
     70a:	13 97       	sbiw	r26, 0x03	; 3
					//currentarray[i] = (((currentarray[i] - 220) * 0.2074)) * 10; //store actual current value (mA)
				}
				powerarray[i] = currentarray[i] * voltagereading;
     70c:	eb 85       	ldd	r30, Y+11	; 0x0b
     70e:	fc 85       	ldd	r31, Y+12	; 0x0c
     710:	c0 80       	ld	r12, Z
     712:	d1 80       	ldd	r13, Z+1	; 0x01
     714:	e2 80       	ldd	r14, Z+2	; 0x02
     716:	f3 80       	ldd	r15, Z+3	; 0x03
     718:	a7 01       	movw	r20, r14
     71a:	96 01       	movw	r18, r12
     71c:	69 89       	ldd	r22, Y+17	; 0x11
     71e:	7a 89       	ldd	r23, Y+18	; 0x12
     720:	8b 89       	ldd	r24, Y+19	; 0x13
     722:	9c 89       	ldd	r25, Y+20	; 0x14
     724:	16 d3       	rcall	.+1580   	; 0xd52 <__mulsi3>
     726:	ad 85       	ldd	r26, Y+13	; 0x0d
     728:	be 85       	ldd	r27, Y+14	; 0x0e
     72a:	6d 93       	st	X+, r22
     72c:	7d 93       	st	X+, r23
     72e:	8d 93       	st	X+, r24
     730:	9d 93       	st	X+, r25
     732:	be 87       	std	Y+14, r27	; 0x0e
     734:	ad 87       	std	Y+13, r26	; 0x0d
				//sprintf(buf,"%u\n",currentarray[i]);
				currentarray[i] = square(currentarray[i]); //square
     736:	c7 01       	movw	r24, r14
     738:	b6 01       	movw	r22, r12
     73a:	72 d1       	rcall	.+740    	; 0xa20 <__floatunsisf>
     73c:	ca d2       	rcall	.+1428   	; 0xcd2 <square>
     73e:	44 d1       	rcall	.+648    	; 0x9c8 <__fixunssfsi>
     740:	eb 85       	ldd	r30, Y+11	; 0x0b
     742:	fc 85       	ldd	r31, Y+12	; 0x0c
     744:	61 93       	st	Z+, r22
     746:	71 93       	st	Z+, r23
     748:	81 93       	st	Z+, r24
     74a:	91 93       	st	Z+, r25
     74c:	fc 87       	std	Y+12, r31	; 0x0c
     74e:	eb 87       	std	Y+11, r30	; 0x0b
				//uart_transmit_string(buf);
				powervalue += powerarray[i]; //summation of power 
				currentvalue += currentarray[i];//summation of current^2
     750:	5b 01       	movw	r10, r22
     752:	6c 01       	movw	r12, r24
     754:	9b 01       	movw	r18, r22
     756:	a6 01       	movw	r20, r12
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	52 01       	movw	r10, r4
     762:	63 01       	movw	r12, r6
     764:	74 01       	movw	r14, r8
     766:	81 01       	movw	r16, r2
     768:	0a d4       	rcall	.+2068   	; 0xf7e <__adddi3>
     76a:	29 01       	movw	r4, r18
     76c:	3a 01       	movw	r6, r20
     76e:	4b 01       	movw	r8, r22
     770:	1c 01       	movw	r2, r24
		//once we have done adc readings, do rms/power calcs and store the values in their proper places
		if (currentreadingindex == NUMSAMPLESI){
			//calculate RMS current
			//uart_transmit_string("works\n");
			char buf[10];
			for (int i = 0; i < NUMSAMPLESI; ++i){
     772:	eb 55       	subi	r30, 0x5B	; 91
     774:	f2 40       	sbci	r31, 0x02	; 2
     776:	09 f0       	breq	.+2      	; 0x77a <__stack+0x31b>
     778:	a6 cf       	rjmp	.-180    	; 0x6c6 <__stack+0x267>
				//uart_transmit_string(buf);
				powervalue += powerarray[i]; //summation of power 
				currentvalue += currentarray[i];//summation of current^2
			}
			currentvalue /= NUMSAMPLESI; //mean
			currentvalue = sqrt(currentvalue); //root - gives RMS current in (mA)
     77a:	82 e3       	ldi	r24, 0x32	; 50
     77c:	a8 2e       	mov	r10, r24
     77e:	b1 2c       	mov	r11, r1
     780:	c1 2c       	mov	r12, r1
     782:	d1 2c       	mov	r13, r1
     784:	e1 2c       	mov	r14, r1
     786:	f1 2c       	mov	r15, r1
     788:	00 e0       	ldi	r16, 0x00	; 0
     78a:	10 e0       	ldi	r17, 0x00	; 0
     78c:	92 01       	movw	r18, r4
     78e:	c1 01       	movw	r24, r2
     790:	8e d3       	rcall	.+1820   	; 0xeae <__udivdi3>
     792:	83 d1       	rcall	.+774    	; 0xa9a <__floatundisf>
     794:	60 d2       	rcall	.+1216   	; 0xc56 <sqrt>
			currentvalue /= 2; //since we are operating bidirectional current and only reading the "ON" period of the signals for (T/4 + T/4) = T/2, we need halve our obtained RMS value
     796:	e3 d0       	rcall	.+454    	; 0x95e <__fixunssfdi>
     798:	01 e0       	ldi	r16, 0x01	; 1
     79a:	d5 d3       	rcall	.+1962   	; 0xf46 <__lshrdi3>
     79c:	20 93 92 00 	sts	0x0092, r18	; 0x800092 <currentvalue>
     7a0:	30 93 93 00 	sts	0x0093, r19	; 0x800093 <currentvalue+0x1>
     7a4:	40 93 94 00 	sts	0x0094, r20	; 0x800094 <currentvalue+0x2>
     7a8:	50 93 95 00 	sts	0x0095, r21	; 0x800095 <currentvalue+0x3>
     7ac:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <currentvalue+0x4>
     7b0:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <currentvalue+0x5>
     7b4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <currentvalue+0x6>
     7b8:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <currentvalue+0x7>
			
			powervalue = currentvalue * voltagereading; //power mean (uW)
			powervalue /= 1000; //gives average power in (mW)
     7bc:	af 85       	ldd	r26, Y+15	; 0x0f
     7be:	b8 89       	ldd	r27, Y+16	; 0x10
     7c0:	59 01       	movw	r10, r18
     7c2:	6a 01       	movw	r12, r20
     7c4:	7b 01       	movw	r14, r22
     7c6:	8c 01       	movw	r16, r24
     7c8:	9d 01       	movw	r18, r26
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	18 d3       	rcall	.+1584   	; 0xe08 <__muldi3>
     7d8:	e8 ee       	ldi	r30, 0xE8	; 232
     7da:	ae 2e       	mov	r10, r30
     7dc:	f3 e0       	ldi	r31, 0x03	; 3
     7de:	bf 2e       	mov	r11, r31
     7e0:	c1 2c       	mov	r12, r1
     7e2:	d1 2c       	mov	r13, r1
     7e4:	e1 2c       	mov	r14, r1
     7e6:	f1 2c       	mov	r15, r1
     7e8:	00 e0       	ldi	r16, 0x00	; 0
     7ea:	10 e0       	ldi	r17, 0x00	; 0
     7ec:	60 d3       	rcall	.+1728   	; 0xeae <__udivdi3>
     7ee:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__data_end>
     7f2:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__data_end+0x1>
     7f6:	40 93 8c 00 	sts	0x008C, r20	; 0x80008c <__data_end+0x2>
     7fa:	50 93 8d 00 	sts	0x008D, r21	; 0x80008d <__data_end+0x3>
     7fe:	60 93 8e 00 	sts	0x008E, r22	; 0x80008e <__data_end+0x4>
     802:	70 93 8f 00 	sts	0x008F, r23	; 0x80008f <__data_end+0x5>
     806:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__data_end+0x6>
     80a:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__data_end+0x7>
			sprintf(buf,"current = %u\n",powervalue);
     80e:	9f 93       	push	r25
     810:	8f 93       	push	r24
     812:	7f 93       	push	r23
     814:	6f 93       	push	r22
     816:	5f 93       	push	r21
     818:	4f 93       	push	r20
     81a:	3f 93       	push	r19
     81c:	2f 93       	push	r18
     81e:	ec e7       	ldi	r30, 0x7C	; 124
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	ff 93       	push	r31
     824:	ef 93       	push	r30
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	8c 0f       	add	r24, r28
     82c:	9d 1f       	adc	r25, r29
     82e:	9f 93       	push	r25
     830:	8f 93       	push	r24
     832:	c3 d5       	rcall	.+2950   	; 0x13ba <sprintf>
			uart_transmit_string(buf);
     834:	ce 01       	movw	r24, r28
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	7e d0       	rcall	.+252    	; 0x936 <uart_transmit_string>
			//put all the found circuit parameters into the proper format for transmission)
			voltleft = voltagereading/1000;
     83a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <voltagereading>
     83e:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <voltagereading+0x1>
     842:	68 ee       	ldi	r22, 0xE8	; 232
     844:	73 e0       	ldi	r23, 0x03	; 3
     846:	94 d2       	rcall	.+1320   	; 0xd70 <__udivmodhi4>
     848:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <voltleft+0x1>
     84c:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <voltleft>
			voltright = voltagereading % 1000;
     850:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <voltright+0x1>
     854:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <voltright>
			
			uint32_t freqfull = backemffreq * 0.25; //total frequency = f(T/4) / 4
     858:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <backemffreq>
     85c:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <backemffreq+0x1>
     860:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <backemffreq+0x2>
     864:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <backemffreq+0x3>
     868:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <backemffreq+0x4>
     86c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <backemffreq+0x5>
     870:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <backemffreq+0x6>
     874:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <backemffreq+0x7>
     878:	10 d1       	rcall	.+544    	; 0xa9a <__floatundisf>
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	40 e8       	ldi	r20, 0x80	; 128
     880:	5e e3       	ldi	r21, 0x3E	; 62
     882:	82 d1       	rcall	.+772    	; 0xb88 <__mulsf3>
     884:	a1 d0       	rcall	.+322    	; 0x9c8 <__fixunssfsi>
			freqleft = freqfull/1000;
     886:	28 ee       	ldi	r18, 0xE8	; 232
     888:	33 e0       	ldi	r19, 0x03	; 3
     88a:	40 e0       	ldi	r20, 0x00	; 0
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	84 d2       	rcall	.+1288   	; 0xd98 <__udivmodsi4>
     890:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <freqleft+0x1>
     894:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <freqleft>
			freqright = freqfull % 1000;
     898:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <freqright+0x1>
     89c:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <freqright>
			
			current = currentvalue; //current is already in mA
     8a0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <currentvalue>
     8a4:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <currentvalue+0x1>
     8a8:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <current+0x1>
     8ac:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <current>
			
			powerleft = powervalue / 1000;
     8b0:	20 90 8a 00 	lds	r2, 0x008A	; 0x80008a <__data_end>
     8b4:	30 90 8b 00 	lds	r3, 0x008B	; 0x80008b <__data_end+0x1>
     8b8:	40 90 8c 00 	lds	r4, 0x008C	; 0x80008c <__data_end+0x2>
     8bc:	50 90 8d 00 	lds	r5, 0x008D	; 0x80008d <__data_end+0x3>
     8c0:	60 90 8e 00 	lds	r6, 0x008E	; 0x80008e <__data_end+0x4>
     8c4:	70 90 8f 00 	lds	r7, 0x008F	; 0x80008f <__data_end+0x5>
     8c8:	80 90 90 00 	lds	r8, 0x0090	; 0x800090 <__data_end+0x6>
     8cc:	90 90 91 00 	lds	r9, 0x0091	; 0x800091 <__data_end+0x7>
     8d0:	91 01       	movw	r18, r2
     8d2:	a2 01       	movw	r20, r4
     8d4:	b3 01       	movw	r22, r6
     8d6:	c4 01       	movw	r24, r8
     8d8:	ea d2       	rcall	.+1492   	; 0xeae <__udivdi3>
     8da:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <powerleft+0x1>
     8de:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <powerleft>
			powerright = powervalue % 1000;
     8e2:	91 01       	movw	r18, r2
     8e4:	a2 01       	movw	r20, r4
     8e6:	b3 01       	movw	r22, r6
     8e8:	c4 01       	movw	r24, r8
     8ea:	df d2       	rcall	.+1470   	; 0xeaa <__umoddi3>
     8ec:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <powerright+0x1>
     8f0:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <powerright>
			
			//reset ADC indices
			current_i = 0;
     8f4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <current_i+0x1>
     8f8:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <current_i>
			currentreadingindex = 0;
     8fc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <currentreadingindex+0x1>
     900:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <currentreadingindex>
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	d5 cd       	rjmp	.-1110   	; 0x4ba <__stack+0x5b>

00000910 <uart_init>:
 */ 

#include "uart.h"

void uart_init(){
	UCSRB |= (1<<TXEN); //set transmit and receive bit
     910:	53 9a       	sbi	0x0a, 3	; 10
	UCSRB |= (1<<RXCIE);
     912:	57 9a       	sbi	0x0a, 7	; 10
	UBRRH = (ubrrvalue >> 8); //load baud rate register with calculated value
     914:	10 bc       	out	0x20, r1	; 32
	UBRRL = ubrrvalue;
     916:	87 e6       	ldi	r24, 0x67	; 103
     918:	89 b9       	out	0x09, r24	; 9
	UCSRC |= ((1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0)); //set 8 bit character size
     91a:	80 b5       	in	r24, 0x20	; 32
     91c:	86 68       	ori	r24, 0x86	; 134
     91e:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1<<UMSEL); //Set Asynchronous operation
     920:	80 b5       	in	r24, 0x20	; 32
     922:	8f 7b       	andi	r24, 0xBF	; 191
     924:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1<<UCSZ2); //set 8 bit character size
     926:	80 b5       	in	r24, 0x20	; 32
     928:	8b 7f       	andi	r24, 0xFB	; 251
     92a:	80 bd       	out	0x20, r24	; 32
     92c:	08 95       	ret

0000092e <uart_transmit>:
		stringtransmit++;
	}
}

void uart_transmit(uint8_t data){
	while (UDREMPTY == 0){ //wait for buffer to empty
     92e:	5d 9b       	sbis	0x0b, 5	; 11
     930:	fe cf       	rjmp	.-4      	; 0x92e <uart_transmit>
	}
	UDR = data; //load data register with data byte
     932:	8c b9       	out	0x0c, r24	; 12
     934:	08 95       	ret

00000936 <uart_transmit_string>:
	UCSRC &= ~(1<<UMSEL); //Set Asynchronous operation
	UCSRC &= ~(1<<UCSZ2); //set 8 bit character size
}

//Transmitter
void uart_transmit_string(char* stringtransmit){
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ec 01       	movw	r28, r24
	while (*stringtransmit != 0x00){
     93c:	89 91       	ld	r24, Y+
     93e:	88 23       	and	r24, r24
     940:	11 f0       	breq	.+4      	; 0x946 <uart_transmit_string+0x10>
		uart_transmit(*stringtransmit);
     942:	f5 df       	rcall	.-22     	; 0x92e <uart_transmit>
     944:	fb cf       	rjmp	.-10     	; 0x93c <uart_transmit_string+0x6>
		stringtransmit++;
	}
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <uart_receive>:
	UDR = data; //load data register with data byte
}

//Receiver
char uart_receive(){
	while (RXCOMP == 0){ //wait for receive to be completed
     94c:	5f 9b       	sbis	0x0b, 7	; 11
     94e:	fe cf       	rjmp	.-4      	; 0x94c <uart_receive>
	}
	return UDR; //load data register with data byte
     950:	8c b1       	in	r24, 0x0c	; 12
     952:	08 95       	ret

00000954 <__fixsfdi>:
     954:	be e3       	ldi	r27, 0x3E	; 62
     956:	04 d0       	rcall	.+8      	; 0x960 <__fixunssfdi+0x2>
     958:	08 f4       	brcc	.+2      	; 0x95c <__fixsfdi+0x8>
     95a:	90 e8       	ldi	r25, 0x80	; 128
     95c:	08 95       	ret

0000095e <__fixunssfdi>:
     95e:	bf e3       	ldi	r27, 0x3F	; 63
     960:	22 27       	eor	r18, r18
     962:	33 27       	eor	r19, r19
     964:	a9 01       	movw	r20, r18
     966:	ef d0       	rcall	.+478    	; 0xb46 <__fp_splitA>
     968:	58 f1       	brcs	.+86     	; 0x9c0 <__fixunssfdi+0x62>
     96a:	9f 57       	subi	r25, 0x7F	; 127
     96c:	40 f1       	brcs	.+80     	; 0x9be <__fixunssfdi+0x60>
     96e:	b9 17       	cp	r27, r25
     970:	38 f1       	brcs	.+78     	; 0x9c0 <__fixunssfdi+0x62>
     972:	bf e3       	ldi	r27, 0x3F	; 63
     974:	b9 1b       	sub	r27, r25
     976:	99 27       	eor	r25, r25
     978:	b8 50       	subi	r27, 0x08	; 8
     97a:	3a f4       	brpl	.+14     	; 0x98a <__fixunssfdi+0x2c>
     97c:	66 0f       	add	r22, r22
     97e:	77 1f       	adc	r23, r23
     980:	88 1f       	adc	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	b3 95       	inc	r27
     986:	d2 f3       	brmi	.-12     	; 0x97c <__fixunssfdi+0x1e>
     988:	16 c0       	rjmp	.+44     	; 0x9b6 <__fixunssfdi+0x58>
     98a:	b8 50       	subi	r27, 0x08	; 8
     98c:	4a f0       	brmi	.+18     	; 0x9a0 <__fixunssfdi+0x42>
     98e:	23 2f       	mov	r18, r19
     990:	34 2f       	mov	r19, r20
     992:	45 2f       	mov	r20, r21
     994:	56 2f       	mov	r21, r22
     996:	67 2f       	mov	r22, r23
     998:	78 2f       	mov	r23, r24
     99a:	88 27       	eor	r24, r24
     99c:	b8 50       	subi	r27, 0x08	; 8
     99e:	ba f7       	brpl	.-18     	; 0x98e <__fixunssfdi+0x30>
     9a0:	b8 5f       	subi	r27, 0xF8	; 248
     9a2:	49 f0       	breq	.+18     	; 0x9b6 <__fixunssfdi+0x58>
     9a4:	86 95       	lsr	r24
     9a6:	77 95       	ror	r23
     9a8:	67 95       	ror	r22
     9aa:	57 95       	ror	r21
     9ac:	47 95       	ror	r20
     9ae:	37 95       	ror	r19
     9b0:	27 95       	ror	r18
     9b2:	ba 95       	dec	r27
     9b4:	b9 f7       	brne	.-18     	; 0x9a4 <__fixunssfdi+0x46>
     9b6:	0e f4       	brtc	.+2      	; 0x9ba <__fixunssfdi+0x5c>
     9b8:	ae d0       	rcall	.+348    	; 0xb16 <__fp_negdi>
     9ba:	88 94       	clc
     9bc:	08 95       	ret
     9be:	88 94       	clc
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	cb 01       	movw	r24, r22
     9c6:	08 95       	ret

000009c8 <__fixunssfsi>:
     9c8:	be d0       	rcall	.+380    	; 0xb46 <__fp_splitA>
     9ca:	88 f0       	brcs	.+34     	; 0x9ee <__fixunssfsi+0x26>
     9cc:	9f 57       	subi	r25, 0x7F	; 127
     9ce:	90 f0       	brcs	.+36     	; 0x9f4 <__fixunssfsi+0x2c>
     9d0:	b9 2f       	mov	r27, r25
     9d2:	99 27       	eor	r25, r25
     9d4:	b7 51       	subi	r27, 0x17	; 23
     9d6:	a0 f0       	brcs	.+40     	; 0xa00 <__fixunssfsi+0x38>
     9d8:	d1 f0       	breq	.+52     	; 0xa0e <__fixunssfsi+0x46>
     9da:	66 0f       	add	r22, r22
     9dc:	77 1f       	adc	r23, r23
     9de:	88 1f       	adc	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	1a f0       	brmi	.+6      	; 0x9ea <__fixunssfsi+0x22>
     9e4:	ba 95       	dec	r27
     9e6:	c9 f7       	brne	.-14     	; 0x9da <__fixunssfsi+0x12>
     9e8:	12 c0       	rjmp	.+36     	; 0xa0e <__fixunssfsi+0x46>
     9ea:	b1 30       	cpi	r27, 0x01	; 1
     9ec:	81 f0       	breq	.+32     	; 0xa0e <__fixunssfsi+0x46>
     9ee:	c5 d0       	rcall	.+394    	; 0xb7a <__fp_zero>
     9f0:	b1 e0       	ldi	r27, 0x01	; 1
     9f2:	08 95       	ret
     9f4:	c2 c0       	rjmp	.+388    	; 0xb7a <__fp_zero>
     9f6:	67 2f       	mov	r22, r23
     9f8:	78 2f       	mov	r23, r24
     9fa:	88 27       	eor	r24, r24
     9fc:	b8 5f       	subi	r27, 0xF8	; 248
     9fe:	39 f0       	breq	.+14     	; 0xa0e <__fixunssfsi+0x46>
     a00:	b9 3f       	cpi	r27, 0xF9	; 249
     a02:	cc f3       	brlt	.-14     	; 0x9f6 <__fixunssfsi+0x2e>
     a04:	86 95       	lsr	r24
     a06:	77 95       	ror	r23
     a08:	67 95       	ror	r22
     a0a:	b3 95       	inc	r27
     a0c:	d9 f7       	brne	.-10     	; 0xa04 <__fixunssfsi+0x3c>
     a0e:	3e f4       	brtc	.+14     	; 0xa1e <__fixunssfsi+0x56>
     a10:	90 95       	com	r25
     a12:	80 95       	com	r24
     a14:	70 95       	com	r23
     a16:	61 95       	neg	r22
     a18:	7f 4f       	sbci	r23, 0xFF	; 255
     a1a:	8f 4f       	sbci	r24, 0xFF	; 255
     a1c:	9f 4f       	sbci	r25, 0xFF	; 255
     a1e:	08 95       	ret

00000a20 <__floatunsisf>:
     a20:	e8 94       	clt
     a22:	09 c0       	rjmp	.+18     	; 0xa36 <__floatsisf+0x12>

00000a24 <__floatsisf>:
     a24:	97 fb       	bst	r25, 7
     a26:	3e f4       	brtc	.+14     	; 0xa36 <__floatsisf+0x12>
     a28:	90 95       	com	r25
     a2a:	80 95       	com	r24
     a2c:	70 95       	com	r23
     a2e:	61 95       	neg	r22
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	8f 4f       	sbci	r24, 0xFF	; 255
     a34:	9f 4f       	sbci	r25, 0xFF	; 255
     a36:	99 23       	and	r25, r25
     a38:	a9 f0       	breq	.+42     	; 0xa64 <__floatsisf+0x40>
     a3a:	f9 2f       	mov	r31, r25
     a3c:	96 e9       	ldi	r25, 0x96	; 150
     a3e:	bb 27       	eor	r27, r27
     a40:	93 95       	inc	r25
     a42:	f6 95       	lsr	r31
     a44:	87 95       	ror	r24
     a46:	77 95       	ror	r23
     a48:	67 95       	ror	r22
     a4a:	b7 95       	ror	r27
     a4c:	f1 11       	cpse	r31, r1
     a4e:	f8 cf       	rjmp	.-16     	; 0xa40 <__floatsisf+0x1c>
     a50:	fa f4       	brpl	.+62     	; 0xa90 <__floatsisf+0x6c>
     a52:	bb 0f       	add	r27, r27
     a54:	11 f4       	brne	.+4      	; 0xa5a <__floatsisf+0x36>
     a56:	60 ff       	sbrs	r22, 0
     a58:	1b c0       	rjmp	.+54     	; 0xa90 <__floatsisf+0x6c>
     a5a:	6f 5f       	subi	r22, 0xFF	; 255
     a5c:	7f 4f       	sbci	r23, 0xFF	; 255
     a5e:	8f 4f       	sbci	r24, 0xFF	; 255
     a60:	9f 4f       	sbci	r25, 0xFF	; 255
     a62:	16 c0       	rjmp	.+44     	; 0xa90 <__floatsisf+0x6c>
     a64:	88 23       	and	r24, r24
     a66:	11 f0       	breq	.+4      	; 0xa6c <__floatsisf+0x48>
     a68:	96 e9       	ldi	r25, 0x96	; 150
     a6a:	11 c0       	rjmp	.+34     	; 0xa8e <__floatsisf+0x6a>
     a6c:	77 23       	and	r23, r23
     a6e:	21 f0       	breq	.+8      	; 0xa78 <__floatsisf+0x54>
     a70:	9e e8       	ldi	r25, 0x8E	; 142
     a72:	87 2f       	mov	r24, r23
     a74:	76 2f       	mov	r23, r22
     a76:	05 c0       	rjmp	.+10     	; 0xa82 <__floatsisf+0x5e>
     a78:	66 23       	and	r22, r22
     a7a:	71 f0       	breq	.+28     	; 0xa98 <__floatsisf+0x74>
     a7c:	96 e8       	ldi	r25, 0x86	; 134
     a7e:	86 2f       	mov	r24, r22
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	2a f0       	brmi	.+10     	; 0xa90 <__floatsisf+0x6c>
     a86:	9a 95       	dec	r25
     a88:	66 0f       	add	r22, r22
     a8a:	77 1f       	adc	r23, r23
     a8c:	88 1f       	adc	r24, r24
     a8e:	da f7       	brpl	.-10     	; 0xa86 <__floatsisf+0x62>
     a90:	88 0f       	add	r24, r24
     a92:	96 95       	lsr	r25
     a94:	87 95       	ror	r24
     a96:	97 f9       	bld	r25, 7
     a98:	08 95       	ret

00000a9a <__floatundisf>:
     a9a:	e8 94       	clt

00000a9c <__fp_di2sf>:
     a9c:	f9 2f       	mov	r31, r25
     a9e:	96 eb       	ldi	r25, 0xB6	; 182
     aa0:	ff 23       	and	r31, r31
     aa2:	81 f0       	breq	.+32     	; 0xac4 <__fp_di2sf+0x28>
     aa4:	12 16       	cp	r1, r18
     aa6:	13 06       	cpc	r1, r19
     aa8:	14 06       	cpc	r1, r20
     aaa:	44 0b       	sbc	r20, r20
     aac:	93 95       	inc	r25
     aae:	f6 95       	lsr	r31
     ab0:	87 95       	ror	r24
     ab2:	77 95       	ror	r23
     ab4:	67 95       	ror	r22
     ab6:	57 95       	ror	r21
     ab8:	40 40       	sbci	r20, 0x00	; 0
     aba:	ff 23       	and	r31, r31
     abc:	b9 f7       	brne	.-18     	; 0xaac <__fp_di2sf+0x10>
     abe:	1b c0       	rjmp	.+54     	; 0xaf6 <__fp_di2sf+0x5a>
     ac0:	99 27       	eor	r25, r25
     ac2:	08 95       	ret
     ac4:	88 23       	and	r24, r24
     ac6:	51 f4       	brne	.+20     	; 0xadc <__fp_di2sf+0x40>
     ac8:	98 50       	subi	r25, 0x08	; 8
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__fp_di2sf+0x24>
     acc:	87 2b       	or	r24, r23
     ace:	76 2f       	mov	r23, r22
     ad0:	65 2f       	mov	r22, r21
     ad2:	54 2f       	mov	r21, r20
     ad4:	43 2f       	mov	r20, r19
     ad6:	32 2f       	mov	r19, r18
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	b1 f3       	breq	.-20     	; 0xac8 <__fp_di2sf+0x2c>
     adc:	12 16       	cp	r1, r18
     ade:	13 06       	cpc	r1, r19
     ae0:	14 06       	cpc	r1, r20
     ae2:	44 0b       	sbc	r20, r20
     ae4:	88 23       	and	r24, r24
     ae6:	3a f0       	brmi	.+14     	; 0xaf6 <__fp_di2sf+0x5a>
     ae8:	9a 95       	dec	r25
     aea:	44 0f       	add	r20, r20
     aec:	55 1f       	adc	r21, r21
     aee:	66 1f       	adc	r22, r22
     af0:	77 1f       	adc	r23, r23
     af2:	88 1f       	adc	r24, r24
     af4:	ca f7       	brpl	.-14     	; 0xae8 <__fp_di2sf+0x4c>
     af6:	55 23       	and	r21, r21
     af8:	4a f4       	brpl	.+18     	; 0xb0c <__fp_di2sf+0x70>
     afa:	44 0f       	add	r20, r20
     afc:	55 1f       	adc	r21, r21
     afe:	11 f4       	brne	.+4      	; 0xb04 <__fp_di2sf+0x68>
     b00:	60 ff       	sbrs	r22, 0
     b02:	04 c0       	rjmp	.+8      	; 0xb0c <__fp_di2sf+0x70>
     b04:	6f 5f       	subi	r22, 0xFF	; 255
     b06:	7f 4f       	sbci	r23, 0xFF	; 255
     b08:	8f 4f       	sbci	r24, 0xFF	; 255
     b0a:	9f 4f       	sbci	r25, 0xFF	; 255
     b0c:	88 0f       	add	r24, r24
     b0e:	96 95       	lsr	r25
     b10:	87 95       	ror	r24
     b12:	97 f9       	bld	r25, 7
     b14:	08 95       	ret

00000b16 <__fp_negdi>:
     b16:	90 95       	com	r25
     b18:	80 95       	com	r24
     b1a:	70 95       	com	r23
     b1c:	60 95       	com	r22
     b1e:	50 95       	com	r21
     b20:	40 95       	com	r20
     b22:	30 95       	com	r19
     b24:	21 95       	neg	r18
     b26:	3f 4f       	sbci	r19, 0xFF	; 255
     b28:	4f 4f       	sbci	r20, 0xFF	; 255
     b2a:	5f 4f       	sbci	r21, 0xFF	; 255
     b2c:	6f 4f       	sbci	r22, 0xFF	; 255
     b2e:	7f 4f       	sbci	r23, 0xFF	; 255
     b30:	8f 4f       	sbci	r24, 0xFF	; 255
     b32:	9f 4f       	sbci	r25, 0xFF	; 255
     b34:	08 95       	ret

00000b36 <__fp_split3>:
     b36:	57 fd       	sbrc	r21, 7
     b38:	90 58       	subi	r25, 0x80	; 128
     b3a:	44 0f       	add	r20, r20
     b3c:	55 1f       	adc	r21, r21
     b3e:	59 f0       	breq	.+22     	; 0xb56 <__fp_splitA+0x10>
     b40:	5f 3f       	cpi	r21, 0xFF	; 255
     b42:	71 f0       	breq	.+28     	; 0xb60 <__fp_splitA+0x1a>
     b44:	47 95       	ror	r20

00000b46 <__fp_splitA>:
     b46:	88 0f       	add	r24, r24
     b48:	97 fb       	bst	r25, 7
     b4a:	99 1f       	adc	r25, r25
     b4c:	61 f0       	breq	.+24     	; 0xb66 <__fp_splitA+0x20>
     b4e:	9f 3f       	cpi	r25, 0xFF	; 255
     b50:	79 f0       	breq	.+30     	; 0xb70 <__fp_splitA+0x2a>
     b52:	87 95       	ror	r24
     b54:	08 95       	ret
     b56:	12 16       	cp	r1, r18
     b58:	13 06       	cpc	r1, r19
     b5a:	14 06       	cpc	r1, r20
     b5c:	55 1f       	adc	r21, r21
     b5e:	f2 cf       	rjmp	.-28     	; 0xb44 <__fp_split3+0xe>
     b60:	46 95       	lsr	r20
     b62:	f1 df       	rcall	.-30     	; 0xb46 <__fp_splitA>
     b64:	08 c0       	rjmp	.+16     	; 0xb76 <__fp_splitA+0x30>
     b66:	16 16       	cp	r1, r22
     b68:	17 06       	cpc	r1, r23
     b6a:	18 06       	cpc	r1, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	f1 cf       	rjmp	.-30     	; 0xb52 <__fp_splitA+0xc>
     b70:	86 95       	lsr	r24
     b72:	71 05       	cpc	r23, r1
     b74:	61 05       	cpc	r22, r1
     b76:	08 94       	sec
     b78:	08 95       	ret

00000b7a <__fp_zero>:
     b7a:	e8 94       	clt

00000b7c <__fp_szero>:
     b7c:	bb 27       	eor	r27, r27
     b7e:	66 27       	eor	r22, r22
     b80:	77 27       	eor	r23, r23
     b82:	cb 01       	movw	r24, r22
     b84:	97 f9       	bld	r25, 7
     b86:	08 95       	ret

00000b88 <__mulsf3>:
     b88:	0b d0       	rcall	.+22     	; 0xba0 <__mulsf3x>
     b8a:	d2 c0       	rjmp	.+420    	; 0xd30 <__fp_round>
     b8c:	c3 d0       	rcall	.+390    	; 0xd14 <__fp_pscA>
     b8e:	28 f0       	brcs	.+10     	; 0xb9a <__mulsf3+0x12>
     b90:	c8 d0       	rcall	.+400    	; 0xd22 <__fp_pscB>
     b92:	18 f0       	brcs	.+6      	; 0xb9a <__mulsf3+0x12>
     b94:	95 23       	and	r25, r21
     b96:	09 f0       	breq	.+2      	; 0xb9a <__mulsf3+0x12>
     b98:	9f c0       	rjmp	.+318    	; 0xcd8 <__fp_inf>
     b9a:	b2 c0       	rjmp	.+356    	; 0xd00 <__fp_nan>
     b9c:	11 24       	eor	r1, r1
     b9e:	ee cf       	rjmp	.-36     	; 0xb7c <__fp_szero>

00000ba0 <__mulsf3x>:
     ba0:	ca df       	rcall	.-108    	; 0xb36 <__fp_split3>
     ba2:	a0 f3       	brcs	.-24     	; 0xb8c <__mulsf3+0x4>

00000ba4 <__mulsf3_pse>:
     ba4:	95 9f       	mul	r25, r21
     ba6:	d1 f3       	breq	.-12     	; 0xb9c <__mulsf3+0x14>
     ba8:	95 0f       	add	r25, r21
     baa:	50 e0       	ldi	r21, 0x00	; 0
     bac:	55 1f       	adc	r21, r21
     bae:	62 9f       	mul	r22, r18
     bb0:	f0 01       	movw	r30, r0
     bb2:	72 9f       	mul	r23, r18
     bb4:	bb 27       	eor	r27, r27
     bb6:	f0 0d       	add	r31, r0
     bb8:	b1 1d       	adc	r27, r1
     bba:	63 9f       	mul	r22, r19
     bbc:	aa 27       	eor	r26, r26
     bbe:	f0 0d       	add	r31, r0
     bc0:	b1 1d       	adc	r27, r1
     bc2:	aa 1f       	adc	r26, r26
     bc4:	64 9f       	mul	r22, r20
     bc6:	66 27       	eor	r22, r22
     bc8:	b0 0d       	add	r27, r0
     bca:	a1 1d       	adc	r26, r1
     bcc:	66 1f       	adc	r22, r22
     bce:	82 9f       	mul	r24, r18
     bd0:	22 27       	eor	r18, r18
     bd2:	b0 0d       	add	r27, r0
     bd4:	a1 1d       	adc	r26, r1
     bd6:	62 1f       	adc	r22, r18
     bd8:	73 9f       	mul	r23, r19
     bda:	b0 0d       	add	r27, r0
     bdc:	a1 1d       	adc	r26, r1
     bde:	62 1f       	adc	r22, r18
     be0:	83 9f       	mul	r24, r19
     be2:	a0 0d       	add	r26, r0
     be4:	61 1d       	adc	r22, r1
     be6:	22 1f       	adc	r18, r18
     be8:	74 9f       	mul	r23, r20
     bea:	33 27       	eor	r19, r19
     bec:	a0 0d       	add	r26, r0
     bee:	61 1d       	adc	r22, r1
     bf0:	23 1f       	adc	r18, r19
     bf2:	84 9f       	mul	r24, r20
     bf4:	60 0d       	add	r22, r0
     bf6:	21 1d       	adc	r18, r1
     bf8:	82 2f       	mov	r24, r18
     bfa:	76 2f       	mov	r23, r22
     bfc:	6a 2f       	mov	r22, r26
     bfe:	11 24       	eor	r1, r1
     c00:	9f 57       	subi	r25, 0x7F	; 127
     c02:	50 40       	sbci	r21, 0x00	; 0
     c04:	8a f0       	brmi	.+34     	; 0xc28 <__mulsf3_pse+0x84>
     c06:	e1 f0       	breq	.+56     	; 0xc40 <__mulsf3_pse+0x9c>
     c08:	88 23       	and	r24, r24
     c0a:	4a f0       	brmi	.+18     	; 0xc1e <__mulsf3_pse+0x7a>
     c0c:	ee 0f       	add	r30, r30
     c0e:	ff 1f       	adc	r31, r31
     c10:	bb 1f       	adc	r27, r27
     c12:	66 1f       	adc	r22, r22
     c14:	77 1f       	adc	r23, r23
     c16:	88 1f       	adc	r24, r24
     c18:	91 50       	subi	r25, 0x01	; 1
     c1a:	50 40       	sbci	r21, 0x00	; 0
     c1c:	a9 f7       	brne	.-22     	; 0xc08 <__mulsf3_pse+0x64>
     c1e:	9e 3f       	cpi	r25, 0xFE	; 254
     c20:	51 05       	cpc	r21, r1
     c22:	70 f0       	brcs	.+28     	; 0xc40 <__mulsf3_pse+0x9c>
     c24:	59 c0       	rjmp	.+178    	; 0xcd8 <__fp_inf>
     c26:	aa cf       	rjmp	.-172    	; 0xb7c <__fp_szero>
     c28:	5f 3f       	cpi	r21, 0xFF	; 255
     c2a:	ec f3       	brlt	.-6      	; 0xc26 <__mulsf3_pse+0x82>
     c2c:	98 3e       	cpi	r25, 0xE8	; 232
     c2e:	dc f3       	brlt	.-10     	; 0xc26 <__mulsf3_pse+0x82>
     c30:	86 95       	lsr	r24
     c32:	77 95       	ror	r23
     c34:	67 95       	ror	r22
     c36:	b7 95       	ror	r27
     c38:	f7 95       	ror	r31
     c3a:	e7 95       	ror	r30
     c3c:	9f 5f       	subi	r25, 0xFF	; 255
     c3e:	c1 f7       	brne	.-16     	; 0xc30 <__mulsf3_pse+0x8c>
     c40:	fe 2b       	or	r31, r30
     c42:	88 0f       	add	r24, r24
     c44:	91 1d       	adc	r25, r1
     c46:	96 95       	lsr	r25
     c48:	87 95       	ror	r24
     c4a:	97 f9       	bld	r25, 7
     c4c:	08 95       	ret
     c4e:	11 f4       	brne	.+4      	; 0xc54 <__mulsf3_pse+0xb0>
     c50:	0e f4       	brtc	.+2      	; 0xc54 <__mulsf3_pse+0xb0>
     c52:	56 c0       	rjmp	.+172    	; 0xd00 <__fp_nan>
     c54:	47 c0       	rjmp	.+142    	; 0xce4 <__fp_mpack>

00000c56 <sqrt>:
     c56:	77 df       	rcall	.-274    	; 0xb46 <__fp_splitA>
     c58:	d0 f3       	brcs	.-12     	; 0xc4e <__mulsf3_pse+0xaa>
     c5a:	99 23       	and	r25, r25
     c5c:	d9 f3       	breq	.-10     	; 0xc54 <__mulsf3_pse+0xb0>
     c5e:	ce f3       	brts	.-14     	; 0xc52 <__mulsf3_pse+0xae>
     c60:	9f 57       	subi	r25, 0x7F	; 127
     c62:	55 0b       	sbc	r21, r21
     c64:	87 ff       	sbrs	r24, 7
     c66:	4f d0       	rcall	.+158    	; 0xd06 <__fp_norm2>
     c68:	00 24       	eor	r0, r0
     c6a:	a0 e6       	ldi	r26, 0x60	; 96
     c6c:	40 ea       	ldi	r20, 0xA0	; 160
     c6e:	90 01       	movw	r18, r0
     c70:	80 58       	subi	r24, 0x80	; 128
     c72:	56 95       	lsr	r21
     c74:	97 95       	ror	r25
     c76:	28 f4       	brcc	.+10     	; 0xc82 <sqrt+0x2c>
     c78:	80 5c       	subi	r24, 0xC0	; 192
     c7a:	66 0f       	add	r22, r22
     c7c:	77 1f       	adc	r23, r23
     c7e:	88 1f       	adc	r24, r24
     c80:	20 f0       	brcs	.+8      	; 0xc8a <sqrt+0x34>
     c82:	26 17       	cp	r18, r22
     c84:	37 07       	cpc	r19, r23
     c86:	48 07       	cpc	r20, r24
     c88:	30 f4       	brcc	.+12     	; 0xc96 <sqrt+0x40>
     c8a:	62 1b       	sub	r22, r18
     c8c:	73 0b       	sbc	r23, r19
     c8e:	84 0b       	sbc	r24, r20
     c90:	20 29       	or	r18, r0
     c92:	31 29       	or	r19, r1
     c94:	4a 2b       	or	r20, r26
     c96:	a6 95       	lsr	r26
     c98:	17 94       	ror	r1
     c9a:	07 94       	ror	r0
     c9c:	20 25       	eor	r18, r0
     c9e:	31 25       	eor	r19, r1
     ca0:	4a 27       	eor	r20, r26
     ca2:	58 f7       	brcc	.-42     	; 0xc7a <sqrt+0x24>
     ca4:	66 0f       	add	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	88 1f       	adc	r24, r24
     caa:	20 f0       	brcs	.+8      	; 0xcb4 <sqrt+0x5e>
     cac:	26 17       	cp	r18, r22
     cae:	37 07       	cpc	r19, r23
     cb0:	48 07       	cpc	r20, r24
     cb2:	30 f4       	brcc	.+12     	; 0xcc0 <sqrt+0x6a>
     cb4:	62 0b       	sbc	r22, r18
     cb6:	73 0b       	sbc	r23, r19
     cb8:	84 0b       	sbc	r24, r20
     cba:	20 0d       	add	r18, r0
     cbc:	31 1d       	adc	r19, r1
     cbe:	41 1d       	adc	r20, r1
     cc0:	a0 95       	com	r26
     cc2:	81 f7       	brne	.-32     	; 0xca4 <sqrt+0x4e>
     cc4:	b9 01       	movw	r22, r18
     cc6:	84 2f       	mov	r24, r20
     cc8:	91 58       	subi	r25, 0x81	; 129
     cca:	88 0f       	add	r24, r24
     ccc:	96 95       	lsr	r25
     cce:	87 95       	ror	r24
     cd0:	08 95       	ret

00000cd2 <square>:
     cd2:	9b 01       	movw	r18, r22
     cd4:	ac 01       	movw	r20, r24
     cd6:	58 cf       	rjmp	.-336    	; 0xb88 <__mulsf3>

00000cd8 <__fp_inf>:
     cd8:	97 f9       	bld	r25, 7
     cda:	9f 67       	ori	r25, 0x7F	; 127
     cdc:	80 e8       	ldi	r24, 0x80	; 128
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	08 95       	ret

00000ce4 <__fp_mpack>:
     ce4:	9f 3f       	cpi	r25, 0xFF	; 255
     ce6:	31 f0       	breq	.+12     	; 0xcf4 <__fp_mpack_finite+0xc>

00000ce8 <__fp_mpack_finite>:
     ce8:	91 50       	subi	r25, 0x01	; 1
     cea:	20 f4       	brcc	.+8      	; 0xcf4 <__fp_mpack_finite+0xc>
     cec:	87 95       	ror	r24
     cee:	77 95       	ror	r23
     cf0:	67 95       	ror	r22
     cf2:	b7 95       	ror	r27
     cf4:	88 0f       	add	r24, r24
     cf6:	91 1d       	adc	r25, r1
     cf8:	96 95       	lsr	r25
     cfa:	87 95       	ror	r24
     cfc:	97 f9       	bld	r25, 7
     cfe:	08 95       	ret

00000d00 <__fp_nan>:
     d00:	9f ef       	ldi	r25, 0xFF	; 255
     d02:	80 ec       	ldi	r24, 0xC0	; 192
     d04:	08 95       	ret

00000d06 <__fp_norm2>:
     d06:	91 50       	subi	r25, 0x01	; 1
     d08:	50 40       	sbci	r21, 0x00	; 0
     d0a:	66 0f       	add	r22, r22
     d0c:	77 1f       	adc	r23, r23
     d0e:	88 1f       	adc	r24, r24
     d10:	d2 f7       	brpl	.-12     	; 0xd06 <__fp_norm2>
     d12:	08 95       	ret

00000d14 <__fp_pscA>:
     d14:	00 24       	eor	r0, r0
     d16:	0a 94       	dec	r0
     d18:	16 16       	cp	r1, r22
     d1a:	17 06       	cpc	r1, r23
     d1c:	18 06       	cpc	r1, r24
     d1e:	09 06       	cpc	r0, r25
     d20:	08 95       	ret

00000d22 <__fp_pscB>:
     d22:	00 24       	eor	r0, r0
     d24:	0a 94       	dec	r0
     d26:	12 16       	cp	r1, r18
     d28:	13 06       	cpc	r1, r19
     d2a:	14 06       	cpc	r1, r20
     d2c:	05 06       	cpc	r0, r21
     d2e:	08 95       	ret

00000d30 <__fp_round>:
     d30:	09 2e       	mov	r0, r25
     d32:	03 94       	inc	r0
     d34:	00 0c       	add	r0, r0
     d36:	11 f4       	brne	.+4      	; 0xd3c <__fp_round+0xc>
     d38:	88 23       	and	r24, r24
     d3a:	52 f0       	brmi	.+20     	; 0xd50 <__fp_round+0x20>
     d3c:	bb 0f       	add	r27, r27
     d3e:	40 f4       	brcc	.+16     	; 0xd50 <__fp_round+0x20>
     d40:	bf 2b       	or	r27, r31
     d42:	11 f4       	brne	.+4      	; 0xd48 <__fp_round+0x18>
     d44:	60 ff       	sbrs	r22, 0
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <__fp_round+0x20>
     d48:	6f 5f       	subi	r22, 0xFF	; 255
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	8f 4f       	sbci	r24, 0xFF	; 255
     d4e:	9f 4f       	sbci	r25, 0xFF	; 255
     d50:	08 95       	ret

00000d52 <__mulsi3>:
     d52:	db 01       	movw	r26, r22
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	4d d0       	rcall	.+154    	; 0xdf4 <__muluhisi3>
     d5a:	bf 91       	pop	r27
     d5c:	af 91       	pop	r26
     d5e:	a2 9f       	mul	r26, r18
     d60:	80 0d       	add	r24, r0
     d62:	91 1d       	adc	r25, r1
     d64:	a3 9f       	mul	r26, r19
     d66:	90 0d       	add	r25, r0
     d68:	b2 9f       	mul	r27, r18
     d6a:	90 0d       	add	r25, r0
     d6c:	11 24       	eor	r1, r1
     d6e:	08 95       	ret

00000d70 <__udivmodhi4>:
     d70:	aa 1b       	sub	r26, r26
     d72:	bb 1b       	sub	r27, r27
     d74:	51 e1       	ldi	r21, 0x11	; 17
     d76:	07 c0       	rjmp	.+14     	; 0xd86 <__udivmodhi4_ep>

00000d78 <__udivmodhi4_loop>:
     d78:	aa 1f       	adc	r26, r26
     d7a:	bb 1f       	adc	r27, r27
     d7c:	a6 17       	cp	r26, r22
     d7e:	b7 07       	cpc	r27, r23
     d80:	10 f0       	brcs	.+4      	; 0xd86 <__udivmodhi4_ep>
     d82:	a6 1b       	sub	r26, r22
     d84:	b7 0b       	sbc	r27, r23

00000d86 <__udivmodhi4_ep>:
     d86:	88 1f       	adc	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	5a 95       	dec	r21
     d8c:	a9 f7       	brne	.-22     	; 0xd78 <__udivmodhi4_loop>
     d8e:	80 95       	com	r24
     d90:	90 95       	com	r25
     d92:	bc 01       	movw	r22, r24
     d94:	cd 01       	movw	r24, r26
     d96:	08 95       	ret

00000d98 <__udivmodsi4>:
     d98:	a1 e2       	ldi	r26, 0x21	; 33
     d9a:	1a 2e       	mov	r1, r26
     d9c:	aa 1b       	sub	r26, r26
     d9e:	bb 1b       	sub	r27, r27
     da0:	fd 01       	movw	r30, r26
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <__udivmodsi4_ep>

00000da4 <__udivmodsi4_loop>:
     da4:	aa 1f       	adc	r26, r26
     da6:	bb 1f       	adc	r27, r27
     da8:	ee 1f       	adc	r30, r30
     daa:	ff 1f       	adc	r31, r31
     dac:	a2 17       	cp	r26, r18
     dae:	b3 07       	cpc	r27, r19
     db0:	e4 07       	cpc	r30, r20
     db2:	f5 07       	cpc	r31, r21
     db4:	20 f0       	brcs	.+8      	; 0xdbe <__udivmodsi4_ep>
     db6:	a2 1b       	sub	r26, r18
     db8:	b3 0b       	sbc	r27, r19
     dba:	e4 0b       	sbc	r30, r20
     dbc:	f5 0b       	sbc	r31, r21

00000dbe <__udivmodsi4_ep>:
     dbe:	66 1f       	adc	r22, r22
     dc0:	77 1f       	adc	r23, r23
     dc2:	88 1f       	adc	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	1a 94       	dec	r1
     dc8:	69 f7       	brne	.-38     	; 0xda4 <__udivmodsi4_loop>
     dca:	60 95       	com	r22
     dcc:	70 95       	com	r23
     dce:	80 95       	com	r24
     dd0:	90 95       	com	r25
     dd2:	9b 01       	movw	r18, r22
     dd4:	ac 01       	movw	r20, r24
     dd6:	bd 01       	movw	r22, r26
     dd8:	cf 01       	movw	r24, r30
     dda:	08 95       	ret

00000ddc <__umulhisi3>:
     ddc:	a2 9f       	mul	r26, r18
     dde:	b0 01       	movw	r22, r0
     de0:	b3 9f       	mul	r27, r19
     de2:	c0 01       	movw	r24, r0
     de4:	a3 9f       	mul	r26, r19
     de6:	01 d0       	rcall	.+2      	; 0xdea <__umulhisi3+0xe>
     de8:	b2 9f       	mul	r27, r18
     dea:	70 0d       	add	r23, r0
     dec:	81 1d       	adc	r24, r1
     dee:	11 24       	eor	r1, r1
     df0:	91 1d       	adc	r25, r1
     df2:	08 95       	ret

00000df4 <__muluhisi3>:
     df4:	f3 df       	rcall	.-26     	; 0xddc <__umulhisi3>
     df6:	a5 9f       	mul	r26, r21
     df8:	90 0d       	add	r25, r0
     dfa:	b4 9f       	mul	r27, r20
     dfc:	90 0d       	add	r25, r0
     dfe:	a4 9f       	mul	r26, r20
     e00:	80 0d       	add	r24, r0
     e02:	91 1d       	adc	r25, r1
     e04:	11 24       	eor	r1, r1
     e06:	08 95       	ret

00000e08 <__muldi3>:
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	1f 93       	push	r17
     e0e:	0f 93       	push	r16
     e10:	9a 9d       	mul	r25, r10
     e12:	f0 2d       	mov	r31, r0
     e14:	21 9f       	mul	r18, r17
     e16:	f0 0d       	add	r31, r0
     e18:	8b 9d       	mul	r24, r11
     e1a:	f0 0d       	add	r31, r0
     e1c:	8a 9d       	mul	r24, r10
     e1e:	e0 2d       	mov	r30, r0
     e20:	f1 0d       	add	r31, r1
     e22:	03 9f       	mul	r16, r19
     e24:	f0 0d       	add	r31, r0
     e26:	02 9f       	mul	r16, r18
     e28:	e0 0d       	add	r30, r0
     e2a:	f1 1d       	adc	r31, r1
     e2c:	4e 9d       	mul	r20, r14
     e2e:	e0 0d       	add	r30, r0
     e30:	f1 1d       	adc	r31, r1
     e32:	5e 9d       	mul	r21, r14
     e34:	f0 0d       	add	r31, r0
     e36:	4f 9d       	mul	r20, r15
     e38:	f0 0d       	add	r31, r0
     e3a:	7f 93       	push	r23
     e3c:	6f 93       	push	r22
     e3e:	bf 92       	push	r11
     e40:	af 92       	push	r10
     e42:	5f 93       	push	r21
     e44:	4f 93       	push	r20
     e46:	d5 01       	movw	r26, r10
     e48:	c9 df       	rcall	.-110    	; 0xddc <__umulhisi3>
     e4a:	8b 01       	movw	r16, r22
     e4c:	ac 01       	movw	r20, r24
     e4e:	d7 01       	movw	r26, r14
     e50:	c5 df       	rcall	.-118    	; 0xddc <__umulhisi3>
     e52:	eb 01       	movw	r28, r22
     e54:	e8 0f       	add	r30, r24
     e56:	f9 1f       	adc	r31, r25
     e58:	d6 01       	movw	r26, r12
     e5a:	1f d0       	rcall	.+62     	; 0xe9a <__muldi3_6>
     e5c:	2f 91       	pop	r18
     e5e:	3f 91       	pop	r19
     e60:	d6 01       	movw	r26, r12
     e62:	bc df       	rcall	.-136    	; 0xddc <__umulhisi3>
     e64:	c6 0f       	add	r28, r22
     e66:	d7 1f       	adc	r29, r23
     e68:	e8 1f       	adc	r30, r24
     e6a:	f9 1f       	adc	r31, r25
     e6c:	af 91       	pop	r26
     e6e:	bf 91       	pop	r27
     e70:	14 d0       	rcall	.+40     	; 0xe9a <__muldi3_6>
     e72:	2f 91       	pop	r18
     e74:	3f 91       	pop	r19
     e76:	b2 df       	rcall	.-156    	; 0xddc <__umulhisi3>
     e78:	c6 0f       	add	r28, r22
     e7a:	d7 1f       	adc	r29, r23
     e7c:	e8 1f       	adc	r30, r24
     e7e:	f9 1f       	adc	r31, r25
     e80:	d6 01       	movw	r26, r12
     e82:	ac df       	rcall	.-168    	; 0xddc <__umulhisi3>
     e84:	e6 0f       	add	r30, r22
     e86:	f7 1f       	adc	r31, r23
     e88:	98 01       	movw	r18, r16
     e8a:	be 01       	movw	r22, r28
     e8c:	cf 01       	movw	r24, r30
     e8e:	11 24       	eor	r1, r1
     e90:	0f 91       	pop	r16
     e92:	1f 91       	pop	r17
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <__muldi3_6>:
     e9a:	a0 df       	rcall	.-192    	; 0xddc <__umulhisi3>
     e9c:	46 0f       	add	r20, r22
     e9e:	57 1f       	adc	r21, r23
     ea0:	c8 1f       	adc	r28, r24
     ea2:	d9 1f       	adc	r29, r25
     ea4:	08 f4       	brcc	.+2      	; 0xea8 <__muldi3_6+0xe>
     ea6:	31 96       	adiw	r30, 0x01	; 1
     ea8:	08 95       	ret

00000eaa <__umoddi3>:
     eaa:	68 94       	set
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <__udivdi3_umoddi3>

00000eae <__udivdi3>:
     eae:	e8 94       	clt

00000eb0 <__udivdi3_umoddi3>:
     eb0:	8f 92       	push	r8
     eb2:	9f 92       	push	r9
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	05 d0       	rcall	.+10     	; 0xec4 <__udivmod64>
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	9f 90       	pop	r9
     ec0:	8f 90       	pop	r8
     ec2:	08 95       	ret

00000ec4 <__udivmod64>:
     ec4:	88 24       	eor	r8, r8
     ec6:	99 24       	eor	r9, r9
     ec8:	f4 01       	movw	r30, r8
     eca:	e4 01       	movw	r28, r8
     ecc:	b0 e4       	ldi	r27, 0x40	; 64
     ece:	1b 2e       	mov	r1, r27
     ed0:	d4 01       	movw	r26, r8
     ed2:	9d 15       	cp	r25, r13
     ed4:	8e 04       	cpc	r8, r14
     ed6:	9f 04       	cpc	r9, r15
     ed8:	e0 07       	cpc	r30, r16
     eda:	f1 07       	cpc	r31, r17
     edc:	38 f4       	brcc	.+14     	; 0xeec <__udivmod64+0x28>
     ede:	fc 01       	movw	r30, r24
     ee0:	4b 01       	movw	r8, r22
     ee2:	ca 01       	movw	r24, r20
     ee4:	b9 01       	movw	r22, r18
     ee6:	ad 01       	movw	r20, r26
     ee8:	9e 01       	movw	r18, r28
     eea:	16 94       	lsr	r1
     eec:	22 0f       	add	r18, r18
     eee:	33 1f       	adc	r19, r19
     ef0:	44 1f       	adc	r20, r20
     ef2:	55 1f       	adc	r21, r21
     ef4:	66 1f       	adc	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	88 1f       	adc	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	88 1c       	adc	r8, r8
     efe:	99 1c       	adc	r9, r9
     f00:	ee 1f       	adc	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	cc 1f       	adc	r28, r28
     f06:	dd 1f       	adc	r29, r29
     f08:	aa 1f       	adc	r26, r26
     f0a:	bb 1f       	adc	r27, r27
     f0c:	8a 14       	cp	r8, r10
     f0e:	9b 04       	cpc	r9, r11
     f10:	ec 05       	cpc	r30, r12
     f12:	fd 05       	cpc	r31, r13
     f14:	ce 05       	cpc	r28, r14
     f16:	df 05       	cpc	r29, r15
     f18:	a0 07       	cpc	r26, r16
     f1a:	b1 07       	cpc	r27, r17
     f1c:	48 f0       	brcs	.+18     	; 0xf30 <__udivmod64+0x6c>
     f1e:	8a 18       	sub	r8, r10
     f20:	9b 08       	sbc	r9, r11
     f22:	ec 09       	sbc	r30, r12
     f24:	fd 09       	sbc	r31, r13
     f26:	ce 09       	sbc	r28, r14
     f28:	df 09       	sbc	r29, r15
     f2a:	a0 0b       	sbc	r26, r16
     f2c:	b1 0b       	sbc	r27, r17
     f2e:	21 60       	ori	r18, 0x01	; 1
     f30:	1a 94       	dec	r1
     f32:	e1 f6       	brne	.-72     	; 0xeec <__udivmod64+0x28>
     f34:	2e f4       	brtc	.+10     	; 0xf40 <__udivmod64+0x7c>
     f36:	94 01       	movw	r18, r8
     f38:	af 01       	movw	r20, r30
     f3a:	be 01       	movw	r22, r28
     f3c:	cd 01       	movw	r24, r26
     f3e:	00 0c       	add	r0, r0
     f40:	08 95       	ret

00000f42 <__ashrdi3>:
     f42:	97 fb       	bst	r25, 7
     f44:	10 f8       	bld	r1, 0

00000f46 <__lshrdi3>:
     f46:	16 94       	lsr	r1
     f48:	00 08       	sbc	r0, r0
     f4a:	0f 93       	push	r16
     f4c:	08 30       	cpi	r16, 0x08	; 8
     f4e:	98 f0       	brcs	.+38     	; 0xf76 <__lshrdi3+0x30>
     f50:	08 50       	subi	r16, 0x08	; 8
     f52:	23 2f       	mov	r18, r19
     f54:	34 2f       	mov	r19, r20
     f56:	45 2f       	mov	r20, r21
     f58:	56 2f       	mov	r21, r22
     f5a:	67 2f       	mov	r22, r23
     f5c:	78 2f       	mov	r23, r24
     f5e:	89 2f       	mov	r24, r25
     f60:	90 2d       	mov	r25, r0
     f62:	f4 cf       	rjmp	.-24     	; 0xf4c <__lshrdi3+0x6>
     f64:	05 94       	asr	r0
     f66:	97 95       	ror	r25
     f68:	87 95       	ror	r24
     f6a:	77 95       	ror	r23
     f6c:	67 95       	ror	r22
     f6e:	57 95       	ror	r21
     f70:	47 95       	ror	r20
     f72:	37 95       	ror	r19
     f74:	27 95       	ror	r18
     f76:	0a 95       	dec	r16
     f78:	aa f7       	brpl	.-22     	; 0xf64 <__lshrdi3+0x1e>
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <__adddi3>:
     f7e:	2a 0d       	add	r18, r10
     f80:	3b 1d       	adc	r19, r11
     f82:	4c 1d       	adc	r20, r12
     f84:	5d 1d       	adc	r21, r13
     f86:	6e 1d       	adc	r22, r14
     f88:	7f 1d       	adc	r23, r15
     f8a:	80 1f       	adc	r24, r16
     f8c:	91 1f       	adc	r25, r17
     f8e:	08 95       	ret

00000f90 <calloc>:
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	86 9f       	mul	r24, r22
     f9a:	80 01       	movw	r16, r0
     f9c:	87 9f       	mul	r24, r23
     f9e:	10 0d       	add	r17, r0
     fa0:	96 9f       	mul	r25, r22
     fa2:	10 0d       	add	r17, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	c8 01       	movw	r24, r16
     fa8:	0d d0       	rcall	.+26     	; 0xfc4 <malloc>
     faa:	ec 01       	movw	r28, r24
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	21 f0       	breq	.+8      	; 0xfb8 <calloc+0x28>
     fb0:	a8 01       	movw	r20, r16
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	ef d1       	rcall	.+990    	; 0x1396 <memset>
     fb8:	ce 01       	movw	r24, r28
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	08 95       	ret

00000fc4 <malloc>:
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	91 05       	cpc	r25, r1
     fd0:	10 f4       	brcc	.+4      	; 0xfd6 <malloc+0x12>
     fd2:	82 e0       	ldi	r24, 0x02	; 2
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <__flp>
     fda:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <__flp+0x1>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	a0 e0       	ldi	r26, 0x00	; 0
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	30 97       	sbiw	r30, 0x00	; 0
     fe8:	19 f1       	breq	.+70     	; 0x1030 <malloc+0x6c>
     fea:	40 81       	ld	r20, Z
     fec:	51 81       	ldd	r21, Z+1	; 0x01
     fee:	02 81       	ldd	r16, Z+2	; 0x02
     ff0:	13 81       	ldd	r17, Z+3	; 0x03
     ff2:	48 17       	cp	r20, r24
     ff4:	59 07       	cpc	r21, r25
     ff6:	c8 f0       	brcs	.+50     	; 0x102a <malloc+0x66>
     ff8:	84 17       	cp	r24, r20
     ffa:	95 07       	cpc	r25, r21
     ffc:	69 f4       	brne	.+26     	; 0x1018 <malloc+0x54>
     ffe:	10 97       	sbiw	r26, 0x00	; 0
    1000:	31 f0       	breq	.+12     	; 0x100e <malloc+0x4a>
    1002:	12 96       	adiw	r26, 0x02	; 2
    1004:	0c 93       	st	X, r16
    1006:	12 97       	sbiw	r26, 0x02	; 2
    1008:	13 96       	adiw	r26, 0x03	; 3
    100a:	1c 93       	st	X, r17
    100c:	27 c0       	rjmp	.+78     	; 0x105c <malloc+0x98>
    100e:	00 93 5f 02 	sts	0x025F, r16	; 0x80025f <__flp>
    1012:	10 93 60 02 	sts	0x0260, r17	; 0x800260 <__flp+0x1>
    1016:	22 c0       	rjmp	.+68     	; 0x105c <malloc+0x98>
    1018:	21 15       	cp	r18, r1
    101a:	31 05       	cpc	r19, r1
    101c:	19 f0       	breq	.+6      	; 0x1024 <malloc+0x60>
    101e:	42 17       	cp	r20, r18
    1020:	53 07       	cpc	r21, r19
    1022:	18 f4       	brcc	.+6      	; 0x102a <malloc+0x66>
    1024:	9a 01       	movw	r18, r20
    1026:	bd 01       	movw	r22, r26
    1028:	ef 01       	movw	r28, r30
    102a:	df 01       	movw	r26, r30
    102c:	f8 01       	movw	r30, r16
    102e:	db cf       	rjmp	.-74     	; 0xfe6 <malloc+0x22>
    1030:	21 15       	cp	r18, r1
    1032:	31 05       	cpc	r19, r1
    1034:	f9 f0       	breq	.+62     	; 0x1074 <malloc+0xb0>
    1036:	28 1b       	sub	r18, r24
    1038:	39 0b       	sbc	r19, r25
    103a:	24 30       	cpi	r18, 0x04	; 4
    103c:	31 05       	cpc	r19, r1
    103e:	80 f4       	brcc	.+32     	; 0x1060 <malloc+0x9c>
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	9b 81       	ldd	r25, Y+3	; 0x03
    1044:	61 15       	cp	r22, r1
    1046:	71 05       	cpc	r23, r1
    1048:	21 f0       	breq	.+8      	; 0x1052 <malloc+0x8e>
    104a:	fb 01       	movw	r30, r22
    104c:	93 83       	std	Z+3, r25	; 0x03
    104e:	82 83       	std	Z+2, r24	; 0x02
    1050:	04 c0       	rjmp	.+8      	; 0x105a <malloc+0x96>
    1052:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <__flp+0x1>
    1056:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <__flp>
    105a:	fe 01       	movw	r30, r28
    105c:	32 96       	adiw	r30, 0x02	; 2
    105e:	44 c0       	rjmp	.+136    	; 0x10e8 <malloc+0x124>
    1060:	fe 01       	movw	r30, r28
    1062:	e2 0f       	add	r30, r18
    1064:	f3 1f       	adc	r31, r19
    1066:	81 93       	st	Z+, r24
    1068:	91 93       	st	Z+, r25
    106a:	22 50       	subi	r18, 0x02	; 2
    106c:	31 09       	sbc	r19, r1
    106e:	39 83       	std	Y+1, r19	; 0x01
    1070:	28 83       	st	Y, r18
    1072:	3a c0       	rjmp	.+116    	; 0x10e8 <malloc+0x124>
    1074:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <__brkval>
    1078:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <__brkval+0x1>
    107c:	23 2b       	or	r18, r19
    107e:	41 f4       	brne	.+16     	; 0x1090 <malloc+0xcc>
    1080:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1084:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1088:	30 93 5e 02 	sts	0x025E, r19	; 0x80025e <__brkval+0x1>
    108c:	20 93 5d 02 	sts	0x025D, r18	; 0x80025d <__brkval>
    1090:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    1094:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    1098:	21 15       	cp	r18, r1
    109a:	31 05       	cpc	r19, r1
    109c:	41 f4       	brne	.+16     	; 0x10ae <malloc+0xea>
    109e:	2d b7       	in	r18, 0x3d	; 61
    10a0:	3e b7       	in	r19, 0x3e	; 62
    10a2:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    10a6:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    10aa:	24 1b       	sub	r18, r20
    10ac:	35 0b       	sbc	r19, r21
    10ae:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <__brkval>
    10b2:	f0 91 5e 02 	lds	r31, 0x025E	; 0x80025e <__brkval+0x1>
    10b6:	e2 17       	cp	r30, r18
    10b8:	f3 07       	cpc	r31, r19
    10ba:	a0 f4       	brcc	.+40     	; 0x10e4 <malloc+0x120>
    10bc:	2e 1b       	sub	r18, r30
    10be:	3f 0b       	sbc	r19, r31
    10c0:	28 17       	cp	r18, r24
    10c2:	39 07       	cpc	r19, r25
    10c4:	78 f0       	brcs	.+30     	; 0x10e4 <malloc+0x120>
    10c6:	ac 01       	movw	r20, r24
    10c8:	4e 5f       	subi	r20, 0xFE	; 254
    10ca:	5f 4f       	sbci	r21, 0xFF	; 255
    10cc:	24 17       	cp	r18, r20
    10ce:	35 07       	cpc	r19, r21
    10d0:	48 f0       	brcs	.+18     	; 0x10e4 <malloc+0x120>
    10d2:	4e 0f       	add	r20, r30
    10d4:	5f 1f       	adc	r21, r31
    10d6:	50 93 5e 02 	sts	0x025E, r21	; 0x80025e <__brkval+0x1>
    10da:	40 93 5d 02 	sts	0x025D, r20	; 0x80025d <__brkval>
    10de:	81 93       	st	Z+, r24
    10e0:	91 93       	st	Z+, r25
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <malloc+0x124>
    10e4:	e0 e0       	ldi	r30, 0x00	; 0
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	cf 01       	movw	r24, r30
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	08 95       	ret

000010f4 <free>:
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	09 f4       	brne	.+2      	; 0x10fe <free+0xa>
    10fc:	81 c0       	rjmp	.+258    	; 0x1200 <free+0x10c>
    10fe:	fc 01       	movw	r30, r24
    1100:	32 97       	sbiw	r30, 0x02	; 2
    1102:	13 82       	std	Z+3, r1	; 0x03
    1104:	12 82       	std	Z+2, r1	; 0x02
    1106:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <__flp>
    110a:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <__flp+0x1>
    110e:	10 97       	sbiw	r26, 0x00	; 0
    1110:	81 f4       	brne	.+32     	; 0x1132 <free+0x3e>
    1112:	20 81       	ld	r18, Z
    1114:	31 81       	ldd	r19, Z+1	; 0x01
    1116:	82 0f       	add	r24, r18
    1118:	93 1f       	adc	r25, r19
    111a:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <__brkval>
    111e:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <__brkval+0x1>
    1122:	28 17       	cp	r18, r24
    1124:	39 07       	cpc	r19, r25
    1126:	51 f5       	brne	.+84     	; 0x117c <free+0x88>
    1128:	f0 93 5e 02 	sts	0x025E, r31	; 0x80025e <__brkval+0x1>
    112c:	e0 93 5d 02 	sts	0x025D, r30	; 0x80025d <__brkval>
    1130:	67 c0       	rjmp	.+206    	; 0x1200 <free+0x10c>
    1132:	ed 01       	movw	r28, r26
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	ce 17       	cp	r28, r30
    113a:	df 07       	cpc	r29, r31
    113c:	40 f4       	brcc	.+16     	; 0x114e <free+0x5a>
    113e:	4a 81       	ldd	r20, Y+2	; 0x02
    1140:	5b 81       	ldd	r21, Y+3	; 0x03
    1142:	9e 01       	movw	r18, r28
    1144:	41 15       	cp	r20, r1
    1146:	51 05       	cpc	r21, r1
    1148:	f1 f0       	breq	.+60     	; 0x1186 <free+0x92>
    114a:	ea 01       	movw	r28, r20
    114c:	f5 cf       	rjmp	.-22     	; 0x1138 <free+0x44>
    114e:	d3 83       	std	Z+3, r29	; 0x03
    1150:	c2 83       	std	Z+2, r28	; 0x02
    1152:	40 81       	ld	r20, Z
    1154:	51 81       	ldd	r21, Z+1	; 0x01
    1156:	84 0f       	add	r24, r20
    1158:	95 1f       	adc	r25, r21
    115a:	c8 17       	cp	r28, r24
    115c:	d9 07       	cpc	r29, r25
    115e:	59 f4       	brne	.+22     	; 0x1176 <free+0x82>
    1160:	88 81       	ld	r24, Y
    1162:	99 81       	ldd	r25, Y+1	; 0x01
    1164:	84 0f       	add	r24, r20
    1166:	95 1f       	adc	r25, r21
    1168:	02 96       	adiw	r24, 0x02	; 2
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	80 83       	st	Z, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	9b 81       	ldd	r25, Y+3	; 0x03
    1172:	93 83       	std	Z+3, r25	; 0x03
    1174:	82 83       	std	Z+2, r24	; 0x02
    1176:	21 15       	cp	r18, r1
    1178:	31 05       	cpc	r19, r1
    117a:	29 f4       	brne	.+10     	; 0x1186 <free+0x92>
    117c:	f0 93 60 02 	sts	0x0260, r31	; 0x800260 <__flp+0x1>
    1180:	e0 93 5f 02 	sts	0x025F, r30	; 0x80025f <__flp>
    1184:	3d c0       	rjmp	.+122    	; 0x1200 <free+0x10c>
    1186:	e9 01       	movw	r28, r18
    1188:	fb 83       	std	Y+3, r31	; 0x03
    118a:	ea 83       	std	Y+2, r30	; 0x02
    118c:	49 91       	ld	r20, Y+
    118e:	59 91       	ld	r21, Y+
    1190:	c4 0f       	add	r28, r20
    1192:	d5 1f       	adc	r29, r21
    1194:	ec 17       	cp	r30, r28
    1196:	fd 07       	cpc	r31, r29
    1198:	61 f4       	brne	.+24     	; 0x11b2 <free+0xbe>
    119a:	80 81       	ld	r24, Z
    119c:	91 81       	ldd	r25, Z+1	; 0x01
    119e:	84 0f       	add	r24, r20
    11a0:	95 1f       	adc	r25, r21
    11a2:	02 96       	adiw	r24, 0x02	; 2
    11a4:	e9 01       	movw	r28, r18
    11a6:	99 83       	std	Y+1, r25	; 0x01
    11a8:	88 83       	st	Y, r24
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	93 81       	ldd	r25, Z+3	; 0x03
    11ae:	9b 83       	std	Y+3, r25	; 0x03
    11b0:	8a 83       	std	Y+2, r24	; 0x02
    11b2:	e0 e0       	ldi	r30, 0x00	; 0
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	12 96       	adiw	r26, 0x02	; 2
    11b8:	8d 91       	ld	r24, X+
    11ba:	9c 91       	ld	r25, X
    11bc:	13 97       	sbiw	r26, 0x03	; 3
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	19 f0       	breq	.+6      	; 0x11c8 <free+0xd4>
    11c2:	fd 01       	movw	r30, r26
    11c4:	dc 01       	movw	r26, r24
    11c6:	f7 cf       	rjmp	.-18     	; 0x11b6 <free+0xc2>
    11c8:	8d 91       	ld	r24, X+
    11ca:	9c 91       	ld	r25, X
    11cc:	11 97       	sbiw	r26, 0x01	; 1
    11ce:	9d 01       	movw	r18, r26
    11d0:	2e 5f       	subi	r18, 0xFE	; 254
    11d2:	3f 4f       	sbci	r19, 0xFF	; 255
    11d4:	82 0f       	add	r24, r18
    11d6:	93 1f       	adc	r25, r19
    11d8:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <__brkval>
    11dc:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <__brkval+0x1>
    11e0:	28 17       	cp	r18, r24
    11e2:	39 07       	cpc	r19, r25
    11e4:	69 f4       	brne	.+26     	; 0x1200 <free+0x10c>
    11e6:	30 97       	sbiw	r30, 0x00	; 0
    11e8:	29 f4       	brne	.+10     	; 0x11f4 <free+0x100>
    11ea:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <__flp+0x1>
    11ee:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <__flp>
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <free+0x104>
    11f4:	13 82       	std	Z+3, r1	; 0x03
    11f6:	12 82       	std	Z+2, r1	; 0x02
    11f8:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <__brkval+0x1>
    11fc:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <__brkval>
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	08 95       	ret

00001206 <realloc>:
    1206:	a0 e0       	ldi	r26, 0x00	; 0
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e8 e0       	ldi	r30, 0x08	; 8
    120c:	f9 e0       	ldi	r31, 0x09	; 9
    120e:	7a c3       	rjmp	.+1780   	; 0x1904 <__prologue_saves__+0x8>
    1210:	ec 01       	movw	r28, r24
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	19 f4       	brne	.+6      	; 0x121c <realloc+0x16>
    1216:	cb 01       	movw	r24, r22
    1218:	d5 de       	rcall	.-598    	; 0xfc4 <malloc>
    121a:	b0 c0       	rjmp	.+352    	; 0x137c <realloc+0x176>
    121c:	fc 01       	movw	r30, r24
    121e:	e6 0f       	add	r30, r22
    1220:	f7 1f       	adc	r31, r23
    1222:	9c 01       	movw	r18, r24
    1224:	22 50       	subi	r18, 0x02	; 2
    1226:	31 09       	sbc	r19, r1
    1228:	e2 17       	cp	r30, r18
    122a:	f3 07       	cpc	r31, r19
    122c:	08 f4       	brcc	.+2      	; 0x1230 <realloc+0x2a>
    122e:	a4 c0       	rjmp	.+328    	; 0x1378 <realloc+0x172>
    1230:	d9 01       	movw	r26, r18
    1232:	0d 91       	ld	r16, X+
    1234:	1c 91       	ld	r17, X
    1236:	11 97       	sbiw	r26, 0x01	; 1
    1238:	06 17       	cp	r16, r22
    123a:	17 07       	cpc	r17, r23
    123c:	a8 f0       	brcs	.+42     	; 0x1268 <realloc+0x62>
    123e:	05 30       	cpi	r16, 0x05	; 5
    1240:	11 05       	cpc	r17, r1
    1242:	08 f4       	brcc	.+2      	; 0x1246 <realloc+0x40>
    1244:	97 c0       	rjmp	.+302    	; 0x1374 <realloc+0x16e>
    1246:	c8 01       	movw	r24, r16
    1248:	04 97       	sbiw	r24, 0x04	; 4
    124a:	86 17       	cp	r24, r22
    124c:	97 07       	cpc	r25, r23
    124e:	08 f4       	brcc	.+2      	; 0x1252 <realloc+0x4c>
    1250:	91 c0       	rjmp	.+290    	; 0x1374 <realloc+0x16e>
    1252:	02 50       	subi	r16, 0x02	; 2
    1254:	11 09       	sbc	r17, r1
    1256:	06 1b       	sub	r16, r22
    1258:	17 0b       	sbc	r17, r23
    125a:	01 93       	st	Z+, r16
    125c:	11 93       	st	Z+, r17
    125e:	6d 93       	st	X+, r22
    1260:	7c 93       	st	X, r23
    1262:	cf 01       	movw	r24, r30
    1264:	47 df       	rcall	.-370    	; 0x10f4 <free>
    1266:	86 c0       	rjmp	.+268    	; 0x1374 <realloc+0x16e>
    1268:	5b 01       	movw	r10, r22
    126a:	a0 1a       	sub	r10, r16
    126c:	b1 0a       	sbc	r11, r17
    126e:	4c 01       	movw	r8, r24
    1270:	80 0e       	add	r8, r16
    1272:	91 1e       	adc	r9, r17
    1274:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <__flp>
    1278:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <__flp+0x1>
    127c:	61 2c       	mov	r6, r1
    127e:	71 2c       	mov	r7, r1
    1280:	e1 2c       	mov	r14, r1
    1282:	f1 2c       	mov	r15, r1
    1284:	10 97       	sbiw	r26, 0x00	; 0
    1286:	09 f4       	brne	.+2      	; 0x128a <realloc+0x84>
    1288:	46 c0       	rjmp	.+140    	; 0x1316 <realloc+0x110>
    128a:	8d 91       	ld	r24, X+
    128c:	9c 91       	ld	r25, X
    128e:	11 97       	sbiw	r26, 0x01	; 1
    1290:	a8 15       	cp	r26, r8
    1292:	b9 05       	cpc	r27, r9
    1294:	b1 f5       	brne	.+108    	; 0x1302 <realloc+0xfc>
    1296:	6c 01       	movw	r12, r24
    1298:	42 e0       	ldi	r20, 0x02	; 2
    129a:	c4 0e       	add	r12, r20
    129c:	d1 1c       	adc	r13, r1
    129e:	ca 14       	cp	r12, r10
    12a0:	db 04       	cpc	r13, r11
    12a2:	78 f1       	brcs	.+94     	; 0x1302 <realloc+0xfc>
    12a4:	4c 01       	movw	r8, r24
    12a6:	8a 18       	sub	r8, r10
    12a8:	9b 08       	sbc	r9, r11
    12aa:	64 01       	movw	r12, r8
    12ac:	42 e0       	ldi	r20, 0x02	; 2
    12ae:	c4 0e       	add	r12, r20
    12b0:	d1 1c       	adc	r13, r1
    12b2:	12 96       	adiw	r26, 0x02	; 2
    12b4:	bc 90       	ld	r11, X
    12b6:	12 97       	sbiw	r26, 0x02	; 2
    12b8:	13 96       	adiw	r26, 0x03	; 3
    12ba:	ac 91       	ld	r26, X
    12bc:	b5 e0       	ldi	r27, 0x05	; 5
    12be:	cb 16       	cp	r12, r27
    12c0:	d1 04       	cpc	r13, r1
    12c2:	40 f0       	brcs	.+16     	; 0x12d4 <realloc+0xce>
    12c4:	b2 82       	std	Z+2, r11	; 0x02
    12c6:	a3 83       	std	Z+3, r26	; 0x03
    12c8:	91 82       	std	Z+1, r9	; 0x01
    12ca:	80 82       	st	Z, r8
    12cc:	d9 01       	movw	r26, r18
    12ce:	6d 93       	st	X+, r22
    12d0:	7c 93       	st	X, r23
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <realloc+0xe0>
    12d4:	0e 5f       	subi	r16, 0xFE	; 254
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	80 0f       	add	r24, r16
    12da:	91 1f       	adc	r25, r17
    12dc:	f9 01       	movw	r30, r18
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	80 83       	st	Z, r24
    12e2:	eb 2d       	mov	r30, r11
    12e4:	fa 2f       	mov	r31, r26
    12e6:	e1 14       	cp	r14, r1
    12e8:	f1 04       	cpc	r15, r1
    12ea:	31 f0       	breq	.+12     	; 0x12f8 <realloc+0xf2>
    12ec:	d7 01       	movw	r26, r14
    12ee:	13 96       	adiw	r26, 0x03	; 3
    12f0:	fc 93       	st	X, r31
    12f2:	ee 93       	st	-X, r30
    12f4:	12 97       	sbiw	r26, 0x02	; 2
    12f6:	3e c0       	rjmp	.+124    	; 0x1374 <realloc+0x16e>
    12f8:	f0 93 60 02 	sts	0x0260, r31	; 0x800260 <__flp+0x1>
    12fc:	e0 93 5f 02 	sts	0x025F, r30	; 0x80025f <__flp>
    1300:	39 c0       	rjmp	.+114    	; 0x1374 <realloc+0x16e>
    1302:	68 16       	cp	r6, r24
    1304:	79 06       	cpc	r7, r25
    1306:	08 f4       	brcc	.+2      	; 0x130a <realloc+0x104>
    1308:	3c 01       	movw	r6, r24
    130a:	7d 01       	movw	r14, r26
    130c:	12 96       	adiw	r26, 0x02	; 2
    130e:	0d 90       	ld	r0, X+
    1310:	bc 91       	ld	r27, X
    1312:	a0 2d       	mov	r26, r0
    1314:	b7 cf       	rjmp	.-146    	; 0x1284 <realloc+0x7e>
    1316:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <__brkval>
    131a:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <__brkval+0x1>
    131e:	88 16       	cp	r8, r24
    1320:	99 06       	cpc	r9, r25
    1322:	e1 f4       	brne	.+56     	; 0x135c <realloc+0x156>
    1324:	66 16       	cp	r6, r22
    1326:	77 06       	cpc	r7, r23
    1328:	c8 f4       	brcc	.+50     	; 0x135c <realloc+0x156>
    132a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    132e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	41 f4       	brne	.+16     	; 0x1346 <realloc+0x140>
    1336:	8d b7       	in	r24, 0x3d	; 61
    1338:	9e b7       	in	r25, 0x3e	; 62
    133a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    133e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1342:	84 1b       	sub	r24, r20
    1344:	95 0b       	sbc	r25, r21
    1346:	e8 17       	cp	r30, r24
    1348:	f9 07       	cpc	r31, r25
    134a:	b0 f4       	brcc	.+44     	; 0x1378 <realloc+0x172>
    134c:	f0 93 5e 02 	sts	0x025E, r31	; 0x80025e <__brkval+0x1>
    1350:	e0 93 5d 02 	sts	0x025D, r30	; 0x80025d <__brkval>
    1354:	f9 01       	movw	r30, r18
    1356:	71 83       	std	Z+1, r23	; 0x01
    1358:	60 83       	st	Z, r22
    135a:	0c c0       	rjmp	.+24     	; 0x1374 <realloc+0x16e>
    135c:	cb 01       	movw	r24, r22
    135e:	32 de       	rcall	.-924    	; 0xfc4 <malloc>
    1360:	7c 01       	movw	r14, r24
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	49 f0       	breq	.+18     	; 0x1378 <realloc+0x172>
    1366:	a8 01       	movw	r20, r16
    1368:	be 01       	movw	r22, r28
    136a:	0c d0       	rcall	.+24     	; 0x1384 <memcpy>
    136c:	ce 01       	movw	r24, r28
    136e:	c2 de       	rcall	.-636    	; 0x10f4 <free>
    1370:	c7 01       	movw	r24, r14
    1372:	04 c0       	rjmp	.+8      	; 0x137c <realloc+0x176>
    1374:	ce 01       	movw	r24, r28
    1376:	02 c0       	rjmp	.+4      	; 0x137c <realloc+0x176>
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	ee e0       	ldi	r30, 0x0E	; 14
    1382:	dc c2       	rjmp	.+1464   	; 0x193c <__epilogue_restores__+0x8>

00001384 <memcpy>:
    1384:	fb 01       	movw	r30, r22
    1386:	dc 01       	movw	r26, r24
    1388:	02 c0       	rjmp	.+4      	; 0x138e <memcpy+0xa>
    138a:	01 90       	ld	r0, Z+
    138c:	0d 92       	st	X+, r0
    138e:	41 50       	subi	r20, 0x01	; 1
    1390:	50 40       	sbci	r21, 0x00	; 0
    1392:	d8 f7       	brcc	.-10     	; 0x138a <memcpy+0x6>
    1394:	08 95       	ret

00001396 <memset>:
    1396:	dc 01       	movw	r26, r24
    1398:	01 c0       	rjmp	.+2      	; 0x139c <memset+0x6>
    139a:	6d 93       	st	X+, r22
    139c:	41 50       	subi	r20, 0x01	; 1
    139e:	50 40       	sbci	r21, 0x00	; 0
    13a0:	e0 f7       	brcc	.-8      	; 0x139a <memset+0x4>
    13a2:	08 95       	ret

000013a4 <strcat>:
    13a4:	fb 01       	movw	r30, r22
    13a6:	dc 01       	movw	r26, r24
    13a8:	0d 90       	ld	r0, X+
    13aa:	00 20       	and	r0, r0
    13ac:	e9 f7       	brne	.-6      	; 0x13a8 <strcat+0x4>
    13ae:	11 97       	sbiw	r26, 0x01	; 1
    13b0:	01 90       	ld	r0, Z+
    13b2:	0d 92       	st	X+, r0
    13b4:	00 20       	and	r0, r0
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <strcat+0xc>
    13b8:	08 95       	ret

000013ba <sprintf>:
    13ba:	ae e0       	ldi	r26, 0x0E	; 14
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e2 ee       	ldi	r30, 0xE2	; 226
    13c0:	f9 e0       	ldi	r31, 0x09	; 9
    13c2:	aa c2       	rjmp	.+1364   	; 0x1918 <__prologue_saves__+0x1c>
    13c4:	0d 89       	ldd	r16, Y+21	; 0x15
    13c6:	1e 89       	ldd	r17, Y+22	; 0x16
    13c8:	86 e0       	ldi	r24, 0x06	; 6
    13ca:	8c 83       	std	Y+4, r24	; 0x04
    13cc:	1a 83       	std	Y+2, r17	; 0x02
    13ce:	09 83       	std	Y+1, r16	; 0x01
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	9f e7       	ldi	r25, 0x7F	; 127
    13d4:	9e 83       	std	Y+6, r25	; 0x06
    13d6:	8d 83       	std	Y+5, r24	; 0x05
    13d8:	ae 01       	movw	r20, r28
    13da:	47 5e       	subi	r20, 0xE7	; 231
    13dc:	5f 4f       	sbci	r21, 0xFF	; 255
    13de:	6f 89       	ldd	r22, Y+23	; 0x17
    13e0:	78 8d       	ldd	r23, Y+24	; 0x18
    13e2:	ce 01       	movw	r24, r28
    13e4:	01 96       	adiw	r24, 0x01	; 1
    13e6:	08 d0       	rcall	.+16     	; 0x13f8 <vfprintf>
    13e8:	ef 81       	ldd	r30, Y+7	; 0x07
    13ea:	f8 85       	ldd	r31, Y+8	; 0x08
    13ec:	e0 0f       	add	r30, r16
    13ee:	f1 1f       	adc	r31, r17
    13f0:	10 82       	st	Z, r1
    13f2:	2e 96       	adiw	r28, 0x0e	; 14
    13f4:	e4 e0       	ldi	r30, 0x04	; 4
    13f6:	ac c2       	rjmp	.+1368   	; 0x1950 <__epilogue_restores__+0x1c>

000013f8 <vfprintf>:
    13f8:	ab e0       	ldi	r26, 0x0B	; 11
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e1 e0       	ldi	r30, 0x01	; 1
    13fe:	fa e0       	ldi	r31, 0x0A	; 10
    1400:	7d c2       	rjmp	.+1274   	; 0x18fc <__prologue_saves__>
    1402:	6c 01       	movw	r12, r24
    1404:	7b 01       	movw	r14, r22
    1406:	8a 01       	movw	r16, r20
    1408:	fc 01       	movw	r30, r24
    140a:	17 82       	std	Z+7, r1	; 0x07
    140c:	16 82       	std	Z+6, r1	; 0x06
    140e:	83 81       	ldd	r24, Z+3	; 0x03
    1410:	81 ff       	sbrs	r24, 1
    1412:	bf c1       	rjmp	.+894    	; 0x1792 <vfprintf+0x39a>
    1414:	ce 01       	movw	r24, r28
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	3c 01       	movw	r6, r24
    141a:	f6 01       	movw	r30, r12
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	f7 01       	movw	r30, r14
    1420:	93 fd       	sbrc	r25, 3
    1422:	85 91       	lpm	r24, Z+
    1424:	93 ff       	sbrs	r25, 3
    1426:	81 91       	ld	r24, Z+
    1428:	7f 01       	movw	r14, r30
    142a:	88 23       	and	r24, r24
    142c:	09 f4       	brne	.+2      	; 0x1430 <vfprintf+0x38>
    142e:	ad c1       	rjmp	.+858    	; 0x178a <vfprintf+0x392>
    1430:	85 32       	cpi	r24, 0x25	; 37
    1432:	39 f4       	brne	.+14     	; 0x1442 <vfprintf+0x4a>
    1434:	93 fd       	sbrc	r25, 3
    1436:	85 91       	lpm	r24, Z+
    1438:	93 ff       	sbrs	r25, 3
    143a:	81 91       	ld	r24, Z+
    143c:	7f 01       	movw	r14, r30
    143e:	85 32       	cpi	r24, 0x25	; 37
    1440:	21 f4       	brne	.+8      	; 0x144a <vfprintf+0x52>
    1442:	b6 01       	movw	r22, r12
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	c0 d1       	rcall	.+896    	; 0x17c8 <fputc>
    1448:	e8 cf       	rjmp	.-48     	; 0x141a <vfprintf+0x22>
    144a:	91 2c       	mov	r9, r1
    144c:	21 2c       	mov	r2, r1
    144e:	31 2c       	mov	r3, r1
    1450:	ff e1       	ldi	r31, 0x1F	; 31
    1452:	f3 15       	cp	r31, r3
    1454:	d8 f0       	brcs	.+54     	; 0x148c <vfprintf+0x94>
    1456:	8b 32       	cpi	r24, 0x2B	; 43
    1458:	79 f0       	breq	.+30     	; 0x1478 <vfprintf+0x80>
    145a:	38 f4       	brcc	.+14     	; 0x146a <vfprintf+0x72>
    145c:	80 32       	cpi	r24, 0x20	; 32
    145e:	79 f0       	breq	.+30     	; 0x147e <vfprintf+0x86>
    1460:	83 32       	cpi	r24, 0x23	; 35
    1462:	a1 f4       	brne	.+40     	; 0x148c <vfprintf+0x94>
    1464:	23 2d       	mov	r18, r3
    1466:	20 61       	ori	r18, 0x10	; 16
    1468:	1d c0       	rjmp	.+58     	; 0x14a4 <vfprintf+0xac>
    146a:	8d 32       	cpi	r24, 0x2D	; 45
    146c:	61 f0       	breq	.+24     	; 0x1486 <vfprintf+0x8e>
    146e:	80 33       	cpi	r24, 0x30	; 48
    1470:	69 f4       	brne	.+26     	; 0x148c <vfprintf+0x94>
    1472:	23 2d       	mov	r18, r3
    1474:	21 60       	ori	r18, 0x01	; 1
    1476:	16 c0       	rjmp	.+44     	; 0x14a4 <vfprintf+0xac>
    1478:	83 2d       	mov	r24, r3
    147a:	82 60       	ori	r24, 0x02	; 2
    147c:	38 2e       	mov	r3, r24
    147e:	e3 2d       	mov	r30, r3
    1480:	e4 60       	ori	r30, 0x04	; 4
    1482:	3e 2e       	mov	r3, r30
    1484:	2a c0       	rjmp	.+84     	; 0x14da <vfprintf+0xe2>
    1486:	f3 2d       	mov	r31, r3
    1488:	f8 60       	ori	r31, 0x08	; 8
    148a:	1d c0       	rjmp	.+58     	; 0x14c6 <vfprintf+0xce>
    148c:	37 fc       	sbrc	r3, 7
    148e:	2d c0       	rjmp	.+90     	; 0x14ea <vfprintf+0xf2>
    1490:	20 ed       	ldi	r18, 0xD0	; 208
    1492:	28 0f       	add	r18, r24
    1494:	2a 30       	cpi	r18, 0x0A	; 10
    1496:	40 f0       	brcs	.+16     	; 0x14a8 <vfprintf+0xb0>
    1498:	8e 32       	cpi	r24, 0x2E	; 46
    149a:	b9 f4       	brne	.+46     	; 0x14ca <vfprintf+0xd2>
    149c:	36 fc       	sbrc	r3, 6
    149e:	75 c1       	rjmp	.+746    	; 0x178a <vfprintf+0x392>
    14a0:	23 2d       	mov	r18, r3
    14a2:	20 64       	ori	r18, 0x40	; 64
    14a4:	32 2e       	mov	r3, r18
    14a6:	19 c0       	rjmp	.+50     	; 0x14da <vfprintf+0xe2>
    14a8:	36 fe       	sbrs	r3, 6
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <vfprintf+0xc0>
    14ac:	8a e0       	ldi	r24, 0x0A	; 10
    14ae:	98 9e       	mul	r9, r24
    14b0:	20 0d       	add	r18, r0
    14b2:	11 24       	eor	r1, r1
    14b4:	92 2e       	mov	r9, r18
    14b6:	11 c0       	rjmp	.+34     	; 0x14da <vfprintf+0xe2>
    14b8:	ea e0       	ldi	r30, 0x0A	; 10
    14ba:	2e 9e       	mul	r2, r30
    14bc:	20 0d       	add	r18, r0
    14be:	11 24       	eor	r1, r1
    14c0:	22 2e       	mov	r2, r18
    14c2:	f3 2d       	mov	r31, r3
    14c4:	f0 62       	ori	r31, 0x20	; 32
    14c6:	3f 2e       	mov	r3, r31
    14c8:	08 c0       	rjmp	.+16     	; 0x14da <vfprintf+0xe2>
    14ca:	8c 36       	cpi	r24, 0x6C	; 108
    14cc:	21 f4       	brne	.+8      	; 0x14d6 <vfprintf+0xde>
    14ce:	83 2d       	mov	r24, r3
    14d0:	80 68       	ori	r24, 0x80	; 128
    14d2:	38 2e       	mov	r3, r24
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <vfprintf+0xe2>
    14d6:	88 36       	cpi	r24, 0x68	; 104
    14d8:	41 f4       	brne	.+16     	; 0x14ea <vfprintf+0xf2>
    14da:	f7 01       	movw	r30, r14
    14dc:	93 fd       	sbrc	r25, 3
    14de:	85 91       	lpm	r24, Z+
    14e0:	93 ff       	sbrs	r25, 3
    14e2:	81 91       	ld	r24, Z+
    14e4:	7f 01       	movw	r14, r30
    14e6:	81 11       	cpse	r24, r1
    14e8:	b3 cf       	rjmp	.-154    	; 0x1450 <vfprintf+0x58>
    14ea:	98 2f       	mov	r25, r24
    14ec:	9f 7d       	andi	r25, 0xDF	; 223
    14ee:	95 54       	subi	r25, 0x45	; 69
    14f0:	93 30       	cpi	r25, 0x03	; 3
    14f2:	28 f4       	brcc	.+10     	; 0x14fe <vfprintf+0x106>
    14f4:	0c 5f       	subi	r16, 0xFC	; 252
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	9f e3       	ldi	r25, 0x3F	; 63
    14fa:	99 83       	std	Y+1, r25	; 0x01
    14fc:	0d c0       	rjmp	.+26     	; 0x1518 <vfprintf+0x120>
    14fe:	83 36       	cpi	r24, 0x63	; 99
    1500:	31 f0       	breq	.+12     	; 0x150e <vfprintf+0x116>
    1502:	83 37       	cpi	r24, 0x73	; 115
    1504:	71 f0       	breq	.+28     	; 0x1522 <vfprintf+0x12a>
    1506:	83 35       	cpi	r24, 0x53	; 83
    1508:	09 f0       	breq	.+2      	; 0x150c <vfprintf+0x114>
    150a:	55 c0       	rjmp	.+170    	; 0x15b6 <vfprintf+0x1be>
    150c:	20 c0       	rjmp	.+64     	; 0x154e <vfprintf+0x156>
    150e:	f8 01       	movw	r30, r16
    1510:	80 81       	ld	r24, Z
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	0e 5f       	subi	r16, 0xFE	; 254
    1516:	1f 4f       	sbci	r17, 0xFF	; 255
    1518:	88 24       	eor	r8, r8
    151a:	83 94       	inc	r8
    151c:	91 2c       	mov	r9, r1
    151e:	53 01       	movw	r10, r6
    1520:	12 c0       	rjmp	.+36     	; 0x1546 <vfprintf+0x14e>
    1522:	28 01       	movw	r4, r16
    1524:	f2 e0       	ldi	r31, 0x02	; 2
    1526:	4f 0e       	add	r4, r31
    1528:	51 1c       	adc	r5, r1
    152a:	f8 01       	movw	r30, r16
    152c:	a0 80       	ld	r10, Z
    152e:	b1 80       	ldd	r11, Z+1	; 0x01
    1530:	36 fe       	sbrs	r3, 6
    1532:	03 c0       	rjmp	.+6      	; 0x153a <vfprintf+0x142>
    1534:	69 2d       	mov	r22, r9
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	02 c0       	rjmp	.+4      	; 0x153e <vfprintf+0x146>
    153a:	6f ef       	ldi	r22, 0xFF	; 255
    153c:	7f ef       	ldi	r23, 0xFF	; 255
    153e:	c5 01       	movw	r24, r10
    1540:	38 d1       	rcall	.+624    	; 0x17b2 <strnlen>
    1542:	4c 01       	movw	r8, r24
    1544:	82 01       	movw	r16, r4
    1546:	f3 2d       	mov	r31, r3
    1548:	ff 77       	andi	r31, 0x7F	; 127
    154a:	3f 2e       	mov	r3, r31
    154c:	15 c0       	rjmp	.+42     	; 0x1578 <vfprintf+0x180>
    154e:	28 01       	movw	r4, r16
    1550:	22 e0       	ldi	r18, 0x02	; 2
    1552:	42 0e       	add	r4, r18
    1554:	51 1c       	adc	r5, r1
    1556:	f8 01       	movw	r30, r16
    1558:	a0 80       	ld	r10, Z
    155a:	b1 80       	ldd	r11, Z+1	; 0x01
    155c:	36 fe       	sbrs	r3, 6
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <vfprintf+0x16e>
    1560:	69 2d       	mov	r22, r9
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	02 c0       	rjmp	.+4      	; 0x156a <vfprintf+0x172>
    1566:	6f ef       	ldi	r22, 0xFF	; 255
    1568:	7f ef       	ldi	r23, 0xFF	; 255
    156a:	c5 01       	movw	r24, r10
    156c:	17 d1       	rcall	.+558    	; 0x179c <strnlen_P>
    156e:	4c 01       	movw	r8, r24
    1570:	f3 2d       	mov	r31, r3
    1572:	f0 68       	ori	r31, 0x80	; 128
    1574:	3f 2e       	mov	r3, r31
    1576:	82 01       	movw	r16, r4
    1578:	33 fc       	sbrc	r3, 3
    157a:	19 c0       	rjmp	.+50     	; 0x15ae <vfprintf+0x1b6>
    157c:	82 2d       	mov	r24, r2
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	88 16       	cp	r8, r24
    1582:	99 06       	cpc	r9, r25
    1584:	a0 f4       	brcc	.+40     	; 0x15ae <vfprintf+0x1b6>
    1586:	b6 01       	movw	r22, r12
    1588:	80 e2       	ldi	r24, 0x20	; 32
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	1d d1       	rcall	.+570    	; 0x17c8 <fputc>
    158e:	2a 94       	dec	r2
    1590:	f5 cf       	rjmp	.-22     	; 0x157c <vfprintf+0x184>
    1592:	f5 01       	movw	r30, r10
    1594:	37 fc       	sbrc	r3, 7
    1596:	85 91       	lpm	r24, Z+
    1598:	37 fe       	sbrs	r3, 7
    159a:	81 91       	ld	r24, Z+
    159c:	5f 01       	movw	r10, r30
    159e:	b6 01       	movw	r22, r12
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	12 d1       	rcall	.+548    	; 0x17c8 <fputc>
    15a4:	21 10       	cpse	r2, r1
    15a6:	2a 94       	dec	r2
    15a8:	21 e0       	ldi	r18, 0x01	; 1
    15aa:	82 1a       	sub	r8, r18
    15ac:	91 08       	sbc	r9, r1
    15ae:	81 14       	cp	r8, r1
    15b0:	91 04       	cpc	r9, r1
    15b2:	79 f7       	brne	.-34     	; 0x1592 <vfprintf+0x19a>
    15b4:	e1 c0       	rjmp	.+450    	; 0x1778 <vfprintf+0x380>
    15b6:	84 36       	cpi	r24, 0x64	; 100
    15b8:	11 f0       	breq	.+4      	; 0x15be <vfprintf+0x1c6>
    15ba:	89 36       	cpi	r24, 0x69	; 105
    15bc:	39 f5       	brne	.+78     	; 0x160c <vfprintf+0x214>
    15be:	f8 01       	movw	r30, r16
    15c0:	37 fe       	sbrs	r3, 7
    15c2:	07 c0       	rjmp	.+14     	; 0x15d2 <vfprintf+0x1da>
    15c4:	60 81       	ld	r22, Z
    15c6:	71 81       	ldd	r23, Z+1	; 0x01
    15c8:	82 81       	ldd	r24, Z+2	; 0x02
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	0c 5f       	subi	r16, 0xFC	; 252
    15ce:	1f 4f       	sbci	r17, 0xFF	; 255
    15d0:	08 c0       	rjmp	.+16     	; 0x15e2 <vfprintf+0x1ea>
    15d2:	60 81       	ld	r22, Z
    15d4:	71 81       	ldd	r23, Z+1	; 0x01
    15d6:	07 2e       	mov	r0, r23
    15d8:	00 0c       	add	r0, r0
    15da:	88 0b       	sbc	r24, r24
    15dc:	99 0b       	sbc	r25, r25
    15de:	0e 5f       	subi	r16, 0xFE	; 254
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	f3 2d       	mov	r31, r3
    15e4:	ff 76       	andi	r31, 0x6F	; 111
    15e6:	3f 2e       	mov	r3, r31
    15e8:	97 ff       	sbrs	r25, 7
    15ea:	09 c0       	rjmp	.+18     	; 0x15fe <vfprintf+0x206>
    15ec:	90 95       	com	r25
    15ee:	80 95       	com	r24
    15f0:	70 95       	com	r23
    15f2:	61 95       	neg	r22
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255
    15f6:	8f 4f       	sbci	r24, 0xFF	; 255
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	f0 68       	ori	r31, 0x80	; 128
    15fc:	3f 2e       	mov	r3, r31
    15fe:	2a e0       	ldi	r18, 0x0A	; 10
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	a3 01       	movw	r20, r6
    1604:	1d d1       	rcall	.+570    	; 0x1840 <__ultoa_invert>
    1606:	88 2e       	mov	r8, r24
    1608:	86 18       	sub	r8, r6
    160a:	44 c0       	rjmp	.+136    	; 0x1694 <vfprintf+0x29c>
    160c:	85 37       	cpi	r24, 0x75	; 117
    160e:	31 f4       	brne	.+12     	; 0x161c <vfprintf+0x224>
    1610:	23 2d       	mov	r18, r3
    1612:	2f 7e       	andi	r18, 0xEF	; 239
    1614:	b2 2e       	mov	r11, r18
    1616:	2a e0       	ldi	r18, 0x0A	; 10
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	25 c0       	rjmp	.+74     	; 0x1666 <vfprintf+0x26e>
    161c:	93 2d       	mov	r25, r3
    161e:	99 7f       	andi	r25, 0xF9	; 249
    1620:	b9 2e       	mov	r11, r25
    1622:	8f 36       	cpi	r24, 0x6F	; 111
    1624:	c1 f0       	breq	.+48     	; 0x1656 <vfprintf+0x25e>
    1626:	18 f4       	brcc	.+6      	; 0x162e <vfprintf+0x236>
    1628:	88 35       	cpi	r24, 0x58	; 88
    162a:	79 f0       	breq	.+30     	; 0x164a <vfprintf+0x252>
    162c:	ae c0       	rjmp	.+348    	; 0x178a <vfprintf+0x392>
    162e:	80 37       	cpi	r24, 0x70	; 112
    1630:	19 f0       	breq	.+6      	; 0x1638 <vfprintf+0x240>
    1632:	88 37       	cpi	r24, 0x78	; 120
    1634:	21 f0       	breq	.+8      	; 0x163e <vfprintf+0x246>
    1636:	a9 c0       	rjmp	.+338    	; 0x178a <vfprintf+0x392>
    1638:	e9 2f       	mov	r30, r25
    163a:	e0 61       	ori	r30, 0x10	; 16
    163c:	be 2e       	mov	r11, r30
    163e:	b4 fe       	sbrs	r11, 4
    1640:	0d c0       	rjmp	.+26     	; 0x165c <vfprintf+0x264>
    1642:	fb 2d       	mov	r31, r11
    1644:	f4 60       	ori	r31, 0x04	; 4
    1646:	bf 2e       	mov	r11, r31
    1648:	09 c0       	rjmp	.+18     	; 0x165c <vfprintf+0x264>
    164a:	34 fe       	sbrs	r3, 4
    164c:	0a c0       	rjmp	.+20     	; 0x1662 <vfprintf+0x26a>
    164e:	29 2f       	mov	r18, r25
    1650:	26 60       	ori	r18, 0x06	; 6
    1652:	b2 2e       	mov	r11, r18
    1654:	06 c0       	rjmp	.+12     	; 0x1662 <vfprintf+0x26a>
    1656:	28 e0       	ldi	r18, 0x08	; 8
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <vfprintf+0x26e>
    165c:	20 e1       	ldi	r18, 0x10	; 16
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <vfprintf+0x26e>
    1662:	20 e1       	ldi	r18, 0x10	; 16
    1664:	32 e0       	ldi	r19, 0x02	; 2
    1666:	f8 01       	movw	r30, r16
    1668:	b7 fe       	sbrs	r11, 7
    166a:	07 c0       	rjmp	.+14     	; 0x167a <vfprintf+0x282>
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	0c 5f       	subi	r16, 0xFC	; 252
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	06 c0       	rjmp	.+12     	; 0x1686 <vfprintf+0x28e>
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 5f       	subi	r16, 0xFE	; 254
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	a3 01       	movw	r20, r6
    1688:	db d0       	rcall	.+438    	; 0x1840 <__ultoa_invert>
    168a:	88 2e       	mov	r8, r24
    168c:	86 18       	sub	r8, r6
    168e:	fb 2d       	mov	r31, r11
    1690:	ff 77       	andi	r31, 0x7F	; 127
    1692:	3f 2e       	mov	r3, r31
    1694:	36 fe       	sbrs	r3, 6
    1696:	0d c0       	rjmp	.+26     	; 0x16b2 <vfprintf+0x2ba>
    1698:	23 2d       	mov	r18, r3
    169a:	2e 7f       	andi	r18, 0xFE	; 254
    169c:	a2 2e       	mov	r10, r18
    169e:	89 14       	cp	r8, r9
    16a0:	58 f4       	brcc	.+22     	; 0x16b8 <vfprintf+0x2c0>
    16a2:	34 fe       	sbrs	r3, 4
    16a4:	0b c0       	rjmp	.+22     	; 0x16bc <vfprintf+0x2c4>
    16a6:	32 fc       	sbrc	r3, 2
    16a8:	09 c0       	rjmp	.+18     	; 0x16bc <vfprintf+0x2c4>
    16aa:	83 2d       	mov	r24, r3
    16ac:	8e 7e       	andi	r24, 0xEE	; 238
    16ae:	a8 2e       	mov	r10, r24
    16b0:	05 c0       	rjmp	.+10     	; 0x16bc <vfprintf+0x2c4>
    16b2:	b8 2c       	mov	r11, r8
    16b4:	a3 2c       	mov	r10, r3
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <vfprintf+0x2c6>
    16b8:	b8 2c       	mov	r11, r8
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <vfprintf+0x2c6>
    16bc:	b9 2c       	mov	r11, r9
    16be:	a4 fe       	sbrs	r10, 4
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <vfprintf+0x2e8>
    16c2:	fe 01       	movw	r30, r28
    16c4:	e8 0d       	add	r30, r8
    16c6:	f1 1d       	adc	r31, r1
    16c8:	80 81       	ld	r24, Z
    16ca:	80 33       	cpi	r24, 0x30	; 48
    16cc:	21 f4       	brne	.+8      	; 0x16d6 <vfprintf+0x2de>
    16ce:	9a 2d       	mov	r25, r10
    16d0:	99 7e       	andi	r25, 0xE9	; 233
    16d2:	a9 2e       	mov	r10, r25
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <vfprintf+0x2f0>
    16d6:	a2 fe       	sbrs	r10, 2
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <vfprintf+0x2ee>
    16da:	b3 94       	inc	r11
    16dc:	b3 94       	inc	r11
    16de:	04 c0       	rjmp	.+8      	; 0x16e8 <vfprintf+0x2f0>
    16e0:	8a 2d       	mov	r24, r10
    16e2:	86 78       	andi	r24, 0x86	; 134
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <vfprintf+0x2f0>
    16e6:	b3 94       	inc	r11
    16e8:	a3 fc       	sbrc	r10, 3
    16ea:	10 c0       	rjmp	.+32     	; 0x170c <vfprintf+0x314>
    16ec:	a0 fe       	sbrs	r10, 0
    16ee:	06 c0       	rjmp	.+12     	; 0x16fc <vfprintf+0x304>
    16f0:	b2 14       	cp	r11, r2
    16f2:	80 f4       	brcc	.+32     	; 0x1714 <vfprintf+0x31c>
    16f4:	28 0c       	add	r2, r8
    16f6:	92 2c       	mov	r9, r2
    16f8:	9b 18       	sub	r9, r11
    16fa:	0d c0       	rjmp	.+26     	; 0x1716 <vfprintf+0x31e>
    16fc:	b2 14       	cp	r11, r2
    16fe:	58 f4       	brcc	.+22     	; 0x1716 <vfprintf+0x31e>
    1700:	b6 01       	movw	r22, r12
    1702:	80 e2       	ldi	r24, 0x20	; 32
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	60 d0       	rcall	.+192    	; 0x17c8 <fputc>
    1708:	b3 94       	inc	r11
    170a:	f8 cf       	rjmp	.-16     	; 0x16fc <vfprintf+0x304>
    170c:	b2 14       	cp	r11, r2
    170e:	18 f4       	brcc	.+6      	; 0x1716 <vfprintf+0x31e>
    1710:	2b 18       	sub	r2, r11
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfprintf+0x320>
    1714:	98 2c       	mov	r9, r8
    1716:	21 2c       	mov	r2, r1
    1718:	a4 fe       	sbrs	r10, 4
    171a:	0f c0       	rjmp	.+30     	; 0x173a <vfprintf+0x342>
    171c:	b6 01       	movw	r22, r12
    171e:	80 e3       	ldi	r24, 0x30	; 48
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	52 d0       	rcall	.+164    	; 0x17c8 <fputc>
    1724:	a2 fe       	sbrs	r10, 2
    1726:	16 c0       	rjmp	.+44     	; 0x1754 <vfprintf+0x35c>
    1728:	a1 fc       	sbrc	r10, 1
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <vfprintf+0x33a>
    172c:	88 e7       	ldi	r24, 0x78	; 120
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <vfprintf+0x33e>
    1732:	88 e5       	ldi	r24, 0x58	; 88
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	b6 01       	movw	r22, r12
    1738:	0c c0       	rjmp	.+24     	; 0x1752 <vfprintf+0x35a>
    173a:	8a 2d       	mov	r24, r10
    173c:	86 78       	andi	r24, 0x86	; 134
    173e:	51 f0       	breq	.+20     	; 0x1754 <vfprintf+0x35c>
    1740:	a1 fe       	sbrs	r10, 1
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <vfprintf+0x350>
    1744:	8b e2       	ldi	r24, 0x2B	; 43
    1746:	01 c0       	rjmp	.+2      	; 0x174a <vfprintf+0x352>
    1748:	80 e2       	ldi	r24, 0x20	; 32
    174a:	a7 fc       	sbrc	r10, 7
    174c:	8d e2       	ldi	r24, 0x2D	; 45
    174e:	b6 01       	movw	r22, r12
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	3a d0       	rcall	.+116    	; 0x17c8 <fputc>
    1754:	89 14       	cp	r8, r9
    1756:	30 f4       	brcc	.+12     	; 0x1764 <vfprintf+0x36c>
    1758:	b6 01       	movw	r22, r12
    175a:	80 e3       	ldi	r24, 0x30	; 48
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	34 d0       	rcall	.+104    	; 0x17c8 <fputc>
    1760:	9a 94       	dec	r9
    1762:	f8 cf       	rjmp	.-16     	; 0x1754 <vfprintf+0x35c>
    1764:	8a 94       	dec	r8
    1766:	f3 01       	movw	r30, r6
    1768:	e8 0d       	add	r30, r8
    176a:	f1 1d       	adc	r31, r1
    176c:	80 81       	ld	r24, Z
    176e:	b6 01       	movw	r22, r12
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	2a d0       	rcall	.+84     	; 0x17c8 <fputc>
    1774:	81 10       	cpse	r8, r1
    1776:	f6 cf       	rjmp	.-20     	; 0x1764 <vfprintf+0x36c>
    1778:	22 20       	and	r2, r2
    177a:	09 f4       	brne	.+2      	; 0x177e <vfprintf+0x386>
    177c:	4e ce       	rjmp	.-868    	; 0x141a <vfprintf+0x22>
    177e:	b6 01       	movw	r22, r12
    1780:	80 e2       	ldi	r24, 0x20	; 32
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	21 d0       	rcall	.+66     	; 0x17c8 <fputc>
    1786:	2a 94       	dec	r2
    1788:	f7 cf       	rjmp	.-18     	; 0x1778 <vfprintf+0x380>
    178a:	f6 01       	movw	r30, r12
    178c:	86 81       	ldd	r24, Z+6	; 0x06
    178e:	97 81       	ldd	r25, Z+7	; 0x07
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <vfprintf+0x39e>
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	9f ef       	ldi	r25, 0xFF	; 255
    1796:	2b 96       	adiw	r28, 0x0b	; 11
    1798:	e2 e1       	ldi	r30, 0x12	; 18
    179a:	cc c0       	rjmp	.+408    	; 0x1934 <__epilogue_restores__>

0000179c <strnlen_P>:
    179c:	fc 01       	movw	r30, r24
    179e:	05 90       	lpm	r0, Z+
    17a0:	61 50       	subi	r22, 0x01	; 1
    17a2:	70 40       	sbci	r23, 0x00	; 0
    17a4:	01 10       	cpse	r0, r1
    17a6:	d8 f7       	brcc	.-10     	; 0x179e <strnlen_P+0x2>
    17a8:	80 95       	com	r24
    17aa:	90 95       	com	r25
    17ac:	8e 0f       	add	r24, r30
    17ae:	9f 1f       	adc	r25, r31
    17b0:	08 95       	ret

000017b2 <strnlen>:
    17b2:	fc 01       	movw	r30, r24
    17b4:	61 50       	subi	r22, 0x01	; 1
    17b6:	70 40       	sbci	r23, 0x00	; 0
    17b8:	01 90       	ld	r0, Z+
    17ba:	01 10       	cpse	r0, r1
    17bc:	d8 f7       	brcc	.-10     	; 0x17b4 <strnlen+0x2>
    17be:	80 95       	com	r24
    17c0:	90 95       	com	r25
    17c2:	8e 0f       	add	r24, r30
    17c4:	9f 1f       	adc	r25, r31
    17c6:	08 95       	ret

000017c8 <fputc>:
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	fb 01       	movw	r30, r22
    17d2:	23 81       	ldd	r18, Z+3	; 0x03
    17d4:	21 fd       	sbrc	r18, 1
    17d6:	03 c0       	rjmp	.+6      	; 0x17de <fputc+0x16>
    17d8:	8f ef       	ldi	r24, 0xFF	; 255
    17da:	9f ef       	ldi	r25, 0xFF	; 255
    17dc:	2c c0       	rjmp	.+88     	; 0x1836 <fputc+0x6e>
    17de:	22 ff       	sbrs	r18, 2
    17e0:	16 c0       	rjmp	.+44     	; 0x180e <fputc+0x46>
    17e2:	46 81       	ldd	r20, Z+6	; 0x06
    17e4:	57 81       	ldd	r21, Z+7	; 0x07
    17e6:	24 81       	ldd	r18, Z+4	; 0x04
    17e8:	35 81       	ldd	r19, Z+5	; 0x05
    17ea:	42 17       	cp	r20, r18
    17ec:	53 07       	cpc	r21, r19
    17ee:	44 f4       	brge	.+16     	; 0x1800 <fputc+0x38>
    17f0:	a0 81       	ld	r26, Z
    17f2:	b1 81       	ldd	r27, Z+1	; 0x01
    17f4:	9d 01       	movw	r18, r26
    17f6:	2f 5f       	subi	r18, 0xFF	; 255
    17f8:	3f 4f       	sbci	r19, 0xFF	; 255
    17fa:	31 83       	std	Z+1, r19	; 0x01
    17fc:	20 83       	st	Z, r18
    17fe:	8c 93       	st	X, r24
    1800:	26 81       	ldd	r18, Z+6	; 0x06
    1802:	37 81       	ldd	r19, Z+7	; 0x07
    1804:	2f 5f       	subi	r18, 0xFF	; 255
    1806:	3f 4f       	sbci	r19, 0xFF	; 255
    1808:	37 83       	std	Z+7, r19	; 0x07
    180a:	26 83       	std	Z+6, r18	; 0x06
    180c:	14 c0       	rjmp	.+40     	; 0x1836 <fputc+0x6e>
    180e:	8b 01       	movw	r16, r22
    1810:	ec 01       	movw	r28, r24
    1812:	fb 01       	movw	r30, r22
    1814:	00 84       	ldd	r0, Z+8	; 0x08
    1816:	f1 85       	ldd	r31, Z+9	; 0x09
    1818:	e0 2d       	mov	r30, r0
    181a:	09 95       	icall
    181c:	89 2b       	or	r24, r25
    181e:	e1 f6       	brne	.-72     	; 0x17d8 <fputc+0x10>
    1820:	d8 01       	movw	r26, r16
    1822:	16 96       	adiw	r26, 0x06	; 6
    1824:	8d 91       	ld	r24, X+
    1826:	9c 91       	ld	r25, X
    1828:	17 97       	sbiw	r26, 0x07	; 7
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	17 96       	adiw	r26, 0x07	; 7
    182e:	9c 93       	st	X, r25
    1830:	8e 93       	st	-X, r24
    1832:	16 97       	sbiw	r26, 0x06	; 6
    1834:	ce 01       	movw	r24, r28
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	08 95       	ret

00001840 <__ultoa_invert>:
    1840:	fa 01       	movw	r30, r20
    1842:	aa 27       	eor	r26, r26
    1844:	28 30       	cpi	r18, 0x08	; 8
    1846:	51 f1       	breq	.+84     	; 0x189c <__ultoa_invert+0x5c>
    1848:	20 31       	cpi	r18, 0x10	; 16
    184a:	81 f1       	breq	.+96     	; 0x18ac <__ultoa_invert+0x6c>
    184c:	e8 94       	clt
    184e:	6f 93       	push	r22
    1850:	6e 7f       	andi	r22, 0xFE	; 254
    1852:	6e 5f       	subi	r22, 0xFE	; 254
    1854:	7f 4f       	sbci	r23, 0xFF	; 255
    1856:	8f 4f       	sbci	r24, 0xFF	; 255
    1858:	9f 4f       	sbci	r25, 0xFF	; 255
    185a:	af 4f       	sbci	r26, 0xFF	; 255
    185c:	b1 e0       	ldi	r27, 0x01	; 1
    185e:	3e d0       	rcall	.+124    	; 0x18dc <__ultoa_invert+0x9c>
    1860:	b4 e0       	ldi	r27, 0x04	; 4
    1862:	3c d0       	rcall	.+120    	; 0x18dc <__ultoa_invert+0x9c>
    1864:	67 0f       	add	r22, r23
    1866:	78 1f       	adc	r23, r24
    1868:	89 1f       	adc	r24, r25
    186a:	9a 1f       	adc	r25, r26
    186c:	a1 1d       	adc	r26, r1
    186e:	68 0f       	add	r22, r24
    1870:	79 1f       	adc	r23, r25
    1872:	8a 1f       	adc	r24, r26
    1874:	91 1d       	adc	r25, r1
    1876:	a1 1d       	adc	r26, r1
    1878:	6a 0f       	add	r22, r26
    187a:	71 1d       	adc	r23, r1
    187c:	81 1d       	adc	r24, r1
    187e:	91 1d       	adc	r25, r1
    1880:	a1 1d       	adc	r26, r1
    1882:	20 d0       	rcall	.+64     	; 0x18c4 <__ultoa_invert+0x84>
    1884:	09 f4       	brne	.+2      	; 0x1888 <__ultoa_invert+0x48>
    1886:	68 94       	set
    1888:	3f 91       	pop	r19
    188a:	2a e0       	ldi	r18, 0x0A	; 10
    188c:	26 9f       	mul	r18, r22
    188e:	11 24       	eor	r1, r1
    1890:	30 19       	sub	r19, r0
    1892:	30 5d       	subi	r19, 0xD0	; 208
    1894:	31 93       	st	Z+, r19
    1896:	de f6       	brtc	.-74     	; 0x184e <__ultoa_invert+0xe>
    1898:	cf 01       	movw	r24, r30
    189a:	08 95       	ret
    189c:	46 2f       	mov	r20, r22
    189e:	47 70       	andi	r20, 0x07	; 7
    18a0:	40 5d       	subi	r20, 0xD0	; 208
    18a2:	41 93       	st	Z+, r20
    18a4:	b3 e0       	ldi	r27, 0x03	; 3
    18a6:	0f d0       	rcall	.+30     	; 0x18c6 <__ultoa_invert+0x86>
    18a8:	c9 f7       	brne	.-14     	; 0x189c <__ultoa_invert+0x5c>
    18aa:	f6 cf       	rjmp	.-20     	; 0x1898 <__ultoa_invert+0x58>
    18ac:	46 2f       	mov	r20, r22
    18ae:	4f 70       	andi	r20, 0x0F	; 15
    18b0:	40 5d       	subi	r20, 0xD0	; 208
    18b2:	4a 33       	cpi	r20, 0x3A	; 58
    18b4:	18 f0       	brcs	.+6      	; 0x18bc <__ultoa_invert+0x7c>
    18b6:	49 5d       	subi	r20, 0xD9	; 217
    18b8:	31 fd       	sbrc	r19, 1
    18ba:	40 52       	subi	r20, 0x20	; 32
    18bc:	41 93       	st	Z+, r20
    18be:	02 d0       	rcall	.+4      	; 0x18c4 <__ultoa_invert+0x84>
    18c0:	a9 f7       	brne	.-22     	; 0x18ac <__ultoa_invert+0x6c>
    18c2:	ea cf       	rjmp	.-44     	; 0x1898 <__ultoa_invert+0x58>
    18c4:	b4 e0       	ldi	r27, 0x04	; 4
    18c6:	a6 95       	lsr	r26
    18c8:	97 95       	ror	r25
    18ca:	87 95       	ror	r24
    18cc:	77 95       	ror	r23
    18ce:	67 95       	ror	r22
    18d0:	ba 95       	dec	r27
    18d2:	c9 f7       	brne	.-14     	; 0x18c6 <__ultoa_invert+0x86>
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	61 05       	cpc	r22, r1
    18d8:	71 05       	cpc	r23, r1
    18da:	08 95       	ret
    18dc:	9b 01       	movw	r18, r22
    18de:	ac 01       	movw	r20, r24
    18e0:	0a 2e       	mov	r0, r26
    18e2:	06 94       	lsr	r0
    18e4:	57 95       	ror	r21
    18e6:	47 95       	ror	r20
    18e8:	37 95       	ror	r19
    18ea:	27 95       	ror	r18
    18ec:	ba 95       	dec	r27
    18ee:	c9 f7       	brne	.-14     	; 0x18e2 <__ultoa_invert+0xa2>
    18f0:	62 0f       	add	r22, r18
    18f2:	73 1f       	adc	r23, r19
    18f4:	84 1f       	adc	r24, r20
    18f6:	95 1f       	adc	r25, r21
    18f8:	a0 1d       	adc	r26, r0
    18fa:	08 95       	ret

000018fc <__prologue_saves__>:
    18fc:	2f 92       	push	r2
    18fe:	3f 92       	push	r3
    1900:	4f 92       	push	r4
    1902:	5f 92       	push	r5
    1904:	6f 92       	push	r6
    1906:	7f 92       	push	r7
    1908:	8f 92       	push	r8
    190a:	9f 92       	push	r9
    190c:	af 92       	push	r10
    190e:	bf 92       	push	r11
    1910:	cf 92       	push	r12
    1912:	df 92       	push	r13
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	ca 1b       	sub	r28, r26
    1926:	db 0b       	sbc	r29, r27
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	09 94       	ijmp

00001934 <__epilogue_restores__>:
    1934:	2a 88       	ldd	r2, Y+18	; 0x12
    1936:	39 88       	ldd	r3, Y+17	; 0x11
    1938:	48 88       	ldd	r4, Y+16	; 0x10
    193a:	5f 84       	ldd	r5, Y+15	; 0x0f
    193c:	6e 84       	ldd	r6, Y+14	; 0x0e
    193e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1940:	8c 84       	ldd	r8, Y+12	; 0x0c
    1942:	9b 84       	ldd	r9, Y+11	; 0x0b
    1944:	aa 84       	ldd	r10, Y+10	; 0x0a
    1946:	b9 84       	ldd	r11, Y+9	; 0x09
    1948:	c8 84       	ldd	r12, Y+8	; 0x08
    194a:	df 80       	ldd	r13, Y+7	; 0x07
    194c:	ee 80       	ldd	r14, Y+6	; 0x06
    194e:	fd 80       	ldd	r15, Y+5	; 0x05
    1950:	0c 81       	ldd	r16, Y+4	; 0x04
    1952:	1b 81       	ldd	r17, Y+3	; 0x03
    1954:	aa 81       	ldd	r26, Y+2	; 0x02
    1956:	b9 81       	ldd	r27, Y+1	; 0x01
    1958:	ce 0f       	add	r28, r30
    195a:	d1 1d       	adc	r29, r1
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	ed 01       	movw	r28, r26
    1968:	08 95       	ret

0000196a <_exit>:
    196a:	f8 94       	cli

0000196c <__stop_program>:
    196c:	ff cf       	rjmp	.-2      	; 0x196c <__stop_program>
