
EE311.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00001b70  00001c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001dd  0080008c  0080008c  00001c30  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ee  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000898  00000000  00000000  0000308e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf6  00000000  00000000  00003926  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  0000461c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000659  00000000  00000000  00004804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041c  00000000  00000000  00004e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005279  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	a8 c1       	rjmp	.+848    	; 0x358 <__vector_3>
       8:	d4 c1       	rjmp	.+936    	; 0x3b2 <__vector_4>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	ab c0       	rjmp	.+342    	; 0x164 <__vector_6>
       e:	f8 c0       	rjmp	.+496    	; 0x200 <__vector_7>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	91 c0       	rjmp	.+290    	; 0x136 <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	5e c0       	rjmp	.+188    	; 0xd4 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 e7       	ldi	r30, 0x70	; 112
      3a:	fb e1       	ldi	r31, 0x1B	; 27
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ac 38       	cpi	r26, 0x8C	; 140
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	22 e0       	ldi	r18, 0x02	; 2
      4a:	ac e8       	ldi	r26, 0x8C	; 140
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a9 36       	cpi	r26, 0x69	; 105
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	e7 d1       	rcall	.+974    	; 0x428 <main>
      5a:	88 cd       	rjmp	.-1264   	; 0xfffffb6c <__eeprom_end+0xff7efb6c>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <adc_read>:
#include "adc.h"

#define ADCSTATUS (ADCSRA & (1<<ADIF))

uint16_t adc_read(uint8_t channel){
	ADMUX &= 0xF0; //clear previous setting
      5e:	97 b1       	in	r25, 0x07	; 7
      60:	90 7f       	andi	r25, 0xF0	; 240
      62:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel; //add channel setting
      64:	97 b1       	in	r25, 0x07	; 7
      66:	89 2b       	or	r24, r25
      68:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA |= (1<<ADSC); //start conversion
      6a:	36 9a       	sbi	0x06, 6	; 6
	
	while (ADCSTATUS == 0){ //block until conversion finishes
      6c:	34 9b       	sbis	0x06, 4	; 6
      6e:	fe cf       	rjmp	.-4      	; 0x6c <adc_read+0xe>
	}
	return ADC; //return value in mV  
      70:	84 b1       	in	r24, 0x04	; 4
      72:	95 b1       	in	r25, 0x05	; 5
	
}
      74:	08 95       	ret

00000076 <adc_convert>:

uint32_t adc_convert(uint16_t rawvalue){
	return (uint32_t)((uint32_t)rawvalue*voltagereference/1024);
      76:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <voltagereference>
      7a:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <voltagereference+0x1>
      7e:	9c 01       	movw	r18, r24
      80:	54 d9       	rcall	.-3416   	; 0xfffff32a <__eeprom_end+0xff7ef32a>
      82:	2a e0       	ldi	r18, 0x0A	; 10
      84:	96 95       	lsr	r25
      86:	87 95       	ror	r24
      88:	77 95       	ror	r23
      8a:	67 95       	ror	r22
      8c:	2a 95       	dec	r18
      8e:	d1 f7       	brne	.-12     	; 0x84 <adc_convert+0xe>
}
      90:	08 95       	ret

00000092 <update_vref>:

void update_vref(){
	ADMUX |= 14; //set channel to bandgap reference
      92:	87 b1       	in	r24, 0x07	; 7
      94:	8e 60       	ori	r24, 0x0E	; 14
      96:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); //start conversion
      98:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSTATUS == 0){ //block until conversion finishes
      9a:	34 9b       	sbis	0x06, 4	; 6
      9c:	fe cf       	rjmp	.-4      	; 0x9a <update_vref+0x8>
	}
	uint16_t bgrawvalue = ADC; //store ADC value for bandgap (1.30V)
      9e:	24 b1       	in	r18, 0x04	; 4
      a0:	35 b1       	in	r19, 0x05	; 5
	voltagereference = (uint32_t)((uint32_t)1300*1024/bgrawvalue); //calculate vref using bandgap
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	50 e0       	ldi	r21, 0x00	; 0
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	70 e5       	ldi	r23, 0x50	; 80
      aa:	84 e1       	ldi	r24, 0x14	; 20
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	1b d9       	rcall	.-3530   	; 0xfffff2e6 <__eeprom_end+0xff7ef2e6>
      b0:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <voltagereference+0x1>
      b4:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <voltagereference>
      b8:	08 95       	ret

000000ba <adc_init>:
}

void adc_init(){
	ADMUX &= ~(1<<REFS1);
      ba:	3f 98       	cbi	0x07, 7	; 7
	ADMUX |= (1<<REFS0); //use AVcc reference
      bc:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN); //enable ADC
      be:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= ((1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2)); //use clock divider of /128 for 125khz ADC frequency
      c0:	86 b1       	in	r24, 0x06	; 6
      c2:	87 60       	ori	r24, 0x07	; 7
      c4:	86 b9       	out	0x06, r24	; 6
	voltagereference = 5000;
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
      ca:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <voltagereference+0x1>
      ce:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <voltagereference>
	update_vref();
      d2:	df cf       	rjmp	.-66     	; 0x92 <update_vref>

000000d4 <__vector_11>:
 *  Author: sshe325
 */ 

#include "interrupts.h"

ISR(USART_RXC_vect){
      d4:	1f 92       	push	r1
      d6:	0f 92       	push	r0
      d8:	0f b6       	in	r0, 0x3f	; 63
      da:	0f 92       	push	r0
      dc:	11 24       	eor	r1, r1
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	00 d0       	rcall	.+0      	; 0xe4 <__vector_11+0x10>
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
	//dynamically allocate and reallocate space for string
	str_buffer = calloc(1,sizeof(char));
      e8:	61 e0       	ldi	r22, 0x01	; 1
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	87 d9       	rcall	.-3314   	; 0xfffff400 <__eeprom_end+0xff7ef400>
      f2:	8c 01       	movw	r16, r24
      f4:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <str_buffer+0x1>
      f8:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <str_buffer>
	char* buffer_ptr = str_buffer;
	int size = 1;
	*str_buffer = uart_receive();
      fc:	dd d6       	rcall	.+3514   	; 0xeb8 <uart_receive>
      fe:	f8 01       	movw	r30, r16
     100:	80 83       	st	Z, r24

ISR(USART_RXC_vect){
	//dynamically allocate and reallocate space for string
	str_buffer = calloc(1,sizeof(char));
	char* buffer_ptr = str_buffer;
	int size = 1;
     102:	01 e0       	ldi	r16, 0x01	; 1
     104:	10 e0       	ldi	r17, 0x00	; 0
	*str_buffer = uart_receive();
	//only end receive when we receive a newline
	while ((*buffer_ptr != '\n') || (*buffer_ptr != '\r')){
		str_buffer = realloc(str_buffer,(++size)*sizeof(char));
     106:	0f 5f       	subi	r16, 0xFF	; 255
     108:	1f 4f       	sbci	r17, 0xFF	; 255
     10a:	b8 01       	movw	r22, r16
     10c:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <str_buffer>
     110:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <str_buffer+0x1>
     114:	b0 da       	rcall	.-2720   	; 0xfffff676 <__eeprom_end+0xff7ef676>
     116:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <str_buffer+0x1>
     11a:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <str_buffer>
		//make a null terminated string for strcat()
		char uart_char[2];
		uart_char[0] = uart_receive();
     11e:	cc d6       	rcall	.+3480   	; 0xeb8 <uart_receive>
     120:	89 83       	std	Y+1, r24	; 0x01
		uart_char[1] = '\0';
     122:	1a 82       	std	Y+2, r1	; 0x02
		strcat(str_buffer,uart_char);
     124:	be 01       	movw	r22, r28
     126:	6f 5f       	subi	r22, 0xFF	; 255
     128:	7f 4f       	sbci	r23, 0xFF	; 255
     12a:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <str_buffer>
     12e:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <str_buffer+0x1>
     132:	8d dc       	rcall	.-1766   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
     134:	e8 cf       	rjmp	.-48     	; 0x106 <__vector_11+0x32>

00000136 <__vector_9>:
	//set flag to indicate received data
	data_received = 1;
}

//interrupt to increment overflow counter
ISR(TIMER0_OVF_vect){
     136:	1f 92       	push	r1
     138:	0f 92       	push	r0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	0f 92       	push	r0
     13e:	11 24       	eor	r1, r1
     140:	8f 93       	push	r24
     142:	9f 93       	push	r25
	++timer0_ovf_count;
     144:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <timer0_ovf_count>
     148:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <timer0_ovf_count+0x1>
     14c:	01 96       	adiw	r24, 0x01	; 1
     14e:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <timer0_ovf_count+0x1>
     152:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <timer0_ovf_count>
}
     156:	9f 91       	pop	r25
     158:	8f 91       	pop	r24
     15a:	0f 90       	pop	r0
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	0f 90       	pop	r0
     160:	1f 90       	pop	r1
     162:	18 95       	reti

00000164 <__vector_6>:

//interrupt to handle T/4 or 3T/4 time crossing
ISR(TIMER1_COMPA_vect){
     164:	1f 92       	push	r1
     166:	0f 92       	push	r0
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	0f 92       	push	r0
     16c:	11 24       	eor	r1, r1
     16e:	8f 93       	push	r24
     170:	9f 93       	push	r25
		//turn off PWM timer
		TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     172:	85 b5       	in	r24, 0x25	; 37
     174:	88 7f       	andi	r24, 0xF8	; 248
     176:	85 bd       	out	0x25, r24	; 37
		//PORTD &= ~(1<<PD7);
		//turn on right NMOS
		//PORTB &= ~(1<<PB0);
		
		//indicate that RHS/LHS voltage are both off
		voltage_right_on = 0;
     178:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <voltage_right_on+0x1>
     17c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <voltage_right_on>
		voltage_left_on = 0;
     180:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <voltage_left_on+0x1>
     184:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <voltage_left_on>
		
		//since we have stopped pulsing PWM, stop reading current ADC
		readadci = 0;
     188:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <readadci+0x1>
     18c:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <readadci>
		//disable PWM signals
		if (!t2){
     190:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <t2>
     194:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <t2+0x1>
			//right to left current
			//turn off PMOSes, turn on left NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
     198:	c2 98       	cbi	0x18, 2	; 24
		voltage_left_on = 0;
		
		//since we have stopped pulsing PWM, stop reading current ADC
		readadci = 0;
		//disable PWM signals
		if (!t2){
     19a:	89 2b       	or	r24, r25
     19c:	71 f4       	brne	.+28     	; 0x1ba <__vector_6+0x56>
			//right to left current
			//turn off PMOSes, turn on left NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
			//turn on left NMOS
			PORTB &= ~(1<<PB1);
     19e:	c1 98       	cbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     1a0:	97 98       	cbi	0x12, 7	; 18
			//turn off right NMOS
			PORTB |= (1<<PB0);
     1a2:	c0 9a       	sbi	0x18, 0	; 24
			//indicate that we are ready to start reading motor LHS back emf
			readadc = 1;
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <readadc+0x1>
     1ac:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <readadc>
			readadcmotorleft = 1;
     1b0:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <readadcmotorleft+0x1>
     1b4:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <readadcmotorleft>
     1b8:	0d c0       	rjmp	.+26     	; 0x1d4 <__vector_6+0x70>
			//left to right current
			//turn off PMOSes, turn on right NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
			//turn off left NMOS
			PORTB |= (1<<PB1);
     1ba:	c1 9a       	sbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     1bc:	97 98       	cbi	0x12, 7	; 18
			//turn on right NMOS
			PORTB &= ~(1<<PB0);
     1be:	c0 98       	cbi	0x18, 0	; 24
			//indicate that we are ready to start reading motor RHS back emf
			readadc = 1;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <readadc+0x1>
     1c8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <readadc>
			readadcmotorright = 1;
     1cc:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <readadcmotorright+0x1>
     1d0:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <readadcmotorright>
			backemffound = 0;
     1d4:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <backemffound+0x1>
     1d8:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <backemffound>
			//reset backemf index
			backemfreadingindex = 0;
     1dc:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <backemfreadingindex+0x1>
     1e0:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <backemfreadingindex>
		}
		//turn on timer 0 with prescaler /256 to measure backemf time
		TCCR0 |= ((1<<CS02));
     1e4:	83 b7       	in	r24, 0x33	; 51
     1e6:	84 60       	ori	r24, 0x04	; 4
     1e8:	83 bf       	out	0x33, r24	; 51
		TCCR0 &= ~((1<<CS01)|(1<<CS00));
     1ea:	83 b7       	in	r24, 0x33	; 51
     1ec:	8c 7f       	andi	r24, 0xFC	; 252
     1ee:	83 bf       	out	0x33, r24	; 51
		//reset PWM timer counter
		TCNT2 = 0;
     1f0:	14 bc       	out	0x24, r1	; 36
}
     1f2:	9f 91       	pop	r25
     1f4:	8f 91       	pop	r24
     1f6:	0f 90       	pop	r0
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	0f 90       	pop	r0
     1fc:	1f 90       	pop	r1
     1fe:	18 95       	reti

00000200 <__vector_7>:

//interrupt to handle T or T/2 time crossing
ISR(TIMER1_COMPB_vect){
     200:	1f 92       	push	r1
     202:	0f 92       	push	r0
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	0f 92       	push	r0
     208:	11 24       	eor	r1, r1
     20a:	2f 93       	push	r18
     20c:	3f 93       	push	r19
     20e:	8f 93       	push	r24
     210:	9f 93       	push	r25
		TCCR1B |= (1<<CS12);
		TCCR1B &= ~((1<<CS11) | (1<<CS10));
		stop_counter = 0;
	}*/
		//back emf pulse has expired (we are driving the motor now), stop reading the adc
		readadcmotorleft = 0;
     212:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <readadcmotorleft+0x1>
     216:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <readadcmotorleft>
		readadcmotorright = 0;
     21a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <readadcmotorright+0x1>
     21e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <readadcmotorright>
		if (numcycles >= 50){
     222:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <numcycles>
     226:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <numcycles+0x1>
				backemffreq = 1000000000/backemftime;
				backemffound = 1; //indicate that a back emf value has been "found"
			}*/
		}
		
		if (t2){
     22a:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <t2>
     22e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <t2+0x1>
     232:	89 2b       	or	r24, r25
     234:	39 f1       	breq	.+78     	; 0x284 <__vector_7+0x84>
			//T time crossing has been handled, T/2 is next
			t2 = 0;
     236:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <t2+0x1>
     23a:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <t2>
			//turn off timer1
			TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     23e:	8e b5       	in	r24, 0x2e	; 46
     240:	88 7f       	andi	r24, 0xF8	; 248
     242:	8e bd       	out	0x2e, r24	; 46
			//turn off PWM
			TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     244:	85 b5       	in	r24, 0x25	; 37
     246:	88 7f       	andi	r24, 0xF8	; 248
     248:	85 bd       	out	0x25, r24	; 37
			//reset timer1 counter
			TCNT1 = 0;
     24a:	1d bc       	out	0x2d, r1	; 45
     24c:	1c bc       	out	0x2c, r1	; 44
			//reset PWM timer counter
			TCNT2 = 0;
     24e:	14 bc       	out	0x24, r1	; 36
			//turn on timer 1 again (prescaler /256)
			TCCR1B |= (1<<CS12);
     250:	8e b5       	in	r24, 0x2e	; 46
     252:	84 60       	ori	r24, 0x04	; 4
     254:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &= ~((1<<CS11) | (1<<CS10));
     256:	8e b5       	in	r24, 0x2e	; 46
     258:	8c 7f       	andi	r24, 0xFC	; 252
     25a:	8e bd       	out	0x2e, r24	; 46
			//turn on PWM signals
			if (t2){
     25c:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <t2>
     260:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <t2+0x1>
     264:	89 2b       	or	r24, r25
     266:	39 f0       	breq	.+14     	; 0x276 <__vector_7+0x76>
				//right to left current
				//turn off left PMOS
				PORTB &= ~(1<<PB2);
     268:	c2 98       	cbi	0x18, 2	; 24
				//turn on left NMOS
				PORTB &= ~(1<<PB1);
     26a:	c1 98       	cbi	0x18, 1	; 24
				//turn on right PMOS
				PORTD |= (1<<PD7);
     26c:	97 9a       	sbi	0x12, 7	; 18
				//turn off right NMOS
				PORTB |= (1<<PB0);
     26e:	c0 9a       	sbi	0x18, 0	; 24
				//indicate that we are ready to read adc from motor RHS to measure voltage and current
				readadc = 1;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	26 c0       	rjmp	.+76     	; 0x2c2 <__vector_7+0xc2>
				voltage_right_on = 1;
			}
			else{
				//left to right current
				//turn on left PMOS
				PORTB |= (1<<PB2);
     276:	c2 9a       	sbi	0x18, 2	; 24
				//turn off left NMOS
				PORTB |= (1<<PB1);
     278:	c1 9a       	sbi	0x18, 1	; 24
				//turn off right PMOS
				PORTD &= ~(1<<PD7);
     27a:	97 98       	cbi	0x12, 7	; 18
				//turn on right NMOS
				PORTB &= ~(1<<PB0);
     27c:	c0 98       	cbi	0x18, 0	; 24
				//indicate that we are ready to read adc from motor LHS to measure voltage and current
				readadc = 1;
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	34 c0       	rjmp	.+104    	; 0x2ec <__vector_7+0xec>
			TCCR2 |= ((1<<CS22) | (1<<CS21));
			TCCR2 &= ~((1<<CS20));
			
		}
		else{
			t2 = 1;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <t2+0x1>
     28c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <t2>
			//turn off timer1
			TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     290:	2e b5       	in	r18, 0x2e	; 46
     292:	28 7f       	andi	r18, 0xF8	; 248
     294:	2e bd       	out	0x2e, r18	; 46
			//turn off PWM
			TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     296:	25 b5       	in	r18, 0x25	; 37
     298:	28 7f       	andi	r18, 0xF8	; 248
     29a:	25 bd       	out	0x25, r18	; 37
			//reset timer1 counter
			TCNT1 = 0;
     29c:	1d bc       	out	0x2d, r1	; 45
     29e:	1c bc       	out	0x2c, r1	; 44
			//reset PWM timer counter
			TCNT2 = 0;
     2a0:	14 bc       	out	0x24, r1	; 36
			//turn on timer 1 again (prescaler /256)
			TCCR1B |= (1<<CS12);
     2a2:	2e b5       	in	r18, 0x2e	; 46
     2a4:	24 60       	ori	r18, 0x04	; 4
     2a6:	2e bd       	out	0x2e, r18	; 46
			TCCR1B &= ~((1<<CS11) | (1<<CS10));
     2a8:	2e b5       	in	r18, 0x2e	; 46
     2aa:	2c 7f       	andi	r18, 0xFC	; 252
     2ac:	2e bd       	out	0x2e, r18	; 46
			//turn on PWM timer counter (prescaler /64)
			//turn on PWM signals
			if (t2){
     2ae:	20 91 ba 00 	lds	r18, 0x00BA	; 0x8000ba <t2>
     2b2:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <t2+0x1>
     2b6:	23 2b       	or	r18, r19
     2b8:	a9 f0       	breq	.+42     	; 0x2e4 <__vector_7+0xe4>
				//right to left current
				//turn off left PMOS
				PORTB &= ~(1<<PB2);
     2ba:	c2 98       	cbi	0x18, 2	; 24
				//turn on left NMOS
				PORTB &= ~(1<<PB1);
     2bc:	c1 98       	cbi	0x18, 1	; 24
				//turn on right PMOS
				PORTD |= (1<<PD7);
     2be:	97 9a       	sbi	0x12, 7	; 18
				//turn off right NMOS
				PORTB |= (1<<PB0);
     2c0:	c0 9a       	sbi	0x18, 0	; 24
				//indicate that we are ready to read adc from motor RHS to measure voltage and current
				readadc = 1;
     2c2:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <readadc+0x1>
     2c6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <readadc>
				readadcv = 1;
     2ca:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <readadcv+0x1>
     2ce:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <readadcv>
				readadci = 1;
     2d2:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <readadci+0x1>
     2d6:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <readadci>
				//indicate that RHS voltage is on
				voltage_right_on = 1;
     2da:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <voltage_right_on+0x1>
     2de:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <voltage_right_on>
     2e2:	14 c0       	rjmp	.+40     	; 0x30c <__vector_7+0x10c>
			}
			else{
				//left to right current
				//turn on left PMOS
				PORTB |= (1<<PB2);
     2e4:	c2 9a       	sbi	0x18, 2	; 24
				//turn off left NMOS
				PORTB |= (1<<PB1);
     2e6:	c1 9a       	sbi	0x18, 1	; 24
				//turn off right PMOS
				PORTD &= ~(1<<PD7);
     2e8:	97 98       	cbi	0x12, 7	; 18
				//turn on right NMOS
				PORTB &= ~(1<<PB0);
     2ea:	c0 98       	cbi	0x18, 0	; 24
				//indicate that we are ready to read adc from motor LHS to measure voltage and current
				readadc = 1;
     2ec:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <readadc+0x1>
     2f0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <readadc>
				readadcv = 1;
     2f4:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <readadcv+0x1>
     2f8:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <readadcv>
				readadci = 1;
     2fc:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <readadci+0x1>
     300:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <readadci>
				//indicate that LHS voltage is on
				voltage_left_on = 1;
     304:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <voltage_left_on+0x1>
     308:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <voltage_left_on>
			}
			//turn on PWM timer counter (prescaler /256)
			TCCR2 |= ((1<<CS22) | (1<<CS21));
     30c:	85 b5       	in	r24, 0x25	; 37
     30e:	86 60       	ori	r24, 0x06	; 6
     310:	85 bd       	out	0x25, r24	; 37
			TCCR2 &= ~((1<<CS20));
     312:	85 b5       	in	r24, 0x25	; 37
     314:	8e 7f       	andi	r24, 0xFE	; 254
     316:	85 bd       	out	0x25, r24	; 37
			
		}
		//++stop_counter;
		//stop back emf timer since the time to measure it has expired
		TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     318:	83 b7       	in	r24, 0x33	; 51
     31a:	88 7f       	andi	r24, 0xF8	; 248
     31c:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;
     31e:	12 be       	out	0x32, r1	; 50
		timer0_ovf_count = 0;
     320:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <timer0_ovf_count+0x1>
     324:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <timer0_ovf_count>
		if (numcycles != 50) ++numcycles;
     328:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <numcycles>
     32c:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <numcycles+0x1>
     330:	c2 97       	sbiw	r24, 0x32	; 50
     332:	49 f0       	breq	.+18     	; 0x346 <__vector_7+0x146>
     334:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <numcycles>
     338:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <numcycles+0x1>
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <numcycles+0x1>
     342:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <numcycles>
}
     346:	9f 91       	pop	r25
     348:	8f 91       	pop	r24
     34a:	3f 91       	pop	r19
     34c:	2f 91       	pop	r18
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <__vector_3>:

//PWM duty cycle expired, shut off PWM signals
ISR(TIMER2_COMP_vect){
     358:	1f 92       	push	r1
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	0f 92       	push	r0
     360:	11 24       	eor	r1, r1
     362:	8f 93       	push	r24
     364:	9f 93       	push	r25
		PORTD &= ~(1<<PD7);
		//turn off right NMOS
		PORTB |= (1<<PB0);
	}*/
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     366:	85 b5       	in	r24, 0x25	; 37
     368:	88 7f       	andi	r24, 0xF8	; 248
     36a:	85 bd       	out	0x25, r24	; 37
	
	if (t2){
     36c:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <t2>
     370:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <t2+0x1>
		//right to left current
		//turn off PMOSes, turn on left NMOS so motor brakes
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     374:	c2 98       	cbi	0x18, 2	; 24
		PORTB |= (1<<PB0);
	}*/
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
	
	if (t2){
     376:	89 2b       	or	r24, r25
     378:	41 f0       	breq	.+16     	; 0x38a <__vector_3+0x32>
		//right to left current
		//turn off PMOSes, turn on left NMOS so motor brakes
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     37a:	c1 98       	cbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     37c:	97 98       	cbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     37e:	c0 9a       	sbi	0x18, 0	; 24
		//indicate that RHS voltage is off
		voltage_right_on = 0;
     380:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <voltage_right_on+0x1>
     384:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <voltage_right_on>
     388:	07 c0       	rjmp	.+14     	; 0x398 <__vector_3+0x40>
		//left to right current
		//turn off PMOSes, turn on right NMOS so motor brakes?!
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
		//turn off left NMOS
		PORTB |= (1<<PB1);
     38a:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     38c:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     38e:	c0 98       	cbi	0x18, 0	; 24
		//indicate that LHS voltage is off
		voltage_left_on = 0;
     390:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <voltage_left_on+0x1>
     394:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <voltage_left_on>
	}
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     398:	85 b5       	in	r24, 0x25	; 37
     39a:	86 60       	ori	r24, 0x06	; 6
     39c:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     39e:	85 b5       	in	r24, 0x25	; 37
     3a0:	8e 7f       	andi	r24, 0xFE	; 254
     3a2:	85 bd       	out	0x25, r24	; 37
}
     3a4:	9f 91       	pop	r25
     3a6:	8f 91       	pop	r24
     3a8:	0f 90       	pop	r0
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	0f 90       	pop	r0
     3ae:	1f 90       	pop	r1
     3b0:	18 95       	reti

000003b2 <__vector_4>:

//PWM restarted, change switches according to current current direction
ISR(TIMER2_OVF_vect){
     3b2:	1f 92       	push	r1
     3b4:	0f 92       	push	r0
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	0f 92       	push	r0
     3ba:	11 24       	eor	r1, r1
     3bc:	8f 93       	push	r24
     3be:	9f 93       	push	r25
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     3c0:	85 b5       	in	r24, 0x25	; 37
     3c2:	88 7f       	andi	r24, 0xF8	; 248
     3c4:	85 bd       	out	0x25, r24	; 37
	TCCR2 = 0;
     3c6:	15 bc       	out	0x25, r1	; 37
	if (t2){
     3c8:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <t2>
     3cc:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <t2+0x1>
     3d0:	89 2b       	or	r24, r25
     3d2:	79 f0       	breq	.+30     	; 0x3f2 <__vector_4+0x40>
		//right to left current
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     3d4:	c2 98       	cbi	0x18, 2	; 24
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     3d6:	c1 98       	cbi	0x18, 1	; 24
		//turn on right PMOS
		PORTD |= (1<<PD7);
     3d8:	97 9a       	sbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     3da:	c0 9a       	sbi	0x18, 0	; 24
		//indicate that RHS voltage is on
		readadc = 1;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <readadc+0x1>
     3e4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <readadc>
		voltage_right_on = 1;
     3e8:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <voltage_right_on+0x1>
     3ec:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <voltage_right_on>
     3f0:	0e c0       	rjmp	.+28     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	}
	else{
		//left to right current
		//turn on left PMOS
		PORTB |= (1<<PB2);
     3f2:	c2 9a       	sbi	0x18, 2	; 24
		//turn off left NMOS
		PORTB |= (1<<PB1);
     3f4:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     3f6:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     3f8:	c0 98       	cbi	0x18, 0	; 24
		//indicate that LHS voltage is on
		readadc = 1;
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <readadc+0x1>
     402:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <readadc>
		voltage_left_on = 1;
     406:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <voltage_left_on+0x1>
     40a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <voltage_left_on>
	}
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     40e:	85 b5       	in	r24, 0x25	; 37
     410:	86 60       	ori	r24, 0x06	; 6
     412:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     414:	85 b5       	in	r24, 0x25	; 37
     416:	8e 7f       	andi	r24, 0xFE	; 254
     418:	85 bd       	out	0x25, r24	; 37
     41a:	9f 91       	pop	r25
     41c:	8f 91       	pop	r24
     41e:	0f 90       	pop	r0
     420:	0f be       	out	0x3f, r0	; 63
     422:	0f 90       	pop	r0
     424:	1f 90       	pop	r1
     426:	18 95       	reti

00000428 <main>:
uint32_t powerarray[NUMSAMPLESI];
uint64_t currentvalue = 0;
uint64_t powervalue = 0;

int main(void)
{
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	aa 97       	sbiw	r28, 0x2a	; 42
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
	//char transmit_buffer[200];
	//sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3s\",\n%11s\"cur\": \"%3s\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%d.%dW\",\n%11s\"freq\": \"%d.%dHz\",\n%11s\"curr\": \"%dmA\",\n%11s\"volt\": \"%d.%dV\",\n%7s}\n%3s}\n}", "", "", "", "", "", "", "", OCR2, "", "", "", "", "", powerleft, powerright, "", freqleft, freqright, "", current, "", voltleft, voltright, "", "");
	//eeprom_write_byte(0,'0');
	t2 = 0; //flag for if T/2 time crossing is next to be handled
     43c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <t2+0x1>
     440:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <t2>
	stop_counter = 0; //counter to stop PWM every STOPCYCLE/2 number of cycles
     444:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <stop_counter+0x1>
     448:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <stop_counter>
	data_received = 0; //set data received flag to 0 initially
     44c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <data_received+0x1>
     450:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <data_received>
	timer0_ovf_count = 0;//set timer0 overflow count to 0 initially
     454:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <timer0_ovf_count+0x1>
     458:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <timer0_ovf_count>
	current_i = 0; //initialise current reading index
     45c:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <current_i+0x1>
     460:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <current_i>
	backemfreadingindex = 0; //initialise backemf reading index
     464:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <backemfreadingindex+0x1>
     468:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <backemfreadingindex>
	readadc = 0;
     46c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <readadc+0x1>
     470:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <readadc>
	readadcv = 0;
     474:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <readadcv+0x1>
     478:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <readadcv>
	readadci = 0;
     47c:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <readadci+0x1>
     480:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <readadci>
	numcycles = 0;
     484:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <numcycles+0x1>
     488:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <numcycles>
	voltagereference = 5000;
     48c:	88 e8       	ldi	r24, 0x88	; 136
     48e:	93 e1       	ldi	r25, 0x13	; 19
     490:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <voltagereference+0x1>
     494:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <voltagereference>
	//set PWM ports as output
	DDRB |= ((1<<PB2)|(1<<PB1)|(1<<PB0));
     498:	87 b3       	in	r24, 0x17	; 23
     49a:	87 60       	ori	r24, 0x07	; 7
     49c:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<PD7);
     49e:	8f 9a       	sbi	0x11, 7	; 17
	
	//set normal timer mode
	TCCR2 &= ~(1<<WGM20);
     4a0:	85 b5       	in	r24, 0x25	; 37
     4a2:	8f 7b       	andi	r24, 0xBF	; 191
     4a4:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(1<<WGM21);
     4a6:	85 b5       	in	r24, 0x25	; 37
     4a8:	87 7f       	andi	r24, 0xF7	; 247
     4aa:	85 bd       	out	0x25, r24	; 37
	
	//disconnect OC2 port
	TCCR2 &= ~((1<<COM21) | (1<<COM20));
     4ac:	85 b5       	in	r24, 0x25	; 37
     4ae:	8f 7c       	andi	r24, 0xCF	; 207
     4b0:	85 bd       	out	0x25, r24	; 37
	
	//set output compare value for timer 2 between 0-255 (OCR2/255 % duty cycle)
	duty_request = 128;
     4b2:	80 e8       	ldi	r24, 0x80	; 128
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <duty_request+0x1>
     4ba:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <duty_request>
	OCR2 = duty_request;
     4be:	80 e8       	ldi	r24, 0x80	; 128
     4c0:	83 bd       	out	0x23, r24	; 35
	
	//set prescaler of 64 (gives effective PWM frequency of 980Hz)
	//TCCR2 |= (1<<CS22);
	//TCCR2 &= ~((1<<CS21) | (1<<CS20));
	//set prescaler of 256 (gives effective PWM frequency of 245Hz)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     4c2:	85 b5       	in	r24, 0x25	; 37
     4c4:	86 60       	ori	r24, 0x06	; 6
     4c6:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     4c8:	85 b5       	in	r24, 0x25	; 37
     4ca:	8e 7f       	andi	r24, 0xFE	; 254
     4cc:	85 bd       	out	0x25, r24	; 37
	
	//turn off PMOSes, turn on NMOSes so motor brakes?!
	//turn off left PMOS
	PORTB &= ~(1<<PB2);
     4ce:	c2 98       	cbi	0x18, 2	; 24
	//turn on left NMOS
	PORTB |= (1<<PB1);
     4d0:	c1 9a       	sbi	0x18, 1	; 24
	//turn off right PMOS
	PORTD &= ~(1<<PD7);
     4d2:	97 98       	cbi	0x12, 7	; 18
	//turn on right NMOS
	PORTB |= (1<<PB0);
     4d4:	c0 9a       	sbi	0x18, 0	; 24
	
	//set timer 1 to normal mode
	TCCR1B &= ~((1<<WGM13) | (1<<WGM12));
     4d6:	8e b5       	in	r24, 0x2e	; 46
     4d8:	87 7e       	andi	r24, 0xE7	; 231
     4da:	8e bd       	out	0x2e, r24	; 46
	TCCR1A &= ~((1<<WGM11) | (1<<WGM10));
     4dc:	8f b5       	in	r24, 0x2f	; 47
     4de:	8c 7f       	andi	r24, 0xFC	; 252
     4e0:	8f bd       	out	0x2f, r24	; 47
	
	//set prescaler to /256
	TCCR1B |= (1<<CS12);
     4e2:	8e b5       	in	r24, 0x2e	; 46
     4e4:	84 60       	ori	r24, 0x04	; 4
     4e6:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1<<CS11) | (1<<CS10));
     4e8:	8e b5       	in	r24, 0x2e	; 46
     4ea:	8c 7f       	andi	r24, 0xFC	; 252
     4ec:	8e bd       	out	0x2e, r24	; 46
	
	//set timer 1 overflow A and B compare values
	OCR1A = 1150; //for T/4
     4ee:	8e e7       	ldi	r24, 0x7E	; 126
     4f0:	94 e0       	ldi	r25, 0x04	; 4
     4f2:	9b bd       	out	0x2b, r25	; 43
     4f4:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 2300; //for 12.5Hz resonant frequency (for T/2)
     4f6:	8c ef       	ldi	r24, 0xFC	; 252
     4f8:	98 e0       	ldi	r25, 0x08	; 8
     4fa:	99 bd       	out	0x29, r25	; 41
     4fc:	88 bd       	out	0x28, r24	; 40
	//enable timer 2 compare match interrupt and overflow interrupt
	TIMSK |= ((1<<OCIE2) | (1<<TOIE2));
     4fe:	89 b7       	in	r24, 0x39	; 57
     500:	80 6c       	ori	r24, 0xC0	; 192
     502:	89 bf       	out	0x39, r24	; 57
	//enable timer 1 compare match A and B interrupts
	TIMSK |= ((1<<OCIE1A) | (1<<OCIE1B));
     504:	89 b7       	in	r24, 0x39	; 57
     506:	88 61       	ori	r24, 0x18	; 24
     508:	89 bf       	out	0x39, r24	; 57
	//enable timer 0 overflow interrupt
	TIMSK |= (1<<TOIE0);
     50a:	89 b7       	in	r24, 0x39	; 57
     50c:	81 60       	ori	r24, 0x01	; 1
     50e:	89 bf       	out	0x39, r24	; 57
	//mark T PWM pulse to be handled next
	t2 = 0;
     510:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <t2+0x1>
     514:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <t2>
	
	//enable and initialise UART
	uart_init();
     518:	ba d4       	rcall	.+2420   	; 0xe8e <uart_init>
	//enable and initialise ADC
	adc_init();
     51a:	cf dd       	rcall	.-1122   	; 0xba <adc_init>
	//enable global interrupts
	sei();
     51c:	78 94       	sei
					memcpy(check_req, &splitstrings[2][1], 3);
					check_req[3] = '\0';
					if (strcmp(check_req,"req") == 0){
						//if true, check mass flow request value
						char check_reqval[8];
						memcpy(check_reqval, &splitstrings[2][8], 7);
     51e:	9e 01       	movw	r18, r28
     520:	2f 5f       	subi	r18, 0xFF	; 255
     522:	3f 4f       	sbci	r19, 0xFF	; 255
     524:	38 8f       	std	Y+24, r19	; 0x18
     526:	2f 8b       	std	Y+23, r18	; 0x17
						//isolate value from key-value pair using apostrophe as the delimiter
						check_reqval[7] = '\0';
						char check_val[4];
						char* commapos = strchr(check_reqval, '"');
						memcpy(check_val, check_reqval, (commapos - check_reqval));
     528:	ae 01       	movw	r20, r28
     52a:	47 5f       	subi	r20, 0xF7	; 247
     52c:	5f 4f       	sbci	r21, 0xFF	; 255
     52e:	5a 8f       	std	Y+26, r21	; 0x1a
     530:	49 8f       	std	Y+25, r20	; 0x19
				}
			}
			//we have processed everything
			//free memory, and reset flags
			data_received = 0;
			transmit_data = 1;
     532:	88 24       	eor	r8, r8
     534:	83 94       	inc	r8
     536:	91 2c       	mov	r9, r1
							if ((voltage_left_on) || (voltage_right_on)){
								//store current ADC samples into array, do NOT reset the index between sampling intervals so we can build up a full array
								//also at the same time, multiply adc current value by the voltage value to get the instantaneous power array
								//store only alternate samples (i % 50 == 0) (so we don't get more than ~50 samples for the whole of T/4)
								reading = adc_convert(adc_read(ISHIFTEDCHANNEL));
								if ((current_i % 50) == 0){
     538:	02 e3       	ldi	r16, 0x32	; 50
     53a:	40 2e       	mov	r4, r16
     53c:	51 2c       	mov	r5, r1
						TCCR0 &= ~((1<<CS01)|(1<<CS00));
						//read back emf voltage
						reading = adc_convert((adc_read(RHSVOLTAGECHANNEL)));
						//back emf sample storage (to avoid buffer overflow)
						if (backemfreadingindex >= 3){
							backemfreadingindex = 2;
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	68 2e       	mov	r6, r24
     542:	71 2c       	mov	r7, r1
		if (backemffound){
			if (TCNT1 < OCR1A){
				//if (((backemftime - OCR1A) < 1000) || (OCR1A - (backemftime) < 1000)){
				backemffound = 0; //reset found flag
				//backemftime = 1250;
				OCR1A = 1250; //t/4 = backemf/16
     544:	92 ee       	ldi	r25, 0xE2	; 226
     546:	29 2e       	mov	r2, r25
     548:	94 e0       	ldi	r25, 0x04	; 4
     54a:	39 2e       	mov	r3, r25
	sei();
    while (1)
    {
		//gradual duty cycle increase logic to couple with resonant frequency detection module
		//this is because changing the PWM duty cycle also changes the resonant frequency
		if (OCR2 < duty_request)
     54c:	23 b5       	in	r18, 0x23	; 35
     54e:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <duty_request>
     552:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <duty_request+0x1>
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	28 17       	cp	r18, r24
     55a:	39 07       	cpc	r19, r25
     55c:	10 f4       	brcc	.+4      	; 0x562 <__stack+0x103>
			OCR2 = duty_request + 1;
     55e:	8f 5f       	subi	r24, 0xFF	; 255
     560:	06 c0       	rjmp	.+12     	; 0x56e <__stack+0x10f>
		else if (OCR2 > duty_request){
     562:	23 b5       	in	r18, 0x23	; 35
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	82 17       	cp	r24, r18
     568:	93 07       	cpc	r25, r19
     56a:	10 f4       	brcc	.+4      	; 0x570 <__stack+0x111>
			OCR2 = duty_request - 1;
     56c:	81 50       	subi	r24, 0x01	; 1
     56e:	83 bd       	out	0x23, r24	; 35
		}
		
		//if data has been received, parse json
		if (data_received){
     570:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <data_received>
     574:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <data_received+0x1>
     578:	89 2b       	or	r24, r25
     57a:	09 f4       	brne	.+2      	; 0x57e <__stack+0x11f>
     57c:	c1 c0       	rjmp	.+386    	; 0x700 <__stack+0x2a1>
			const char left_bracket[2] = "{";
     57e:	8b e7       	ldi	r24, 0x7B	; 123
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	9e 8b       	std	Y+22, r25	; 0x16
     584:	8d 8b       	std	Y+21, r24	; 0x15
			char** splitstrings; //pointer to hold arrays of c-strings
			unsigned int k = 1; //iterator for array of c-strings
			
			splitstrings = (char**)malloc(10*sizeof(char*));
     586:	84 e1       	ldi	r24, 0x14	; 20
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	54 d7       	rcall	.+3752   	; 0x1434 <malloc>
     58c:	8c 01       	movw	r16, r24
     58e:	7c 01       	movw	r14, r24
     590:	5c 01       	movw	r10, r24
     592:	94 e1       	ldi	r25, 0x14	; 20
     594:	a9 0e       	add	r10, r25
     596:	b1 1c       	adc	r11, r1
     598:	68 01       	movw	r12, r16
			
			for (int j = 0; j < 10; ++j){
				splitstrings[j] = (char*) malloc(10);
     59a:	8a e0       	ldi	r24, 0x0A	; 10
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	4a d7       	rcall	.+3732   	; 0x1434 <malloc>
     5a0:	d6 01       	movw	r26, r12
     5a2:	8d 93       	st	X+, r24
     5a4:	9d 93       	st	X+, r25
     5a6:	6d 01       	movw	r12, r26
			char** splitstrings; //pointer to hold arrays of c-strings
			unsigned int k = 1; //iterator for array of c-strings
			
			splitstrings = (char**)malloc(10*sizeof(char*));
			
			for (int j = 0; j < 10; ++j){
     5a8:	aa 15       	cp	r26, r10
     5aa:	bb 05       	cpc	r27, r11
     5ac:	b1 f7       	brne	.-20     	; 0x59a <__stack+0x13b>
				splitstrings[j] = (char*) malloc(10);
			}
			
			splitstrings[0] = strtok(str_buffer,left_bracket);
     5ae:	be 01       	movw	r22, r28
     5b0:	6b 5e       	subi	r22, 0xEB	; 235
     5b2:	7f 4f       	sbci	r23, 0xFF	; 255
     5b4:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <str_buffer>
     5b8:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <str_buffer+0x1>
     5bc:	34 da       	rcall	.-2968   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
     5be:	f8 01       	movw	r30, r16
     5c0:	91 83       	std	Z+1, r25	; 0x01
     5c2:	80 83       	st	Z, r24
			
			while (splitstrings[k-1] != NULL){
     5c4:	f7 01       	movw	r30, r14
     5c6:	81 91       	ld	r24, Z+
     5c8:	91 91       	ld	r25, Z+
     5ca:	7f 01       	movw	r14, r30
     5cc:	89 2b       	or	r24, r25
     5ce:	51 f0       	breq	.+20     	; 0x5e4 <__stack+0x185>
				splitstrings[k] = strtok(NULL,left_bracket);
     5d0:	be 01       	movw	r22, r28
     5d2:	6b 5e       	subi	r22, 0xEB	; 235
     5d4:	7f 4f       	sbci	r23, 0xFF	; 255
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	25 da       	rcall	.-2998   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
     5dc:	d7 01       	movw	r26, r14
     5de:	8d 93       	st	X+, r24
     5e0:	9c 93       	st	X, r25
     5e2:	f0 cf       	rjmp	.-32     	; 0x5c4 <__stack+0x165>
				++k;
			}
			
			//extract and validate data from JSON
			//check if id == 3
			if (splitstrings[0][1] == '3'){
     5e4:	d8 01       	movw	r26, r16
     5e6:	ed 91       	ld	r30, X+
     5e8:	fc 91       	ld	r31, X
     5ea:	11 97       	sbiw	r26, 0x01	; 1
     5ec:	81 81       	ldd	r24, Z+1	; 0x01
     5ee:	83 33       	cpi	r24, 0x33	; 51
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <__stack+0x195>
     5f2:	77 c0       	rjmp	.+238    	; 0x6e2 <__stack+0x283>
				//if true, check mfc key
				char check_mfc[4];
				memcpy(check_mfc, &splitstrings[1][1], 3);
     5f4:	12 96       	adiw	r26, 0x02	; 2
     5f6:	ed 91       	ld	r30, X+
     5f8:	fc 91       	ld	r31, X
     5fa:	13 97       	sbiw	r26, 0x03	; 3
     5fc:	31 96       	adiw	r30, 0x01	; 1
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	de 01       	movw	r26, r28
     602:	51 96       	adiw	r26, 0x11	; 17
     604:	01 90       	ld	r0, Z+
     606:	0d 92       	st	X+, r0
     608:	8a 95       	dec	r24
     60a:	e1 f7       	brne	.-8      	; 0x604 <__stack+0x1a5>
				check_mfc[3] = '\0';
     60c:	1c 8a       	std	Y+20, r1	; 0x14
				//check for valid MFC key
				if (strcmp(check_mfc,"mfc") == 0){
     60e:	64 e8       	ldi	r22, 0x84	; 132
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	ce 01       	movw	r24, r28
     614:	41 96       	adiw	r24, 0x11	; 17
     616:	31 da       	rcall	.-2974   	; 0xfffffa7a <__eeprom_end+0xff7efa7a>
     618:	89 2b       	or	r24, r25
     61a:	09 f0       	breq	.+2      	; 0x61e <__stack+0x1bf>
     61c:	62 c0       	rjmp	.+196    	; 0x6e2 <__stack+0x283>
					//if true, check if req key is present
					char check_req[4];
					memcpy(check_req, &splitstrings[2][1], 3);
     61e:	f8 01       	movw	r30, r16
     620:	e4 80       	ldd	r14, Z+4	; 0x04
     622:	f5 80       	ldd	r15, Z+5	; 0x05
     624:	f7 01       	movw	r30, r14
     626:	31 96       	adiw	r30, 0x01	; 1
     628:	83 e0       	ldi	r24, 0x03	; 3
     62a:	de 01       	movw	r26, r28
     62c:	1d 96       	adiw	r26, 0x0d	; 13
     62e:	01 90       	ld	r0, Z+
     630:	0d 92       	st	X+, r0
     632:	8a 95       	dec	r24
     634:	e1 f7       	brne	.-8      	; 0x62e <__stack+0x1cf>
					check_req[3] = '\0';
     636:	18 8a       	std	Y+16, r1	; 0x10
					if (strcmp(check_req,"req") == 0){
     638:	68 e8       	ldi	r22, 0x88	; 136
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	ce 01       	movw	r24, r28
     63e:	0d 96       	adiw	r24, 0x0d	; 13
     640:	1c da       	rcall	.-3016   	; 0xfffffa7a <__eeprom_end+0xff7efa7a>
     642:	89 2b       	or	r24, r25
     644:	09 f0       	breq	.+2      	; 0x648 <__stack+0x1e9>
     646:	4d c0       	rjmp	.+154    	; 0x6e2 <__stack+0x283>
						//if true, check mass flow request value
						char check_reqval[8];
						memcpy(check_reqval, &splitstrings[2][8], 7);
     648:	f7 01       	movw	r30, r14
     64a:	38 96       	adiw	r30, 0x08	; 8
     64c:	87 e0       	ldi	r24, 0x07	; 7
     64e:	de 01       	movw	r26, r28
     650:	11 96       	adiw	r26, 0x01	; 1
     652:	01 90       	ld	r0, Z+
     654:	0d 92       	st	X+, r0
     656:	8a 95       	dec	r24
     658:	e1 f7       	brne	.-8      	; 0x652 <__stack+0x1f3>
						//isolate value from key-value pair using apostrophe as the delimiter
						check_reqval[7] = '\0';
     65a:	18 86       	std	Y+8, r1	; 0x08
						char check_val[4];
						char* commapos = strchr(check_reqval, '"');
     65c:	62 e2       	ldi	r22, 0x22	; 34
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	ce 01       	movw	r24, r28
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	ff d9       	rcall	.-3074   	; 0xfffffa64 <__eeprom_end+0xff7efa64>
						memcpy(check_val, check_reqval, (commapos - check_reqval));
     666:	7c 01       	movw	r14, r24
     668:	2f 89       	ldd	r18, Y+23	; 0x17
     66a:	38 8d       	ldd	r19, Y+24	; 0x18
     66c:	e2 1a       	sub	r14, r18
     66e:	f3 0a       	sbc	r15, r19
     670:	a7 01       	movw	r20, r14
     672:	be 01       	movw	r22, r28
     674:	6f 5f       	subi	r22, 0xFF	; 255
     676:	7f 4f       	sbci	r23, 0xFF	; 255
     678:	ce 01       	movw	r24, r28
     67a:	09 96       	adiw	r24, 0x09	; 9
     67c:	d8 d9       	rcall	.-3152   	; 0xfffffa2e <__eeprom_end+0xff7efa2e>
						check_val[commapos - check_reqval] = '\0';
     67e:	e9 e0       	ldi	r30, 0x09	; 9
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	ec 0f       	add	r30, r28
     684:	fd 1f       	adc	r31, r29
     686:	ee 0d       	add	r30, r14
     688:	ff 1d       	adc	r31, r15
     68a:	10 82       	st	Z, r1
						if (check_val[0] != '\0'){
     68c:	89 85       	ldd	r24, Y+9	; 0x09
     68e:	88 23       	and	r24, r24
     690:	41 f1       	breq	.+80     	; 0x6e2 <__stack+0x283>
     692:	fe 01       	movw	r30, r28
     694:	39 96       	adiw	r30, 0x09	; 9
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
							//if value was not empty
							unsigned int notzero = 0;
							//check if value is 0
							//we need to check if we received a 0 since strtol() returns a 0 on invalid inputs as well
							for (int n = 0; n < (commapos - check_reqval);++n){
     69a:	9f 01       	movw	r18, r30
     69c:	49 8d       	ldd	r20, Y+25	; 0x19
     69e:	5a 8d       	ldd	r21, Y+26	; 0x1a
     6a0:	24 1b       	sub	r18, r20
     6a2:	35 0b       	sbc	r19, r21
     6a4:	2e 15       	cp	r18, r14
     6a6:	3f 05       	cpc	r19, r15
     6a8:	34 f4       	brge	.+12     	; 0x6b6 <__stack+0x257>
								if (check_val[n] != '0'){
     6aa:	21 91       	ld	r18, Z+
     6ac:	20 33       	cpi	r18, 0x30	; 48
     6ae:	a9 f3       	breq	.-22     	; 0x69a <__stack+0x23b>
									notzero = 1;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	f2 cf       	rjmp	.-28     	; 0x69a <__stack+0x23b>
								}
							}
							if (notzero == 1){
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	81 f4       	brne	.+32     	; 0x6da <__stack+0x27b>
								int duty_received = strtol(check_val,NULL,10); //turn duty cycle into a base 10 value
     6ba:	4a e0       	ldi	r20, 0x0A	; 10
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	ce 01       	movw	r24, r28
     6c4:	09 96       	adiw	r24, 0x09	; 9
     6c6:	96 d8       	rcall	.-3796   	; 0xfffff7f4 <__eeprom_end+0xff7ef7f4>
								if ((duty_received >= 0) && (duty_received <= 255)){
     6c8:	6f 3f       	cpi	r22, 0xFF	; 255
     6ca:	71 05       	cpc	r23, r1
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <__stack+0x271>
     6ce:	48 f4       	brcc	.+18     	; 0x6e2 <__stack+0x283>
									//if true, duty request value is valid
									duty_request = duty_received;
     6d0:	70 93 62 02 	sts	0x0262, r23	; 0x800262 <duty_request+0x1>
     6d4:	60 93 61 02 	sts	0x0261, r22	; 0x800261 <duty_request>
     6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <__stack+0x283>
								}
							}
							else{
								duty_request = 0; //stop the motor
     6da:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <duty_request+0x1>
     6de:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <duty_request>
					}
				}
			}
			//we have processed everything
			//free memory, and reset flags
			data_received = 0;
     6e2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <data_received+0x1>
     6e6:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <data_received>
			transmit_data = 1;
     6ea:	90 92 a3 00 	sts	0x00A3, r9	; 0x8000a3 <transmit_data+0x1>
     6ee:	80 92 a2 00 	sts	0x00A2, r8	; 0x8000a2 <transmit_data>
			//DONT FORGET TO FREE MEMORY
			free(str_buffer);
     6f2:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <str_buffer>
     6f6:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <str_buffer+0x1>
     6fa:	34 d7       	rcall	.+3688   	; 0x1564 <free>
			free(splitstrings);
     6fc:	c8 01       	movw	r24, r16
     6fe:	32 d7       	rcall	.+3684   	; 0x1564 <free>
		}
		if (transmit_data){
     700:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <transmit_data>
     704:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <transmit_data+0x1>
     708:	89 2b       	or	r24, r25
     70a:	41 f0       	breq	.+16     	; 0x71c <__stack+0x2bd>
			//disable receiver while transmitting to avoid echo-back
			UCSRB &= ~(1<<RXEN);
     70c:	54 98       	cbi	0x0a, 4	; 10
			//sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3d\",\n%11s\"cur\": \"%3d\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%d.%dW\",\n%11s\"freq\": \"%d.%dHz\",\n%11s\"curr\": \"%dmA\",\n%11s\"volt\": \"%d.%dV\",\n%7s}\n%3s}\n}", "", "", "", "", "", duty_request, "", OCR2, "", "", "", "", "", powerleft, powerright, "", freqleft, freqright, "", current, "", voltleft, voltright, "", "");
			//TODO: add code to detect and report errors/error messages
			//TODO: also add code to re-transmit errors if detected
			//uart_transmit_string(transmit_buffer);
			//wait for last transmission to fully complete
			while (UDREMPTY == 0);
     70e:	5d 9b       	sbis	0x0b, 5	; 11
     710:	fe cf       	rjmp	.-4      	; 0x70e <__stack+0x2af>
			//reenable receiver after transmission is complete
			UCSRB |= (1<<RXEN);
     712:	54 9a       	sbi	0x0a, 4	; 10
			transmit_data = 0;
     714:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <transmit_data+0x1>
     718:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <transmit_data>
		}
		uart_transmit(48);
     71c:	80 e3       	ldi	r24, 0x30	; 48
     71e:	c8 d3       	rcall	.+1936   	; 0xeb0 <uart_transmit>
		//if adc has to be read
		if (numcycles >= 50){
     720:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <numcycles>
     724:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <numcycles+0x1>
     728:	c2 97       	sbiw	r24, 0x32	; 50
     72a:	08 f4       	brcc	.+2      	; 0x72e <__stack+0x2cf>
     72c:	69 c2       	rjmp	.+1234   	; 0xc00 <__stack+0x7a1>
			if (readadc){
     72e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <readadc>
     732:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <readadc+0x1>
     736:	89 2b       	or	r24, r25
     738:	09 f4       	brne	.+2      	; 0x73c <__stack+0x2dd>
     73a:	62 c2       	rjmp	.+1220   	; 0xc00 <__stack+0x7a1>
				if (!backemffound){
     73c:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <backemffound>
     740:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <backemffound+0x1>
     744:	89 2b       	or	r24, r25
     746:	09 f0       	breq	.+2      	; 0x74a <__stack+0x2eb>
     748:	6c c1       	rjmp	.+728    	; 0xa22 <__stack+0x5c3>
					if (readadcmotorleft){
     74a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <readadcmotorleft>
     74e:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <readadcmotorleft+0x1>
     752:	89 2b       	or	r24, r25
     754:	09 f4       	brne	.+2      	; 0x758 <__stack+0x2f9>
     756:	af c0       	rjmp	.+350    	; 0x8b6 <__stack+0x457>
						//turn off timer 0
						TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     758:	83 b7       	in	r24, 0x33	; 51
     75a:	88 7f       	andi	r24, 0xF8	; 248
     75c:	83 bf       	out	0x33, r24	; 51
						//store time value for current sample
						backemftime = (TCNT0 + (timer0_ovf_count*256)); //store time value in 16 microseconds
     75e:	82 b7       	in	r24, 0x32	; 50
     760:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <timer0_ovf_count>
     764:	10 91 c7 00 	lds	r17, 0x00C7	; 0x8000c7 <timer0_ovf_count+0x1>
     768:	10 2f       	mov	r17, r16
     76a:	00 27       	eor	r16, r16
     76c:	08 0f       	add	r16, r24
     76e:	11 1d       	adc	r17, r1
     770:	00 93 74 00 	sts	0x0074, r16	; 0x800074 <backemftime>
     774:	10 93 75 00 	sts	0x0075, r17	; 0x800075 <backemftime+0x1>
     778:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <backemftime+0x2>
     77c:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <backemftime+0x3>
     780:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <backemftime+0x4>
     784:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <backemftime+0x5>
     788:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <backemftime+0x6>
     78c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <backemftime+0x7>
						//turn on timer 0 with prescaler /256 to keep measuring time
						TCCR0 |= ((1<<CS02));
     790:	83 b7       	in	r24, 0x33	; 51
     792:	84 60       	ori	r24, 0x04	; 4
     794:	83 bf       	out	0x33, r24	; 51
						TCCR0 &= ~((1<<CS01)|(1<<CS00));
     796:	83 b7       	in	r24, 0x33	; 51
     798:	8c 7f       	andi	r24, 0xFC	; 252
     79a:	83 bf       	out	0x33, r24	; 51
						
						reading = adc_convert((adc_read(LHSVOLTAGECHANNEL)));
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	5f dc       	rcall	.-1858   	; 0x5e <adc_read>
     7a0:	6a dc       	rcall	.-1836   	; 0x76 <adc_convert>
     7a2:	70 93 a5 00 	sts	0x00A5, r23	; 0x8000a5 <reading+0x1>
     7a6:	60 93 a4 00 	sts	0x00A4, r22	; 0x8000a4 <reading>
						if (backemfreadingindex >= 3){
     7aa:	20 91 c2 00 	lds	r18, 0x00C2	; 0x8000c2 <backemfreadingindex>
     7ae:	30 91 c3 00 	lds	r19, 0x00C3	; 0x8000c3 <backemfreadingindex+0x1>
     7b2:	23 30       	cpi	r18, 0x03	; 3
     7b4:	31 05       	cpc	r19, r1
     7b6:	c0 f0       	brcs	.+48     	; 0x7e8 <__stack+0x389>
							backemfreadingindex = 2;
     7b8:	70 92 c3 00 	sts	0x00C3, r7	; 0x8000c3 <backemfreadingindex+0x1>
     7bc:	60 92 c2 00 	sts	0x00C2, r6	; 0x8000c2 <backemfreadingindex>
							backemfreading[0] = backemfreading[1];
     7c0:	20 91 cd 00 	lds	r18, 0x00CD	; 0x8000cd <backemfreading+0x2>
     7c4:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <backemfreading+0x3>
     7c8:	30 93 cc 00 	sts	0x00CC, r19	; 0x8000cc <backemfreading+0x1>
     7cc:	20 93 cb 00 	sts	0x00CB, r18	; 0x8000cb <backemfreading>
							backemfreading[1] = backemfreading[2];
     7d0:	20 91 cf 00 	lds	r18, 0x00CF	; 0x8000cf <backemfreading+0x4>
     7d4:	30 91 d0 00 	lds	r19, 0x00D0	; 0x8000d0 <backemfreading+0x5>
     7d8:	30 93 ce 00 	sts	0x00CE, r19	; 0x8000ce <backemfreading+0x3>
     7dc:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <backemfreading+0x2>
							backemfreading[2] = 0;
     7e0:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <backemfreading+0x5>
     7e4:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <backemfreading+0x4>
						}
						
						backemfreading[backemfreadingindex] = reading;
     7e8:	e0 91 c2 00 	lds	r30, 0x00C2	; 0x8000c2 <backemfreadingindex>
     7ec:	f0 91 c3 00 	lds	r31, 0x00C3	; 0x8000c3 <backemfreadingindex+0x1>
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	e5 53       	subi	r30, 0x35	; 53
     7f6:	ff 4f       	sbci	r31, 0xFF	; 255
     7f8:	71 83       	std	Z+1, r23	; 0x01
     7fa:	60 83       	st	Z, r22
						if (backemfreadingindex < 3) ++backemfreadingindex;
     7fc:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <backemfreadingindex>
     800:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <backemfreadingindex+0x1>
     804:	03 97       	sbiw	r24, 0x03	; 3
     806:	48 f4       	brcc	.+18     	; 0x81a <__stack+0x3bb>
     808:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <backemfreadingindex>
     80c:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <backemfreadingindex+0x1>
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <backemfreadingindex+0x1>
     816:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <backemfreadingindex>
						
						//if we have gathered at least 3 samples so far, start testing for maximum point reachage
						if (backemfreadingindex == 3){
     81a:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <backemfreadingindex>
     81e:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <backemfreadingindex+0x1>
     822:	03 97       	sbiw	r24, 0x03	; 3
     824:	09 f0       	breq	.+2      	; 0x828 <__stack+0x3c9>
     826:	ec c1       	rjmp	.+984    	; 0xc00 <__stack+0x7a1>
							if ((backemfreading[2] - backemfreading[1]) < 10){ //&& ((backemfreading[2] - backemfreading[0]) < 10) && ((backemfreading[1] - backemfreading[0]) < 10)){//hysteresis of 50mV
     828:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <backemfreading+0x4>
     82c:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <backemfreading+0x5>
     830:	20 91 cd 00 	lds	r18, 0x00CD	; 0x8000cd <backemfreading+0x2>
     834:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <backemfreading+0x3>
     838:	82 1b       	sub	r24, r18
     83a:	93 0b       	sbc	r25, r19
     83c:	0a 97       	sbiw	r24, 0x0a	; 10
     83e:	08 f0       	brcs	.+2      	; 0x842 <__stack+0x3e3>
     840:	df c1       	rjmp	.+958    	; 0xc00 <__stack+0x7a1>
								//we have found max, reset timer 0 count and overflow counter, and calculate frequency using stored time
								backemffound = 1;
     842:	90 92 b7 00 	sts	0x00B7, r9	; 0x8000b7 <backemffound+0x1>
     846:	80 92 b6 00 	sts	0x00B6, r8	; 0x8000b6 <backemffound>
								char buf[10];
								//sprintf(buf,"%d",backemftime);
								//uart_transmit_string(buf);
								TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     84a:	83 b7       	in	r24, 0x33	; 51
     84c:	88 7f       	andi	r24, 0xF8	; 248
     84e:	83 bf       	out	0x33, r24	; 51
								TCNT0 = 0;
     850:	12 be       	out	0x32, r1	; 50
								timer0_ovf_count = 0;
     852:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <timer0_ovf_count+0x1>
     856:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <timer0_ovf_count>
								backemffreq = 1000000000/backemftime; //find backemf frequency in millihertz
     85a:	a0 90 74 00 	lds	r10, 0x0074	; 0x800074 <backemftime>
     85e:	b0 90 75 00 	lds	r11, 0x0075	; 0x800075 <backemftime+0x1>
     862:	c0 90 76 00 	lds	r12, 0x0076	; 0x800076 <backemftime+0x2>
     866:	d0 90 77 00 	lds	r13, 0x0077	; 0x800077 <backemftime+0x3>
     86a:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <backemftime+0x4>
     86e:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <backemftime+0x5>
     872:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <backemftime+0x6>
     876:	10 91 7b 00 	lds	r17, 0x007B	; 0x80007b <backemftime+0x7>
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	3a ec       	ldi	r19, 0xCA	; 202
     87e:	4a e9       	ldi	r20, 0x9A	; 154
     880:	5b e3       	ldi	r21, 0x3B	; 59
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	67 d5       	rcall	.+2766   	; 0x135a <__udivdi3>
     88c:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <backemffreq>
     890:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <backemffreq+0x1>
     894:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <backemffreq+0x2>
     898:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <backemffreq+0x3>
     89c:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <backemffreq+0x4>
     8a0:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <backemffreq+0x5>
     8a4:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <backemffreq+0x6>
     8a8:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <backemffreq+0x7>
								readadcmotorleft = 0;//we have successfully found back-emf, no need to keep reading
     8ac:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <readadcmotorleft+0x1>
     8b0:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <readadcmotorleft>
     8b4:	a5 c1       	rjmp	.+842    	; 0xc00 <__stack+0x7a1>
						
						//left side motor back emf is ready to be read, start timer and keep reading (and storing current and previous timer value each time) until max value stabilises
						//possibly enable ADC interrupt and write a separate function to do non-blocking ADC converts and timer stores to not block other code
						//once max has stabilised and corresponding time has been obtained, calculate resonant frequency and adjust duty cycle on next while () iteration (if required) and do resonant_done = 1;
					}
					else if (readadcmotorright){
     8b6:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <readadcmotorright>
     8ba:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <readadcmotorright+0x1>
     8be:	89 2b       	or	r24, r25
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <__stack+0x465>
     8c2:	9e c1       	rjmp	.+828    	; 0xc00 <__stack+0x7a1>
						//turn off timer 0
						TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     8c4:	83 b7       	in	r24, 0x33	; 51
     8c6:	88 7f       	andi	r24, 0xF8	; 248
     8c8:	83 bf       	out	0x33, r24	; 51
						//store time value for current sample
						backemftime = (TCNT0 + (timer0_ovf_count*256)); //store time value in 16 microseconds
     8ca:	82 b7       	in	r24, 0x32	; 50
     8cc:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <timer0_ovf_count>
     8d0:	10 91 c7 00 	lds	r17, 0x00C7	; 0x8000c7 <timer0_ovf_count+0x1>
     8d4:	10 2f       	mov	r17, r16
     8d6:	00 27       	eor	r16, r16
     8d8:	08 0f       	add	r16, r24
     8da:	11 1d       	adc	r17, r1
     8dc:	00 93 74 00 	sts	0x0074, r16	; 0x800074 <backemftime>
     8e0:	10 93 75 00 	sts	0x0075, r17	; 0x800075 <backemftime+0x1>
     8e4:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <backemftime+0x2>
     8e8:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <backemftime+0x3>
     8ec:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <backemftime+0x4>
     8f0:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <backemftime+0x5>
     8f4:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <backemftime+0x6>
     8f8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <backemftime+0x7>
						//turn on timer 0 with prescaler /256 to keep measuring time
						TCCR0 |= ((1<<CS02));
     8fc:	83 b7       	in	r24, 0x33	; 51
     8fe:	84 60       	ori	r24, 0x04	; 4
     900:	83 bf       	out	0x33, r24	; 51
						TCCR0 &= ~((1<<CS01)|(1<<CS00));
     902:	83 b7       	in	r24, 0x33	; 51
     904:	8c 7f       	andi	r24, 0xFC	; 252
     906:	83 bf       	out	0x33, r24	; 51
						//read back emf voltage
						reading = adc_convert((adc_read(RHSVOLTAGECHANNEL)));
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	a9 db       	rcall	.-2222   	; 0x5e <adc_read>
     90c:	b4 db       	rcall	.-2200   	; 0x76 <adc_convert>
     90e:	70 93 a5 00 	sts	0x00A5, r23	; 0x8000a5 <reading+0x1>
     912:	60 93 a4 00 	sts	0x00A4, r22	; 0x8000a4 <reading>
						//back emf sample storage (to avoid buffer overflow)
						if (backemfreadingindex >= 3){
     916:	20 91 c2 00 	lds	r18, 0x00C2	; 0x8000c2 <backemfreadingindex>
     91a:	30 91 c3 00 	lds	r19, 0x00C3	; 0x8000c3 <backemfreadingindex+0x1>
     91e:	23 30       	cpi	r18, 0x03	; 3
     920:	31 05       	cpc	r19, r1
     922:	c0 f0       	brcs	.+48     	; 0x954 <__stack+0x4f5>
							backemfreadingindex = 2;
     924:	70 92 c3 00 	sts	0x00C3, r7	; 0x8000c3 <backemfreadingindex+0x1>
     928:	60 92 c2 00 	sts	0x00C2, r6	; 0x8000c2 <backemfreadingindex>
							backemfreading[0] = backemfreading[1];
     92c:	20 91 cd 00 	lds	r18, 0x00CD	; 0x8000cd <backemfreading+0x2>
     930:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <backemfreading+0x3>
     934:	30 93 cc 00 	sts	0x00CC, r19	; 0x8000cc <backemfreading+0x1>
     938:	20 93 cb 00 	sts	0x00CB, r18	; 0x8000cb <backemfreading>
							backemfreading[1] = backemfreading[2];
     93c:	20 91 cf 00 	lds	r18, 0x00CF	; 0x8000cf <backemfreading+0x4>
     940:	30 91 d0 00 	lds	r19, 0x00D0	; 0x8000d0 <backemfreading+0x5>
     944:	30 93 ce 00 	sts	0x00CE, r19	; 0x8000ce <backemfreading+0x3>
     948:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <backemfreading+0x2>
							backemfreading[2] = 0;
     94c:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <backemfreading+0x5>
     950:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <backemfreading+0x4>
						}
						backemfreading[backemfreadingindex] = reading;
     954:	e0 91 c2 00 	lds	r30, 0x00C2	; 0x8000c2 <backemfreadingindex>
     958:	f0 91 c3 00 	lds	r31, 0x00C3	; 0x8000c3 <backemfreadingindex+0x1>
     95c:	ee 0f       	add	r30, r30
     95e:	ff 1f       	adc	r31, r31
     960:	e5 53       	subi	r30, 0x35	; 53
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	71 83       	std	Z+1, r23	; 0x01
     966:	60 83       	st	Z, r22
						if (backemfreadingindex < 3) ++backemfreadingindex;
     968:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <backemfreadingindex>
     96c:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <backemfreadingindex+0x1>
     970:	03 97       	sbiw	r24, 0x03	; 3
     972:	48 f4       	brcc	.+18     	; 0x986 <__stack+0x527>
     974:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <backemfreadingindex>
     978:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <backemfreadingindex+0x1>
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <backemfreadingindex+0x1>
     982:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <backemfreadingindex>
						
						//if we have gathered at least 3 samples so far, start testing for maximum point reachage
						if (backemfreadingindex == 3){
     986:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <backemfreadingindex>
     98a:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <backemfreadingindex+0x1>
     98e:	03 97       	sbiw	r24, 0x03	; 3
     990:	09 f0       	breq	.+2      	; 0x994 <__stack+0x535>
     992:	36 c1       	rjmp	.+620    	; 0xc00 <__stack+0x7a1>
							if ((backemfreading[2] - backemfreading[1]) < 10){ //&& ((backemfreading[2] - backemfreading[0]) < 10) && ((backemfreading[1] - backemfreading[0]) < 10)){//hysteresis of 50mV
     994:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <backemfreading+0x4>
     998:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <backemfreading+0x5>
     99c:	20 91 cd 00 	lds	r18, 0x00CD	; 0x8000cd <backemfreading+0x2>
     9a0:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <backemfreading+0x3>
     9a4:	82 1b       	sub	r24, r18
     9a6:	93 0b       	sbc	r25, r19
     9a8:	0a 97       	sbiw	r24, 0x0a	; 10
     9aa:	08 f0       	brcs	.+2      	; 0x9ae <__stack+0x54f>
     9ac:	29 c1       	rjmp	.+594    	; 0xc00 <__stack+0x7a1>
								//we have found max, reset timer 0 count and overflow counter, and calculate frequency using stored time
								backemffound = 1;
     9ae:	90 92 b7 00 	sts	0x00B7, r9	; 0x8000b7 <backemffound+0x1>
     9b2:	80 92 b6 00 	sts	0x00B6, r8	; 0x8000b6 <backemffound>
								char buf[10];
								//sprintf(buf,"%d",backemftime);
								//uart_transmit_string(buf);
								TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     9b6:	83 b7       	in	r24, 0x33	; 51
     9b8:	88 7f       	andi	r24, 0xF8	; 248
     9ba:	83 bf       	out	0x33, r24	; 51
								TCNT0 = 0;
     9bc:	12 be       	out	0x32, r1	; 50
								timer0_ovf_count = 0;
     9be:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <timer0_ovf_count+0x1>
     9c2:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <timer0_ovf_count>
								backemffreq = 1000000000/backemftime; //find backemf frequency in millihertz
     9c6:	a0 90 74 00 	lds	r10, 0x0074	; 0x800074 <backemftime>
     9ca:	b0 90 75 00 	lds	r11, 0x0075	; 0x800075 <backemftime+0x1>
     9ce:	c0 90 76 00 	lds	r12, 0x0076	; 0x800076 <backemftime+0x2>
     9d2:	d0 90 77 00 	lds	r13, 0x0077	; 0x800077 <backemftime+0x3>
     9d6:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <backemftime+0x4>
     9da:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <backemftime+0x5>
     9de:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <backemftime+0x6>
     9e2:	10 91 7b 00 	lds	r17, 0x007B	; 0x80007b <backemftime+0x7>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	3a ec       	ldi	r19, 0xCA	; 202
     9ea:	4a e9       	ldi	r20, 0x9A	; 154
     9ec:	5b e3       	ldi	r21, 0x3B	; 59
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	b1 d4       	rcall	.+2402   	; 0x135a <__udivdi3>
     9f8:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <backemffreq>
     9fc:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <backemffreq+0x1>
     a00:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <backemffreq+0x2>
     a04:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <backemffreq+0x3>
     a08:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <backemffreq+0x4>
     a0c:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <backemffreq+0x5>
     a10:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <backemffreq+0x6>
     a14:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <backemffreq+0x7>
								readadcmotorright = 0;//we have successfully found back-emf, no need to keep reading
     a18:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <readadcmotorright+0x1>
     a1c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <readadcmotorright>
     a20:	ef c0       	rjmp	.+478    	; 0xc00 <__stack+0x7a1>
						//possibly enable ADC interrupt and write a separate function to do non-blocking ADC converts and timer stores to not block other code
						//once max has stabilised and corresponding time has been obtained, calculate resonant frequency and adjust duty cycle on next while () iteration (if required) and do resonant_done = 1;
					}
				}
				else{//resonant frequency calculation has priority, so do everything else in this else block
					if (readadcv){
     a22:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <readadcv>
     a26:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <readadcv+0x1>
     a2a:	89 2b       	or	r24, r25
     a2c:	41 f1       	breq	.+80     	; 0xa7e <__stack+0x61f>
						if (voltage_left_on){
     a2e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <voltage_left_on>
     a32:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <voltage_left_on+0x1>
     a36:	89 2b       	or	r24, r25
     a38:	11 f0       	breq	.+4      	; 0xa3e <__stack+0x5df>
							//read motor_left for VCC
							reading = adc_convert(adc_read(LHSVOLTAGECHANNEL));
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	07 c0       	rjmp	.+14     	; 0xa4c <__stack+0x5ed>
							voltagereading = (reading - 220)*2.6997; //store actual voltage value
						}
						else if (voltage_right_on){
     a3e:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <voltage_right_on>
     a42:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <voltage_right_on+0x1>
     a46:	89 2b       	or	r24, r25
     a48:	b1 f0       	breq	.+44     	; 0xa76 <__stack+0x617>
							//read motor_right for VCC
							reading = adc_convert(adc_read(RHSVOLTAGECHANNEL));
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	08 db       	rcall	.-2544   	; 0x5e <adc_read>
     a4e:	13 db       	rcall	.-2522   	; 0x76 <adc_convert>
     a50:	70 93 a5 00 	sts	0x00A5, r23	; 0x8000a5 <reading+0x1>
     a54:	60 93 a4 00 	sts	0x00A4, r22	; 0x8000a4 <reading>
							voltagereading = (reading - 220)*2.6997; //store actual voltage value
     a58:	6c 5d       	subi	r22, 0xDC	; 220
     a5a:	71 09       	sbc	r23, r1
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	95 d2       	rcall	.+1322   	; 0xf8c <__floatunsisf>
     a62:	23 ee       	ldi	r18, 0xE3	; 227
     a64:	37 ec       	ldi	r19, 0xC7	; 199
     a66:	4c e2       	ldi	r20, 0x2C	; 44
     a68:	50 e4       	ldi	r21, 0x40	; 64
     a6a:	44 d3       	rcall	.+1672   	; 0x10f4 <__mulsf3>
     a6c:	63 d2       	rcall	.+1222   	; 0xf34 <__fixunssfsi>
     a6e:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <voltagereading+0x1>
     a72:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <voltagereading>
						}
						//we have read voltage value (only need to do this once because we are assuming Vcc remains constant between PWM pulses), turn off voltage reading flag
						readadcv = 0;
     a76:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <readadcv+0x1>
     a7a:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <readadcv>
					}
					if (readadci){
     a7e:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <readadci>
     a82:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <readadci+0x1>
     a86:	89 2b       	or	r24, r25
     a88:	09 f4       	brne	.+2      	; 0xa8c <__stack+0x62d>
     a8a:	ba c0       	rjmp	.+372    	; 0xc00 <__stack+0x7a1>
						if (current_i != NUMSAMPLESI){
     a8c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <current_i>
     a90:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <current_i+0x1>
     a94:	c2 97       	sbiw	r24, 0x32	; 50
     a96:	09 f4       	brne	.+2      	; 0xa9a <__stack+0x63b>
     a98:	b3 c0       	rjmp	.+358    	; 0xc00 <__stack+0x7a1>
							if ((voltage_left_on) || (voltage_right_on)){
     a9a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <voltage_left_on>
     a9e:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <voltage_left_on+0x1>
     aa2:	89 2b       	or	r24, r25
     aa4:	39 f4       	brne	.+14     	; 0xab4 <__stack+0x655>
     aa6:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <voltage_right_on>
     aaa:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <voltage_right_on+0x1>
     aae:	89 2b       	or	r24, r25
     ab0:	09 f4       	brne	.+2      	; 0xab4 <__stack+0x655>
     ab2:	6d c0       	rjmp	.+218    	; 0xb8e <__stack+0x72f>
								//store current ADC samples into array, do NOT reset the index between sampling intervals so we can build up a full array
								//also at the same time, multiply adc current value by the voltage value to get the instantaneous power array
								//store only alternate samples (i % 50 == 0) (so we don't get more than ~50 samples for the whole of T/4)
								reading = adc_convert(adc_read(ISHIFTEDCHANNEL));
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	d3 da       	rcall	.-2650   	; 0x5e <adc_read>
     ab8:	de da       	rcall	.-2628   	; 0x76 <adc_convert>
     aba:	5b 01       	movw	r10, r22
     abc:	6c 01       	movw	r12, r24
     abe:	7b 01       	movw	r14, r22
     ac0:	70 93 a5 00 	sts	0x00A5, r23	; 0x8000a5 <reading+0x1>
     ac4:	60 93 a4 00 	sts	0x00A4, r22	; 0x8000a4 <reading>
								if ((current_i % 50) == 0){
     ac8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <current_i>
     acc:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <current_i+0x1>
     ad0:	b2 01       	movw	r22, r4
     ad2:	f5 d3       	rcall	.+2026   	; 0x12be <__udivmodhi4>
     ad4:	89 2b       	or	r24, r25
     ad6:	09 f0       	breq	.+2      	; 0xada <__stack+0x67b>
     ad8:	8a c0       	rjmp	.+276    	; 0xbee <__stack+0x78f>
									currentarray[currentreadingindex] = ((reading - 220) * 0.2074) * 10; //store actual current value (mA)
     ada:	00 91 c8 00 	lds	r16, 0x00C8	; 0x8000c8 <currentreadingindex>
     ade:	10 91 c9 00 	lds	r17, 0x00C9	; 0x8000c9 <currentreadingindex+0x1>
     ae2:	00 0f       	add	r16, r16
     ae4:	11 1f       	adc	r17, r17
     ae6:	00 0f       	add	r16, r16
     ae8:	11 1f       	adc	r17, r17
     aea:	07 56       	subi	r16, 0x67	; 103
     aec:	1e 4f       	sbci	r17, 0xFE	; 254
     aee:	5c ed       	ldi	r21, 0xDC	; 220
     af0:	a5 1a       	sub	r10, r21
     af2:	b1 08       	sbc	r11, r1
     af4:	b5 01       	movw	r22, r10
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	48 d2       	rcall	.+1168   	; 0xf8c <__floatunsisf>
     afc:	2a ea       	ldi	r18, 0xAA	; 170
     afe:	30 e6       	ldi	r19, 0x60	; 96
     b00:	44 e5       	ldi	r20, 0x54	; 84
     b02:	5e e3       	ldi	r21, 0x3E	; 62
     b04:	f7 d2       	rcall	.+1518   	; 0x10f4 <__mulsf3>
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e2       	ldi	r20, 0x20	; 32
     b0c:	51 e4       	ldi	r21, 0x41	; 65
     b0e:	f2 d2       	rcall	.+1508   	; 0x10f4 <__mulsf3>
     b10:	11 d2       	rcall	.+1058   	; 0xf34 <__fixunssfsi>
     b12:	d8 01       	movw	r26, r16
     b14:	6d 93       	st	X+, r22
     b16:	7d 93       	st	X+, r23
     b18:	8d 93       	st	X+, r24
     b1a:	9c 93       	st	X, r25
     b1c:	13 97       	sbiw	r26, 0x03	; 3
									powerarray[currentreadingindex] = currentarray[currentreadingindex] * voltagereading; //store power in uW
     b1e:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <currentreadingindex>
     b22:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <currentreadingindex+0x1>
     b26:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <currentreadingindex>
     b2a:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <currentreadingindex+0x1>
     b2e:	ee 0f       	add	r30, r30
     b30:	ff 1f       	adc	r31, r31
     b32:	ee 0f       	add	r30, r30
     b34:	ff 1f       	adc	r31, r31
     b36:	8f 01       	movw	r16, r30
     b38:	0f 52       	subi	r16, 0x2F	; 47
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	87 56       	subi	r24, 0x67	; 103
     b46:	9e 4f       	sbci	r25, 0xFE	; 254
     b48:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <voltagereading>
     b4c:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <voltagereading+0x1>
     b50:	fc 01       	movw	r30, r24
     b52:	20 81       	ld	r18, Z
     b54:	31 81       	ldd	r19, Z+1	; 0x01
     b56:	42 81       	ldd	r20, Z+2	; 0x02
     b58:	53 81       	ldd	r21, Z+3	; 0x03
     b5a:	f3 d3       	rcall	.+2022   	; 0x1342 <__muluhisi3>
     b5c:	d8 01       	movw	r26, r16
     b5e:	6d 93       	st	X+, r22
     b60:	7d 93       	st	X+, r23
     b62:	8d 93       	st	X+, r24
     b64:	9c 93       	st	X, r25
     b66:	13 97       	sbiw	r26, 0x03	; 3
									++currentreadingindex;
     b68:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <currentreadingindex>
     b6c:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <currentreadingindex+0x1>
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <currentreadingindex+0x1>
     b76:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <currentreadingindex>
									if (reading > 3000) {//short circuit condition test
     b7a:	b9 eb       	ldi	r27, 0xB9	; 185
     b7c:	eb 16       	cp	r14, r27
     b7e:	bb e0       	ldi	r27, 0x0B	; 11
     b80:	fb 06       	cpc	r15, r27
     b82:	a8 f1       	brcs	.+106    	; 0xbee <__stack+0x78f>
										shortcircuit = 1;
     b84:	90 92 9f 00 	sts	0x009F, r9	; 0x80009f <shortcircuit+0x1>
     b88:	80 92 9e 00 	sts	0x009E, r8	; 0x80009e <shortcircuit>
     b8c:	30 c0       	rjmp	.+96     	; 0xbee <__stack+0x78f>
								//if PWM is turned off, current is 0
								//therefore store a 0 in the array (again, do not reset the index yet)
								//but make sure to read still ADC to generate the correct number of samples (because we don't have a spare timer)
								//also at the same time, multiply adc current value by the voltage value to get the instantaneous power array
								//store only alternate samples (every 25th sample using (i % 50 == 0)) (so we don't get more than ~50 samples)
								adc_convert(adc_read(ISHIFTEDCHANNEL));
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	66 da       	rcall	.-2868   	; 0x5e <adc_read>
     b92:	71 da       	rcall	.-2846   	; 0x76 <adc_convert>
								if ((current_i % 50) == 0){
     b94:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <current_i>
     b98:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <current_i+0x1>
     b9c:	b2 01       	movw	r22, r4
     b9e:	8f d3       	rcall	.+1822   	; 0x12be <__udivmodhi4>
     ba0:	89 2b       	or	r24, r25
     ba2:	29 f5       	brne	.+74     	; 0xbee <__stack+0x78f>
									currentarray[currentreadingindex] = 0;
     ba4:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <currentreadingindex>
     ba8:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <currentreadingindex+0x1>
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	e7 56       	subi	r30, 0x67	; 103
     bb6:	fe 4f       	sbci	r31, 0xFE	; 254
     bb8:	10 82       	st	Z, r1
     bba:	11 82       	std	Z+1, r1	; 0x01
     bbc:	12 82       	std	Z+2, r1	; 0x02
     bbe:	13 82       	std	Z+3, r1	; 0x03
									powerarray[currentreadingindex] = 0;
     bc0:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <currentreadingindex>
     bc4:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <currentreadingindex+0x1>
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	ef 52       	subi	r30, 0x2F	; 47
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	10 82       	st	Z, r1
     bd6:	11 82       	std	Z+1, r1	; 0x01
     bd8:	12 82       	std	Z+2, r1	; 0x02
     bda:	13 82       	std	Z+3, r1	; 0x03
									++currentreadingindex;
     bdc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <currentreadingindex>
     be0:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <currentreadingindex+0x1>
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <currentreadingindex+0x1>
     bea:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <currentreadingindex>
								}
							}
							++current_i;
     bee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <current_i>
     bf2:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <current_i+0x1>
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <current_i+0x1>
     bfc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <current_i>
				}
			}
		}
		
		//driving frequency adjustment here
		if (backemffound){
     c00:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <backemffound>
     c04:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <backemffound+0x1>
     c08:	89 2b       	or	r24, r25
     c0a:	99 f0       	breq	.+38     	; 0xc32 <__stack+0x7d3>
			if (TCNT1 < OCR1A){
     c0c:	2c b5       	in	r18, 0x2c	; 44
     c0e:	3d b5       	in	r19, 0x2d	; 45
     c10:	8a b5       	in	r24, 0x2a	; 42
     c12:	9b b5       	in	r25, 0x2b	; 43
     c14:	28 17       	cp	r18, r24
     c16:	39 07       	cpc	r19, r25
     c18:	60 f4       	brcc	.+24     	; 0xc32 <__stack+0x7d3>
				//if (((backemftime - OCR1A) < 1000) || (OCR1A - (backemftime) < 1000)){
				backemffound = 0; //reset found flag
     c1a:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <backemffound+0x1>
     c1e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <backemffound>
				//backemftime = 1250;
				OCR1A = 1250; //t/4 = backemf/16
     c22:	3b bc       	out	0x2b, r3	; 43
     c24:	2a bc       	out	0x2a, r2	; 42
				OCR1B = OCR1A * 2;//t/2 is always 2 * t/4
     c26:	8a b5       	in	r24, 0x2a	; 42
     c28:	9b b5       	in	r25, 0x2b	; 43
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	99 bd       	out	0x29, r25	; 41
     c30:	88 bd       	out	0x28, r24	; 40
				//}
			}
		}
		
		//once we have done adc readings, do rms/power calcs and store the values in their proper places
		if (currentreadingindex == NUMSAMPLESI){
     c32:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <currentreadingindex>
     c36:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <currentreadingindex+0x1>
     c3a:	c2 97       	sbiw	r24, 0x32	; 50
     c3c:	09 f0       	breq	.+2      	; 0xc40 <__stack+0x7e1>
     c3e:	86 cc       	rjmp	.-1780   	; 0x54c <__stack+0xed>
     c40:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <powervalue>
     c44:	e9 a3       	std	Y+33, r30	; 0x21
     c46:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <powervalue+0x1>
     c4a:	fa a3       	std	Y+34, r31	; 0x22
     c4c:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <powervalue+0x2>
     c50:	2b a3       	std	Y+35, r18	; 0x23
     c52:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <powervalue+0x3>
     c56:	3c a3       	std	Y+36, r19	; 0x24
     c58:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <powervalue+0x4>
     c5c:	4d a3       	std	Y+37, r20	; 0x25
     c5e:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <powervalue+0x5>
     c62:	5e a3       	std	Y+38, r21	; 0x26
     c64:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <powervalue+0x6>
     c68:	8f a3       	std	Y+39, r24	; 0x27
     c6a:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <powervalue+0x7>
     c6e:	98 a7       	std	Y+40, r25	; 0x28
     c70:	60 90 96 00 	lds	r6, 0x0096	; 0x800096 <currentvalue>
     c74:	70 90 97 00 	lds	r7, 0x0097	; 0x800097 <currentvalue+0x1>
     c78:	80 90 98 00 	lds	r8, 0x0098	; 0x800098 <currentvalue+0x2>
     c7c:	90 90 99 00 	lds	r9, 0x0099	; 0x800099 <currentvalue+0x3>
     c80:	30 90 9a 00 	lds	r3, 0x009A	; 0x80009a <currentvalue+0x4>
     c84:	20 90 9b 00 	lds	r2, 0x009B	; 0x80009b <currentvalue+0x5>
     c88:	40 90 9c 00 	lds	r4, 0x009C	; 0x80009c <currentvalue+0x6>
     c8c:	50 90 9d 00 	lds	r5, 0x009D	; 0x80009d <currentvalue+0x7>
     c90:	a9 e9       	ldi	r26, 0x99	; 153
     c92:	b1 e0       	ldi	r27, 0x01	; 1
     c94:	bc 8f       	std	Y+28, r27	; 0x1c
     c96:	ab 8f       	std	Y+27, r26	; 0x1b
     c98:	e1 ed       	ldi	r30, 0xD1	; 209
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	fa a7       	std	Y+42, r31	; 0x2a
     c9e:	e9 a7       	std	Y+41, r30	; 0x29
			//calculate RMS current
			for (int i = 0; i < NUMSAMPLESI; ++i){
				currentarray[i] = square(currentarray[i]); //square
     ca0:	ab 8d       	ldd	r26, Y+27	; 0x1b
     ca2:	bc 8d       	ldd	r27, Y+28	; 0x1c
     ca4:	6d 91       	ld	r22, X+
     ca6:	7d 91       	ld	r23, X+
     ca8:	8d 91       	ld	r24, X+
     caa:	9c 91       	ld	r25, X
     cac:	6f d1       	rcall	.+734    	; 0xf8c <__floatunsisf>
     cae:	c7 d2       	rcall	.+1422   	; 0x123e <square>
     cb0:	41 d1       	rcall	.+642    	; 0xf34 <__fixunssfsi>
     cb2:	6d 8f       	std	Y+29, r22	; 0x1d
     cb4:	7e 8f       	std	Y+30, r23	; 0x1e
     cb6:	8f 8f       	std	Y+31, r24	; 0x1f
     cb8:	98 a3       	std	Y+32, r25	; 0x20
     cba:	eb 8d       	ldd	r30, Y+27	; 0x1b
     cbc:	fc 8d       	ldd	r31, Y+28	; 0x1c
     cbe:	61 93       	st	Z+, r22
     cc0:	71 93       	st	Z+, r23
     cc2:	81 93       	st	Z+, r24
     cc4:	91 93       	st	Z+, r25
     cc6:	fc 8f       	std	Y+28, r31	; 0x1c
     cc8:	eb 8f       	std	Y+27, r30	; 0x1b
				powervalue += powerarray[i]; //summation of power 
     cca:	e9 a5       	ldd	r30, Y+41	; 0x29
     ccc:	fa a5       	ldd	r31, Y+42	; 0x2a
     cce:	81 91       	ld	r24, Z+
     cd0:	91 91       	ld	r25, Z+
     cd2:	a1 91       	ld	r26, Z+
     cd4:	b1 91       	ld	r27, Z+
     cd6:	fa a7       	std	Y+42, r31	; 0x2a
     cd8:	e9 a7       	std	Y+41, r30	; 0x29
     cda:	5c 01       	movw	r10, r24
     cdc:	6d 01       	movw	r12, r26
     cde:	9c 01       	movw	r18, r24
     ce0:	a6 01       	movw	r20, r12
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a9 a0       	ldd	r10, Y+33	; 0x21
     cec:	ba a0       	ldd	r11, Y+34	; 0x22
     cee:	cb a0       	ldd	r12, Y+35	; 0x23
     cf0:	dc a0       	ldd	r13, Y+36	; 0x24
     cf2:	ed a0       	ldd	r14, Y+37	; 0x25
     cf4:	fe a0       	ldd	r15, Y+38	; 0x26
     cf6:	0f a1       	ldd	r16, Y+39	; 0x27
     cf8:	18 a5       	ldd	r17, Y+40	; 0x28
     cfa:	79 d3       	rcall	.+1778   	; 0x13ee <__adddi3>
     cfc:	29 a3       	std	Y+33, r18	; 0x21
     cfe:	3a a3       	std	Y+34, r19	; 0x22
     d00:	4b a3       	std	Y+35, r20	; 0x23
     d02:	5c a3       	std	Y+36, r21	; 0x24
     d04:	6d a3       	std	Y+37, r22	; 0x25
     d06:	7e a3       	std	Y+38, r23	; 0x26
     d08:	8f a3       	std	Y+39, r24	; 0x27
     d0a:	98 a7       	std	Y+40, r25	; 0x28
				currentvalue += currentarray[i];//summation of current^2
     d0c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d0e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d10:	4f 8d       	ldd	r20, Y+31	; 0x1f
     d12:	58 a1       	ldd	r21, Y+32	; 0x20
     d14:	59 01       	movw	r10, r18
     d16:	6a 01       	movw	r12, r20
     d18:	a6 01       	movw	r20, r12
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	53 01       	movw	r10, r6
     d24:	64 01       	movw	r12, r8
     d26:	e3 2c       	mov	r14, r3
     d28:	f2 2c       	mov	r15, r2
     d2a:	82 01       	movw	r16, r4
     d2c:	60 d3       	rcall	.+1728   	; 0x13ee <__adddi3>
     d2e:	39 01       	movw	r6, r18
     d30:	4a 01       	movw	r8, r20
     d32:	36 2e       	mov	r3, r22
     d34:	27 2e       	mov	r2, r23
     d36:	2c 01       	movw	r4, r24
		}
		
		//once we have done adc readings, do rms/power calcs and store the values in their proper places
		if (currentreadingindex == NUMSAMPLESI){
			//calculate RMS current
			for (int i = 0; i < NUMSAMPLESI; ++i){
     d38:	41 e6       	ldi	r20, 0x61	; 97
     d3a:	52 e0       	ldi	r21, 0x02	; 2
     d3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d40:	48 17       	cp	r20, r24
     d42:	59 07       	cpc	r21, r25
     d44:	09 f0       	breq	.+2      	; 0xd48 <__stack+0x8e9>
     d46:	ac cf       	rjmp	.-168    	; 0xca0 <__stack+0x841>
				currentarray[i] = square(currentarray[i]); //square
				powervalue += powerarray[i]; //summation of power 
				currentvalue += currentarray[i];//summation of current^2
			}
			currentvalue /= NUMSAMPLESI; //mean
			currentvalue = sqrt(currentvalue); //root - gives RMS current in (mA)
     d48:	82 e3       	ldi	r24, 0x32	; 50
     d4a:	a8 2e       	mov	r10, r24
     d4c:	b1 2c       	mov	r11, r1
     d4e:	c1 2c       	mov	r12, r1
     d50:	d1 2c       	mov	r13, r1
     d52:	e1 2c       	mov	r14, r1
     d54:	f1 2c       	mov	r15, r1
     d56:	00 e0       	ldi	r16, 0x00	; 0
     d58:	10 e0       	ldi	r17, 0x00	; 0
     d5a:	93 01       	movw	r18, r6
     d5c:	a4 01       	movw	r20, r8
     d5e:	63 2d       	mov	r22, r3
     d60:	72 2d       	mov	r23, r2
     d62:	c2 01       	movw	r24, r4
     d64:	fa d2       	rcall	.+1524   	; 0x135a <__udivdi3>
     d66:	4f d1       	rcall	.+670    	; 0x1006 <__floatundisf>
     d68:	2c d2       	rcall	.+1112   	; 0x11c2 <sqrt>
     d6a:	af d0       	rcall	.+350    	; 0xeca <__fixunssfdi>
     d6c:	2b 8f       	std	Y+27, r18	; 0x1b
     d6e:	3d 8f       	std	Y+29, r19	; 0x1d
     d70:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <currentvalue>
     d74:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <currentvalue+0x1>
     d78:	40 93 98 00 	sts	0x0098, r20	; 0x800098 <currentvalue+0x2>
     d7c:	50 93 99 00 	sts	0x0099, r21	; 0x800099 <currentvalue+0x3>
     d80:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <currentvalue+0x4>
     d84:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <currentvalue+0x5>
     d88:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <currentvalue+0x6>
     d8c:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <currentvalue+0x7>

			powervalue /= NUMSAMPLESI; //power mean (uW)
			powervalue /= 1000; //gives average power in (mW)
     d90:	90 e5       	ldi	r25, 0x50	; 80
     d92:	a9 2e       	mov	r10, r25
     d94:	23 ec       	ldi	r18, 0xC3	; 195
     d96:	b2 2e       	mov	r11, r18
     d98:	29 a1       	ldd	r18, Y+33	; 0x21
     d9a:	3a a1       	ldd	r19, Y+34	; 0x22
     d9c:	4b a1       	ldd	r20, Y+35	; 0x23
     d9e:	5c a1       	ldd	r21, Y+36	; 0x24
     da0:	6d a1       	ldd	r22, Y+37	; 0x25
     da2:	7e a1       	ldd	r23, Y+38	; 0x26
     da4:	8f a1       	ldd	r24, Y+39	; 0x27
     da6:	98 a5       	ldd	r25, Y+40	; 0x28
     da8:	d8 d2       	rcall	.+1456   	; 0x135a <__udivdi3>
     daa:	19 01       	movw	r2, r18
     dac:	2a 01       	movw	r4, r20
     dae:	3b 01       	movw	r6, r22
     db0:	4c 01       	movw	r8, r24
     db2:	20 93 8e 00 	sts	0x008E, r18	; 0x80008e <powervalue>
     db6:	30 92 8f 00 	sts	0x008F, r3	; 0x80008f <powervalue+0x1>
     dba:	40 93 90 00 	sts	0x0090, r20	; 0x800090 <powervalue+0x2>
     dbe:	50 92 91 00 	sts	0x0091, r5	; 0x800091 <powervalue+0x3>
     dc2:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <powervalue+0x4>
     dc6:	70 92 93 00 	sts	0x0093, r7	; 0x800093 <powervalue+0x5>
     dca:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <powervalue+0x6>
     dce:	90 92 95 00 	sts	0x0095, r9	; 0x800095 <powervalue+0x7>
			
			//put all the found circuit parameters into the proper format for transmission)
			voltleft = voltagereading/1000;
     dd2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <voltagereading>
     dd6:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <voltagereading+0x1>
     dda:	68 ee       	ldi	r22, 0xE8	; 232
     ddc:	73 e0       	ldi	r23, 0x03	; 3
     dde:	6f d2       	rcall	.+1246   	; 0x12be <__udivmodhi4>
     de0:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <voltleft+0x1>
     de4:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <voltleft>
			voltright = voltagereading % 1000;
     de8:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <voltright+0x1>
     dec:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <voltright>
			
			uint32_t freqfull = backemffreq * 0.25; //total frequency = f(T/4) / 4
     df0:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <backemffreq>
     df4:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <backemffreq+0x1>
     df8:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <backemffreq+0x2>
     dfc:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <backemffreq+0x3>
     e00:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <backemffreq+0x4>
     e04:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <backemffreq+0x5>
     e08:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <backemffreq+0x6>
     e0c:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <backemffreq+0x7>
     e10:	fa d0       	rcall	.+500    	; 0x1006 <__floatundisf>
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e8       	ldi	r20, 0x80	; 128
     e18:	5e e3       	ldi	r21, 0x3E	; 62
     e1a:	6c d1       	rcall	.+728    	; 0x10f4 <__mulsf3>
     e1c:	8b d0       	rcall	.+278    	; 0xf34 <__fixunssfsi>
			freqleft = freqfull/1000;
     e1e:	28 ee       	ldi	r18, 0xE8	; 232
     e20:	33 e0       	ldi	r19, 0x03	; 3
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	5f d2       	rcall	.+1214   	; 0x12e6 <__udivmodsi4>
     e28:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <freqleft+0x1>
     e2c:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <freqleft>
			freqright = freqfull % 1000;
     e30:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <freqright+0x1>
     e34:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <freqright>
			
			current = currentvalue; //current is already in mA
     e38:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e3c:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <current>
     e40:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <current+0x1>
			
			powerleft = powervalue / 1000;
     e44:	30 e8       	ldi	r19, 0x80	; 128
     e46:	a3 2e       	mov	r10, r19
     e48:	40 ef       	ldi	r20, 0xF0	; 240
     e4a:	b4 2e       	mov	r11, r20
     e4c:	5a ef       	ldi	r21, 0xFA	; 250
     e4e:	c5 2e       	mov	r12, r21
     e50:	62 e0       	ldi	r22, 0x02	; 2
     e52:	d6 2e       	mov	r13, r22
     e54:	29 a1       	ldd	r18, Y+33	; 0x21
     e56:	3a a1       	ldd	r19, Y+34	; 0x22
     e58:	4b a1       	ldd	r20, Y+35	; 0x23
     e5a:	5c a1       	ldd	r21, Y+36	; 0x24
     e5c:	6d a1       	ldd	r22, Y+37	; 0x25
     e5e:	7e a1       	ldd	r23, Y+38	; 0x26
     e60:	8f a1       	ldd	r24, Y+39	; 0x27
     e62:	98 a5       	ldd	r25, Y+40	; 0x28
     e64:	7a d2       	rcall	.+1268   	; 0x135a <__udivdi3>
     e66:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <powerleft+0x1>
     e6a:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <powerleft>
			powerright = powervalue % 1000;
     e6e:	78 ee       	ldi	r23, 0xE8	; 232
     e70:	a7 2e       	mov	r10, r23
     e72:	e3 e0       	ldi	r30, 0x03	; 3
     e74:	be 2e       	mov	r11, r30
     e76:	c1 2c       	mov	r12, r1
     e78:	d1 2c       	mov	r13, r1
     e7a:	91 01       	movw	r18, r2
     e7c:	a2 01       	movw	r20, r4
     e7e:	b3 01       	movw	r22, r6
     e80:	c4 01       	movw	r24, r8
     e82:	69 d2       	rcall	.+1234   	; 0x1356 <__umoddi3>
     e84:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <powerright+0x1>
     e88:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <powerright>
     e8c:	52 cb       	rjmp	.-2396   	; 0x532 <__stack+0xd3>

00000e8e <uart_init>:
void uart_transmit_string(char* stringtransmit){
	while (*stringtransmit != 0x00){
		uart_transmit(*stringtransmit);
		stringtransmit++;
	}
}
     e8e:	8a b1       	in	r24, 0x0a	; 10
     e90:	88 61       	ori	r24, 0x18	; 24
     e92:	8a b9       	out	0x0a, r24	; 10
     e94:	57 9a       	sbi	0x0a, 7	; 10
     e96:	10 bc       	out	0x20, r1	; 32
     e98:	87 e6       	ldi	r24, 0x67	; 103
     e9a:	89 b9       	out	0x09, r24	; 9
     e9c:	80 b5       	in	r24, 0x20	; 32
     e9e:	86 68       	ori	r24, 0x86	; 134
     ea0:	80 bd       	out	0x20, r24	; 32
     ea2:	80 b5       	in	r24, 0x20	; 32
     ea4:	8f 7b       	andi	r24, 0xBF	; 191
     ea6:	80 bd       	out	0x20, r24	; 32
     ea8:	80 b5       	in	r24, 0x20	; 32
     eaa:	8b 7f       	andi	r24, 0xFB	; 251
     eac:	80 bd       	out	0x20, r24	; 32
     eae:	08 95       	ret

00000eb0 <uart_transmit>:
     eb0:	5d 9b       	sbis	0x0b, 5	; 11
     eb2:	fe cf       	rjmp	.-4      	; 0xeb0 <uart_transmit>
     eb4:	8c b9       	out	0x0c, r24	; 12
     eb6:	08 95       	ret

00000eb8 <uart_receive>:
	UDR = data; //load data register with data byte
}

//Receiver
char uart_receive(){
	while (RXCOMP == 0){ //wait for receive to be completed
     eb8:	5f 9b       	sbis	0x0b, 7	; 11
     eba:	fe cf       	rjmp	.-4      	; 0xeb8 <uart_receive>
	}
	return UDR; //load data register with data byte
     ebc:	8c b1       	in	r24, 0x0c	; 12
     ebe:	08 95       	ret

00000ec0 <__fixsfdi>:
     ec0:	be e3       	ldi	r27, 0x3E	; 62
     ec2:	04 d0       	rcall	.+8      	; 0xecc <__fixunssfdi+0x2>
     ec4:	08 f4       	brcc	.+2      	; 0xec8 <__fixsfdi+0x8>
     ec6:	90 e8       	ldi	r25, 0x80	; 128
     ec8:	08 95       	ret

00000eca <__fixunssfdi>:
     eca:	bf e3       	ldi	r27, 0x3F	; 63
     ecc:	22 27       	eor	r18, r18
     ece:	33 27       	eor	r19, r19
     ed0:	a9 01       	movw	r20, r18
     ed2:	ef d0       	rcall	.+478    	; 0x10b2 <__fp_splitA>
     ed4:	58 f1       	brcs	.+86     	; 0xf2c <__fixunssfdi+0x62>
     ed6:	9f 57       	subi	r25, 0x7F	; 127
     ed8:	40 f1       	brcs	.+80     	; 0xf2a <__fixunssfdi+0x60>
     eda:	b9 17       	cp	r27, r25
     edc:	38 f1       	brcs	.+78     	; 0xf2c <__fixunssfdi+0x62>
     ede:	bf e3       	ldi	r27, 0x3F	; 63
     ee0:	b9 1b       	sub	r27, r25
     ee2:	99 27       	eor	r25, r25
     ee4:	b8 50       	subi	r27, 0x08	; 8
     ee6:	3a f4       	brpl	.+14     	; 0xef6 <__fixunssfdi+0x2c>
     ee8:	66 0f       	add	r22, r22
     eea:	77 1f       	adc	r23, r23
     eec:	88 1f       	adc	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	b3 95       	inc	r27
     ef2:	d2 f3       	brmi	.-12     	; 0xee8 <__fixunssfdi+0x1e>
     ef4:	16 c0       	rjmp	.+44     	; 0xf22 <__fixunssfdi+0x58>
     ef6:	b8 50       	subi	r27, 0x08	; 8
     ef8:	4a f0       	brmi	.+18     	; 0xf0c <__fixunssfdi+0x42>
     efa:	23 2f       	mov	r18, r19
     efc:	34 2f       	mov	r19, r20
     efe:	45 2f       	mov	r20, r21
     f00:	56 2f       	mov	r21, r22
     f02:	67 2f       	mov	r22, r23
     f04:	78 2f       	mov	r23, r24
     f06:	88 27       	eor	r24, r24
     f08:	b8 50       	subi	r27, 0x08	; 8
     f0a:	ba f7       	brpl	.-18     	; 0xefa <__fixunssfdi+0x30>
     f0c:	b8 5f       	subi	r27, 0xF8	; 248
     f0e:	49 f0       	breq	.+18     	; 0xf22 <__fixunssfdi+0x58>
     f10:	86 95       	lsr	r24
     f12:	77 95       	ror	r23
     f14:	67 95       	ror	r22
     f16:	57 95       	ror	r21
     f18:	47 95       	ror	r20
     f1a:	37 95       	ror	r19
     f1c:	27 95       	ror	r18
     f1e:	ba 95       	dec	r27
     f20:	b9 f7       	brne	.-18     	; 0xf10 <__fixunssfdi+0x46>
     f22:	0e f4       	brtc	.+2      	; 0xf26 <__fixunssfdi+0x5c>
     f24:	ae d0       	rcall	.+348    	; 0x1082 <__fp_negdi>
     f26:	88 94       	clc
     f28:	08 95       	ret
     f2a:	88 94       	clc
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	cb 01       	movw	r24, r22
     f32:	08 95       	ret

00000f34 <__fixunssfsi>:
     f34:	be d0       	rcall	.+380    	; 0x10b2 <__fp_splitA>
     f36:	88 f0       	brcs	.+34     	; 0xf5a <__fixunssfsi+0x26>
     f38:	9f 57       	subi	r25, 0x7F	; 127
     f3a:	90 f0       	brcs	.+36     	; 0xf60 <__fixunssfsi+0x2c>
     f3c:	b9 2f       	mov	r27, r25
     f3e:	99 27       	eor	r25, r25
     f40:	b7 51       	subi	r27, 0x17	; 23
     f42:	a0 f0       	brcs	.+40     	; 0xf6c <__fixunssfsi+0x38>
     f44:	d1 f0       	breq	.+52     	; 0xf7a <__fixunssfsi+0x46>
     f46:	66 0f       	add	r22, r22
     f48:	77 1f       	adc	r23, r23
     f4a:	88 1f       	adc	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	1a f0       	brmi	.+6      	; 0xf56 <__fixunssfsi+0x22>
     f50:	ba 95       	dec	r27
     f52:	c9 f7       	brne	.-14     	; 0xf46 <__fixunssfsi+0x12>
     f54:	12 c0       	rjmp	.+36     	; 0xf7a <__fixunssfsi+0x46>
     f56:	b1 30       	cpi	r27, 0x01	; 1
     f58:	81 f0       	breq	.+32     	; 0xf7a <__fixunssfsi+0x46>
     f5a:	c5 d0       	rcall	.+394    	; 0x10e6 <__fp_zero>
     f5c:	b1 e0       	ldi	r27, 0x01	; 1
     f5e:	08 95       	ret
     f60:	c2 c0       	rjmp	.+388    	; 0x10e6 <__fp_zero>
     f62:	67 2f       	mov	r22, r23
     f64:	78 2f       	mov	r23, r24
     f66:	88 27       	eor	r24, r24
     f68:	b8 5f       	subi	r27, 0xF8	; 248
     f6a:	39 f0       	breq	.+14     	; 0xf7a <__fixunssfsi+0x46>
     f6c:	b9 3f       	cpi	r27, 0xF9	; 249
     f6e:	cc f3       	brlt	.-14     	; 0xf62 <__fixunssfsi+0x2e>
     f70:	86 95       	lsr	r24
     f72:	77 95       	ror	r23
     f74:	67 95       	ror	r22
     f76:	b3 95       	inc	r27
     f78:	d9 f7       	brne	.-10     	; 0xf70 <__fixunssfsi+0x3c>
     f7a:	3e f4       	brtc	.+14     	; 0xf8a <__fixunssfsi+0x56>
     f7c:	90 95       	com	r25
     f7e:	80 95       	com	r24
     f80:	70 95       	com	r23
     f82:	61 95       	neg	r22
     f84:	7f 4f       	sbci	r23, 0xFF	; 255
     f86:	8f 4f       	sbci	r24, 0xFF	; 255
     f88:	9f 4f       	sbci	r25, 0xFF	; 255
     f8a:	08 95       	ret

00000f8c <__floatunsisf>:
     f8c:	e8 94       	clt
     f8e:	09 c0       	rjmp	.+18     	; 0xfa2 <__floatsisf+0x12>

00000f90 <__floatsisf>:
     f90:	97 fb       	bst	r25, 7
     f92:	3e f4       	brtc	.+14     	; 0xfa2 <__floatsisf+0x12>
     f94:	90 95       	com	r25
     f96:	80 95       	com	r24
     f98:	70 95       	com	r23
     f9a:	61 95       	neg	r22
     f9c:	7f 4f       	sbci	r23, 0xFF	; 255
     f9e:	8f 4f       	sbci	r24, 0xFF	; 255
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	99 23       	and	r25, r25
     fa4:	a9 f0       	breq	.+42     	; 0xfd0 <__floatsisf+0x40>
     fa6:	f9 2f       	mov	r31, r25
     fa8:	96 e9       	ldi	r25, 0x96	; 150
     faa:	bb 27       	eor	r27, r27
     fac:	93 95       	inc	r25
     fae:	f6 95       	lsr	r31
     fb0:	87 95       	ror	r24
     fb2:	77 95       	ror	r23
     fb4:	67 95       	ror	r22
     fb6:	b7 95       	ror	r27
     fb8:	f1 11       	cpse	r31, r1
     fba:	f8 cf       	rjmp	.-16     	; 0xfac <__floatsisf+0x1c>
     fbc:	fa f4       	brpl	.+62     	; 0xffc <__floatsisf+0x6c>
     fbe:	bb 0f       	add	r27, r27
     fc0:	11 f4       	brne	.+4      	; 0xfc6 <__floatsisf+0x36>
     fc2:	60 ff       	sbrs	r22, 0
     fc4:	1b c0       	rjmp	.+54     	; 0xffc <__floatsisf+0x6c>
     fc6:	6f 5f       	subi	r22, 0xFF	; 255
     fc8:	7f 4f       	sbci	r23, 0xFF	; 255
     fca:	8f 4f       	sbci	r24, 0xFF	; 255
     fcc:	9f 4f       	sbci	r25, 0xFF	; 255
     fce:	16 c0       	rjmp	.+44     	; 0xffc <__floatsisf+0x6c>
     fd0:	88 23       	and	r24, r24
     fd2:	11 f0       	breq	.+4      	; 0xfd8 <__floatsisf+0x48>
     fd4:	96 e9       	ldi	r25, 0x96	; 150
     fd6:	11 c0       	rjmp	.+34     	; 0xffa <__floatsisf+0x6a>
     fd8:	77 23       	and	r23, r23
     fda:	21 f0       	breq	.+8      	; 0xfe4 <__floatsisf+0x54>
     fdc:	9e e8       	ldi	r25, 0x8E	; 142
     fde:	87 2f       	mov	r24, r23
     fe0:	76 2f       	mov	r23, r22
     fe2:	05 c0       	rjmp	.+10     	; 0xfee <__floatsisf+0x5e>
     fe4:	66 23       	and	r22, r22
     fe6:	71 f0       	breq	.+28     	; 0x1004 <__floatsisf+0x74>
     fe8:	96 e8       	ldi	r25, 0x86	; 134
     fea:	86 2f       	mov	r24, r22
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	2a f0       	brmi	.+10     	; 0xffc <__floatsisf+0x6c>
     ff2:	9a 95       	dec	r25
     ff4:	66 0f       	add	r22, r22
     ff6:	77 1f       	adc	r23, r23
     ff8:	88 1f       	adc	r24, r24
     ffa:	da f7       	brpl	.-10     	; 0xff2 <__floatsisf+0x62>
     ffc:	88 0f       	add	r24, r24
     ffe:	96 95       	lsr	r25
    1000:	87 95       	ror	r24
    1002:	97 f9       	bld	r25, 7
    1004:	08 95       	ret

00001006 <__floatundisf>:
    1006:	e8 94       	clt

00001008 <__fp_di2sf>:
    1008:	f9 2f       	mov	r31, r25
    100a:	96 eb       	ldi	r25, 0xB6	; 182
    100c:	ff 23       	and	r31, r31
    100e:	81 f0       	breq	.+32     	; 0x1030 <__fp_di2sf+0x28>
    1010:	12 16       	cp	r1, r18
    1012:	13 06       	cpc	r1, r19
    1014:	14 06       	cpc	r1, r20
    1016:	44 0b       	sbc	r20, r20
    1018:	93 95       	inc	r25
    101a:	f6 95       	lsr	r31
    101c:	87 95       	ror	r24
    101e:	77 95       	ror	r23
    1020:	67 95       	ror	r22
    1022:	57 95       	ror	r21
    1024:	40 40       	sbci	r20, 0x00	; 0
    1026:	ff 23       	and	r31, r31
    1028:	b9 f7       	brne	.-18     	; 0x1018 <__fp_di2sf+0x10>
    102a:	1b c0       	rjmp	.+54     	; 0x1062 <__fp_di2sf+0x5a>
    102c:	99 27       	eor	r25, r25
    102e:	08 95       	ret
    1030:	88 23       	and	r24, r24
    1032:	51 f4       	brne	.+20     	; 0x1048 <__fp_di2sf+0x40>
    1034:	98 50       	subi	r25, 0x08	; 8
    1036:	d2 f7       	brpl	.-12     	; 0x102c <__fp_di2sf+0x24>
    1038:	87 2b       	or	r24, r23
    103a:	76 2f       	mov	r23, r22
    103c:	65 2f       	mov	r22, r21
    103e:	54 2f       	mov	r21, r20
    1040:	43 2f       	mov	r20, r19
    1042:	32 2f       	mov	r19, r18
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	b1 f3       	breq	.-20     	; 0x1034 <__fp_di2sf+0x2c>
    1048:	12 16       	cp	r1, r18
    104a:	13 06       	cpc	r1, r19
    104c:	14 06       	cpc	r1, r20
    104e:	44 0b       	sbc	r20, r20
    1050:	88 23       	and	r24, r24
    1052:	3a f0       	brmi	.+14     	; 0x1062 <__fp_di2sf+0x5a>
    1054:	9a 95       	dec	r25
    1056:	44 0f       	add	r20, r20
    1058:	55 1f       	adc	r21, r21
    105a:	66 1f       	adc	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	88 1f       	adc	r24, r24
    1060:	ca f7       	brpl	.-14     	; 0x1054 <__fp_di2sf+0x4c>
    1062:	55 23       	and	r21, r21
    1064:	4a f4       	brpl	.+18     	; 0x1078 <__fp_di2sf+0x70>
    1066:	44 0f       	add	r20, r20
    1068:	55 1f       	adc	r21, r21
    106a:	11 f4       	brne	.+4      	; 0x1070 <__fp_di2sf+0x68>
    106c:	60 ff       	sbrs	r22, 0
    106e:	04 c0       	rjmp	.+8      	; 0x1078 <__fp_di2sf+0x70>
    1070:	6f 5f       	subi	r22, 0xFF	; 255
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	8f 4f       	sbci	r24, 0xFF	; 255
    1076:	9f 4f       	sbci	r25, 0xFF	; 255
    1078:	88 0f       	add	r24, r24
    107a:	96 95       	lsr	r25
    107c:	87 95       	ror	r24
    107e:	97 f9       	bld	r25, 7
    1080:	08 95       	ret

00001082 <__fp_negdi>:
    1082:	90 95       	com	r25
    1084:	80 95       	com	r24
    1086:	70 95       	com	r23
    1088:	60 95       	com	r22
    108a:	50 95       	com	r21
    108c:	40 95       	com	r20
    108e:	30 95       	com	r19
    1090:	21 95       	neg	r18
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
    1094:	4f 4f       	sbci	r20, 0xFF	; 255
    1096:	5f 4f       	sbci	r21, 0xFF	; 255
    1098:	6f 4f       	sbci	r22, 0xFF	; 255
    109a:	7f 4f       	sbci	r23, 0xFF	; 255
    109c:	8f 4f       	sbci	r24, 0xFF	; 255
    109e:	9f 4f       	sbci	r25, 0xFF	; 255
    10a0:	08 95       	ret

000010a2 <__fp_split3>:
    10a2:	57 fd       	sbrc	r21, 7
    10a4:	90 58       	subi	r25, 0x80	; 128
    10a6:	44 0f       	add	r20, r20
    10a8:	55 1f       	adc	r21, r21
    10aa:	59 f0       	breq	.+22     	; 0x10c2 <__fp_splitA+0x10>
    10ac:	5f 3f       	cpi	r21, 0xFF	; 255
    10ae:	71 f0       	breq	.+28     	; 0x10cc <__fp_splitA+0x1a>
    10b0:	47 95       	ror	r20

000010b2 <__fp_splitA>:
    10b2:	88 0f       	add	r24, r24
    10b4:	97 fb       	bst	r25, 7
    10b6:	99 1f       	adc	r25, r25
    10b8:	61 f0       	breq	.+24     	; 0x10d2 <__fp_splitA+0x20>
    10ba:	9f 3f       	cpi	r25, 0xFF	; 255
    10bc:	79 f0       	breq	.+30     	; 0x10dc <__fp_splitA+0x2a>
    10be:	87 95       	ror	r24
    10c0:	08 95       	ret
    10c2:	12 16       	cp	r1, r18
    10c4:	13 06       	cpc	r1, r19
    10c6:	14 06       	cpc	r1, r20
    10c8:	55 1f       	adc	r21, r21
    10ca:	f2 cf       	rjmp	.-28     	; 0x10b0 <__fp_split3+0xe>
    10cc:	46 95       	lsr	r20
    10ce:	f1 df       	rcall	.-30     	; 0x10b2 <__fp_splitA>
    10d0:	08 c0       	rjmp	.+16     	; 0x10e2 <__fp_splitA+0x30>
    10d2:	16 16       	cp	r1, r22
    10d4:	17 06       	cpc	r1, r23
    10d6:	18 06       	cpc	r1, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	f1 cf       	rjmp	.-30     	; 0x10be <__fp_splitA+0xc>
    10dc:	86 95       	lsr	r24
    10de:	71 05       	cpc	r23, r1
    10e0:	61 05       	cpc	r22, r1
    10e2:	08 94       	sec
    10e4:	08 95       	ret

000010e6 <__fp_zero>:
    10e6:	e8 94       	clt

000010e8 <__fp_szero>:
    10e8:	bb 27       	eor	r27, r27
    10ea:	66 27       	eor	r22, r22
    10ec:	77 27       	eor	r23, r23
    10ee:	cb 01       	movw	r24, r22
    10f0:	97 f9       	bld	r25, 7
    10f2:	08 95       	ret

000010f4 <__mulsf3>:
    10f4:	0b d0       	rcall	.+22     	; 0x110c <__mulsf3x>
    10f6:	d2 c0       	rjmp	.+420    	; 0x129c <__fp_round>
    10f8:	c3 d0       	rcall	.+390    	; 0x1280 <__fp_pscA>
    10fa:	28 f0       	brcs	.+10     	; 0x1106 <__mulsf3+0x12>
    10fc:	c8 d0       	rcall	.+400    	; 0x128e <__fp_pscB>
    10fe:	18 f0       	brcs	.+6      	; 0x1106 <__mulsf3+0x12>
    1100:	95 23       	and	r25, r21
    1102:	09 f0       	breq	.+2      	; 0x1106 <__mulsf3+0x12>
    1104:	9f c0       	rjmp	.+318    	; 0x1244 <__fp_inf>
    1106:	b2 c0       	rjmp	.+356    	; 0x126c <__fp_nan>
    1108:	11 24       	eor	r1, r1
    110a:	ee cf       	rjmp	.-36     	; 0x10e8 <__fp_szero>

0000110c <__mulsf3x>:
    110c:	ca df       	rcall	.-108    	; 0x10a2 <__fp_split3>
    110e:	a0 f3       	brcs	.-24     	; 0x10f8 <__mulsf3+0x4>

00001110 <__mulsf3_pse>:
    1110:	95 9f       	mul	r25, r21
    1112:	d1 f3       	breq	.-12     	; 0x1108 <__mulsf3+0x14>
    1114:	95 0f       	add	r25, r21
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	55 1f       	adc	r21, r21
    111a:	62 9f       	mul	r22, r18
    111c:	f0 01       	movw	r30, r0
    111e:	72 9f       	mul	r23, r18
    1120:	bb 27       	eor	r27, r27
    1122:	f0 0d       	add	r31, r0
    1124:	b1 1d       	adc	r27, r1
    1126:	63 9f       	mul	r22, r19
    1128:	aa 27       	eor	r26, r26
    112a:	f0 0d       	add	r31, r0
    112c:	b1 1d       	adc	r27, r1
    112e:	aa 1f       	adc	r26, r26
    1130:	64 9f       	mul	r22, r20
    1132:	66 27       	eor	r22, r22
    1134:	b0 0d       	add	r27, r0
    1136:	a1 1d       	adc	r26, r1
    1138:	66 1f       	adc	r22, r22
    113a:	82 9f       	mul	r24, r18
    113c:	22 27       	eor	r18, r18
    113e:	b0 0d       	add	r27, r0
    1140:	a1 1d       	adc	r26, r1
    1142:	62 1f       	adc	r22, r18
    1144:	73 9f       	mul	r23, r19
    1146:	b0 0d       	add	r27, r0
    1148:	a1 1d       	adc	r26, r1
    114a:	62 1f       	adc	r22, r18
    114c:	83 9f       	mul	r24, r19
    114e:	a0 0d       	add	r26, r0
    1150:	61 1d       	adc	r22, r1
    1152:	22 1f       	adc	r18, r18
    1154:	74 9f       	mul	r23, r20
    1156:	33 27       	eor	r19, r19
    1158:	a0 0d       	add	r26, r0
    115a:	61 1d       	adc	r22, r1
    115c:	23 1f       	adc	r18, r19
    115e:	84 9f       	mul	r24, r20
    1160:	60 0d       	add	r22, r0
    1162:	21 1d       	adc	r18, r1
    1164:	82 2f       	mov	r24, r18
    1166:	76 2f       	mov	r23, r22
    1168:	6a 2f       	mov	r22, r26
    116a:	11 24       	eor	r1, r1
    116c:	9f 57       	subi	r25, 0x7F	; 127
    116e:	50 40       	sbci	r21, 0x00	; 0
    1170:	8a f0       	brmi	.+34     	; 0x1194 <__mulsf3_pse+0x84>
    1172:	e1 f0       	breq	.+56     	; 0x11ac <__mulsf3_pse+0x9c>
    1174:	88 23       	and	r24, r24
    1176:	4a f0       	brmi	.+18     	; 0x118a <__mulsf3_pse+0x7a>
    1178:	ee 0f       	add	r30, r30
    117a:	ff 1f       	adc	r31, r31
    117c:	bb 1f       	adc	r27, r27
    117e:	66 1f       	adc	r22, r22
    1180:	77 1f       	adc	r23, r23
    1182:	88 1f       	adc	r24, r24
    1184:	91 50       	subi	r25, 0x01	; 1
    1186:	50 40       	sbci	r21, 0x00	; 0
    1188:	a9 f7       	brne	.-22     	; 0x1174 <__mulsf3_pse+0x64>
    118a:	9e 3f       	cpi	r25, 0xFE	; 254
    118c:	51 05       	cpc	r21, r1
    118e:	70 f0       	brcs	.+28     	; 0x11ac <__mulsf3_pse+0x9c>
    1190:	59 c0       	rjmp	.+178    	; 0x1244 <__fp_inf>
    1192:	aa cf       	rjmp	.-172    	; 0x10e8 <__fp_szero>
    1194:	5f 3f       	cpi	r21, 0xFF	; 255
    1196:	ec f3       	brlt	.-6      	; 0x1192 <__mulsf3_pse+0x82>
    1198:	98 3e       	cpi	r25, 0xE8	; 232
    119a:	dc f3       	brlt	.-10     	; 0x1192 <__mulsf3_pse+0x82>
    119c:	86 95       	lsr	r24
    119e:	77 95       	ror	r23
    11a0:	67 95       	ror	r22
    11a2:	b7 95       	ror	r27
    11a4:	f7 95       	ror	r31
    11a6:	e7 95       	ror	r30
    11a8:	9f 5f       	subi	r25, 0xFF	; 255
    11aa:	c1 f7       	brne	.-16     	; 0x119c <__mulsf3_pse+0x8c>
    11ac:	fe 2b       	or	r31, r30
    11ae:	88 0f       	add	r24, r24
    11b0:	91 1d       	adc	r25, r1
    11b2:	96 95       	lsr	r25
    11b4:	87 95       	ror	r24
    11b6:	97 f9       	bld	r25, 7
    11b8:	08 95       	ret
    11ba:	11 f4       	brne	.+4      	; 0x11c0 <__mulsf3_pse+0xb0>
    11bc:	0e f4       	brtc	.+2      	; 0x11c0 <__mulsf3_pse+0xb0>
    11be:	56 c0       	rjmp	.+172    	; 0x126c <__fp_nan>
    11c0:	47 c0       	rjmp	.+142    	; 0x1250 <__fp_mpack>

000011c2 <sqrt>:
    11c2:	77 df       	rcall	.-274    	; 0x10b2 <__fp_splitA>
    11c4:	d0 f3       	brcs	.-12     	; 0x11ba <__mulsf3_pse+0xaa>
    11c6:	99 23       	and	r25, r25
    11c8:	d9 f3       	breq	.-10     	; 0x11c0 <__mulsf3_pse+0xb0>
    11ca:	ce f3       	brts	.-14     	; 0x11be <__mulsf3_pse+0xae>
    11cc:	9f 57       	subi	r25, 0x7F	; 127
    11ce:	55 0b       	sbc	r21, r21
    11d0:	87 ff       	sbrs	r24, 7
    11d2:	4f d0       	rcall	.+158    	; 0x1272 <__fp_norm2>
    11d4:	00 24       	eor	r0, r0
    11d6:	a0 e6       	ldi	r26, 0x60	; 96
    11d8:	40 ea       	ldi	r20, 0xA0	; 160
    11da:	90 01       	movw	r18, r0
    11dc:	80 58       	subi	r24, 0x80	; 128
    11de:	56 95       	lsr	r21
    11e0:	97 95       	ror	r25
    11e2:	28 f4       	brcc	.+10     	; 0x11ee <sqrt+0x2c>
    11e4:	80 5c       	subi	r24, 0xC0	; 192
    11e6:	66 0f       	add	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	88 1f       	adc	r24, r24
    11ec:	20 f0       	brcs	.+8      	; 0x11f6 <sqrt+0x34>
    11ee:	26 17       	cp	r18, r22
    11f0:	37 07       	cpc	r19, r23
    11f2:	48 07       	cpc	r20, r24
    11f4:	30 f4       	brcc	.+12     	; 0x1202 <sqrt+0x40>
    11f6:	62 1b       	sub	r22, r18
    11f8:	73 0b       	sbc	r23, r19
    11fa:	84 0b       	sbc	r24, r20
    11fc:	20 29       	or	r18, r0
    11fe:	31 29       	or	r19, r1
    1200:	4a 2b       	or	r20, r26
    1202:	a6 95       	lsr	r26
    1204:	17 94       	ror	r1
    1206:	07 94       	ror	r0
    1208:	20 25       	eor	r18, r0
    120a:	31 25       	eor	r19, r1
    120c:	4a 27       	eor	r20, r26
    120e:	58 f7       	brcc	.-42     	; 0x11e6 <sqrt+0x24>
    1210:	66 0f       	add	r22, r22
    1212:	77 1f       	adc	r23, r23
    1214:	88 1f       	adc	r24, r24
    1216:	20 f0       	brcs	.+8      	; 0x1220 <sqrt+0x5e>
    1218:	26 17       	cp	r18, r22
    121a:	37 07       	cpc	r19, r23
    121c:	48 07       	cpc	r20, r24
    121e:	30 f4       	brcc	.+12     	; 0x122c <sqrt+0x6a>
    1220:	62 0b       	sbc	r22, r18
    1222:	73 0b       	sbc	r23, r19
    1224:	84 0b       	sbc	r24, r20
    1226:	20 0d       	add	r18, r0
    1228:	31 1d       	adc	r19, r1
    122a:	41 1d       	adc	r20, r1
    122c:	a0 95       	com	r26
    122e:	81 f7       	brne	.-32     	; 0x1210 <sqrt+0x4e>
    1230:	b9 01       	movw	r22, r18
    1232:	84 2f       	mov	r24, r20
    1234:	91 58       	subi	r25, 0x81	; 129
    1236:	88 0f       	add	r24, r24
    1238:	96 95       	lsr	r25
    123a:	87 95       	ror	r24
    123c:	08 95       	ret

0000123e <square>:
    123e:	9b 01       	movw	r18, r22
    1240:	ac 01       	movw	r20, r24
    1242:	58 cf       	rjmp	.-336    	; 0x10f4 <__mulsf3>

00001244 <__fp_inf>:
    1244:	97 f9       	bld	r25, 7
    1246:	9f 67       	ori	r25, 0x7F	; 127
    1248:	80 e8       	ldi	r24, 0x80	; 128
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	08 95       	ret

00001250 <__fp_mpack>:
    1250:	9f 3f       	cpi	r25, 0xFF	; 255
    1252:	31 f0       	breq	.+12     	; 0x1260 <__fp_mpack_finite+0xc>

00001254 <__fp_mpack_finite>:
    1254:	91 50       	subi	r25, 0x01	; 1
    1256:	20 f4       	brcc	.+8      	; 0x1260 <__fp_mpack_finite+0xc>
    1258:	87 95       	ror	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	b7 95       	ror	r27
    1260:	88 0f       	add	r24, r24
    1262:	91 1d       	adc	r25, r1
    1264:	96 95       	lsr	r25
    1266:	87 95       	ror	r24
    1268:	97 f9       	bld	r25, 7
    126a:	08 95       	ret

0000126c <__fp_nan>:
    126c:	9f ef       	ldi	r25, 0xFF	; 255
    126e:	80 ec       	ldi	r24, 0xC0	; 192
    1270:	08 95       	ret

00001272 <__fp_norm2>:
    1272:	91 50       	subi	r25, 0x01	; 1
    1274:	50 40       	sbci	r21, 0x00	; 0
    1276:	66 0f       	add	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	d2 f7       	brpl	.-12     	; 0x1272 <__fp_norm2>
    127e:	08 95       	ret

00001280 <__fp_pscA>:
    1280:	00 24       	eor	r0, r0
    1282:	0a 94       	dec	r0
    1284:	16 16       	cp	r1, r22
    1286:	17 06       	cpc	r1, r23
    1288:	18 06       	cpc	r1, r24
    128a:	09 06       	cpc	r0, r25
    128c:	08 95       	ret

0000128e <__fp_pscB>:
    128e:	00 24       	eor	r0, r0
    1290:	0a 94       	dec	r0
    1292:	12 16       	cp	r1, r18
    1294:	13 06       	cpc	r1, r19
    1296:	14 06       	cpc	r1, r20
    1298:	05 06       	cpc	r0, r21
    129a:	08 95       	ret

0000129c <__fp_round>:
    129c:	09 2e       	mov	r0, r25
    129e:	03 94       	inc	r0
    12a0:	00 0c       	add	r0, r0
    12a2:	11 f4       	brne	.+4      	; 0x12a8 <__fp_round+0xc>
    12a4:	88 23       	and	r24, r24
    12a6:	52 f0       	brmi	.+20     	; 0x12bc <__fp_round+0x20>
    12a8:	bb 0f       	add	r27, r27
    12aa:	40 f4       	brcc	.+16     	; 0x12bc <__fp_round+0x20>
    12ac:	bf 2b       	or	r27, r31
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <__fp_round+0x18>
    12b0:	60 ff       	sbrs	r22, 0
    12b2:	04 c0       	rjmp	.+8      	; 0x12bc <__fp_round+0x20>
    12b4:	6f 5f       	subi	r22, 0xFF	; 255
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	08 95       	ret

000012be <__udivmodhi4>:
    12be:	aa 1b       	sub	r26, r26
    12c0:	bb 1b       	sub	r27, r27
    12c2:	51 e1       	ldi	r21, 0x11	; 17
    12c4:	07 c0       	rjmp	.+14     	; 0x12d4 <__udivmodhi4_ep>

000012c6 <__udivmodhi4_loop>:
    12c6:	aa 1f       	adc	r26, r26
    12c8:	bb 1f       	adc	r27, r27
    12ca:	a6 17       	cp	r26, r22
    12cc:	b7 07       	cpc	r27, r23
    12ce:	10 f0       	brcs	.+4      	; 0x12d4 <__udivmodhi4_ep>
    12d0:	a6 1b       	sub	r26, r22
    12d2:	b7 0b       	sbc	r27, r23

000012d4 <__udivmodhi4_ep>:
    12d4:	88 1f       	adc	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	5a 95       	dec	r21
    12da:	a9 f7       	brne	.-22     	; 0x12c6 <__udivmodhi4_loop>
    12dc:	80 95       	com	r24
    12de:	90 95       	com	r25
    12e0:	bc 01       	movw	r22, r24
    12e2:	cd 01       	movw	r24, r26
    12e4:	08 95       	ret

000012e6 <__udivmodsi4>:
    12e6:	a1 e2       	ldi	r26, 0x21	; 33
    12e8:	1a 2e       	mov	r1, r26
    12ea:	aa 1b       	sub	r26, r26
    12ec:	bb 1b       	sub	r27, r27
    12ee:	fd 01       	movw	r30, r26
    12f0:	0d c0       	rjmp	.+26     	; 0x130c <__udivmodsi4_ep>

000012f2 <__udivmodsi4_loop>:
    12f2:	aa 1f       	adc	r26, r26
    12f4:	bb 1f       	adc	r27, r27
    12f6:	ee 1f       	adc	r30, r30
    12f8:	ff 1f       	adc	r31, r31
    12fa:	a2 17       	cp	r26, r18
    12fc:	b3 07       	cpc	r27, r19
    12fe:	e4 07       	cpc	r30, r20
    1300:	f5 07       	cpc	r31, r21
    1302:	20 f0       	brcs	.+8      	; 0x130c <__udivmodsi4_ep>
    1304:	a2 1b       	sub	r26, r18
    1306:	b3 0b       	sbc	r27, r19
    1308:	e4 0b       	sbc	r30, r20
    130a:	f5 0b       	sbc	r31, r21

0000130c <__udivmodsi4_ep>:
    130c:	66 1f       	adc	r22, r22
    130e:	77 1f       	adc	r23, r23
    1310:	88 1f       	adc	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	1a 94       	dec	r1
    1316:	69 f7       	brne	.-38     	; 0x12f2 <__udivmodsi4_loop>
    1318:	60 95       	com	r22
    131a:	70 95       	com	r23
    131c:	80 95       	com	r24
    131e:	90 95       	com	r25
    1320:	9b 01       	movw	r18, r22
    1322:	ac 01       	movw	r20, r24
    1324:	bd 01       	movw	r22, r26
    1326:	cf 01       	movw	r24, r30
    1328:	08 95       	ret

0000132a <__umulhisi3>:
    132a:	a2 9f       	mul	r26, r18
    132c:	b0 01       	movw	r22, r0
    132e:	b3 9f       	mul	r27, r19
    1330:	c0 01       	movw	r24, r0
    1332:	a3 9f       	mul	r26, r19
    1334:	01 d0       	rcall	.+2      	; 0x1338 <__umulhisi3+0xe>
    1336:	b2 9f       	mul	r27, r18
    1338:	70 0d       	add	r23, r0
    133a:	81 1d       	adc	r24, r1
    133c:	11 24       	eor	r1, r1
    133e:	91 1d       	adc	r25, r1
    1340:	08 95       	ret

00001342 <__muluhisi3>:
    1342:	f3 df       	rcall	.-26     	; 0x132a <__umulhisi3>
    1344:	a5 9f       	mul	r26, r21
    1346:	90 0d       	add	r25, r0
    1348:	b4 9f       	mul	r27, r20
    134a:	90 0d       	add	r25, r0
    134c:	a4 9f       	mul	r26, r20
    134e:	80 0d       	add	r24, r0
    1350:	91 1d       	adc	r25, r1
    1352:	11 24       	eor	r1, r1
    1354:	08 95       	ret

00001356 <__umoddi3>:
    1356:	68 94       	set
    1358:	01 c0       	rjmp	.+2      	; 0x135c <__udivdi3_umoddi3>

0000135a <__udivdi3>:
    135a:	e8 94       	clt

0000135c <__udivdi3_umoddi3>:
    135c:	8f 92       	push	r8
    135e:	9f 92       	push	r9
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	05 d0       	rcall	.+10     	; 0x1370 <__udivmod64>
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	9f 90       	pop	r9
    136c:	8f 90       	pop	r8
    136e:	08 95       	ret

00001370 <__udivmod64>:
    1370:	88 24       	eor	r8, r8
    1372:	99 24       	eor	r9, r9
    1374:	f4 01       	movw	r30, r8
    1376:	e4 01       	movw	r28, r8
    1378:	b0 e4       	ldi	r27, 0x40	; 64
    137a:	1b 2e       	mov	r1, r27
    137c:	d4 01       	movw	r26, r8
    137e:	9d 15       	cp	r25, r13
    1380:	8e 04       	cpc	r8, r14
    1382:	9f 04       	cpc	r9, r15
    1384:	e0 07       	cpc	r30, r16
    1386:	f1 07       	cpc	r31, r17
    1388:	38 f4       	brcc	.+14     	; 0x1398 <__udivmod64+0x28>
    138a:	fc 01       	movw	r30, r24
    138c:	4b 01       	movw	r8, r22
    138e:	ca 01       	movw	r24, r20
    1390:	b9 01       	movw	r22, r18
    1392:	ad 01       	movw	r20, r26
    1394:	9e 01       	movw	r18, r28
    1396:	16 94       	lsr	r1
    1398:	22 0f       	add	r18, r18
    139a:	33 1f       	adc	r19, r19
    139c:	44 1f       	adc	r20, r20
    139e:	55 1f       	adc	r21, r21
    13a0:	66 1f       	adc	r22, r22
    13a2:	77 1f       	adc	r23, r23
    13a4:	88 1f       	adc	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	88 1c       	adc	r8, r8
    13aa:	99 1c       	adc	r9, r9
    13ac:	ee 1f       	adc	r30, r30
    13ae:	ff 1f       	adc	r31, r31
    13b0:	cc 1f       	adc	r28, r28
    13b2:	dd 1f       	adc	r29, r29
    13b4:	aa 1f       	adc	r26, r26
    13b6:	bb 1f       	adc	r27, r27
    13b8:	8a 14       	cp	r8, r10
    13ba:	9b 04       	cpc	r9, r11
    13bc:	ec 05       	cpc	r30, r12
    13be:	fd 05       	cpc	r31, r13
    13c0:	ce 05       	cpc	r28, r14
    13c2:	df 05       	cpc	r29, r15
    13c4:	a0 07       	cpc	r26, r16
    13c6:	b1 07       	cpc	r27, r17
    13c8:	48 f0       	brcs	.+18     	; 0x13dc <__udivmod64+0x6c>
    13ca:	8a 18       	sub	r8, r10
    13cc:	9b 08       	sbc	r9, r11
    13ce:	ec 09       	sbc	r30, r12
    13d0:	fd 09       	sbc	r31, r13
    13d2:	ce 09       	sbc	r28, r14
    13d4:	df 09       	sbc	r29, r15
    13d6:	a0 0b       	sbc	r26, r16
    13d8:	b1 0b       	sbc	r27, r17
    13da:	21 60       	ori	r18, 0x01	; 1
    13dc:	1a 94       	dec	r1
    13de:	e1 f6       	brne	.-72     	; 0x1398 <__udivmod64+0x28>
    13e0:	2e f4       	brtc	.+10     	; 0x13ec <__udivmod64+0x7c>
    13e2:	94 01       	movw	r18, r8
    13e4:	af 01       	movw	r20, r30
    13e6:	be 01       	movw	r22, r28
    13e8:	cd 01       	movw	r24, r26
    13ea:	00 0c       	add	r0, r0
    13ec:	08 95       	ret

000013ee <__adddi3>:
    13ee:	2a 0d       	add	r18, r10
    13f0:	3b 1d       	adc	r19, r11
    13f2:	4c 1d       	adc	r20, r12
    13f4:	5d 1d       	adc	r21, r13
    13f6:	6e 1d       	adc	r22, r14
    13f8:	7f 1d       	adc	r23, r15
    13fa:	80 1f       	adc	r24, r16
    13fc:	91 1f       	adc	r25, r17
    13fe:	08 95       	ret

00001400 <calloc>:
    1400:	0f 93       	push	r16
    1402:	1f 93       	push	r17
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	86 9f       	mul	r24, r22
    140a:	80 01       	movw	r16, r0
    140c:	87 9f       	mul	r24, r23
    140e:	10 0d       	add	r17, r0
    1410:	96 9f       	mul	r25, r22
    1412:	10 0d       	add	r17, r0
    1414:	11 24       	eor	r1, r1
    1416:	c8 01       	movw	r24, r16
    1418:	0d d0       	rcall	.+26     	; 0x1434 <malloc>
    141a:	ec 01       	movw	r28, r24
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	21 f0       	breq	.+8      	; 0x1428 <calloc+0x28>
    1420:	a8 01       	movw	r20, r16
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	0c d3       	rcall	.+1560   	; 0x1a40 <memset>
    1428:	ce 01       	movw	r24, r28
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	08 95       	ret

00001434 <malloc>:
    1434:	0f 93       	push	r16
    1436:	1f 93       	push	r17
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	82 30       	cpi	r24, 0x02	; 2
    143e:	91 05       	cpc	r25, r1
    1440:	10 f4       	brcc	.+4      	; 0x1446 <malloc+0x12>
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <__flp>
    144a:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <__flp+0x1>
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	a0 e0       	ldi	r26, 0x00	; 0
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	30 97       	sbiw	r30, 0x00	; 0
    1458:	19 f1       	breq	.+70     	; 0x14a0 <malloc+0x6c>
    145a:	40 81       	ld	r20, Z
    145c:	51 81       	ldd	r21, Z+1	; 0x01
    145e:	02 81       	ldd	r16, Z+2	; 0x02
    1460:	13 81       	ldd	r17, Z+3	; 0x03
    1462:	48 17       	cp	r20, r24
    1464:	59 07       	cpc	r21, r25
    1466:	c8 f0       	brcs	.+50     	; 0x149a <malloc+0x66>
    1468:	84 17       	cp	r24, r20
    146a:	95 07       	cpc	r25, r21
    146c:	69 f4       	brne	.+26     	; 0x1488 <malloc+0x54>
    146e:	10 97       	sbiw	r26, 0x00	; 0
    1470:	31 f0       	breq	.+12     	; 0x147e <malloc+0x4a>
    1472:	12 96       	adiw	r26, 0x02	; 2
    1474:	0c 93       	st	X, r16
    1476:	12 97       	sbiw	r26, 0x02	; 2
    1478:	13 96       	adiw	r26, 0x03	; 3
    147a:	1c 93       	st	X, r17
    147c:	27 c0       	rjmp	.+78     	; 0x14cc <malloc+0x98>
    147e:	00 93 65 02 	sts	0x0265, r16	; 0x800265 <__flp>
    1482:	10 93 66 02 	sts	0x0266, r17	; 0x800266 <__flp+0x1>
    1486:	22 c0       	rjmp	.+68     	; 0x14cc <malloc+0x98>
    1488:	21 15       	cp	r18, r1
    148a:	31 05       	cpc	r19, r1
    148c:	19 f0       	breq	.+6      	; 0x1494 <malloc+0x60>
    148e:	42 17       	cp	r20, r18
    1490:	53 07       	cpc	r21, r19
    1492:	18 f4       	brcc	.+6      	; 0x149a <malloc+0x66>
    1494:	9a 01       	movw	r18, r20
    1496:	bd 01       	movw	r22, r26
    1498:	ef 01       	movw	r28, r30
    149a:	df 01       	movw	r26, r30
    149c:	f8 01       	movw	r30, r16
    149e:	db cf       	rjmp	.-74     	; 0x1456 <malloc+0x22>
    14a0:	21 15       	cp	r18, r1
    14a2:	31 05       	cpc	r19, r1
    14a4:	f9 f0       	breq	.+62     	; 0x14e4 <malloc+0xb0>
    14a6:	28 1b       	sub	r18, r24
    14a8:	39 0b       	sbc	r19, r25
    14aa:	24 30       	cpi	r18, 0x04	; 4
    14ac:	31 05       	cpc	r19, r1
    14ae:	80 f4       	brcc	.+32     	; 0x14d0 <malloc+0x9c>
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	9b 81       	ldd	r25, Y+3	; 0x03
    14b4:	61 15       	cp	r22, r1
    14b6:	71 05       	cpc	r23, r1
    14b8:	21 f0       	breq	.+8      	; 0x14c2 <malloc+0x8e>
    14ba:	fb 01       	movw	r30, r22
    14bc:	93 83       	std	Z+3, r25	; 0x03
    14be:	82 83       	std	Z+2, r24	; 0x02
    14c0:	04 c0       	rjmp	.+8      	; 0x14ca <malloc+0x96>
    14c2:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <__flp+0x1>
    14c6:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <__flp>
    14ca:	fe 01       	movw	r30, r28
    14cc:	32 96       	adiw	r30, 0x02	; 2
    14ce:	44 c0       	rjmp	.+136    	; 0x1558 <malloc+0x124>
    14d0:	fe 01       	movw	r30, r28
    14d2:	e2 0f       	add	r30, r18
    14d4:	f3 1f       	adc	r31, r19
    14d6:	81 93       	st	Z+, r24
    14d8:	91 93       	st	Z+, r25
    14da:	22 50       	subi	r18, 0x02	; 2
    14dc:	31 09       	sbc	r19, r1
    14de:	39 83       	std	Y+1, r19	; 0x01
    14e0:	28 83       	st	Y, r18
    14e2:	3a c0       	rjmp	.+116    	; 0x1558 <malloc+0x124>
    14e4:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__brkval>
    14e8:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <__brkval+0x1>
    14ec:	23 2b       	or	r18, r19
    14ee:	41 f4       	brne	.+16     	; 0x1500 <malloc+0xcc>
    14f0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    14f4:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    14f8:	30 93 64 02 	sts	0x0264, r19	; 0x800264 <__brkval+0x1>
    14fc:	20 93 63 02 	sts	0x0263, r18	; 0x800263 <__brkval>
    1500:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    1504:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    1508:	21 15       	cp	r18, r1
    150a:	31 05       	cpc	r19, r1
    150c:	41 f4       	brne	.+16     	; 0x151e <malloc+0xea>
    150e:	2d b7       	in	r18, 0x3d	; 61
    1510:	3e b7       	in	r19, 0x3e	; 62
    1512:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1516:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    151a:	24 1b       	sub	r18, r20
    151c:	35 0b       	sbc	r19, r21
    151e:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <__brkval>
    1522:	f0 91 64 02 	lds	r31, 0x0264	; 0x800264 <__brkval+0x1>
    1526:	e2 17       	cp	r30, r18
    1528:	f3 07       	cpc	r31, r19
    152a:	a0 f4       	brcc	.+40     	; 0x1554 <malloc+0x120>
    152c:	2e 1b       	sub	r18, r30
    152e:	3f 0b       	sbc	r19, r31
    1530:	28 17       	cp	r18, r24
    1532:	39 07       	cpc	r19, r25
    1534:	78 f0       	brcs	.+30     	; 0x1554 <malloc+0x120>
    1536:	ac 01       	movw	r20, r24
    1538:	4e 5f       	subi	r20, 0xFE	; 254
    153a:	5f 4f       	sbci	r21, 0xFF	; 255
    153c:	24 17       	cp	r18, r20
    153e:	35 07       	cpc	r19, r21
    1540:	48 f0       	brcs	.+18     	; 0x1554 <malloc+0x120>
    1542:	4e 0f       	add	r20, r30
    1544:	5f 1f       	adc	r21, r31
    1546:	50 93 64 02 	sts	0x0264, r21	; 0x800264 <__brkval+0x1>
    154a:	40 93 63 02 	sts	0x0263, r20	; 0x800263 <__brkval>
    154e:	81 93       	st	Z+, r24
    1550:	91 93       	st	Z+, r25
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <malloc+0x124>
    1554:	e0 e0       	ldi	r30, 0x00	; 0
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	cf 01       	movw	r24, r30
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	0f 91       	pop	r16
    1562:	08 95       	ret

00001564 <free>:
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	09 f4       	brne	.+2      	; 0x156e <free+0xa>
    156c:	81 c0       	rjmp	.+258    	; 0x1670 <free+0x10c>
    156e:	fc 01       	movw	r30, r24
    1570:	32 97       	sbiw	r30, 0x02	; 2
    1572:	13 82       	std	Z+3, r1	; 0x03
    1574:	12 82       	std	Z+2, r1	; 0x02
    1576:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <__flp>
    157a:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <__flp+0x1>
    157e:	10 97       	sbiw	r26, 0x00	; 0
    1580:	81 f4       	brne	.+32     	; 0x15a2 <free+0x3e>
    1582:	20 81       	ld	r18, Z
    1584:	31 81       	ldd	r19, Z+1	; 0x01
    1586:	82 0f       	add	r24, r18
    1588:	93 1f       	adc	r25, r19
    158a:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__brkval>
    158e:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <__brkval+0x1>
    1592:	28 17       	cp	r18, r24
    1594:	39 07       	cpc	r19, r25
    1596:	51 f5       	brne	.+84     	; 0x15ec <free+0x88>
    1598:	f0 93 64 02 	sts	0x0264, r31	; 0x800264 <__brkval+0x1>
    159c:	e0 93 63 02 	sts	0x0263, r30	; 0x800263 <__brkval>
    15a0:	67 c0       	rjmp	.+206    	; 0x1670 <free+0x10c>
    15a2:	ed 01       	movw	r28, r26
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	ce 17       	cp	r28, r30
    15aa:	df 07       	cpc	r29, r31
    15ac:	40 f4       	brcc	.+16     	; 0x15be <free+0x5a>
    15ae:	4a 81       	ldd	r20, Y+2	; 0x02
    15b0:	5b 81       	ldd	r21, Y+3	; 0x03
    15b2:	9e 01       	movw	r18, r28
    15b4:	41 15       	cp	r20, r1
    15b6:	51 05       	cpc	r21, r1
    15b8:	f1 f0       	breq	.+60     	; 0x15f6 <free+0x92>
    15ba:	ea 01       	movw	r28, r20
    15bc:	f5 cf       	rjmp	.-22     	; 0x15a8 <free+0x44>
    15be:	d3 83       	std	Z+3, r29	; 0x03
    15c0:	c2 83       	std	Z+2, r28	; 0x02
    15c2:	40 81       	ld	r20, Z
    15c4:	51 81       	ldd	r21, Z+1	; 0x01
    15c6:	84 0f       	add	r24, r20
    15c8:	95 1f       	adc	r25, r21
    15ca:	c8 17       	cp	r28, r24
    15cc:	d9 07       	cpc	r29, r25
    15ce:	59 f4       	brne	.+22     	; 0x15e6 <free+0x82>
    15d0:	88 81       	ld	r24, Y
    15d2:	99 81       	ldd	r25, Y+1	; 0x01
    15d4:	84 0f       	add	r24, r20
    15d6:	95 1f       	adc	r25, r21
    15d8:	02 96       	adiw	r24, 0x02	; 2
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	80 83       	st	Z, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	9b 81       	ldd	r25, Y+3	; 0x03
    15e2:	93 83       	std	Z+3, r25	; 0x03
    15e4:	82 83       	std	Z+2, r24	; 0x02
    15e6:	21 15       	cp	r18, r1
    15e8:	31 05       	cpc	r19, r1
    15ea:	29 f4       	brne	.+10     	; 0x15f6 <free+0x92>
    15ec:	f0 93 66 02 	sts	0x0266, r31	; 0x800266 <__flp+0x1>
    15f0:	e0 93 65 02 	sts	0x0265, r30	; 0x800265 <__flp>
    15f4:	3d c0       	rjmp	.+122    	; 0x1670 <free+0x10c>
    15f6:	e9 01       	movw	r28, r18
    15f8:	fb 83       	std	Y+3, r31	; 0x03
    15fa:	ea 83       	std	Y+2, r30	; 0x02
    15fc:	49 91       	ld	r20, Y+
    15fe:	59 91       	ld	r21, Y+
    1600:	c4 0f       	add	r28, r20
    1602:	d5 1f       	adc	r29, r21
    1604:	ec 17       	cp	r30, r28
    1606:	fd 07       	cpc	r31, r29
    1608:	61 f4       	brne	.+24     	; 0x1622 <free+0xbe>
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	84 0f       	add	r24, r20
    1610:	95 1f       	adc	r25, r21
    1612:	02 96       	adiw	r24, 0x02	; 2
    1614:	e9 01       	movw	r28, r18
    1616:	99 83       	std	Y+1, r25	; 0x01
    1618:	88 83       	st	Y, r24
    161a:	82 81       	ldd	r24, Z+2	; 0x02
    161c:	93 81       	ldd	r25, Z+3	; 0x03
    161e:	9b 83       	std	Y+3, r25	; 0x03
    1620:	8a 83       	std	Y+2, r24	; 0x02
    1622:	e0 e0       	ldi	r30, 0x00	; 0
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	12 96       	adiw	r26, 0x02	; 2
    1628:	8d 91       	ld	r24, X+
    162a:	9c 91       	ld	r25, X
    162c:	13 97       	sbiw	r26, 0x03	; 3
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	19 f0       	breq	.+6      	; 0x1638 <free+0xd4>
    1632:	fd 01       	movw	r30, r26
    1634:	dc 01       	movw	r26, r24
    1636:	f7 cf       	rjmp	.-18     	; 0x1626 <free+0xc2>
    1638:	8d 91       	ld	r24, X+
    163a:	9c 91       	ld	r25, X
    163c:	11 97       	sbiw	r26, 0x01	; 1
    163e:	9d 01       	movw	r18, r26
    1640:	2e 5f       	subi	r18, 0xFE	; 254
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	82 0f       	add	r24, r18
    1646:	93 1f       	adc	r25, r19
    1648:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__brkval>
    164c:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <__brkval+0x1>
    1650:	28 17       	cp	r18, r24
    1652:	39 07       	cpc	r19, r25
    1654:	69 f4       	brne	.+26     	; 0x1670 <free+0x10c>
    1656:	30 97       	sbiw	r30, 0x00	; 0
    1658:	29 f4       	brne	.+10     	; 0x1664 <free+0x100>
    165a:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <__flp+0x1>
    165e:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <__flp>
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <free+0x104>
    1664:	13 82       	std	Z+3, r1	; 0x03
    1666:	12 82       	std	Z+2, r1	; 0x02
    1668:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <__brkval+0x1>
    166c:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <__brkval>
    1670:	df 91       	pop	r29
    1672:	cf 91       	pop	r28
    1674:	08 95       	ret

00001676 <realloc>:
    1676:	a0 e0       	ldi	r26, 0x00	; 0
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e0 e4       	ldi	r30, 0x40	; 64
    167c:	fb e0       	ldi	r31, 0x0B	; 11
    167e:	43 c2       	rjmp	.+1158   	; 0x1b06 <__prologue_saves__+0x8>
    1680:	ec 01       	movw	r28, r24
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	19 f4       	brne	.+6      	; 0x168c <realloc+0x16>
    1686:	cb 01       	movw	r24, r22
    1688:	d5 de       	rcall	.-598    	; 0x1434 <malloc>
    168a:	b0 c0       	rjmp	.+352    	; 0x17ec <realloc+0x176>
    168c:	fc 01       	movw	r30, r24
    168e:	e6 0f       	add	r30, r22
    1690:	f7 1f       	adc	r31, r23
    1692:	9c 01       	movw	r18, r24
    1694:	22 50       	subi	r18, 0x02	; 2
    1696:	31 09       	sbc	r19, r1
    1698:	e2 17       	cp	r30, r18
    169a:	f3 07       	cpc	r31, r19
    169c:	08 f4       	brcc	.+2      	; 0x16a0 <realloc+0x2a>
    169e:	a4 c0       	rjmp	.+328    	; 0x17e8 <realloc+0x172>
    16a0:	d9 01       	movw	r26, r18
    16a2:	0d 91       	ld	r16, X+
    16a4:	1c 91       	ld	r17, X
    16a6:	11 97       	sbiw	r26, 0x01	; 1
    16a8:	06 17       	cp	r16, r22
    16aa:	17 07       	cpc	r17, r23
    16ac:	a8 f0       	brcs	.+42     	; 0x16d8 <realloc+0x62>
    16ae:	05 30       	cpi	r16, 0x05	; 5
    16b0:	11 05       	cpc	r17, r1
    16b2:	08 f4       	brcc	.+2      	; 0x16b6 <realloc+0x40>
    16b4:	97 c0       	rjmp	.+302    	; 0x17e4 <realloc+0x16e>
    16b6:	c8 01       	movw	r24, r16
    16b8:	04 97       	sbiw	r24, 0x04	; 4
    16ba:	86 17       	cp	r24, r22
    16bc:	97 07       	cpc	r25, r23
    16be:	08 f4       	brcc	.+2      	; 0x16c2 <realloc+0x4c>
    16c0:	91 c0       	rjmp	.+290    	; 0x17e4 <realloc+0x16e>
    16c2:	02 50       	subi	r16, 0x02	; 2
    16c4:	11 09       	sbc	r17, r1
    16c6:	06 1b       	sub	r16, r22
    16c8:	17 0b       	sbc	r17, r23
    16ca:	01 93       	st	Z+, r16
    16cc:	11 93       	st	Z+, r17
    16ce:	6d 93       	st	X+, r22
    16d0:	7c 93       	st	X, r23
    16d2:	cf 01       	movw	r24, r30
    16d4:	47 df       	rcall	.-370    	; 0x1564 <free>
    16d6:	86 c0       	rjmp	.+268    	; 0x17e4 <realloc+0x16e>
    16d8:	5b 01       	movw	r10, r22
    16da:	a0 1a       	sub	r10, r16
    16dc:	b1 0a       	sbc	r11, r17
    16de:	4c 01       	movw	r8, r24
    16e0:	80 0e       	add	r8, r16
    16e2:	91 1e       	adc	r9, r17
    16e4:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <__flp>
    16e8:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <__flp+0x1>
    16ec:	61 2c       	mov	r6, r1
    16ee:	71 2c       	mov	r7, r1
    16f0:	e1 2c       	mov	r14, r1
    16f2:	f1 2c       	mov	r15, r1
    16f4:	10 97       	sbiw	r26, 0x00	; 0
    16f6:	09 f4       	brne	.+2      	; 0x16fa <realloc+0x84>
    16f8:	46 c0       	rjmp	.+140    	; 0x1786 <realloc+0x110>
    16fa:	8d 91       	ld	r24, X+
    16fc:	9c 91       	ld	r25, X
    16fe:	11 97       	sbiw	r26, 0x01	; 1
    1700:	a8 15       	cp	r26, r8
    1702:	b9 05       	cpc	r27, r9
    1704:	b1 f5       	brne	.+108    	; 0x1772 <realloc+0xfc>
    1706:	6c 01       	movw	r12, r24
    1708:	42 e0       	ldi	r20, 0x02	; 2
    170a:	c4 0e       	add	r12, r20
    170c:	d1 1c       	adc	r13, r1
    170e:	ca 14       	cp	r12, r10
    1710:	db 04       	cpc	r13, r11
    1712:	78 f1       	brcs	.+94     	; 0x1772 <realloc+0xfc>
    1714:	4c 01       	movw	r8, r24
    1716:	8a 18       	sub	r8, r10
    1718:	9b 08       	sbc	r9, r11
    171a:	64 01       	movw	r12, r8
    171c:	42 e0       	ldi	r20, 0x02	; 2
    171e:	c4 0e       	add	r12, r20
    1720:	d1 1c       	adc	r13, r1
    1722:	12 96       	adiw	r26, 0x02	; 2
    1724:	bc 90       	ld	r11, X
    1726:	12 97       	sbiw	r26, 0x02	; 2
    1728:	13 96       	adiw	r26, 0x03	; 3
    172a:	ac 91       	ld	r26, X
    172c:	b5 e0       	ldi	r27, 0x05	; 5
    172e:	cb 16       	cp	r12, r27
    1730:	d1 04       	cpc	r13, r1
    1732:	40 f0       	brcs	.+16     	; 0x1744 <realloc+0xce>
    1734:	b2 82       	std	Z+2, r11	; 0x02
    1736:	a3 83       	std	Z+3, r26	; 0x03
    1738:	91 82       	std	Z+1, r9	; 0x01
    173a:	80 82       	st	Z, r8
    173c:	d9 01       	movw	r26, r18
    173e:	6d 93       	st	X+, r22
    1740:	7c 93       	st	X, r23
    1742:	09 c0       	rjmp	.+18     	; 0x1756 <realloc+0xe0>
    1744:	0e 5f       	subi	r16, 0xFE	; 254
    1746:	1f 4f       	sbci	r17, 0xFF	; 255
    1748:	80 0f       	add	r24, r16
    174a:	91 1f       	adc	r25, r17
    174c:	f9 01       	movw	r30, r18
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	80 83       	st	Z, r24
    1752:	eb 2d       	mov	r30, r11
    1754:	fa 2f       	mov	r31, r26
    1756:	e1 14       	cp	r14, r1
    1758:	f1 04       	cpc	r15, r1
    175a:	31 f0       	breq	.+12     	; 0x1768 <realloc+0xf2>
    175c:	d7 01       	movw	r26, r14
    175e:	13 96       	adiw	r26, 0x03	; 3
    1760:	fc 93       	st	X, r31
    1762:	ee 93       	st	-X, r30
    1764:	12 97       	sbiw	r26, 0x02	; 2
    1766:	3e c0       	rjmp	.+124    	; 0x17e4 <realloc+0x16e>
    1768:	f0 93 66 02 	sts	0x0266, r31	; 0x800266 <__flp+0x1>
    176c:	e0 93 65 02 	sts	0x0265, r30	; 0x800265 <__flp>
    1770:	39 c0       	rjmp	.+114    	; 0x17e4 <realloc+0x16e>
    1772:	68 16       	cp	r6, r24
    1774:	79 06       	cpc	r7, r25
    1776:	08 f4       	brcc	.+2      	; 0x177a <realloc+0x104>
    1778:	3c 01       	movw	r6, r24
    177a:	7d 01       	movw	r14, r26
    177c:	12 96       	adiw	r26, 0x02	; 2
    177e:	0d 90       	ld	r0, X+
    1780:	bc 91       	ld	r27, X
    1782:	a0 2d       	mov	r26, r0
    1784:	b7 cf       	rjmp	.-146    	; 0x16f4 <realloc+0x7e>
    1786:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <__brkval>
    178a:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <__brkval+0x1>
    178e:	88 16       	cp	r8, r24
    1790:	99 06       	cpc	r9, r25
    1792:	e1 f4       	brne	.+56     	; 0x17cc <realloc+0x156>
    1794:	66 16       	cp	r6, r22
    1796:	77 06       	cpc	r7, r23
    1798:	c8 f4       	brcc	.+50     	; 0x17cc <realloc+0x156>
    179a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    179e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	41 f4       	brne	.+16     	; 0x17b6 <realloc+0x140>
    17a6:	8d b7       	in	r24, 0x3d	; 61
    17a8:	9e b7       	in	r25, 0x3e	; 62
    17aa:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    17ae:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    17b2:	84 1b       	sub	r24, r20
    17b4:	95 0b       	sbc	r25, r21
    17b6:	e8 17       	cp	r30, r24
    17b8:	f9 07       	cpc	r31, r25
    17ba:	b0 f4       	brcc	.+44     	; 0x17e8 <realloc+0x172>
    17bc:	f0 93 64 02 	sts	0x0264, r31	; 0x800264 <__brkval+0x1>
    17c0:	e0 93 63 02 	sts	0x0263, r30	; 0x800263 <__brkval>
    17c4:	f9 01       	movw	r30, r18
    17c6:	71 83       	std	Z+1, r23	; 0x01
    17c8:	60 83       	st	Z, r22
    17ca:	0c c0       	rjmp	.+24     	; 0x17e4 <realloc+0x16e>
    17cc:	cb 01       	movw	r24, r22
    17ce:	32 de       	rcall	.-924    	; 0x1434 <malloc>
    17d0:	7c 01       	movw	r14, r24
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	49 f0       	breq	.+18     	; 0x17e8 <realloc+0x172>
    17d6:	a8 01       	movw	r20, r16
    17d8:	be 01       	movw	r22, r28
    17da:	29 d1       	rcall	.+594    	; 0x1a2e <memcpy>
    17dc:	ce 01       	movw	r24, r28
    17de:	c2 de       	rcall	.-636    	; 0x1564 <free>
    17e0:	c7 01       	movw	r24, r14
    17e2:	04 c0       	rjmp	.+8      	; 0x17ec <realloc+0x176>
    17e4:	ce 01       	movw	r24, r28
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <realloc+0x176>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	ee e0       	ldi	r30, 0x0E	; 14
    17f2:	a5 c1       	rjmp	.+842    	; 0x1b3e <__epilogue_restores__+0x8>

000017f4 <strtol>:
    17f4:	a0 e0       	ldi	r26, 0x00	; 0
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	ef ef       	ldi	r30, 0xFF	; 255
    17fa:	fb e0       	ldi	r31, 0x0B	; 11
    17fc:	81 c1       	rjmp	.+770    	; 0x1b00 <__prologue_saves__+0x2>
    17fe:	5c 01       	movw	r10, r24
    1800:	6b 01       	movw	r12, r22
    1802:	7a 01       	movw	r14, r20
    1804:	61 15       	cp	r22, r1
    1806:	71 05       	cpc	r23, r1
    1808:	19 f0       	breq	.+6      	; 0x1810 <strtol+0x1c>
    180a:	fb 01       	movw	r30, r22
    180c:	91 83       	std	Z+1, r25	; 0x01
    180e:	80 83       	st	Z, r24
    1810:	e1 14       	cp	r14, r1
    1812:	f1 04       	cpc	r15, r1
    1814:	29 f0       	breq	.+10     	; 0x1820 <strtol+0x2c>
    1816:	c7 01       	movw	r24, r14
    1818:	02 97       	sbiw	r24, 0x02	; 2
    181a:	83 97       	sbiw	r24, 0x23	; 35
    181c:	08 f0       	brcs	.+2      	; 0x1820 <strtol+0x2c>
    181e:	e2 c0       	rjmp	.+452    	; 0x19e4 <strtol+0x1f0>
    1820:	e5 01       	movw	r28, r10
    1822:	21 96       	adiw	r28, 0x01	; 1
    1824:	f5 01       	movw	r30, r10
    1826:	10 81       	ld	r17, Z
    1828:	81 2f       	mov	r24, r17
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	f4 d0       	rcall	.+488    	; 0x1a16 <isspace>
    182e:	89 2b       	or	r24, r25
    1830:	11 f0       	breq	.+4      	; 0x1836 <strtol+0x42>
    1832:	5e 01       	movw	r10, r28
    1834:	f5 cf       	rjmp	.-22     	; 0x1820 <strtol+0x2c>
    1836:	1d 32       	cpi	r17, 0x2D	; 45
    1838:	29 f4       	brne	.+10     	; 0x1844 <strtol+0x50>
    183a:	21 96       	adiw	r28, 0x01	; 1
    183c:	f5 01       	movw	r30, r10
    183e:	11 81       	ldd	r17, Z+1	; 0x01
    1840:	01 e0       	ldi	r16, 0x01	; 1
    1842:	07 c0       	rjmp	.+14     	; 0x1852 <strtol+0x5e>
    1844:	1b 32       	cpi	r17, 0x2B	; 43
    1846:	21 f4       	brne	.+8      	; 0x1850 <strtol+0x5c>
    1848:	e5 01       	movw	r28, r10
    184a:	22 96       	adiw	r28, 0x02	; 2
    184c:	f5 01       	movw	r30, r10
    184e:	11 81       	ldd	r17, Z+1	; 0x01
    1850:	00 e0       	ldi	r16, 0x00	; 0
    1852:	e1 14       	cp	r14, r1
    1854:	f1 04       	cpc	r15, r1
    1856:	09 f1       	breq	.+66     	; 0x189a <strtol+0xa6>
    1858:	f0 e1       	ldi	r31, 0x10	; 16
    185a:	ef 16       	cp	r14, r31
    185c:	f1 04       	cpc	r15, r1
    185e:	29 f4       	brne	.+10     	; 0x186a <strtol+0x76>
    1860:	3e c0       	rjmp	.+124    	; 0x18de <strtol+0xea>
    1862:	10 e3       	ldi	r17, 0x30	; 48
    1864:	e1 14       	cp	r14, r1
    1866:	f1 04       	cpc	r15, r1
    1868:	21 f1       	breq	.+72     	; 0x18b2 <strtol+0xbe>
    186a:	28 e0       	ldi	r18, 0x08	; 8
    186c:	e2 16       	cp	r14, r18
    186e:	f1 04       	cpc	r15, r1
    1870:	01 f1       	breq	.+64     	; 0x18b2 <strtol+0xbe>
    1872:	54 f4       	brge	.+20     	; 0x1888 <strtol+0x94>
    1874:	e2 e0       	ldi	r30, 0x02	; 2
    1876:	ee 16       	cp	r14, r30
    1878:	f1 04       	cpc	r15, r1
    187a:	21 f5       	brne	.+72     	; 0x18c4 <strtol+0xd0>
    187c:	81 2c       	mov	r8, r1
    187e:	91 2c       	mov	r9, r1
    1880:	a1 2c       	mov	r10, r1
    1882:	b0 e4       	ldi	r27, 0x40	; 64
    1884:	bb 2e       	mov	r11, r27
    1886:	3d c0       	rjmp	.+122    	; 0x1902 <strtol+0x10e>
    1888:	fa e0       	ldi	r31, 0x0A	; 10
    188a:	ef 16       	cp	r14, r31
    188c:	f1 04       	cpc	r15, r1
    188e:	39 f0       	breq	.+14     	; 0x189e <strtol+0xaa>
    1890:	20 e1       	ldi	r18, 0x10	; 16
    1892:	e2 16       	cp	r14, r18
    1894:	f1 04       	cpc	r15, r1
    1896:	b1 f4       	brne	.+44     	; 0x18c4 <strtol+0xd0>
    1898:	2f c0       	rjmp	.+94     	; 0x18f8 <strtol+0x104>
    189a:	10 33       	cpi	r17, 0x30	; 48
    189c:	11 f1       	breq	.+68     	; 0x18e2 <strtol+0xee>
    189e:	fa e0       	ldi	r31, 0x0A	; 10
    18a0:	ef 2e       	mov	r14, r31
    18a2:	f1 2c       	mov	r15, r1
    18a4:	ac ec       	ldi	r26, 0xCC	; 204
    18a6:	8a 2e       	mov	r8, r26
    18a8:	98 2c       	mov	r9, r8
    18aa:	a8 2c       	mov	r10, r8
    18ac:	ac e0       	ldi	r26, 0x0C	; 12
    18ae:	ba 2e       	mov	r11, r26
    18b0:	28 c0       	rjmp	.+80     	; 0x1902 <strtol+0x10e>
    18b2:	78 e0       	ldi	r23, 0x08	; 8
    18b4:	e7 2e       	mov	r14, r23
    18b6:	f1 2c       	mov	r15, r1
    18b8:	81 2c       	mov	r8, r1
    18ba:	91 2c       	mov	r9, r1
    18bc:	a1 2c       	mov	r10, r1
    18be:	e0 e1       	ldi	r30, 0x10	; 16
    18c0:	be 2e       	mov	r11, r30
    18c2:	1f c0       	rjmp	.+62     	; 0x1902 <strtol+0x10e>
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	70 e0       	ldi	r23, 0x00	; 0
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e8       	ldi	r25, 0x80	; 128
    18cc:	97 01       	movw	r18, r14
    18ce:	0f 2c       	mov	r0, r15
    18d0:	00 0c       	add	r0, r0
    18d2:	44 0b       	sbc	r20, r20
    18d4:	55 0b       	sbc	r21, r21
    18d6:	07 dd       	rcall	.-1522   	; 0x12e6 <__udivmodsi4>
    18d8:	49 01       	movw	r8, r18
    18da:	5a 01       	movw	r10, r20
    18dc:	12 c0       	rjmp	.+36     	; 0x1902 <strtol+0x10e>
    18de:	10 33       	cpi	r17, 0x30	; 48
    18e0:	59 f4       	brne	.+22     	; 0x18f8 <strtol+0x104>
    18e2:	88 81       	ld	r24, Y
    18e4:	8f 7d       	andi	r24, 0xDF	; 223
    18e6:	88 35       	cpi	r24, 0x58	; 88
    18e8:	09 f0       	breq	.+2      	; 0x18ec <strtol+0xf8>
    18ea:	bb cf       	rjmp	.-138    	; 0x1862 <strtol+0x6e>
    18ec:	19 81       	ldd	r17, Y+1	; 0x01
    18ee:	22 96       	adiw	r28, 0x02	; 2
    18f0:	02 60       	ori	r16, 0x02	; 2
    18f2:	80 e1       	ldi	r24, 0x10	; 16
    18f4:	e8 2e       	mov	r14, r24
    18f6:	f1 2c       	mov	r15, r1
    18f8:	81 2c       	mov	r8, r1
    18fa:	91 2c       	mov	r9, r1
    18fc:	a1 2c       	mov	r10, r1
    18fe:	68 e0       	ldi	r22, 0x08	; 8
    1900:	b6 2e       	mov	r11, r22
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	cb 01       	movw	r24, r22
    190a:	27 01       	movw	r4, r14
    190c:	0f 2c       	mov	r0, r15
    190e:	00 0c       	add	r0, r0
    1910:	66 08       	sbc	r6, r6
    1912:	77 08       	sbc	r7, r7
    1914:	fe 01       	movw	r30, r28
    1916:	50 ed       	ldi	r21, 0xD0	; 208
    1918:	35 2e       	mov	r3, r21
    191a:	31 0e       	add	r3, r17
    191c:	29 e0       	ldi	r18, 0x09	; 9
    191e:	23 15       	cp	r18, r3
    1920:	70 f4       	brcc	.+28     	; 0x193e <strtol+0x14a>
    1922:	2f eb       	ldi	r18, 0xBF	; 191
    1924:	21 0f       	add	r18, r17
    1926:	2a 31       	cpi	r18, 0x1A	; 26
    1928:	18 f4       	brcc	.+6      	; 0x1930 <strtol+0x13c>
    192a:	39 ec       	ldi	r19, 0xC9	; 201
    192c:	33 2e       	mov	r3, r19
    192e:	06 c0       	rjmp	.+12     	; 0x193c <strtol+0x148>
    1930:	2f e9       	ldi	r18, 0x9F	; 159
    1932:	21 0f       	add	r18, r17
    1934:	2a 31       	cpi	r18, 0x1A	; 26
    1936:	10 f5       	brcc	.+68     	; 0x197c <strtol+0x188>
    1938:	29 ea       	ldi	r18, 0xA9	; 169
    193a:	32 2e       	mov	r3, r18
    193c:	31 0e       	add	r3, r17
    193e:	23 2d       	mov	r18, r3
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	2e 15       	cp	r18, r14
    1944:	3f 05       	cpc	r19, r15
    1946:	d4 f4       	brge	.+52     	; 0x197c <strtol+0x188>
    1948:	47 fd       	sbrc	r20, 7
    194a:	15 c0       	rjmp	.+42     	; 0x1976 <strtol+0x182>
    194c:	86 16       	cp	r8, r22
    194e:	97 06       	cpc	r9, r23
    1950:	a8 06       	cpc	r10, r24
    1952:	b9 06       	cpc	r11, r25
    1954:	68 f0       	brcs	.+26     	; 0x1970 <strtol+0x17c>
    1956:	a3 01       	movw	r20, r6
    1958:	92 01       	movw	r18, r4
    195a:	c2 d0       	rcall	.+388    	; 0x1ae0 <__mulsi3>
    195c:	63 0d       	add	r22, r3
    195e:	71 1d       	adc	r23, r1
    1960:	81 1d       	adc	r24, r1
    1962:	91 1d       	adc	r25, r1
    1964:	61 30       	cpi	r22, 0x01	; 1
    1966:	71 05       	cpc	r23, r1
    1968:	81 05       	cpc	r24, r1
    196a:	20 e8       	ldi	r18, 0x80	; 128
    196c:	92 07       	cpc	r25, r18
    196e:	10 f0       	brcs	.+4      	; 0x1974 <strtol+0x180>
    1970:	4f ef       	ldi	r20, 0xFF	; 255
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <strtol+0x182>
    1974:	41 e0       	ldi	r20, 0x01	; 1
    1976:	21 96       	adiw	r28, 0x01	; 1
    1978:	10 81       	ld	r17, Z
    197a:	cc cf       	rjmp	.-104    	; 0x1914 <strtol+0x120>
    197c:	20 2f       	mov	r18, r16
    197e:	21 70       	andi	r18, 0x01	; 1
    1980:	c1 14       	cp	r12, r1
    1982:	d1 04       	cpc	r13, r1
    1984:	71 f0       	breq	.+28     	; 0x19a2 <strtol+0x1ae>
    1986:	44 23       	and	r20, r20
    1988:	29 f0       	breq	.+10     	; 0x1994 <strtol+0x1a0>
    198a:	21 97       	sbiw	r28, 0x01	; 1
    198c:	f6 01       	movw	r30, r12
    198e:	d1 83       	std	Z+1, r29	; 0x01
    1990:	c0 83       	st	Z, r28
    1992:	07 c0       	rjmp	.+14     	; 0x19a2 <strtol+0x1ae>
    1994:	01 ff       	sbrs	r16, 1
    1996:	19 c0       	rjmp	.+50     	; 0x19ca <strtol+0x1d6>
    1998:	22 97       	sbiw	r28, 0x02	; 2
    199a:	f6 01       	movw	r30, r12
    199c:	d1 83       	std	Z+1, r29	; 0x01
    199e:	c0 83       	st	Z, r28
    19a0:	14 c0       	rjmp	.+40     	; 0x19ca <strtol+0x1d6>
    19a2:	47 ff       	sbrs	r20, 7
    19a4:	12 c0       	rjmp	.+36     	; 0x19ca <strtol+0x1d6>
    19a6:	22 23       	and	r18, r18
    19a8:	29 f0       	breq	.+10     	; 0x19b4 <strtol+0x1c0>
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e8       	ldi	r25, 0x80	; 128
    19b2:	04 c0       	rjmp	.+8      	; 0x19bc <strtol+0x1c8>
    19b4:	6f ef       	ldi	r22, 0xFF	; 255
    19b6:	7f ef       	ldi	r23, 0xFF	; 255
    19b8:	8f ef       	ldi	r24, 0xFF	; 255
    19ba:	9f e7       	ldi	r25, 0x7F	; 127
    19bc:	22 e2       	ldi	r18, 0x22	; 34
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	30 93 68 02 	sts	0x0268, r19	; 0x800268 <errno+0x1>
    19c4:	20 93 67 02 	sts	0x0267, r18	; 0x800267 <errno>
    19c8:	09 c0       	rjmp	.+18     	; 0x19dc <strtol+0x1e8>
    19ca:	22 23       	and	r18, r18
    19cc:	81 f0       	breq	.+32     	; 0x19ee <strtol+0x1fa>
    19ce:	90 95       	com	r25
    19d0:	80 95       	com	r24
    19d2:	70 95       	com	r23
    19d4:	61 95       	neg	r22
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	8f 4f       	sbci	r24, 0xFF	; 255
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	46 2f       	mov	r20, r22
    19de:	37 2f       	mov	r19, r23
    19e0:	28 2f       	mov	r18, r24
    19e2:	12 c0       	rjmp	.+36     	; 0x1a08 <strtol+0x214>
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0d c0       	rjmp	.+26     	; 0x1a08 <strtol+0x214>
    19ee:	97 ff       	sbrs	r25, 7
    19f0:	f5 cf       	rjmp	.-22     	; 0x19dc <strtol+0x1e8>
    19f2:	82 e2       	ldi	r24, 0x22	; 34
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <errno+0x1>
    19fa:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <errno>
    19fe:	6f ef       	ldi	r22, 0xFF	; 255
    1a00:	7f ef       	ldi	r23, 0xFF	; 255
    1a02:	8f ef       	ldi	r24, 0xFF	; 255
    1a04:	9f e7       	ldi	r25, 0x7F	; 127
    1a06:	ea cf       	rjmp	.-44     	; 0x19dc <strtol+0x1e8>
    1a08:	64 2f       	mov	r22, r20
    1a0a:	73 2f       	mov	r23, r19
    1a0c:	82 2f       	mov	r24, r18
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	e1 e1       	ldi	r30, 0x11	; 17
    1a14:	91 c0       	rjmp	.+290    	; 0x1b38 <__epilogue_restores__+0x2>

00001a16 <isspace>:
    1a16:	91 11       	cpse	r25, r1
    1a18:	60 c0       	rjmp	.+192    	; 0x1ada <__ctype_isfalse>
    1a1a:	80 32       	cpi	r24, 0x20	; 32
    1a1c:	19 f0       	breq	.+6      	; 0x1a24 <isspace+0xe>
    1a1e:	89 50       	subi	r24, 0x09	; 9
    1a20:	85 50       	subi	r24, 0x05	; 5
    1a22:	d0 f7       	brcc	.-12     	; 0x1a18 <isspace+0x2>
    1a24:	08 95       	ret

00001a26 <strtok>:
    1a26:	4c e8       	ldi	r20, 0x8C	; 140
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	30 d0       	rcall	.+96     	; 0x1a8c <strtok_r>
    1a2c:	08 95       	ret

00001a2e <memcpy>:
    1a2e:	fb 01       	movw	r30, r22
    1a30:	dc 01       	movw	r26, r24
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <memcpy+0xa>
    1a34:	01 90       	ld	r0, Z+
    1a36:	0d 92       	st	X+, r0
    1a38:	41 50       	subi	r20, 0x01	; 1
    1a3a:	50 40       	sbci	r21, 0x00	; 0
    1a3c:	d8 f7       	brcc	.-10     	; 0x1a34 <memcpy+0x6>
    1a3e:	08 95       	ret

00001a40 <memset>:
    1a40:	dc 01       	movw	r26, r24
    1a42:	01 c0       	rjmp	.+2      	; 0x1a46 <memset+0x6>
    1a44:	6d 93       	st	X+, r22
    1a46:	41 50       	subi	r20, 0x01	; 1
    1a48:	50 40       	sbci	r21, 0x00	; 0
    1a4a:	e0 f7       	brcc	.-8      	; 0x1a44 <memset+0x4>
    1a4c:	08 95       	ret

00001a4e <strcat>:
    1a4e:	fb 01       	movw	r30, r22
    1a50:	dc 01       	movw	r26, r24
    1a52:	0d 90       	ld	r0, X+
    1a54:	00 20       	and	r0, r0
    1a56:	e9 f7       	brne	.-6      	; 0x1a52 <strcat+0x4>
    1a58:	11 97       	sbiw	r26, 0x01	; 1
    1a5a:	01 90       	ld	r0, Z+
    1a5c:	0d 92       	st	X+, r0
    1a5e:	00 20       	and	r0, r0
    1a60:	e1 f7       	brne	.-8      	; 0x1a5a <strcat+0xc>
    1a62:	08 95       	ret

00001a64 <strchr>:
    1a64:	fc 01       	movw	r30, r24
    1a66:	81 91       	ld	r24, Z+
    1a68:	86 17       	cp	r24, r22
    1a6a:	21 f0       	breq	.+8      	; 0x1a74 <strchr+0x10>
    1a6c:	88 23       	and	r24, r24
    1a6e:	d9 f7       	brne	.-10     	; 0x1a66 <strchr+0x2>
    1a70:	99 27       	eor	r25, r25
    1a72:	08 95       	ret
    1a74:	31 97       	sbiw	r30, 0x01	; 1
    1a76:	cf 01       	movw	r24, r30
    1a78:	08 95       	ret

00001a7a <strcmp>:
    1a7a:	fb 01       	movw	r30, r22
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	8d 91       	ld	r24, X+
    1a80:	01 90       	ld	r0, Z+
    1a82:	80 19       	sub	r24, r0
    1a84:	01 10       	cpse	r0, r1
    1a86:	d9 f3       	breq	.-10     	; 0x1a7e <strcmp+0x4>
    1a88:	99 0b       	sbc	r25, r25
    1a8a:	08 95       	ret

00001a8c <strtok_r>:
    1a8c:	fa 01       	movw	r30, r20
    1a8e:	a1 91       	ld	r26, Z+
    1a90:	b0 81       	ld	r27, Z
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	19 f4       	brne	.+6      	; 0x1a9c <strtok_r+0x10>
    1a96:	10 97       	sbiw	r26, 0x00	; 0
    1a98:	e1 f0       	breq	.+56     	; 0x1ad2 <strtok_r+0x46>
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cd 01       	movw	r24, r26
    1aa0:	0d 90       	ld	r0, X+
    1aa2:	00 20       	and	r0, r0
    1aa4:	11 f4       	brne	.+4      	; 0x1aaa <strtok_r+0x1e>
    1aa6:	c0 01       	movw	r24, r0
    1aa8:	13 c0       	rjmp	.+38     	; 0x1ad0 <strtok_r+0x44>
    1aaa:	fb 01       	movw	r30, r22
    1aac:	21 91       	ld	r18, Z+
    1aae:	22 23       	and	r18, r18
    1ab0:	19 f0       	breq	.+6      	; 0x1ab8 <strtok_r+0x2c>
    1ab2:	20 15       	cp	r18, r0
    1ab4:	d9 f7       	brne	.-10     	; 0x1aac <strtok_r+0x20>
    1ab6:	f3 cf       	rjmp	.-26     	; 0x1a9e <strtok_r+0x12>
    1ab8:	fb 01       	movw	r30, r22
    1aba:	21 91       	ld	r18, Z+
    1abc:	20 15       	cp	r18, r0
    1abe:	19 f4       	brne	.+6      	; 0x1ac6 <strtok_r+0x3a>
    1ac0:	1e 92       	st	-X, r1
    1ac2:	11 96       	adiw	r26, 0x01	; 1
    1ac4:	06 c0       	rjmp	.+12     	; 0x1ad2 <strtok_r+0x46>
    1ac6:	22 23       	and	r18, r18
    1ac8:	c1 f7       	brne	.-16     	; 0x1aba <strtok_r+0x2e>
    1aca:	0d 90       	ld	r0, X+
    1acc:	00 20       	and	r0, r0
    1ace:	a1 f7       	brne	.-24     	; 0x1ab8 <strtok_r+0x2c>
    1ad0:	d0 01       	movw	r26, r0
    1ad2:	fa 01       	movw	r30, r20
    1ad4:	a1 93       	st	Z+, r26
    1ad6:	b0 83       	st	Z, r27
    1ad8:	08 95       	ret

00001ada <__ctype_isfalse>:
    1ada:	99 27       	eor	r25, r25
    1adc:	88 27       	eor	r24, r24

00001ade <__ctype_istrue>:
    1ade:	08 95       	ret

00001ae0 <__mulsi3>:
    1ae0:	db 01       	movw	r26, r22
    1ae2:	8f 93       	push	r24
    1ae4:	9f 93       	push	r25
    1ae6:	2d dc       	rcall	.-1958   	; 0x1342 <__muluhisi3>
    1ae8:	bf 91       	pop	r27
    1aea:	af 91       	pop	r26
    1aec:	a2 9f       	mul	r26, r18
    1aee:	80 0d       	add	r24, r0
    1af0:	91 1d       	adc	r25, r1
    1af2:	a3 9f       	mul	r26, r19
    1af4:	90 0d       	add	r25, r0
    1af6:	b2 9f       	mul	r27, r18
    1af8:	90 0d       	add	r25, r0
    1afa:	11 24       	eor	r1, r1
    1afc:	08 95       	ret

00001afe <__prologue_saves__>:
    1afe:	2f 92       	push	r2
    1b00:	3f 92       	push	r3
    1b02:	4f 92       	push	r4
    1b04:	5f 92       	push	r5
    1b06:	6f 92       	push	r6
    1b08:	7f 92       	push	r7
    1b0a:	8f 92       	push	r8
    1b0c:	9f 92       	push	r9
    1b0e:	af 92       	push	r10
    1b10:	bf 92       	push	r11
    1b12:	cf 92       	push	r12
    1b14:	df 92       	push	r13
    1b16:	ef 92       	push	r14
    1b18:	ff 92       	push	r15
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	ca 1b       	sub	r28, r26
    1b28:	db 0b       	sbc	r29, r27
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	09 94       	ijmp

00001b36 <__epilogue_restores__>:
    1b36:	2a 88       	ldd	r2, Y+18	; 0x12
    1b38:	39 88       	ldd	r3, Y+17	; 0x11
    1b3a:	48 88       	ldd	r4, Y+16	; 0x10
    1b3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b40:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b42:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b44:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b46:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b48:	b9 84       	ldd	r11, Y+9	; 0x09
    1b4a:	c8 84       	ldd	r12, Y+8	; 0x08
    1b4c:	df 80       	ldd	r13, Y+7	; 0x07
    1b4e:	ee 80       	ldd	r14, Y+6	; 0x06
    1b50:	fd 80       	ldd	r15, Y+5	; 0x05
    1b52:	0c 81       	ldd	r16, Y+4	; 0x04
    1b54:	1b 81       	ldd	r17, Y+3	; 0x03
    1b56:	aa 81       	ldd	r26, Y+2	; 0x02
    1b58:	b9 81       	ldd	r27, Y+1	; 0x01
    1b5a:	ce 0f       	add	r28, r30
    1b5c:	d1 1d       	adc	r29, r1
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	ed 01       	movw	r28, r26
    1b6a:	08 95       	ret

00001b6c <_exit>:
    1b6c:	f8 94       	cli

00001b6e <__stop_program>:
    1b6e:	ff cf       	rjmp	.-2      	; 0x1b6e <__stop_program>
