
EE311.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00001e14  00001ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002d4  008000a2  008000a2  00001eea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001eea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00001f88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001150  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000809  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e17  00000000  00000000  000039d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  000047e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ef  00000000  00000000  000049d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000395  00000000  00000000  00004fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00005358  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	a6 c1       	rjmp	.+844    	; 0x354 <__vector_3>
       8:	d8 c1       	rjmp	.+944    	; 0x3ba <__vector_4>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	80 c0       	rjmp	.+256    	; 0x10e <__vector_6>
       e:	d8 c0       	rjmp	.+432    	; 0x1c0 <__vector_7>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	58 c0       	rjmp	.+176    	; 0xc4 <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	4a c0       	rjmp	.+148    	; 0xac <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e4 e1       	ldi	r30, 0x14	; 20
      3a:	fe e1       	ldi	r31, 0x1E	; 30
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a2 3a       	cpi	r26, 0xA2	; 162
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	23 e0       	ldi	r18, 0x03	; 3
      4a:	a2 ea       	ldi	r26, 0xA2	; 162
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a6 37       	cpi	r26, 0x76	; 118
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	eb d1       	rcall	.+982    	; 0x430 <main>
      5a:	da ce       	rjmp	.-588    	; 0xfffffe10 <__eeprom_end+0xff7efe10>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <adc_read>:
#include "adc.h"

#define ADCSTATUS (ADCSRA & (1<<ADIF))

uint16_t adc_read(uint8_t channel){
	ADMUX &= 0xF0; //clear previous setting
      5e:	97 b1       	in	r25, 0x07	; 7
      60:	90 7f       	andi	r25, 0xF0	; 240
      62:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel; //add channel setting
      64:	97 b1       	in	r25, 0x07	; 7
      66:	89 2b       	or	r24, r25
      68:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA |= (1<<ADSC); //start conversion
      6a:	36 9a       	sbi	0x06, 6	; 6
	
	while (ADCSTATUS == 0){ //block until conversion finishes
      6c:	34 9b       	sbis	0x06, 4	; 6
      6e:	fe cf       	rjmp	.-4      	; 0x6c <adc_read+0xe>
	}
	return ADC; //return value in mV  
      70:	84 b1       	in	r24, 0x04	; 4
      72:	95 b1       	in	r25, 0x05	; 5
}
      74:	08 95       	ret

00000076 <adc_convert>:

uint32_t adc_convert(uint16_t rawvalue){
	return (uint32_t)((uint32_t)rawvalue*voltagereference/1024);
      76:	a0 91 c0 00 	lds	r26, 0x00C0	; 0x8000c0 <voltagereference>
      7a:	b0 91 c1 00 	lds	r27, 0x00C1	; 0x8000c1 <voltagereference+0x1>
      7e:	9c 01       	movw	r18, r24
      80:	01 db       	rcall	.-2558   	; 0xfffff684 <__eeprom_end+0xff7ef684>
      82:	2a e0       	ldi	r18, 0x0A	; 10
      84:	96 95       	lsr	r25
      86:	87 95       	ror	r24
      88:	77 95       	ror	r23
      8a:	67 95       	ror	r22
      8c:	2a 95       	dec	r18
      8e:	d1 f7       	brne	.-12     	; 0x84 <adc_convert+0xe>
}
      90:	08 95       	ret

00000092 <adc_init>:
	uint16_t bgrawvalue = ADC; //store ADC value for bandgap (1.30V)
	voltagereference = (uint32_t)((uint32_t)1300*1024/bgrawvalue); //calculate vref using bandgap
}

void adc_init(){
	ADMUX &= ~(1<<REFS1);
      92:	3f 98       	cbi	0x07, 7	; 7
	ADMUX |= (1<<REFS0); //use AVcc reference
      94:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN); //enable ADC
      96:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= ((1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2)); //use clock divider of /128 for 125khz ADC frequency
      98:	86 b1       	in	r24, 0x06	; 6
      9a:	87 60       	ori	r24, 0x07	; 7
      9c:	86 b9       	out	0x06, r24	; 6
	voltagereference = 5000;
      9e:	88 e8       	ldi	r24, 0x88	; 136
      a0:	93 e1       	ldi	r25, 0x13	; 19
      a2:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <voltagereference+0x1>
      a6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <voltagereference>
      aa:	08 95       	ret

000000ac <__vector_11>:
 *  Author: sshe325
 */ 

#include "interrupts.h"

ISR(USART_RXC_vect){
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
	//dynamically allocate and reallocate space for string
	char* buffer_ptr = str_buffer;
      b6:	c2 ed       	ldi	r28, 0xD2	; 210
      b8:	d0 e0       	ldi	r29, 0x00	; 0
	while((*buffer_ptr != '\n') || (*buffer_ptr != '\r') || (*buffer_ptr != (str_buffer + 50))){
		//make a null terminated string for strcat()
		uart_char = uart_receive();
      ba:	90 d8       	rcall	.-3808   	; 0xfffff1dc <__eeprom_end+0xff7ef1dc>
      bc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <uart_char>
		*buffer_ptr = uart_char;
      c0:	89 93       	st	Y+, r24
      c2:	fb cf       	rjmp	.-10     	; 0xba <__vector_11+0xe>

000000c4 <__vector_9>:
	//set flag to indicate received data
	data_received = 1;
}

//interrupt to increment overflow counter
ISR(TIMER0_OVF_vect){
      c4:	1f 92       	push	r1
      c6:	0f 92       	push	r0
      c8:	0f b6       	in	r0, 0x3f	; 63
      ca:	0f 92       	push	r0
      cc:	11 24       	eor	r1, r1
      ce:	8f 93       	push	r24
      d0:	9f 93       	push	r25
      d2:	af 93       	push	r26
      d4:	bf 93       	push	r27
	++timer0_ovf_count;
      d6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timer0_ovf_count>
      da:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <timer0_ovf_count+0x1>
      de:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <timer0_ovf_count+0x2>
      e2:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <timer0_ovf_count+0x3>
      e6:	01 96       	adiw	r24, 0x01	; 1
      e8:	a1 1d       	adc	r26, r1
      ea:	b1 1d       	adc	r27, r1
      ec:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <timer0_ovf_count>
      f0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <timer0_ovf_count+0x1>
      f4:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <timer0_ovf_count+0x2>
      f8:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <timer0_ovf_count+0x3>
}
      fc:	bf 91       	pop	r27
      fe:	af 91       	pop	r26
     100:	9f 91       	pop	r25
     102:	8f 91       	pop	r24
     104:	0f 90       	pop	r0
     106:	0f be       	out	0x3f, r0	; 63
     108:	0f 90       	pop	r0
     10a:	1f 90       	pop	r1
     10c:	18 95       	reti

0000010e <__vector_6>:

//interrupt to handle T/4 or 3T/4 time crossing
ISR(TIMER1_COMPA_vect){
     10e:	1f 92       	push	r1
     110:	0f 92       	push	r0
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	0f 92       	push	r0
     116:	11 24       	eor	r1, r1
     118:	8f 93       	push	r24
     11a:	9f 93       	push	r25
		//turn off PWM timer
		TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     11c:	85 b5       	in	r24, 0x25	; 37
     11e:	88 7f       	andi	r24, 0xF8	; 248
     120:	85 bd       	out	0x25, r24	; 37
		//PORTD &= ~(1<<PD7);
		//turn on right NMOS
		//PORTB &= ~(1<<PB0);
		
		//indicate that RHS/LHS voltage are both off
		voltage_right_on = 0;
     122:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <voltage_right_on+0x1>
     126:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <voltage_right_on>
		voltage_left_on = 0;
     12a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <voltage_left_on+0x1>
     12e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <voltage_left_on>
		
		//since we have stopped pulsing PWM, stop reading current ADC
		readadci = 0;
     132:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <readadci+0x1>
     136:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <readadci>
		//disable PWM signals
		if (!t2){
     13a:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <t2>
     13e:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <t2+0x1>
			//right to left current
			//turn off PMOSes, turn on left NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
     142:	c2 98       	cbi	0x18, 2	; 24
		voltage_left_on = 0;
		
		//since we have stopped pulsing PWM, stop reading current ADC
		readadci = 0;
		//disable PWM signals
		if (!t2){
     144:	89 2b       	or	r24, r25
     146:	b9 f4       	brne	.+46     	; 0x176 <__vector_6+0x68>
			//right to left current
			//turn off PMOSes, turn on left NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
			//turn on left NMOS
			PORTB &= ~(1<<PB1);
     148:	c1 98       	cbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     14a:	97 98       	cbi	0x12, 7	; 18
			//turn off right NMOS
			PORTB |= (1<<PB0);
     14c:	c0 9a       	sbi	0x18, 0	; 24
			//indicate that we are ready to start reading motor LHS back emf
			readadc = 1;
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <readadc+0x1>
     156:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <readadc>
			readadcmotorright = 1;
     15a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <readadcmotorright+0x1>
     15e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <readadcmotorright>
			backemffound = 0;
     162:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <backemffound+0x1>
     166:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <backemffound>
			//reset backemf index
			backemfreadingindex = 0;
     16a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <backemfreadingindex+0x1>
     16e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <backemfreadingindex>
			PORTD &= ~(1<<PD5);
     172:	95 98       	cbi	0x12, 5	; 18
     174:	16 c0       	rjmp	.+44     	; 0x1a2 <__vector_6+0x94>
			//left to right current
			//turn off PMOSes, turn on right NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
			//turn off left NMOS
			PORTB |= (1<<PB1);
     176:	c1 9a       	sbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     178:	97 98       	cbi	0x12, 7	; 18
			//turn on right NMOS
			PORTB &= ~(1<<PB0);
     17a:	c0 98       	cbi	0x18, 0	; 24
			//indicate that we are ready to start reading motor RHS back emf
			readadc = 1;
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <readadc+0x1>
     184:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <readadc>
			readadcmotorleft = 1;
     188:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <readadcmotorleft+0x1>
     18c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <readadcmotorleft>
			backemffound = 0;
     190:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <backemffound+0x1>
     194:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <backemffound>
			//reset backemf index
			backemfreadingindex = 0;
     198:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <backemfreadingindex+0x1>
     19c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <backemfreadingindex>
			PORTD |= (1<<PD5);
     1a0:	95 9a       	sbi	0x12, 5	; 18
		}
		//turn on timer 0 with prescaler /256 to measure backemf time
		TCNT0 = 0;
     1a2:	12 be       	out	0x32, r1	; 50
		TCCR0 |= ((1<<CS02));
     1a4:	83 b7       	in	r24, 0x33	; 51
     1a6:	84 60       	ori	r24, 0x04	; 4
     1a8:	83 bf       	out	0x33, r24	; 51
		TCCR0 &= ~((1<<CS01)|(1<<CS00));
     1aa:	83 b7       	in	r24, 0x33	; 51
     1ac:	8c 7f       	andi	r24, 0xFC	; 252
     1ae:	83 bf       	out	0x33, r24	; 51
		//reset PWM timer counter
		TCNT2 = 0;
     1b0:	14 bc       	out	0x24, r1	; 36
}
     1b2:	9f 91       	pop	r25
     1b4:	8f 91       	pop	r24
     1b6:	0f 90       	pop	r0
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	0f 90       	pop	r0
     1bc:	1f 90       	pop	r1
     1be:	18 95       	reti

000001c0 <__vector_7>:

//interrupt to handle T or T/2 time crossing
ISR(TIMER1_COMPB_vect){
     1c0:	1f 92       	push	r1
     1c2:	0f 92       	push	r0
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	0f 92       	push	r0
     1c8:	11 24       	eor	r1, r1
     1ca:	2f 93       	push	r18
     1cc:	3f 93       	push	r19
     1ce:	4f 93       	push	r20
     1d0:	5f 93       	push	r21
     1d2:	6f 93       	push	r22
     1d4:	7f 93       	push	r23
     1d6:	8f 93       	push	r24
     1d8:	9f 93       	push	r25
     1da:	af 93       	push	r26
		TCCR1B |= (1<<CS12);
		TCCR1B &= ~((1<<CS11) | (1<<CS10));
		stop_counter = 0;
	}*/
		//back emf pulse has expired (we are driving the motor now), stop reading the adc
		readadcmotorleft = 0;
     1dc:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <readadcmotorleft+0x1>
     1e0:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <readadcmotorleft>
		readadcmotorright = 0;
     1e4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <readadcmotorright+0x1>
     1e8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <readadcmotorright>
		if (numcycles >= 50){
     1ec:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <numcycles>
     1f0:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <numcycles+0x1>
     1f4:	c2 97       	sbiw	r24, 0x32	; 50
     1f6:	70 f1       	brcs	.+92     	; 0x254 <__vector_7+0x94>
			if (backemffound == 0){
     1f8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <backemffound>
     1fc:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <backemffound+0x1>
     200:	89 2b       	or	r24, r25
     202:	41 f5       	brne	.+80     	; 0x254 <__vector_7+0x94>
				backemftime += 5; //add 0.1ms to back emf time (since we didn't find it previously, we must have driven the motor too fast)
     204:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <backemftime>
     208:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <backemftime+0x1>
     20c:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <backemftime+0x2>
     210:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <backemftime+0x3>
     214:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <backemftime+0x4>
     218:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <backemftime+0x5>
     21c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <backemftime+0x6>
     220:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <backemftime+0x7>
     224:	a5 e0       	ldi	r26, 0x05	; 5
     226:	08 db       	rcall	.-2544   	; 0xfffff838 <__eeprom_end+0xff7ef838>
     228:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <backemftime>
     22c:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <backemftime+0x1>
     230:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <backemftime+0x2>
     234:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <backemftime+0x3>
     238:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <backemftime+0x4>
     23c:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <backemftime+0x5>
     240:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <backemftime+0x6>
     244:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <backemftime+0x7>
				//backemffreq = 1000000000/backemftime;
				backemffound = 1; //indicate that a back emf value has been "found"
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <backemffound+0x1>
     250:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <backemffound>
			}
		}
		
		if (t2){
     254:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <t2>
     258:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <t2+0x1>
     25c:	89 2b       	or	r24, r25
     25e:	29 f0       	breq	.+10     	; 0x26a <__vector_7+0xaa>
			//T time crossing has been handled, T/2 is next
			t2 = 0;
     260:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <t2+0x1>
     264:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <t2>
     268:	06 c0       	rjmp	.+12     	; 0x276 <__vector_7+0xb6>
			TCCR2 |= ((1<<CS22) | (1<<CS21));
			TCCR2 &= ~((1<<CS20));
			
		}
		else{
			t2 = 1;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <t2+0x1>
     272:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <t2>
			//turn off timer1
			TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     276:	8e b5       	in	r24, 0x2e	; 46
     278:	88 7f       	andi	r24, 0xF8	; 248
     27a:	8e bd       	out	0x2e, r24	; 46
			//turn off PWM
			TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     27c:	85 b5       	in	r24, 0x25	; 37
     27e:	88 7f       	andi	r24, 0xF8	; 248
     280:	85 bd       	out	0x25, r24	; 37
			//reset timer1 counter
			TCNT1 = 0;
     282:	1d bc       	out	0x2d, r1	; 45
     284:	1c bc       	out	0x2c, r1	; 44
			//reset PWM timer counter
			TCNT2 = 0;
     286:	14 bc       	out	0x24, r1	; 36
			//turn on timer 1 again (prescaler /256)
			TCCR1B |= (1<<CS12);
     288:	8e b5       	in	r24, 0x2e	; 46
     28a:	84 60       	ori	r24, 0x04	; 4
     28c:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &= ~((1<<CS11) | (1<<CS10));
     28e:	8e b5       	in	r24, 0x2e	; 46
     290:	8c 7f       	andi	r24, 0xFC	; 252
     292:	8e bd       	out	0x2e, r24	; 46
			//turn on PWM timer counter (prescaler /64)
			//turn on PWM timer counter (prescaler /256)
			TCCR2 |= ((1<<CS22) | (1<<CS21));
     294:	85 b5       	in	r24, 0x25	; 37
     296:	86 60       	ori	r24, 0x06	; 6
     298:	85 bd       	out	0x25, r24	; 37
			TCCR2 &= ~((1<<CS20));
     29a:	85 b5       	in	r24, 0x25	; 37
     29c:	8e 7f       	andi	r24, 0xFE	; 254
     29e:	85 bd       	out	0x25, r24	; 37
			
		}
		
		//turn on PWM signals
		if (t2){
     2a0:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <t2>
     2a4:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <t2+0x1>
     2a8:	89 2b       	or	r24, r25
     2aa:	59 f0       	breq	.+22     	; 0x2c2 <__vector_7+0x102>
			//right to left current
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
     2ac:	c2 98       	cbi	0x18, 2	; 24
			//turn on left NMOS
			PORTB &= ~(1<<PB1);
     2ae:	c1 98       	cbi	0x18, 1	; 24
			//turn on right PMOS
			PORTD |= (1<<PD7);
     2b0:	97 9a       	sbi	0x12, 7	; 18
			//turn off right NMOS
			PORTB |= (1<<PB0);
     2b2:	c0 9a       	sbi	0x18, 0	; 24
			//indicate that RHS voltage is on
			voltage_right_on = 1;
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <voltage_right_on+0x1>
     2bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <voltage_right_on>
     2c0:	0a c0       	rjmp	.+20     	; 0x2d6 <__vector_7+0x116>
		}
		else{
			//left to right current
			//turn on left PMOS
			PORTB |= (1<<PB2);
     2c2:	c2 9a       	sbi	0x18, 2	; 24
			//turn off left NMOS
			PORTB |= (1<<PB1);
     2c4:	c1 9a       	sbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     2c6:	97 98       	cbi	0x12, 7	; 18
			//turn on right NMOS
			PORTB &= ~(1<<PB0);
     2c8:	c0 98       	cbi	0x18, 0	; 24
			//indicate that LHS voltage is on
			voltage_left_on = 1;
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <voltage_left_on+0x1>
     2d2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <voltage_left_on>
		}
		//indicate that we are ready to read adc from motor RHS to measure voltage and current
		readadc = 1;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <readadc+0x1>
     2de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <readadc>
		readadcv = 1;
     2e2:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <readadcv+0x1>
     2e6:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <readadcv>
		readadci = 1;
     2ea:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <readadci+0x1>
     2ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <readadci>
		//reset ADC indices
		current_i = 0;
     2f2:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <current_i+0x1>
     2f6:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <current_i>
		currentreadingindex = 0;
     2fa:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <currentreadingindex+0x1>
     2fe:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <currentreadingindex>
		//++stop_counter;
		//stop back emf timer since the time to measure it has expired
		TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     302:	83 b7       	in	r24, 0x33	; 51
     304:	88 7f       	andi	r24, 0xF8	; 248
     306:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;
     308:	12 be       	out	0x32, r1	; 50
		timer0_ovf_count = 0;
     30a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timer0_ovf_count>
     30e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timer0_ovf_count+0x1>
     312:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <timer0_ovf_count+0x2>
     316:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <timer0_ovf_count+0x3>
		if (numcycles != 50) ++numcycles;
     31a:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <numcycles>
     31e:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <numcycles+0x1>
     322:	c2 97       	sbiw	r24, 0x32	; 50
     324:	49 f0       	breq	.+18     	; 0x338 <__vector_7+0x178>
     326:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <numcycles>
     32a:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <numcycles+0x1>
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <numcycles+0x1>
     334:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <numcycles>
}
     338:	af 91       	pop	r26
     33a:	9f 91       	pop	r25
     33c:	8f 91       	pop	r24
     33e:	7f 91       	pop	r23
     340:	6f 91       	pop	r22
     342:	5f 91       	pop	r21
     344:	4f 91       	pop	r20
     346:	3f 91       	pop	r19
     348:	2f 91       	pop	r18
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <__vector_3>:

//PWM duty cycle expired, shut off PWM signals
ISR(TIMER2_COMP_vect){
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	8f 93       	push	r24
     360:	9f 93       	push	r25
		PORTD &= ~(1<<PD7);
		//turn off right NMOS
		PORTB |= (1<<PB0);
	}*/
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     362:	85 b5       	in	r24, 0x25	; 37
     364:	88 7f       	andi	r24, 0xF8	; 248
     366:	85 bd       	out	0x25, r24	; 37
	
	if (t2){
     368:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <t2>
     36c:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <t2+0x1>
		//right to left current
		//turn off PMOSes, turn on left NMOS so motor brakes
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     370:	c2 98       	cbi	0x18, 2	; 24
		PORTB |= (1<<PB0);
	}*/
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
	
	if (t2){
     372:	89 2b       	or	r24, r25
     374:	21 f0       	breq	.+8      	; 0x37e <__vector_3+0x2a>
		//right to left current
		//turn off PMOSes, turn on left NMOS so motor brakes
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     376:	c1 98       	cbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     378:	97 98       	cbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     37a:	c0 9a       	sbi	0x18, 0	; 24
     37c:	03 c0       	rjmp	.+6      	; 0x384 <__vector_3+0x30>
		//left to right current
		//turn off PMOSes, turn on right NMOS so motor brakes?!
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
		//turn off left NMOS
		PORTB |= (1<<PB1);
     37e:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     380:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     382:	c0 98       	cbi	0x18, 0	; 24
	}
	readadc = 1;
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <readadc+0x1>
     38c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <readadc>
	//indicate that voltage is off
	voltage_right_on = 0;
     390:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <voltage_right_on+0x1>
     394:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <voltage_right_on>
	voltage_left_on = 0;
     398:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <voltage_left_on+0x1>
     39c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <voltage_left_on>
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     3a0:	85 b5       	in	r24, 0x25	; 37
     3a2:	86 60       	ori	r24, 0x06	; 6
     3a4:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     3a6:	85 b5       	in	r24, 0x25	; 37
     3a8:	8e 7f       	andi	r24, 0xFE	; 254
     3aa:	85 bd       	out	0x25, r24	; 37
}
     3ac:	9f 91       	pop	r25
     3ae:	8f 91       	pop	r24
     3b0:	0f 90       	pop	r0
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	0f 90       	pop	r0
     3b6:	1f 90       	pop	r1
     3b8:	18 95       	reti

000003ba <__vector_4>:

//PWM restarted, change switches according to current current direction
ISR(TIMER2_OVF_vect){
     3ba:	1f 92       	push	r1
     3bc:	0f 92       	push	r0
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	0f 92       	push	r0
     3c2:	11 24       	eor	r1, r1
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     3c8:	85 b5       	in	r24, 0x25	; 37
     3ca:	88 7f       	andi	r24, 0xF8	; 248
     3cc:	85 bd       	out	0x25, r24	; 37
	TCCR2 = 0;
     3ce:	15 bc       	out	0x25, r1	; 37
	if (t2){
     3d0:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <t2>
     3d4:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <t2+0x1>
     3d8:	89 2b       	or	r24, r25
     3da:	79 f0       	breq	.+30     	; 0x3fa <__vector_4+0x40>
		//right to left current
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     3dc:	c2 98       	cbi	0x18, 2	; 24
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     3de:	c1 98       	cbi	0x18, 1	; 24
		//turn on right PMOS
		PORTD |= (1<<PD7);
     3e0:	97 9a       	sbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     3e2:	c0 9a       	sbi	0x18, 0	; 24
		//indicate that RHS voltage is on
		readadc = 1;
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <readadc+0x1>
     3ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <readadc>
		voltage_right_on = 1;
     3f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <voltage_right_on+0x1>
     3f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <voltage_right_on>
     3f8:	0e c0       	rjmp	.+28     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	}
	else{
		//left to right current
		//turn on left PMOS
		PORTB |= (1<<PB2);
     3fa:	c2 9a       	sbi	0x18, 2	; 24
		//turn off left NMOS
		PORTB |= (1<<PB1);
     3fc:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     3fe:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     400:	c0 98       	cbi	0x18, 0	; 24
		//indicate that LHS voltage is on
		readadc = 1;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <readadc+0x1>
     40a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <readadc>
		voltage_left_on = 1;
     40e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <voltage_left_on+0x1>
     412:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <voltage_left_on>
	}
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     416:	85 b5       	in	r24, 0x25	; 37
     418:	86 60       	ori	r24, 0x06	; 6
     41a:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     41c:	85 b5       	in	r24, 0x25	; 37
     41e:	8e 7f       	andi	r24, 0xFE	; 254
     420:	85 bd       	out	0x25, r24	; 37
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <main>:
uint32_t backemfarray[NUMSAMPLESI];
uint64_t currentvalue = 0;
uint64_t powervalue = 0;

int main(void)
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	a4 97       	sbiw	r28, 0x24	; 36
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
	//sprintf(transmit_buffer, "{\n\"3\":\n{\n\"mfc\":{\"req\":\"\",\"cur\":\"\"\},\n\"ver\": \"001.002.003\",\n\"param\":{\"pwr\":\".W\",\"freq\":\".Hz\",\"curr\":\"mA\",\"volt\": \".V\"},\n\"clr\":\"ew\",\n\"ew\":[\"cmprStalled\",\"pistonCollision\"]\n}\n}");
	//sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3s\",\n%11s\"cur\": \"%3s\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%s.%sW\",\n%11s\"freq\": \"%s.%sHz\",\n%11s\"curr\": \"%smA\",\n%11s\"volt\": \"%s.%sV\",\n%7s}\n%3s}\n}", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "");
	//eeprom_write_block(transmit_buffer,0,strlen(transmit_buffer));	
	//eeprom_write_byte(0,'0');
	
	t2 = 0; //flag for if T/2 time crossing is next to be handled
     444:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <t2+0x1>
     448:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <t2>
	stop_counter = 0; //counter to stop PWM every STOPCYCLE/2 number of cycles
     44c:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <stop_counter+0x1>
     450:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <stop_counter>
	data_received = 0; //set data received flag to 0 initially
     454:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <data_received+0x1>
     458:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <data_received>
	timer0_ovf_count = 0;//set timer0 overflow count to 0 initially
     45c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timer0_ovf_count>
     460:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timer0_ovf_count+0x1>
     464:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <timer0_ovf_count+0x2>
     468:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <timer0_ovf_count+0x3>
	current_i = 0; //initialise current reading index
     46c:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <current_i+0x1>
     470:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <current_i>
	backemfreadingindex = 0; //initialise backemf reading index
     474:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <backemfreadingindex+0x1>
     478:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <backemfreadingindex>
	readadc = 0;
     47c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <readadc+0x1>
     480:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <readadc>
	readadcv = 0;
     484:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <readadcv+0x1>
     488:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <readadcv>
	readadci = 0;
     48c:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <readadci+0x1>
     490:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <readadci>
	numcycles = 0;
     494:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <numcycles+0x1>
     498:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <numcycles>
	voltagereference = 5000;
     49c:	88 e8       	ldi	r24, 0x88	; 136
     49e:	93 e1       	ldi	r25, 0x13	; 19
     4a0:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <voltagereference+0x1>
     4a4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <voltagereference>
	//set PWM ports as output
	DDRB |= ((1<<PB2)|(1<<PB1)|(1<<PB0));
     4a8:	87 b3       	in	r24, 0x17	; 23
     4aa:	87 60       	ori	r24, 0x07	; 7
     4ac:	87 bb       	out	0x17, r24	; 23
	DDRD |= ((1<<PD7)|(1<<PD5));
     4ae:	81 b3       	in	r24, 0x11	; 17
     4b0:	80 6a       	ori	r24, 0xA0	; 160
     4b2:	81 bb       	out	0x11, r24	; 17
	
	//set normal timer mode
	TCCR2 &= ~(1<<WGM20);
     4b4:	85 b5       	in	r24, 0x25	; 37
     4b6:	8f 7b       	andi	r24, 0xBF	; 191
     4b8:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(1<<WGM21);
     4ba:	85 b5       	in	r24, 0x25	; 37
     4bc:	87 7f       	andi	r24, 0xF7	; 247
     4be:	85 bd       	out	0x25, r24	; 37
	
	//disconnect OC2 port
	TCCR2 &= ~((1<<COM21) | (1<<COM20));
     4c0:	85 b5       	in	r24, 0x25	; 37
     4c2:	8f 7c       	andi	r24, 0xCF	; 207
     4c4:	85 bd       	out	0x25, r24	; 37
	
	//set output compare value for timer 2 between 0-255 (OCR2/255 % duty cycle)
	duty_request = 128;
     4c6:	80 e8       	ldi	r24, 0x80	; 128
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <duty_request+0x1>
     4ce:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <duty_request>
	OCR2 = duty_request;
     4d2:	80 e8       	ldi	r24, 0x80	; 128
     4d4:	83 bd       	out	0x23, r24	; 35
	
	//set prescaler of 64 (gives effective PWM frequency of 980Hz)
	//TCCR2 |= (1<<CS22);
	//TCCR2 &= ~((1<<CS21) | (1<<CS20));
	//set prescaler of 256 (gives effective PWM frequency of 245Hz)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     4d6:	85 b5       	in	r24, 0x25	; 37
     4d8:	86 60       	ori	r24, 0x06	; 6
     4da:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     4dc:	85 b5       	in	r24, 0x25	; 37
     4de:	8e 7f       	andi	r24, 0xFE	; 254
     4e0:	85 bd       	out	0x25, r24	; 37
	
	//turn off PMOSes, turn on NMOSes so motor brakes?!
	//turn off left PMOS
	PORTB &= ~(1<<PB2);
     4e2:	c2 98       	cbi	0x18, 2	; 24
	//turn on left NMOS
	PORTB |= (1<<PB1);
     4e4:	c1 9a       	sbi	0x18, 1	; 24
	//turn off right PMOS
	PORTD &= ~(1<<PD7);
     4e6:	97 98       	cbi	0x12, 7	; 18
	//turn on right NMOS
	PORTB |= (1<<PB0);
     4e8:	c0 9a       	sbi	0x18, 0	; 24
	
	//set timer 1 to normal mode
	TCCR1B &= ~((1<<WGM13) | (1<<WGM12));
     4ea:	8e b5       	in	r24, 0x2e	; 46
     4ec:	87 7e       	andi	r24, 0xE7	; 231
     4ee:	8e bd       	out	0x2e, r24	; 46
	TCCR1A &= ~((1<<WGM11) | (1<<WGM10));
     4f0:	8f b5       	in	r24, 0x2f	; 47
     4f2:	8c 7f       	andi	r24, 0xFC	; 252
     4f4:	8f bd       	out	0x2f, r24	; 47
	
	//set prescaler to /256
	TCCR1B |= (1<<CS12);
     4f6:	8e b5       	in	r24, 0x2e	; 46
     4f8:	84 60       	ori	r24, 0x04	; 4
     4fa:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1<<CS11) | (1<<CS10));
     4fc:	8e b5       	in	r24, 0x2e	; 46
     4fe:	8c 7f       	andi	r24, 0xFC	; 252
     500:	8e bd       	out	0x2e, r24	; 46
	
	//set timer 1 overflow A and B compare values
	OCR1A = 1250; //for T/4
     502:	82 ee       	ldi	r24, 0xE2	; 226
     504:	94 e0       	ldi	r25, 0x04	; 4
     506:	9b bd       	out	0x2b, r25	; 43
     508:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 2500; //for 12.5Hz resonant frequency (for T/2)
     50a:	84 ec       	ldi	r24, 0xC4	; 196
     50c:	99 e0       	ldi	r25, 0x09	; 9
     50e:	99 bd       	out	0x29, r25	; 41
     510:	88 bd       	out	0x28, r24	; 40
	//enable timer 2 compare match interrupt and overflow interrupt
	TIMSK |= ((1<<OCIE2) | (1<<TOIE2));
     512:	89 b7       	in	r24, 0x39	; 57
     514:	80 6c       	ori	r24, 0xC0	; 192
     516:	89 bf       	out	0x39, r24	; 57
	//enable timer 1 compare match A and B interrupts
	TIMSK |= ((1<<OCIE1A) | (1<<OCIE1B));
     518:	89 b7       	in	r24, 0x39	; 57
     51a:	88 61       	ori	r24, 0x18	; 24
     51c:	89 bf       	out	0x39, r24	; 57
	//enable timer 0 overflow interrupt
	TIMSK |= (1<<TOIE0);
     51e:	89 b7       	in	r24, 0x39	; 57
     520:	81 60       	ori	r24, 0x01	; 1
     522:	89 bf       	out	0x39, r24	; 57
	//mark T PWM pulse to be handled next
	t2 = 0;
     524:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <t2+0x1>
     528:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <t2>
	
	//enable and initialise UART
	uart_init();
     52c:	39 d6       	rcall	.+3186   	; 0x11a0 <uart_init>
	//enable and initialise ADC
	adc_init();
     52e:	b1 dd       	rcall	.-1182   	; 0x92 <adc_init>
	//enable global interrupts
	sei();
     530:	78 94       	sei
			//sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3d\",\n%11s\"cur\": \"%3d\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%d.%dW\",\n%11s\"freq\": \"%d.%dHz\",\n%11s\"curr\": \"%dmA\",\n%11s\"volt\": \"%d.%dV\",\n%7s}\n%3s}\n}", "", "", "", "", "", duty_request, "", OCR2, "", "", "", "", "", powerleft, powerright, "", freqleft, freqright, "", current, "", voltleft, voltright, "", "");
			for (int i = 0; i < 260; ++i){
				if ((i >= 57) && (i <= 59)){
					//req flowrate value
					uart_transmit((duty_request/100) + 48);
					uart_transmit(((duty_request/10) % 10) + 48);
     532:	9a e0       	ldi	r25, 0x0A	; 10
     534:	29 2e       	mov	r2, r25
     536:	31 2c       	mov	r3, r1
					uart_transmit((duty_request % 10) + 48);
					i += 3;//skip 3 places
				}
				if ((i >= 82) && (i <= 84)){
					//current flowrate value
					uart_transmit((OCR2/100) + 48);
     538:	14 e6       	ldi	r17, 0x64	; 100
     53a:	61 2e       	mov	r6, r17
					uart_transmit(((OCR2/10) % 10) + 48);
     53c:	0a e0       	ldi	r16, 0x0A	; 10
     53e:	70 2e       	mov	r7, r16
						TCCR0 &= ~((1<<CS01)|(1<<CS00));
						//read back emf voltage
						reading = adc_convert((adc_read(RHSVOLTAGECHANNEL)));
						if (reading < 3000){
							if (backemfreadingindex >= 3){
								backemfreadingindex = 2;
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	88 2e       	mov	r8, r24
     544:	91 2c       	mov	r9, r1
	sei();
    while (1)
    {
		//gradual duty cycle increase logic to couple with resonant frequency detection module
		//this is because changing the PWM duty cycle also changes the resonant frequency
		if (OCR2 < duty_request)
     546:	23 b5       	in	r18, 0x23	; 35
     548:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <duty_request>
     54c:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <duty_request+0x1>
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	28 17       	cp	r18, r24
     554:	39 07       	cpc	r19, r25
     556:	10 f4       	brcc	.+4      	; 0x55c <__stack+0xfd>
			OCR2 = duty_request + 1;
     558:	8f 5f       	subi	r24, 0xFF	; 255
     55a:	06 c0       	rjmp	.+12     	; 0x568 <__stack+0x109>
		else if (OCR2 > duty_request){
     55c:	23 b5       	in	r18, 0x23	; 35
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	82 17       	cp	r24, r18
     562:	93 07       	cpc	r25, r19
     564:	10 f4       	brcc	.+4      	; 0x56a <__stack+0x10b>
			OCR2 = duty_request - 1;
     566:	81 50       	subi	r24, 0x01	; 1
     568:	83 bd       	out	0x23, r24	; 35
			//DONT FORGET TO FREE MEMORY
			free(str_buffer);
			free(splitstrings);
		}*/
		
		if (data_received == 1){//using fixed-size fixed-order JSON
     56a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <data_received>
     56e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <data_received+0x1>
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	91 05       	cpc	r25, r1
     576:	09 f0       	breq	.+2      	; 0x57a <__stack+0x11b>
     578:	47 c0       	rjmp	.+142    	; 0x608 <__stack+0x1a9>
			if (str_buffer[2] == '3') {
     57a:	20 91 d4 00 	lds	r18, 0x00D4	; 0x8000d4 <str_buffer+0x2>
     57e:	23 33       	cpi	r18, 0x33	; 51
     580:	09 f0       	breq	.+2      	; 0x584 <__stack+0x125>
     582:	42 c0       	rjmp	.+132    	; 0x608 <__stack+0x1a9>
				transmit_data = 1; //id detected, send transmission
     584:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <transmit_data+0x1>
     588:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <transmit_data>
				if (str_buffer[7] == 'm') {
     58c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <str_buffer+0x7>
     590:	8d 36       	cpi	r24, 0x6D	; 109
     592:	09 f0       	breq	.+2      	; 0x596 <__stack+0x137>
     594:	40 c0       	rjmp	.+128    	; 0x616 <__stack+0x1b7>
					if (str_buffer[8] == 'f') {
     596:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <str_buffer+0x8>
     59a:	86 36       	cpi	r24, 0x66	; 102
     59c:	e1 f5       	brne	.+120    	; 0x616 <__stack+0x1b7>
						if (str_buffer[9] == 'c') { //if mfc object detected, check request value
     59e:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <str_buffer+0x9>
     5a2:	83 36       	cpi	r24, 0x63	; 99
     5a4:	c1 f5       	brne	.+112    	; 0x616 <__stack+0x1b7>
							if (str_buffer[14] == 'r') {
     5a6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <str_buffer+0xe>
     5aa:	82 37       	cpi	r24, 0x72	; 114
     5ac:	a1 f5       	brne	.+104    	; 0x616 <__stack+0x1b7>
								if (str_buffer[15] == 'e') {
     5ae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <str_buffer+0xf>
     5b2:	85 36       	cpi	r24, 0x65	; 101
     5b4:	81 f5       	brne	.+96     	; 0x616 <__stack+0x1b7>
									if (str_buffer[16] == 'q') { //valid request detected, check request value
     5b6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <str_buffer+0x10>
     5ba:	81 37       	cpi	r24, 0x71	; 113
     5bc:	61 f5       	brne	.+88     	; 0x616 <__stack+0x1b7>
										int reqval = (((str_buffer[20] - 48) * 100) + ((str_buffer[21] - 48) * 10) + (str_buffer[22] - 48));
										if ((reqval >= 0) && (reqval <= 255)){
     5be:	20 91 e6 00 	lds	r18, 0x00E6	; 0x8000e6 <str_buffer+0x14>
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	20 53       	subi	r18, 0x30	; 48
     5c6:	31 09       	sbc	r19, r1
     5c8:	62 9e       	mul	r6, r18
     5ca:	a0 01       	movw	r20, r0
     5cc:	63 9e       	mul	r6, r19
     5ce:	50 0d       	add	r21, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	20 91 e7 00 	lds	r18, 0x00E7	; 0x8000e7 <str_buffer+0x15>
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	20 53       	subi	r18, 0x30	; 48
     5da:	31 09       	sbc	r19, r1
     5dc:	72 9e       	mul	r7, r18
     5de:	c0 01       	movw	r24, r0
     5e0:	73 9e       	mul	r7, r19
     5e2:	90 0d       	add	r25, r0
     5e4:	11 24       	eor	r1, r1
     5e6:	84 0f       	add	r24, r20
     5e8:	95 1f       	adc	r25, r21
     5ea:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <str_buffer+0x16>
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	20 53       	subi	r18, 0x30	; 48
     5f2:	31 09       	sbc	r19, r1
     5f4:	82 0f       	add	r24, r18
     5f6:	93 1f       	adc	r25, r19
     5f8:	8f 3f       	cpi	r24, 0xFF	; 255
     5fa:	91 05       	cpc	r25, r1
     5fc:	09 f0       	breq	.+2      	; 0x600 <__stack+0x1a1>
     5fe:	58 f4       	brcc	.+22     	; 0x616 <__stack+0x1b7>
											duty_request = reqval; //set duty cycle request if valid value detected
     600:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <duty_request+0x1>
     604:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <duty_request>
						}
					}
				}
			}
		}
		if (transmit_data){
     608:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <transmit_data>
     60c:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <transmit_data+0x1>
     610:	89 2b       	or	r24, r25
     612:	09 f4       	brne	.+2      	; 0x616 <__stack+0x1b7>
     614:	fb c0       	rjmp	.+502    	; 0x80c <__stack+0x3ad>
			//disable receiver while transmitting to avoid echo-back
			UCSRB &= ~(1<<RXEN);
     616:	54 98       	cbi	0x0a, 4	; 10
			//char transmit_buffer[200];
			//sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3d\",\n%11s\"cur\": \"%3d\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%d.%dW\",\n%11s\"freq\": \"%d.%dHz\",\n%11s\"curr\": \"%dmA\",\n%11s\"volt\": \"%d.%dV\",\n%7s}\n%3s}\n}", "", "", "", "", "", duty_request, "", OCR2, "", "", "", "", "", powerleft, powerright, "", freqleft, freqright, "", current, "", voltleft, voltright, "", "");
			for (int i = 0; i < 260; ++i){
     618:	41 2c       	mov	r4, r1
     61a:	51 2c       	mov	r5, r1
				if ((i >= 57) && (i <= 59)){
     61c:	c2 01       	movw	r24, r4
     61e:	c9 97       	sbiw	r24, 0x39	; 57
     620:	03 97       	sbiw	r24, 0x03	; 3
     622:	00 f5       	brcc	.+64     	; 0x664 <__stack+0x205>
					//req flowrate value
					uart_transmit((duty_request/100) + 48);
     624:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <duty_request>
     628:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <duty_request+0x1>
     62c:	64 e6       	ldi	r22, 0x64	; 100
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	f3 d7       	rcall	.+4070   	; 0x1618 <__udivmodhi4>
     632:	80 e3       	ldi	r24, 0x30	; 48
     634:	86 0f       	add	r24, r22
     636:	c3 d5       	rcall	.+2950   	; 0x11be <uart_transmit>
					uart_transmit(((duty_request/10) % 10) + 48);
     638:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <duty_request>
     63c:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <duty_request+0x1>
     640:	b1 01       	movw	r22, r2
     642:	ea d7       	rcall	.+4052   	; 0x1618 <__udivmodhi4>
     644:	cb 01       	movw	r24, r22
     646:	b1 01       	movw	r22, r2
     648:	e7 d7       	rcall	.+4046   	; 0x1618 <__udivmodhi4>
     64a:	80 5d       	subi	r24, 0xD0	; 208
     64c:	b8 d5       	rcall	.+2928   	; 0x11be <uart_transmit>
					uart_transmit((duty_request % 10) + 48);
     64e:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <duty_request>
     652:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <duty_request+0x1>
     656:	b1 01       	movw	r22, r2
     658:	df d7       	rcall	.+4030   	; 0x1618 <__udivmodhi4>
     65a:	80 5d       	subi	r24, 0xD0	; 208
     65c:	b0 d5       	rcall	.+2912   	; 0x11be <uart_transmit>
					i += 3;//skip 3 places
     65e:	03 e0       	ldi	r16, 0x03	; 3
     660:	40 0e       	add	r4, r16
     662:	51 1c       	adc	r5, r1
				}
				if ((i >= 82) && (i <= 84)){
     664:	c2 01       	movw	r24, r4
     666:	82 55       	subi	r24, 0x52	; 82
     668:	91 09       	sbc	r25, r1
     66a:	03 97       	sbiw	r24, 0x03	; 3
     66c:	b0 f4       	brcc	.+44     	; 0x69a <__stack+0x23b>
					//current flowrate value
					uart_transmit((OCR2/100) + 48);
     66e:	83 b5       	in	r24, 0x23	; 35
     670:	66 2d       	mov	r22, r6
     672:	c6 d7       	rcall	.+3980   	; 0x1600 <__udivmodqi4>
     674:	80 5d       	subi	r24, 0xD0	; 208
     676:	a3 d5       	rcall	.+2886   	; 0x11be <uart_transmit>
					uart_transmit(((OCR2/10) % 10) + 48);
     678:	83 b5       	in	r24, 0x23	; 35
     67a:	67 2d       	mov	r22, r7
     67c:	c1 d7       	rcall	.+3970   	; 0x1600 <__udivmodqi4>
     67e:	c0 d7       	rcall	.+3968   	; 0x1600 <__udivmodqi4>
     680:	80 e3       	ldi	r24, 0x30	; 48
     682:	89 0f       	add	r24, r25
     684:	9c d5       	rcall	.+2872   	; 0x11be <uart_transmit>
					uart_transmit((OCR2 % 10) + 48);
     686:	83 b5       	in	r24, 0x23	; 35
     688:	67 2d       	mov	r22, r7
     68a:	ba d7       	rcall	.+3956   	; 0x1600 <__udivmodqi4>
     68c:	80 e3       	ldi	r24, 0x30	; 48
     68e:	89 0f       	add	r24, r25
     690:	96 d5       	rcall	.+2860   	; 0x11be <uart_transmit>
					i += 3;//skip 3 places
     692:	13 e0       	ldi	r17, 0x03	; 3
     694:	41 0e       	add	r4, r17
     696:	51 1c       	adc	r5, r1
     698:	37 c0       	rjmp	.+110    	; 0x708 <__stack+0x2a9>
				}
				if (i == 165){
     69a:	25 ea       	ldi	r18, 0xA5	; 165
     69c:	42 16       	cp	r4, r18
     69e:	51 04       	cpc	r5, r1
     6a0:	e9 f4       	brne	.+58     	; 0x6dc <__stack+0x27d>
					//pwr left value
					if ((powerleft / 10) == 0){
     6a2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <powerleft>
     6a6:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <powerleft+0x1>
     6aa:	0a 97       	sbiw	r24, 0x0a	; 10
     6ac:	28 f4       	brcc	.+10     	; 0x6b8 <__stack+0x259>
						uart_transmit(powerleft + 48);//transmit the number right away
     6ae:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <powerleft>
     6b2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <powerleft+0x1>
     6b6:	0f c0       	rjmp	.+30     	; 0x6d6 <__stack+0x277>
					}
					else{//split it into two digits
						uart_transmit((powerleft/10) + 48);
     6b8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <powerleft>
     6bc:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <powerleft+0x1>
     6c0:	b1 01       	movw	r22, r2
     6c2:	aa d7       	rcall	.+3924   	; 0x1618 <__udivmodhi4>
     6c4:	80 e3       	ldi	r24, 0x30	; 48
     6c6:	86 0f       	add	r24, r22
     6c8:	7a d5       	rcall	.+2804   	; 0x11be <uart_transmit>
						uart_transmit((powerleft % 10) + 48);
     6ca:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <powerleft>
     6ce:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <powerleft+0x1>
     6d2:	b1 01       	movw	r22, r2
     6d4:	a1 d7       	rcall	.+3906   	; 0x1618 <__udivmodhi4>
     6d6:	80 5d       	subi	r24, 0xD0	; 208
     6d8:	72 d5       	rcall	.+2788   	; 0x11be <uart_transmit>
     6da:	64 c0       	rjmp	.+200    	; 0x7a4 <__stack+0x345>
					}
				}
				if (i == 166){
     6dc:	36 ea       	ldi	r19, 0xA6	; 166
     6de:	43 16       	cp	r4, r19
     6e0:	51 04       	cpc	r5, r1
     6e2:	91 f4       	brne	.+36     	; 0x708 <__stack+0x2a9>
					//pwr right value
					uart_transmit((powerright/100) + 48);//1st DP
     6e4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <powerright>
     6e8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <powerright+0x1>
     6ec:	64 e6       	ldi	r22, 0x64	; 100
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	93 d7       	rcall	.+3878   	; 0x1618 <__udivmodhi4>
     6f2:	80 e3       	ldi	r24, 0x30	; 48
     6f4:	86 0f       	add	r24, r22
     6f6:	63 d5       	rcall	.+2758   	; 0x11be <uart_transmit>
					uart_transmit(((powerright/10) % 10) + 48);//2nd DP
     6f8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <powerright>
     6fc:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <powerright+0x1>
     700:	b1 01       	movw	r22, r2
     702:	8a d7       	rcall	.+3860   	; 0x1618 <__udivmodhi4>
     704:	cb 01       	movw	r24, r22
     706:	6b c0       	rjmp	.+214    	; 0x7de <__stack+0x37f>
				}
				if (i == 190){
     708:	8e eb       	ldi	r24, 0xBE	; 190
     70a:	48 16       	cp	r4, r24
     70c:	51 04       	cpc	r5, r1
     70e:	71 f4       	brne	.+28     	; 0x72c <__stack+0x2cd>
					//freq left value
					uart_transmit((freqleft/10) + 48);
     710:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <freqleft>
     714:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <freqleft+0x1>
     718:	b1 01       	movw	r22, r2
     71a:	7e d7       	rcall	.+3836   	; 0x1618 <__udivmodhi4>
     71c:	80 e3       	ldi	r24, 0x30	; 48
     71e:	86 0f       	add	r24, r22
     720:	4e d5       	rcall	.+2716   	; 0x11be <uart_transmit>
					uart_transmit((freqleft%10) + 48);
     722:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <freqleft>
     726:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <freqleft+0x1>
     72a:	59 c0       	rjmp	.+178    	; 0x7de <__stack+0x37f>
				}
				if (i == 191){
					//freq right value
					//uart_transmit((freqright/(pow(10,log(freqright)))) + 48);//only transmit 1st DP
				}
				if (i == 216){
     72c:	98 ed       	ldi	r25, 0xD8	; 216
     72e:	49 16       	cp	r4, r25
     730:	51 04       	cpc	r5, r1
     732:	31 f5       	brne	.+76     	; 0x780 <__stack+0x321>
					//current value
					uart_transmit((current/1000) + 48);
     734:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current>
     738:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current+0x1>
     73c:	68 ee       	ldi	r22, 0xE8	; 232
     73e:	73 e0       	ldi	r23, 0x03	; 3
     740:	6b d7       	rcall	.+3798   	; 0x1618 <__udivmodhi4>
     742:	80 e3       	ldi	r24, 0x30	; 48
     744:	86 0f       	add	r24, r22
     746:	3b d5       	rcall	.+2678   	; 0x11be <uart_transmit>
					uart_transmit(((current/100) % 10) + 48);
     748:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current>
     74c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current+0x1>
     750:	64 e6       	ldi	r22, 0x64	; 100
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	61 d7       	rcall	.+3778   	; 0x1618 <__udivmodhi4>
     756:	cb 01       	movw	r24, r22
     758:	b1 01       	movw	r22, r2
     75a:	5e d7       	rcall	.+3772   	; 0x1618 <__udivmodhi4>
     75c:	80 5d       	subi	r24, 0xD0	; 208
     75e:	2f d5       	rcall	.+2654   	; 0x11be <uart_transmit>
					uart_transmit(((current/10) % 10) + 48);
     760:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current>
     764:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current+0x1>
     768:	b1 01       	movw	r22, r2
     76a:	56 d7       	rcall	.+3756   	; 0x1618 <__udivmodhi4>
     76c:	cb 01       	movw	r24, r22
     76e:	b1 01       	movw	r22, r2
     770:	53 d7       	rcall	.+3750   	; 0x1618 <__udivmodhi4>
     772:	80 5d       	subi	r24, 0xD0	; 208
     774:	24 d5       	rcall	.+2632   	; 0x11be <uart_transmit>
					uart_transmit((current % 10) + 48);
     776:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current>
     77a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current+0x1>
     77e:	2f c0       	rjmp	.+94     	; 0x7de <__stack+0x37f>
				}
				if (i == 241){
     780:	a1 ef       	ldi	r26, 0xF1	; 241
     782:	4a 16       	cp	r4, r26
     784:	51 04       	cpc	r5, r1
     786:	71 f4       	brne	.+28     	; 0x7a4 <__stack+0x345>
					//voltage left value
					uart_transmit((voltleft/10) + 48);
     788:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <voltleft>
     78c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <voltleft+0x1>
     790:	b1 01       	movw	r22, r2
     792:	42 d7       	rcall	.+3716   	; 0x1618 <__udivmodhi4>
     794:	80 e3       	ldi	r24, 0x30	; 48
     796:	86 0f       	add	r24, r22
     798:	12 d5       	rcall	.+2596   	; 0x11be <uart_transmit>
					uart_transmit((voltleft % 10) + 48);
     79a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <voltleft>
     79e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <voltleft+0x1>
     7a2:	1d c0       	rjmp	.+58     	; 0x7de <__stack+0x37f>
				}
				if (i == 242){
     7a4:	b2 ef       	ldi	r27, 0xF2	; 242
     7a6:	4b 16       	cp	r4, r27
     7a8:	51 04       	cpc	r5, r1
     7aa:	e9 f4       	brne	.+58     	; 0x7e6 <__stack+0x387>
					//voltage right value
					uart_transmit((voltright/100) + 48);
     7ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     7b0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     7b4:	64 e6       	ldi	r22, 0x64	; 100
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	2f d7       	rcall	.+3678   	; 0x1618 <__udivmodhi4>
     7ba:	80 e3       	ldi	r24, 0x30	; 48
     7bc:	86 0f       	add	r24, r22
     7be:	ff d4       	rcall	.+2558   	; 0x11be <uart_transmit>
					uart_transmit(((voltright/10) % 10) + 48);
     7c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     7c4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     7c8:	b1 01       	movw	r22, r2
     7ca:	26 d7       	rcall	.+3660   	; 0x1618 <__udivmodhi4>
     7cc:	cb 01       	movw	r24, r22
     7ce:	b1 01       	movw	r22, r2
     7d0:	23 d7       	rcall	.+3654   	; 0x1618 <__udivmodhi4>
     7d2:	80 5d       	subi	r24, 0xD0	; 208
     7d4:	f4 d4       	rcall	.+2536   	; 0x11be <uart_transmit>
					uart_transmit((voltright % 10) + 48);
     7d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     7da:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     7de:	b1 01       	movw	r22, r2
     7e0:	1b d7       	rcall	.+3638   	; 0x1618 <__udivmodhi4>
     7e2:	80 5d       	subi	r24, 0xD0	; 208
     7e4:	ec d4       	rcall	.+2520   	; 0x11be <uart_transmit>
				}
				//transmit from eeprom
				uart_transmit(eeprom_read_byte(i));
     7e6:	c2 01       	movw	r24, r4
     7e8:	d4 da       	rcall	.-2648   	; 0xfffffd92 <__eeprom_end+0xff7efd92>
     7ea:	e9 d4       	rcall	.+2514   	; 0x11be <uart_transmit>
		if (transmit_data){
			//disable receiver while transmitting to avoid echo-back
			UCSRB &= ~(1<<RXEN);
			//char transmit_buffer[200];
			//sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3d\",\n%11s\"cur\": \"%3d\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%d.%dW\",\n%11s\"freq\": \"%d.%dHz\",\n%11s\"curr\": \"%dmA\",\n%11s\"volt\": \"%d.%dV\",\n%7s}\n%3s}\n}", "", "", "", "", "", duty_request, "", OCR2, "", "", "", "", "", powerleft, powerright, "", freqleft, freqright, "", current, "", voltleft, voltright, "", "");
			for (int i = 0; i < 260; ++i){
     7ec:	ef ef       	ldi	r30, 0xFF	; 255
     7ee:	4e 1a       	sub	r4, r30
     7f0:	5e 0a       	sbc	r5, r30
     7f2:	f4 e0       	ldi	r31, 0x04	; 4
     7f4:	4f 16       	cp	r4, r31
     7f6:	f1 e0       	ldi	r31, 0x01	; 1
     7f8:	5f 06       	cpc	r5, r31
     7fa:	0c f4       	brge	.+2      	; 0x7fe <__stack+0x39f>
     7fc:	0f cf       	rjmp	.-482    	; 0x61c <__stack+0x1bd>
			}
			//TODO: add code to detect and report errors/error messages
			//TODO: also add code to re-transmit errors if detected
			//uart_transmit_string(transmit_buffer);
			//wait for last transmission to fully complete
			while (UDREMPTY == 0);
     7fe:	5d 9b       	sbis	0x0b, 5	; 11
     800:	fe cf       	rjmp	.-4      	; 0x7fe <__stack+0x39f>
			//reenable receiver after transmission is complete
			UCSRB |= (1<<RXEN);
     802:	54 9a       	sbi	0x0a, 4	; 10
			transmit_data = 0;
     804:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <transmit_data+0x1>
     808:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <transmit_data>
		}
		//uart_transmit(48);
		//if adc has to be read
		if (numcycles >= 50){
     80c:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <numcycles>
     810:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <numcycles+0x1>
     814:	c2 97       	sbiw	r24, 0x32	; 50
     816:	08 f4       	brcc	.+2      	; 0x81a <__stack+0x3bb>
     818:	b7 c2       	rjmp	.+1390   	; 0xd88 <__stack+0x929>
			if (readadc){
     81a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <readadc>
     81e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <readadc+0x1>
     822:	89 2b       	or	r24, r25
     824:	09 f4       	brne	.+2      	; 0x828 <__stack+0x3c9>
     826:	b0 c2       	rjmp	.+1376   	; 0xd88 <__stack+0x929>
				//TODO: fix the order of these if-conditions to properly read ADC at the correct intervals
				//if (!backemffound){
					if (readadcmotorleft){
     828:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <readadcmotorleft>
     82c:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <readadcmotorleft+0x1>
     830:	89 2b       	or	r24, r25
     832:	09 f4       	brne	.+2      	; 0x836 <__stack+0x3d7>
     834:	fd c0       	rjmp	.+506    	; 0xa30 <__stack+0x5d1>
						//turn off timer 0
						TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     836:	83 b7       	in	r24, 0x33	; 51
     838:	88 7f       	andi	r24, 0xF8	; 248
     83a:	83 bf       	out	0x33, r24	; 51
						//store time value for current sample
						backemftime = (TCNT0 + (timer0_ovf_count*256)); //store time value in 16 microsecond ticks
     83c:	82 b7       	in	r24, 0x32	; 50
     83e:	00 91 0d 01 	lds	r16, 0x010D	; 0x80010d <timer0_ovf_count>
     842:	10 91 0e 01 	lds	r17, 0x010E	; 0x80010e <timer0_ovf_count+0x1>
     846:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <timer0_ovf_count+0x2>
     84a:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <timer0_ovf_count+0x3>
     84e:	32 2f       	mov	r19, r18
     850:	21 2f       	mov	r18, r17
     852:	10 2f       	mov	r17, r16
     854:	00 27       	eor	r16, r16
     856:	08 0f       	add	r16, r24
     858:	11 1d       	adc	r17, r1
     85a:	21 1d       	adc	r18, r1
     85c:	31 1d       	adc	r19, r1
     85e:	00 93 6e 00 	sts	0x006E, r16	; 0x80006e <backemftime>
     862:	10 93 6f 00 	sts	0x006F, r17	; 0x80006f <backemftime+0x1>
     866:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <backemftime+0x2>
     86a:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <backemftime+0x3>
     86e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <backemftime+0x4>
     872:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <backemftime+0x5>
     876:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <backemftime+0x6>
     87a:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <backemftime+0x7>
						//turn on timer 0 with prescaler /256 to keep measuring time
						TCCR0 |= ((1<<CS02));
     87e:	83 b7       	in	r24, 0x33	; 51
     880:	84 60       	ori	r24, 0x04	; 4
     882:	83 bf       	out	0x33, r24	; 51
						TCCR0 &= ~((1<<CS01)|(1<<CS00));
     884:	83 b7       	in	r24, 0x33	; 51
     886:	8c 7f       	andi	r24, 0xFC	; 252
     888:	83 bf       	out	0x33, r24	; 51
						
						reading = adc_convert((adc_read(LHSVOLTAGECHANNEL)));
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	e8 db       	rcall	.-2096   	; 0x5e <adc_read>
     88e:	f3 db       	rcall	.-2074   	; 0x76 <adc_convert>
     890:	70 93 bd 00 	sts	0x00BD, r23	; 0x8000bd <reading+0x1>
     894:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <reading>
						if (reading < 3000){
     898:	68 3b       	cpi	r22, 0xB8	; 184
     89a:	0b e0       	ldi	r16, 0x0B	; 11
     89c:	70 07       	cpc	r23, r16
     89e:	08 f0       	brcs	.+2      	; 0x8a2 <__stack+0x443>
     8a0:	65 c0       	rjmp	.+202    	; 0x96c <__stack+0x50d>
							if (backemfreadingindex >= 3){
     8a2:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <backemfreadingindex>
     8a6:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <backemfreadingindex+0x1>
     8aa:	23 30       	cpi	r18, 0x03	; 3
     8ac:	31 05       	cpc	r19, r1
     8ae:	c0 f0       	brcs	.+48     	; 0x8e0 <__stack+0x481>
								backemfreadingindex = 2;
     8b0:	90 92 09 01 	sts	0x0109, r9	; 0x800109 <backemfreadingindex+0x1>
     8b4:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <backemfreadingindex>
								backemfreading[0] = backemfreading[1];
     8b8:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <backemfreading+0x2>
     8bc:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <backemfreading+0x3>
     8c0:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <backemfreading+0x1>
     8c4:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <backemfreading>
								backemfreading[1] = backemfreading[2];
     8c8:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <backemfreading+0x4>
     8cc:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <backemfreading+0x5>
     8d0:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <backemfreading+0x3>
     8d4:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <backemfreading+0x2>
								backemfreading[2] = 0;
     8d8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <backemfreading+0x5>
     8dc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <backemfreading+0x4>
							}
							if ((backemf_i_mod % 2) == 0){
     8e0:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <backemf_i_mod>
     8e4:	50 91 b3 00 	lds	r21, 0x00B3	; 0x8000b3 <backemf_i_mod+0x1>
     8e8:	40 fd       	sbrc	r20, 0
     8ea:	3a c0       	rjmp	.+116    	; 0x960 <__stack+0x501>
								if (backemf_i != NUMSAMPLESI){
     8ec:	20 91 b4 00 	lds	r18, 0x00B4	; 0x8000b4 <backemf_i>
     8f0:	30 91 b5 00 	lds	r19, 0x00B5	; 0x8000b5 <backemf_i+0x1>
     8f4:	22 33       	cpi	r18, 0x32	; 50
     8f6:	31 05       	cpc	r19, r1
     8f8:	a9 f0       	breq	.+42     	; 0x924 <__stack+0x4c5>
									backemfarray[backemf_i] = reading;
     8fa:	f9 01       	movw	r30, r18
     8fc:	ee 0f       	add	r30, r30
     8fe:	ff 1f       	adc	r31, r31
     900:	ee 0f       	add	r30, r30
     902:	ff 1f       	adc	r31, r31
     904:	e2 55       	subi	r30, 0x52	; 82
     906:	fd 4f       	sbci	r31, 0xFD	; 253
     908:	6b 01       	movw	r12, r22
     90a:	7c 01       	movw	r14, r24
     90c:	ee 24       	eor	r14, r14
     90e:	ff 24       	eor	r15, r15
     910:	c0 82       	st	Z, r12
     912:	d1 82       	std	Z+1, r13	; 0x01
     914:	e2 82       	std	Z+2, r14	; 0x02
     916:	f3 82       	std	Z+3, r15	; 0x03
									backemf_i++;
     918:	2f 5f       	subi	r18, 0xFF	; 255
     91a:	3f 4f       	sbci	r19, 0xFF	; 255
     91c:	30 93 b5 00 	sts	0x00B5, r19	; 0x8000b5 <backemf_i+0x1>
     920:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <backemf_i>
								}
								if (backemf_i_mod > 10){
     924:	4b 30       	cpi	r20, 0x0B	; 11
     926:	51 05       	cpc	r21, r1
     928:	d8 f0       	brcs	.+54     	; 0x960 <__stack+0x501>
									backemfreading[backemfreadingindex] = reading;
     92a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <backemfreadingindex>
     92e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <backemfreadingindex+0x1>
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	ea 5e       	subi	r30, 0xEA	; 234
     938:	fe 4f       	sbci	r31, 0xFE	; 254
     93a:	71 83       	std	Z+1, r23	; 0x01
     93c:	60 83       	st	Z, r22
									if (backemfreadingindex < 3) ++backemfreadingindex;
     93e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <backemfreadingindex>
     942:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <backemfreadingindex+0x1>
     946:	23 30       	cpi	r18, 0x03	; 3
     948:	31 05       	cpc	r19, r1
     94a:	50 f4       	brcc	.+20     	; 0x960 <__stack+0x501>
     94c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <backemfreadingindex>
     950:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <backemfreadingindex+0x1>
     954:	2f 5f       	subi	r18, 0xFF	; 255
     956:	3f 4f       	sbci	r19, 0xFF	; 255
     958:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <backemfreadingindex+0x1>
     95c:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <backemfreadingindex>
								}
							}
							backemf_i_mod++;
     960:	ca 01       	movw	r24, r20
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <backemf_i_mod+0x1>
     968:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <backemf_i_mod>
						}
						//if we have gathered at least 3 samples so far, start testing for maximum point reachage
						if (backemfreadingindex == 3){
     96c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <backemfreadingindex>
     970:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <backemfreadingindex+0x1>
     974:	03 97       	sbiw	r24, 0x03	; 3
     976:	09 f0       	breq	.+2      	; 0x97a <__stack+0x51b>
     978:	5e c1       	rjmp	.+700    	; 0xc36 <__stack+0x7d7>
							if (((backemfreading[2] - backemfreading[1]) < 5) && ((backemfreading[1] - backemfreading[0]) < 5)){//hysteresis of 50mV
     97a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <backemfreading+0x2>
     97e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <backemfreading+0x3>
     982:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <backemfreading+0x4>
     986:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <backemfreading+0x5>
     98a:	28 1b       	sub	r18, r24
     98c:	39 0b       	sbc	r19, r25
     98e:	25 30       	cpi	r18, 0x05	; 5
     990:	31 05       	cpc	r19, r1
     992:	08 f0       	brcs	.+2      	; 0x996 <__stack+0x537>
     994:	50 c1       	rjmp	.+672    	; 0xc36 <__stack+0x7d7>
     996:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <backemfreading>
     99a:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <backemfreading+0x1>
     99e:	82 1b       	sub	r24, r18
     9a0:	93 0b       	sbc	r25, r19
     9a2:	05 97       	sbiw	r24, 0x05	; 5
     9a4:	08 f0       	brcs	.+2      	; 0x9a8 <__stack+0x549>
     9a6:	47 c1       	rjmp	.+654    	; 0xc36 <__stack+0x7d7>
								//we have found max, reset timer 0 count and overflow counter, and calculate frequency using stored time
								backemffound = 1;
     9a8:	21 e0       	ldi	r18, 0x01	; 1
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	30 93 c7 00 	sts	0x00C7, r19	; 0x8000c7 <backemffound+0x1>
     9b0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <backemffound>
								//backemf_i = 0;
								backemf_i_mod = 0;
     9b4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <backemf_i_mod+0x1>
     9b8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <backemf_i_mod>
								//char buf[10];
								//sprintf(buf,"%d",backemftime);
								//uart_transmit_string(buf);
								TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     9bc:	83 b7       	in	r24, 0x33	; 51
     9be:	88 7f       	andi	r24, 0xF8	; 248
     9c0:	83 bf       	out	0x33, r24	; 51
								TCNT0 = 0;
     9c2:	12 be       	out	0x32, r1	; 50
								timer0_ovf_count = 0;
     9c4:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timer0_ovf_count>
     9c8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timer0_ovf_count+0x1>
     9cc:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <timer0_ovf_count+0x2>
     9d0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <timer0_ovf_count+0x3>
								backemffreq = 1000000000/backemftime; //find backemf frequency in millihertz
     9d4:	a0 90 6e 00 	lds	r10, 0x006E	; 0x80006e <backemftime>
     9d8:	b0 90 6f 00 	lds	r11, 0x006F	; 0x80006f <backemftime+0x1>
     9dc:	c0 90 70 00 	lds	r12, 0x0070	; 0x800070 <backemftime+0x2>
     9e0:	d0 90 71 00 	lds	r13, 0x0071	; 0x800071 <backemftime+0x3>
     9e4:	e0 90 72 00 	lds	r14, 0x0072	; 0x800072 <backemftime+0x4>
     9e8:	f0 90 73 00 	lds	r15, 0x0073	; 0x800073 <backemftime+0x5>
     9ec:	00 91 74 00 	lds	r16, 0x0074	; 0x800074 <backemftime+0x6>
     9f0:	10 91 75 00 	lds	r17, 0x0075	; 0x800075 <backemftime+0x7>
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	3a ec       	ldi	r19, 0xCA	; 202
     9f8:	4a e9       	ldi	r20, 0x9A	; 154
     9fa:	5b e3       	ldi	r21, 0x3B	; 59
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	a8 d6       	rcall	.+3408   	; 0x1756 <__udivdi3>
     a06:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <backemffreq>
     a0a:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <backemffreq+0x1>
     a0e:	40 93 78 00 	sts	0x0078, r20	; 0x800078 <backemffreq+0x2>
     a12:	50 93 79 00 	sts	0x0079, r21	; 0x800079 <backemffreq+0x3>
     a16:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <backemffreq+0x4>
     a1a:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <backemffreq+0x5>
     a1e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <backemffreq+0x6>
     a22:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <backemffreq+0x7>
								readadcmotorleft = 0;//we have successfully found back-emf, no need to keep reading
     a26:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <readadcmotorleft+0x1>
     a2a:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <readadcmotorleft>
     a2e:	03 c1       	rjmp	.+518    	; 0xc36 <__stack+0x7d7>
						
						//left side motor back emf is ready to be read, start timer and keep reading (and storing current and previous timer value each time) until max value stabilises
						//possibly enable ADC interrupt and write a separate function to do non-blocking ADC converts and timer stores to not block other code
						//once max has stabilised and corresponding time has been obtained, calculate resonant frequency and adjust duty cycle on next while () iteration (if required) and do resonant_done = 1;
					}
					else if (readadcmotorright){
     a30:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <readadcmotorright>
     a34:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <readadcmotorright+0x1>
     a38:	89 2b       	or	r24, r25
     a3a:	09 f4       	brne	.+2      	; 0xa3e <__stack+0x5df>
     a3c:	fc c0       	rjmp	.+504    	; 0xc36 <__stack+0x7d7>
						//turn off timer 0
						TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     a3e:	83 b7       	in	r24, 0x33	; 51
     a40:	88 7f       	andi	r24, 0xF8	; 248
     a42:	83 bf       	out	0x33, r24	; 51
						//store time value for current sample
						backemftime = (TCNT0 + (timer0_ovf_count*256)); //store time value in 16 microseconds
     a44:	82 b7       	in	r24, 0x32	; 50
     a46:	00 91 0d 01 	lds	r16, 0x010D	; 0x80010d <timer0_ovf_count>
     a4a:	10 91 0e 01 	lds	r17, 0x010E	; 0x80010e <timer0_ovf_count+0x1>
     a4e:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <timer0_ovf_count+0x2>
     a52:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <timer0_ovf_count+0x3>
     a56:	32 2f       	mov	r19, r18
     a58:	21 2f       	mov	r18, r17
     a5a:	10 2f       	mov	r17, r16
     a5c:	00 27       	eor	r16, r16
     a5e:	08 0f       	add	r16, r24
     a60:	11 1d       	adc	r17, r1
     a62:	21 1d       	adc	r18, r1
     a64:	31 1d       	adc	r19, r1
     a66:	00 93 6e 00 	sts	0x006E, r16	; 0x80006e <backemftime>
     a6a:	10 93 6f 00 	sts	0x006F, r17	; 0x80006f <backemftime+0x1>
     a6e:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <backemftime+0x2>
     a72:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <backemftime+0x3>
     a76:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <backemftime+0x4>
     a7a:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <backemftime+0x5>
     a7e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <backemftime+0x6>
     a82:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <backemftime+0x7>
						//turn on timer 0 with prescaler /256 to keep measuring time
						TCCR0 |= ((1<<CS02));
     a86:	83 b7       	in	r24, 0x33	; 51
     a88:	84 60       	ori	r24, 0x04	; 4
     a8a:	83 bf       	out	0x33, r24	; 51
						TCCR0 &= ~((1<<CS01)|(1<<CS00));
     a8c:	83 b7       	in	r24, 0x33	; 51
     a8e:	8c 7f       	andi	r24, 0xFC	; 252
     a90:	83 bf       	out	0x33, r24	; 51
						//read back emf voltage
						reading = adc_convert((adc_read(RHSVOLTAGECHANNEL)));
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	e4 da       	rcall	.-2616   	; 0x5e <adc_read>
     a96:	ef da       	rcall	.-2594   	; 0x76 <adc_convert>
     a98:	70 93 bd 00 	sts	0x00BD, r23	; 0x8000bd <reading+0x1>
     a9c:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <reading>
						if (reading < 3000){
     aa0:	68 3b       	cpi	r22, 0xB8	; 184
     aa2:	3b e0       	ldi	r19, 0x0B	; 11
     aa4:	73 07       	cpc	r23, r19
     aa6:	08 f0       	brcs	.+2      	; 0xaaa <__stack+0x64b>
     aa8:	65 c0       	rjmp	.+202    	; 0xb74 <__stack+0x715>
							if (backemfreadingindex >= 3){
     aaa:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <backemfreadingindex>
     aae:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <backemfreadingindex+0x1>
     ab2:	23 30       	cpi	r18, 0x03	; 3
     ab4:	31 05       	cpc	r19, r1
     ab6:	c0 f0       	brcs	.+48     	; 0xae8 <__stack+0x689>
								backemfreadingindex = 2;
     ab8:	90 92 09 01 	sts	0x0109, r9	; 0x800109 <backemfreadingindex+0x1>
     abc:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <backemfreadingindex>
								backemfreading[0] = backemfreading[1];
     ac0:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <backemfreading+0x2>
     ac4:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <backemfreading+0x3>
     ac8:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <backemfreading+0x1>
     acc:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <backemfreading>
								backemfreading[1] = backemfreading[2];
     ad0:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <backemfreading+0x4>
     ad4:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <backemfreading+0x5>
     ad8:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <backemfreading+0x3>
     adc:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <backemfreading+0x2>
								backemfreading[2] = 0;
     ae0:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <backemfreading+0x5>
     ae4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <backemfreading+0x4>
							}
							if ((backemf_i_mod % 2) == 0){
     ae8:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <backemf_i_mod>
     aec:	50 91 b3 00 	lds	r21, 0x00B3	; 0x8000b3 <backemf_i_mod+0x1>
     af0:	40 fd       	sbrc	r20, 0
     af2:	3a c0       	rjmp	.+116    	; 0xb68 <__stack+0x709>
								if (backemf_i != NUMSAMPLESI){
     af4:	20 91 b4 00 	lds	r18, 0x00B4	; 0x8000b4 <backemf_i>
     af8:	30 91 b5 00 	lds	r19, 0x00B5	; 0x8000b5 <backemf_i+0x1>
     afc:	22 33       	cpi	r18, 0x32	; 50
     afe:	31 05       	cpc	r19, r1
     b00:	a9 f0       	breq	.+42     	; 0xb2c <__stack+0x6cd>
									backemfarray[backemf_i] = reading;
     b02:	f9 01       	movw	r30, r18
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	ee 0f       	add	r30, r30
     b0a:	ff 1f       	adc	r31, r31
     b0c:	e2 55       	subi	r30, 0x52	; 82
     b0e:	fd 4f       	sbci	r31, 0xFD	; 253
     b10:	6b 01       	movw	r12, r22
     b12:	7c 01       	movw	r14, r24
     b14:	ee 24       	eor	r14, r14
     b16:	ff 24       	eor	r15, r15
     b18:	c0 82       	st	Z, r12
     b1a:	d1 82       	std	Z+1, r13	; 0x01
     b1c:	e2 82       	std	Z+2, r14	; 0x02
     b1e:	f3 82       	std	Z+3, r15	; 0x03
									backemf_i++;
     b20:	2f 5f       	subi	r18, 0xFF	; 255
     b22:	3f 4f       	sbci	r19, 0xFF	; 255
     b24:	30 93 b5 00 	sts	0x00B5, r19	; 0x8000b5 <backemf_i+0x1>
     b28:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <backemf_i>
								}
								if (backemf_i_mod > 10){
     b2c:	4b 30       	cpi	r20, 0x0B	; 11
     b2e:	51 05       	cpc	r21, r1
     b30:	d8 f0       	brcs	.+54     	; 0xb68 <__stack+0x709>
									backemfreading[backemfreadingindex] = reading;
     b32:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <backemfreadingindex>
     b36:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <backemfreadingindex+0x1>
     b3a:	ee 0f       	add	r30, r30
     b3c:	ff 1f       	adc	r31, r31
     b3e:	ea 5e       	subi	r30, 0xEA	; 234
     b40:	fe 4f       	sbci	r31, 0xFE	; 254
     b42:	71 83       	std	Z+1, r23	; 0x01
     b44:	60 83       	st	Z, r22
									if (backemfreadingindex < 3) ++backemfreadingindex;
     b46:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <backemfreadingindex>
     b4a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <backemfreadingindex+0x1>
     b4e:	23 30       	cpi	r18, 0x03	; 3
     b50:	31 05       	cpc	r19, r1
     b52:	50 f4       	brcc	.+20     	; 0xb68 <__stack+0x709>
     b54:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <backemfreadingindex>
     b58:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <backemfreadingindex+0x1>
     b5c:	2f 5f       	subi	r18, 0xFF	; 255
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <backemfreadingindex+0x1>
     b64:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <backemfreadingindex>
								}
							}
							backemf_i_mod++;
     b68:	ca 01       	movw	r24, r20
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <backemf_i_mod+0x1>
     b70:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <backemf_i_mod>
						}
						
						//if we have gathered at least 3 samples so far, start testing for maximum point reachage
						if (backemfreadingindex == 3){
     b74:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <backemfreadingindex>
     b78:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <backemfreadingindex+0x1>
     b7c:	03 97       	sbiw	r24, 0x03	; 3
     b7e:	09 f0       	breq	.+2      	; 0xb82 <__stack+0x723>
     b80:	5a c0       	rjmp	.+180    	; 0xc36 <__stack+0x7d7>
							if (((backemfreading[2] - backemfreading[1]) < 5) && ((backemfreading[1] - backemfreading[0]) < 5)){//hysteresis of 50mV
     b82:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <backemfreading+0x2>
     b86:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <backemfreading+0x3>
     b8a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <backemfreading+0x4>
     b8e:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <backemfreading+0x5>
     b92:	28 1b       	sub	r18, r24
     b94:	39 0b       	sbc	r19, r25
     b96:	25 30       	cpi	r18, 0x05	; 5
     b98:	31 05       	cpc	r19, r1
     b9a:	08 f0       	brcs	.+2      	; 0xb9e <__stack+0x73f>
     b9c:	4c c0       	rjmp	.+152    	; 0xc36 <__stack+0x7d7>
     b9e:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <backemfreading>
     ba2:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <backemfreading+0x1>
     ba6:	82 1b       	sub	r24, r18
     ba8:	93 0b       	sbc	r25, r19
     baa:	05 97       	sbiw	r24, 0x05	; 5
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <__stack+0x751>
     bae:	43 c0       	rjmp	.+134    	; 0xc36 <__stack+0x7d7>
								//we have found max, reset timer 0 count and overflow counter, and calculate frequency using stored time
								backemffound = 1;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <backemffound+0x1>
     bb8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <backemffound>
								//backemf_i = 0;
								backemf_i_mod = 0;
     bbc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <backemf_i_mod+0x1>
     bc0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <backemf_i_mod>
								//char buf[10];
								//sprintf(buf,"%d",backemftime);
								//uart_transmit_string(buf);
								TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     bc4:	83 b7       	in	r24, 0x33	; 51
     bc6:	88 7f       	andi	r24, 0xF8	; 248
     bc8:	83 bf       	out	0x33, r24	; 51
								TCNT0 = 0;
     bca:	12 be       	out	0x32, r1	; 50
								timer0_ovf_count = 0;
     bcc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timer0_ovf_count>
     bd0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timer0_ovf_count+0x1>
     bd4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <timer0_ovf_count+0x2>
     bd8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <timer0_ovf_count+0x3>
								backemffreq = 1000000000/backemftime; //find backemf frequency in millihertz
     bdc:	a0 90 6e 00 	lds	r10, 0x006E	; 0x80006e <backemftime>
     be0:	b0 90 6f 00 	lds	r11, 0x006F	; 0x80006f <backemftime+0x1>
     be4:	c0 90 70 00 	lds	r12, 0x0070	; 0x800070 <backemftime+0x2>
     be8:	d0 90 71 00 	lds	r13, 0x0071	; 0x800071 <backemftime+0x3>
     bec:	e0 90 72 00 	lds	r14, 0x0072	; 0x800072 <backemftime+0x4>
     bf0:	f0 90 73 00 	lds	r15, 0x0073	; 0x800073 <backemftime+0x5>
     bf4:	00 91 74 00 	lds	r16, 0x0074	; 0x800074 <backemftime+0x6>
     bf8:	10 91 75 00 	lds	r17, 0x0075	; 0x800075 <backemftime+0x7>
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	3a ec       	ldi	r19, 0xCA	; 202
     c00:	4a e9       	ldi	r20, 0x9A	; 154
     c02:	5b e3       	ldi	r21, 0x3B	; 59
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	a4 d5       	rcall	.+2888   	; 0x1756 <__udivdi3>
     c0e:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <backemffreq>
     c12:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <backemffreq+0x1>
     c16:	40 93 78 00 	sts	0x0078, r20	; 0x800078 <backemffreq+0x2>
     c1a:	50 93 79 00 	sts	0x0079, r21	; 0x800079 <backemffreq+0x3>
     c1e:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <backemffreq+0x4>
     c22:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <backemffreq+0x5>
     c26:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <backemffreq+0x6>
     c2a:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <backemffreq+0x7>
								readadcmotorright = 0;//we have successfully found back-emf, no need to keep reading
     c2e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <readadcmotorright+0x1>
     c32:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <readadcmotorright>
						//possibly enable ADC interrupt and write a separate function to do non-blocking ADC converts and timer stores to not block other code
						//once max has stabilised and corresponding time has been obtained, calculate resonant frequency and adjust duty cycle on next while () iteration (if required) and do resonant_done = 1;
					}
			//	}
				//else{//resonant frequency calculation has priority, so do everything else in this else block
				if (readadcv){
     c36:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <readadcv>
     c3a:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <readadcv+0x1>
     c3e:	89 2b       	or	r24, r25
     c40:	09 f1       	breq	.+66     	; 0xc84 <__stack+0x825>
					/*if (voltage_left_on){
						//read motor_left for VCC
						reading = adc_convert(adc_read(LHSVOLTAGECHANNEL));
						voltagereading = (reading - 220)*2.6997; //store actual voltage value
					}*/
					if (voltage_right_on){
     c42:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <voltage_right_on>
     c46:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <voltage_right_on+0x1>
     c4a:	89 2b       	or	r24, r25
     c4c:	b1 f0       	breq	.+44     	; 0xc7a <__stack+0x81b>
						//read motor_right for VCC
						reading = adc_convert(adc_read(RHSVOLTAGECHANNEL));
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	06 da       	rcall	.-3060   	; 0x5e <adc_read>
     c52:	11 da       	rcall	.-3038   	; 0x76 <adc_convert>
     c54:	70 93 bd 00 	sts	0x00BD, r23	; 0x8000bd <reading+0x1>
     c58:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <reading>
						voltagereading = (reading - 220)*2.6997; //store actual voltage value
     c5c:	6c 5d       	subi	r22, 0xDC	; 220
     c5e:	71 09       	sbc	r23, r1
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	25 d3       	rcall	.+1610   	; 0x12b0 <__floatunsisf>
     c66:	23 ee       	ldi	r18, 0xE3	; 227
     c68:	37 ec       	ldi	r19, 0xC7	; 199
     c6a:	4c e2       	ldi	r20, 0x2C	; 44
     c6c:	50 e4       	ldi	r21, 0x40	; 64
     c6e:	d4 d3       	rcall	.+1960   	; 0x1418 <__mulsf3>
     c70:	f3 d2       	rcall	.+1510   	; 0x1258 <__fixunssfsi>
     c72:	70 93 b9 00 	sts	0x00B9, r23	; 0x8000b9 <voltagereading+0x1>
     c76:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <voltagereading>
					}
					//we have read voltage value (only need to do this once because we are assuming Vcc remains constant between PWM pulses), turn off voltage reading flag
					readadcv = 0;
     c7a:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <readadcv+0x1>
     c7e:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <readadcv>
     c82:	82 c0       	rjmp	.+260    	; 0xd88 <__stack+0x929>
				}
				else if (readadci){
     c84:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <readadci>
     c88:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <readadci+0x1>
     c8c:	89 2b       	or	r24, r25
     c8e:	09 f4       	brne	.+2      	; 0xc92 <__stack+0x833>
     c90:	7b c0       	rjmp	.+246    	; 0xd88 <__stack+0x929>
					if (currentreadingindex != NUMSAMPLESI){
     c92:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <currentreadingindex>
     c96:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <currentreadingindex+0x1>
     c9a:	c2 97       	sbiw	r24, 0x32	; 50
     c9c:	09 f4       	brne	.+2      	; 0xca0 <__stack+0x841>
     c9e:	74 c0       	rjmp	.+232    	; 0xd88 <__stack+0x929>
						//uart_transmit(voltage_left_on + 48);
						//uart_transmit(voltage_right_on + 48);
						//uart_transmit('\n');
						if ((voltage_left_on) || (voltage_right_on)){
     ca0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <voltage_left_on>
     ca4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <voltage_left_on+0x1>
     ca8:	89 2b       	or	r24, r25
     caa:	31 f4       	brne	.+12     	; 0xcb8 <__stack+0x859>
     cac:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <voltage_right_on>
     cb0:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <voltage_right_on+0x1>
     cb4:	89 2b       	or	r24, r25
     cb6:	99 f1       	breq	.+102    	; 0xd1e <__stack+0x8bf>
							//store current ADC samples into array, do NOT reset the index between sampling intervals so we can build up a full array
							//also at the same time, multiply adc current value by the voltage value to get the instantaneous power array
							//store only alternate samples (i % 50 == 0) (so we don't get more than ~50 samples for the whole of T/4)
							reading = adc_convert(adc_read(ISHIFTEDCHANNEL));
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	d1 d9       	rcall	.-3166   	; 0x5e <adc_read>
     cbc:	dc d9       	rcall	.-3144   	; 0x76 <adc_convert>
     cbe:	9b 01       	movw	r18, r22
     cc0:	70 93 bd 00 	sts	0x00BD, r23	; 0x8000bd <reading+0x1>
     cc4:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <reading>
							if((current_i % 2) == 0){
     cc8:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <current_i>
     ccc:	50 91 cf 00 	lds	r21, 0x00CF	; 0x8000cf <current_i+0x1>
     cd0:	40 fd       	sbrc	r20, 0
     cd2:	51 c0       	rjmp	.+162    	; 0xd76 <__stack+0x917>
								currentarray[currentreadingindex] = reading; //store i_sense_shifted voltage
     cd4:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <currentreadingindex>
     cd8:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <currentreadingindex+0x1>
     cdc:	ee 0f       	add	r30, r30
     cde:	ff 1f       	adc	r31, r31
     ce0:	ee 0f       	add	r30, r30
     ce2:	ff 1f       	adc	r31, r31
     ce4:	ec 51       	subi	r30, 0x1C	; 28
     ce6:	fe 4f       	sbci	r31, 0xFE	; 254
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	aa 27       	eor	r26, r26
     cee:	bb 27       	eor	r27, r27
     cf0:	80 83       	st	Z, r24
     cf2:	91 83       	std	Z+1, r25	; 0x01
     cf4:	a2 83       	std	Z+2, r26	; 0x02
     cf6:	b3 83       	std	Z+3, r27	; 0x03
								//powerarray[currentreadingindex] = currentarray[currentreadingindex] * voltagereading; //store power in uW
								++currentreadingindex;
     cf8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <currentreadingindex>
     cfc:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <currentreadingindex+0x1>
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <currentreadingindex+0x1>
     d06:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <currentreadingindex>
								if (reading > 3000) {//short circuit condition test
     d0a:	29 3b       	cpi	r18, 0xB9	; 185
     d0c:	3b 40       	sbci	r19, 0x0B	; 11
     d0e:	98 f1       	brcs	.+102    	; 0xd76 <__stack+0x917>
									shortcircuit = 1;
     d10:	a1 e0       	ldi	r26, 0x01	; 1
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	b0 93 b7 00 	sts	0x00B7, r27	; 0x8000b7 <shortcircuit+0x1>
     d18:	a0 93 b6 00 	sts	0x00B6, r26	; 0x8000b6 <shortcircuit>
     d1c:	2c c0       	rjmp	.+88     	; 0xd76 <__stack+0x917>
								}
							}
						}
						else if ((!voltage_left_on) && (!voltage_right_on)){
     d1e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <voltage_left_on>
     d22:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <voltage_left_on+0x1>
     d26:	89 2b       	or	r24, r25
     d28:	31 f5       	brne	.+76     	; 0xd76 <__stack+0x917>
     d2a:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <voltage_right_on>
     d2e:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <voltage_right_on+0x1>
     d32:	89 2b       	or	r24, r25
     d34:	01 f5       	brne	.+64     	; 0xd76 <__stack+0x917>
							//if PWM is turned off, current is 0
							//therefore store a 0 in the array (again, do not reset the index yet)
							//but make sure to read still ADC to generate the correct number of samples (because we don't have a spare timer)
							//also at the same time, multiply adc current value by the voltage value to get the instantaneous power array
							//store only alternate samples (every 25th sample using (i % 50 == 0)) (so we don't get more than ~50 samples)
							adc_convert(adc_read(ISHIFTEDCHANNEL));
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	92 d9       	rcall	.-3292   	; 0x5e <adc_read>
     d3a:	9d d9       	rcall	.-3270   	; 0x76 <adc_convert>
							if ((current_i % 2) == 0){
     d3c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <current_i>
     d40:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <current_i+0x1>
     d44:	80 fd       	sbrc	r24, 0
     d46:	17 c0       	rjmp	.+46     	; 0xd76 <__stack+0x917>
								currentarray[currentreadingindex] = 0;
     d48:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <currentreadingindex>
     d4c:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <currentreadingindex+0x1>
     d50:	ee 0f       	add	r30, r30
     d52:	ff 1f       	adc	r31, r31
     d54:	ee 0f       	add	r30, r30
     d56:	ff 1f       	adc	r31, r31
     d58:	ec 51       	subi	r30, 0x1C	; 28
     d5a:	fe 4f       	sbci	r31, 0xFE	; 254
     d5c:	10 82       	st	Z, r1
     d5e:	11 82       	std	Z+1, r1	; 0x01
     d60:	12 82       	std	Z+2, r1	; 0x02
     d62:	13 82       	std	Z+3, r1	; 0x03
								//powerarray[currentreadingindex] = 0;
								++currentreadingindex;
     d64:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <currentreadingindex>
     d68:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <currentreadingindex+0x1>
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <currentreadingindex+0x1>
     d72:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <currentreadingindex>
							}
						}
						++current_i;
     d76:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <current_i>
     d7a:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <current_i+0x1>
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <current_i+0x1>
     d84:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <current_i>
				//}
			}
		}
		
		//driving frequency adjustment here
		if (backemffound){
     d88:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <backemffound>
     d8c:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <backemffound+0x1>
     d90:	89 2b       	or	r24, r25
     d92:	09 f4       	brne	.+2      	; 0xd96 <__stack+0x937>
     d94:	a9 c0       	rjmp	.+338    	; 0xee8 <__stack+0xa89>
			char buf[10];
			if (TCNT1 < OCR1A){
     d96:	2c b5       	in	r18, 0x2c	; 44
     d98:	3d b5       	in	r19, 0x2d	; 45
     d9a:	8a b5       	in	r24, 0x2a	; 42
     d9c:	9b b5       	in	r25, 0x2b	; 43
     d9e:	28 17       	cp	r18, r24
     da0:	39 07       	cpc	r19, r25
     da2:	08 f0       	brcs	.+2      	; 0xda6 <__stack+0x947>
     da4:	69 c0       	rjmp	.+210    	; 0xe78 <__stack+0xa19>
				//if (((backemftime - OCR1A) < 1000) || (OCR1A - (backemftime) < 1000)){
				backemffound = 0; //reset found flag
     da6:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <backemffound+0x1>
     daa:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <backemffound>
				backemf_i = 0;
     dae:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <backemf_i+0x1>
     db2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <backemf_i>
				backemf_i_mod = 0;
     db6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <backemf_i_mod+0x1>
     dba:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <backemf_i_mod>
				char buf[10];
				//sprintf(buf,"freq: %u\n",backemffreq * 0.25);
				//uart_transmit_string(buf);
				//backemftime = 1250;
				if ((backemftime > 1100) && (backemftime < 1600)){
     dbe:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <backemftime>
     dc2:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <backemftime+0x1>
     dc6:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <backemftime+0x2>
     dca:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <backemftime+0x3>
     dce:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <backemftime+0x4>
     dd2:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <backemftime+0x5>
     dd6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <backemftime+0x6>
     dda:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <backemftime+0x7>
     dde:	2c 34       	cpi	r18, 0x4C	; 76
     de0:	34 40       	sbci	r19, 0x04	; 4
     de2:	41 05       	cpc	r20, r1
     de4:	51 05       	cpc	r21, r1
     de6:	61 05       	cpc	r22, r1
     de8:	71 05       	cpc	r23, r1
     dea:	81 05       	cpc	r24, r1
     dec:	91 05       	cpc	r25, r1
     dee:	09 f0       	breq	.+2      	; 0xdf2 <__stack+0x993>
     df0:	08 f4       	brcc	.+2      	; 0xdf4 <__stack+0x995>
     df2:	42 c0       	rjmp	.+132    	; 0xe78 <__stack+0xa19>
     df4:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <backemftime>
     df8:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <backemftime+0x1>
     dfc:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <backemftime+0x2>
     e00:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <backemftime+0x3>
     e04:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <backemftime+0x4>
     e08:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <backemftime+0x5>
     e0c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <backemftime+0x6>
     e10:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <backemftime+0x7>
     e14:	2f 33       	cpi	r18, 0x3F	; 63
     e16:	36 40       	sbci	r19, 0x06	; 6
     e18:	41 05       	cpc	r20, r1
     e1a:	51 05       	cpc	r21, r1
     e1c:	61 05       	cpc	r22, r1
     e1e:	71 05       	cpc	r23, r1
     e20:	81 05       	cpc	r24, r1
     e22:	91 05       	cpc	r25, r1
     e24:	09 f0       	breq	.+2      	; 0xe28 <__stack+0x9c9>
     e26:	40 f5       	brcc	.+80     	; 0xe78 <__stack+0xa19>
					OCR1A = backemftime; //t/4 = backemf/16
     e28:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <backemftime>
     e2c:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <backemftime+0x1>
     e30:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <backemftime+0x2>
     e34:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <backemftime+0x3>
     e38:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <backemftime+0x4>
     e3c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <backemftime+0x5>
     e40:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <backemftime+0x6>
     e44:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <backemftime+0x7>
     e48:	83 2f       	mov	r24, r19
     e4a:	92 2f       	mov	r25, r18
     e4c:	9b bd       	out	0x2b, r25	; 43
     e4e:	8a bd       	out	0x2a, r24	; 42
					OCR1B = backemftime * 2;//t/2 is always 2 * t/4
     e50:	00 91 6e 00 	lds	r16, 0x006E	; 0x80006e <backemftime>
     e54:	10 91 6f 00 	lds	r17, 0x006F	; 0x80006f <backemftime+0x1>
     e58:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <backemftime+0x2>
     e5c:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <backemftime+0x3>
     e60:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <backemftime+0x4>
     e64:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <backemftime+0x5>
     e68:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <backemftime+0x6>
     e6c:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <backemftime+0x7>
     e70:	00 0f       	add	r16, r16
     e72:	11 1f       	adc	r17, r17
     e74:	19 bd       	out	0x29, r17	; 41
     e76:	08 bd       	out	0x28, r16	; 40
				}
				//}
			}
			
			
			sprintf(buf,"natural time: %u\n",backemftime);
     e78:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <backemftime>
     e7c:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <backemftime+0x1>
     e80:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <backemftime+0x2>
     e84:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <backemftime+0x3>
     e88:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <backemftime+0x4>
     e8c:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <backemftime+0x5>
     e90:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <backemftime+0x6>
     e94:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <backemftime+0x7>
     e98:	7f 93       	push	r23
     e9a:	6f 93       	push	r22
     e9c:	5f 93       	push	r21
     e9e:	4f 93       	push	r20
     ea0:	3f 93       	push	r19
     ea2:	2f 93       	push	r18
     ea4:	9f 93       	push	r25
     ea6:	8f 93       	push	r24
     ea8:	8e e7       	ldi	r24, 0x7E	; 126
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9f 93       	push	r25
     eae:	8f 93       	push	r24
     eb0:	cc 24       	eor	r12, r12
     eb2:	c3 94       	inc	r12
     eb4:	d1 2c       	mov	r13, r1
     eb6:	cc 0e       	add	r12, r28
     eb8:	dd 1e       	adc	r13, r29
     eba:	df 92       	push	r13
     ebc:	cf 92       	push	r12
     ebe:	c8 d4       	rcall	.+2448   	; 0x1850 <sprintf>
			uart_transmit_string(buf);
     ec0:	c6 01       	movw	r24, r12
     ec2:	81 d1       	rcall	.+770    	; 0x11c6 <uart_transmit_string>
			sprintf(buf,"driving time: %u\n",OCR1A);
     ec4:	8a b5       	in	r24, 0x2a	; 42
     ec6:	9b b5       	in	r25, 0x2b	; 43
     ec8:	9f 93       	push	r25
     eca:	8f 93       	push	r24
     ecc:	80 e9       	ldi	r24, 0x90	; 144
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9f 93       	push	r25
     ed2:	8f 93       	push	r24
     ed4:	df 92       	push	r13
     ed6:	cf 92       	push	r12
     ed8:	bb d4       	rcall	.+2422   	; 0x1850 <sprintf>
			uart_transmit_string(buf);
     eda:	c6 01       	movw	r24, r12
     edc:	74 d1       	rcall	.+744    	; 0x11c6 <uart_transmit_string>
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
			//}
			//backemffound = 0;
		}
		
		//once we have done adc readings, do rms/power calcs and store the values in their proper places
		if (currentreadingindex == NUMSAMPLESI){
     ee8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <currentreadingindex>
     eec:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <currentreadingindex+0x1>
     ef0:	c2 97       	sbiw	r24, 0x32	; 50
     ef2:	09 f0       	breq	.+2      	; 0xef6 <__stack+0xa97>
     ef4:	28 cb       	rjmp	.-2480   	; 0x546 <__stack+0xe7>
			for (int i = 0; i < NUMSAMPLESI; ++i){
				if (currentarray[i] != 0){
					currentarray[i] = (((currentarray[i] - 200) * 0.2445)) * 10; //store actual current value (mA)
					//currentarray[i] = (((currentarray[i] - 220) * 0.2074)) * 10; //store actual current value (mA)
				}
				powerarray[i] = currentarray[i] * voltagereading;
     ef6:	20 91 b8 00 	lds	r18, 0x00B8	; 0x8000b8 <voltagereading>
     efa:	30 91 b9 00 	lds	r19, 0x00B9	; 0x8000b9 <voltagereading+0x1>
     efe:	3d 8f       	std	Y+29, r19	; 0x1d
     f00:	2c 8f       	std	Y+28, r18	; 0x1c
     f02:	c9 01       	movw	r24, r18
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	88 8f       	std	Y+24, r24	; 0x18
     f0a:	99 8f       	std	Y+25, r25	; 0x19
     f0c:	aa 8f       	std	Y+26, r26	; 0x1a
     f0e:	bb 8f       	std	Y+27, r27	; 0x1b
     f10:	40 90 aa 00 	lds	r4, 0x00AA	; 0x8000aa <currentvalue>
     f14:	50 90 ab 00 	lds	r5, 0x00AB	; 0x8000ab <currentvalue+0x1>
     f18:	60 90 ac 00 	lds	r6, 0x00AC	; 0x8000ac <currentvalue+0x2>
     f1c:	70 90 ad 00 	lds	r7, 0x00AD	; 0x8000ad <currentvalue+0x3>
     f20:	80 90 ae 00 	lds	r8, 0x00AE	; 0x8000ae <currentvalue+0x4>
     f24:	90 90 af 00 	lds	r9, 0x00AF	; 0x8000af <currentvalue+0x5>
     f28:	b0 91 b0 00 	lds	r27, 0x00B0	; 0x8000b0 <currentvalue+0x6>
     f2c:	bd 8b       	std	Y+21, r27	; 0x15
     f2e:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <currentvalue+0x7>
     f32:	ed 87       	std	Y+13, r30	; 0x0d
     f34:	0c e1       	ldi	r16, 0x1C	; 28
     f36:	11 e0       	ldi	r17, 0x01	; 1
     f38:	1f 8b       	std	Y+23, r17	; 0x17
     f3a:	0e 8b       	std	Y+22, r16	; 0x16
     f3c:	24 ee       	ldi	r18, 0xE4	; 228
     f3e:	31 e0       	ldi	r19, 0x01	; 1
     f40:	3c 87       	std	Y+12, r19	; 0x0c
     f42:	2b 87       	std	Y+11, r18	; 0x0b
		if (currentreadingindex == NUMSAMPLESI){
			//calculate RMS current
			//uart_transmit_string("works\n");
			
			for (int i = 0; i < NUMSAMPLESI; ++i){
				if (currentarray[i] != 0){
     f44:	eb 85       	ldd	r30, Y+11	; 0x0b
     f46:	fc 85       	ldd	r31, Y+12	; 0x0c
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	a2 81       	ldd	r26, Z+2	; 0x02
     f4e:	b3 81       	ldd	r27, Z+3	; 0x03
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	a1 05       	cpc	r26, r1
     f54:	b1 05       	cpc	r27, r1
     f56:	c9 f0       	breq	.+50     	; 0xf8a <__stack+0xb2b>
					currentarray[i] = (((currentarray[i] - 200) * 0.2445)) * 10; //store actual current value (mA)
     f58:	bc 01       	movw	r22, r24
     f5a:	cd 01       	movw	r24, r26
     f5c:	68 5c       	subi	r22, 0xC8	; 200
     f5e:	71 09       	sbc	r23, r1
     f60:	81 09       	sbc	r24, r1
     f62:	91 09       	sbc	r25, r1
     f64:	a5 d1       	rcall	.+842    	; 0x12b0 <__floatunsisf>
     f66:	25 e3       	ldi	r18, 0x35	; 53
     f68:	3e e5       	ldi	r19, 0x5E	; 94
     f6a:	4a e7       	ldi	r20, 0x7A	; 122
     f6c:	5e e3       	ldi	r21, 0x3E	; 62
     f6e:	54 d2       	rcall	.+1192   	; 0x1418 <__mulsf3>
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e2       	ldi	r20, 0x20	; 32
     f76:	51 e4       	ldi	r21, 0x41	; 65
     f78:	4f d2       	rcall	.+1182   	; 0x1418 <__mulsf3>
     f7a:	6e d1       	rcall	.+732    	; 0x1258 <__fixunssfsi>
     f7c:	ab 85       	ldd	r26, Y+11	; 0x0b
     f7e:	bc 85       	ldd	r27, Y+12	; 0x0c
     f80:	6d 93       	st	X+, r22
     f82:	7d 93       	st	X+, r23
     f84:	8d 93       	st	X+, r24
     f86:	9c 93       	st	X, r25
     f88:	13 97       	sbiw	r26, 0x03	; 3
					//currentarray[i] = (((currentarray[i] - 220) * 0.2074)) * 10; //store actual current value (mA)
				}
				powerarray[i] = currentarray[i] * voltagereading;
     f8a:	eb 85       	ldd	r30, Y+11	; 0x0b
     f8c:	fc 85       	ldd	r31, Y+12	; 0x0c
     f8e:	c0 80       	ld	r12, Z
     f90:	d1 80       	ldd	r13, Z+1	; 0x01
     f92:	e2 80       	ldd	r14, Z+2	; 0x02
     f94:	f3 80       	ldd	r15, Z+3	; 0x03
     f96:	a7 01       	movw	r20, r14
     f98:	96 01       	movw	r18, r12
     f9a:	68 8d       	ldd	r22, Y+24	; 0x18
     f9c:	79 8d       	ldd	r23, Y+25	; 0x19
     f9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fa0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fa2:	1f d3       	rcall	.+1598   	; 0x15e2 <__mulsi3>
     fa4:	ae 89       	ldd	r26, Y+22	; 0x16
     fa6:	bf 89       	ldd	r27, Y+23	; 0x17
     fa8:	6d 93       	st	X+, r22
     faa:	7d 93       	st	X+, r23
     fac:	8d 93       	st	X+, r24
     fae:	9d 93       	st	X+, r25
     fb0:	bf 8b       	std	Y+23, r27	; 0x17
     fb2:	ae 8b       	std	Y+22, r26	; 0x16
				
				currentarray[i] = square(currentarray[i]); //square
     fb4:	c7 01       	movw	r24, r14
     fb6:	b6 01       	movw	r22, r12
     fb8:	7b d1       	rcall	.+758    	; 0x12b0 <__floatunsisf>
     fba:	d3 d2       	rcall	.+1446   	; 0x1562 <square>
     fbc:	4d d1       	rcall	.+666    	; 0x1258 <__fixunssfsi>
     fbe:	eb 85       	ldd	r30, Y+11	; 0x0b
     fc0:	fc 85       	ldd	r31, Y+12	; 0x0c
     fc2:	61 93       	st	Z+, r22
     fc4:	71 93       	st	Z+, r23
     fc6:	81 93       	st	Z+, r24
     fc8:	91 93       	st	Z+, r25
     fca:	fc 87       	std	Y+12, r31	; 0x0c
     fcc:	eb 87       	std	Y+11, r30	; 0x0b
				
				powervalue += powerarray[i]; //summation of power 
				currentvalue += currentarray[i];//summation of current^2
     fce:	5b 01       	movw	r10, r22
     fd0:	6c 01       	movw	r12, r24
     fd2:	9b 01       	movw	r18, r22
     fd4:	a6 01       	movw	r20, r12
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	52 01       	movw	r10, r4
     fe0:	63 01       	movw	r12, r6
     fe2:	74 01       	movw	r14, r8
     fe4:	0d 89       	ldd	r16, Y+21	; 0x15
     fe6:	1d 85       	ldd	r17, Y+13	; 0x0d
     fe8:	1e d4       	rcall	.+2108   	; 0x1826 <__adddi3>
     fea:	29 01       	movw	r4, r18
     fec:	3a 01       	movw	r6, r20
     fee:	4b 01       	movw	r8, r22
     ff0:	8d 8b       	std	Y+21, r24	; 0x15
     ff2:	9d 87       	std	Y+13, r25	; 0x0d
		//once we have done adc readings, do rms/power calcs and store the values in their proper places
		if (currentreadingindex == NUMSAMPLESI){
			//calculate RMS current
			//uart_transmit_string("works\n");
			
			for (int i = 0; i < NUMSAMPLESI; ++i){
     ff4:	2c ea       	ldi	r18, 0xAC	; 172
     ff6:	c2 2e       	mov	r12, r18
     ff8:	22 e0       	ldi	r18, 0x02	; 2
     ffa:	d2 2e       	mov	r13, r18
     ffc:	ce 16       	cp	r12, r30
     ffe:	df 06       	cpc	r13, r31
    1000:	09 f0       	breq	.+2      	; 0x1004 <__stack+0xba5>
    1002:	a0 cf       	rjmp	.-192    	; 0xf44 <__stack+0xae5>
				
				powervalue += powerarray[i]; //summation of power 
				currentvalue += currentarray[i];//summation of current^2
			}
			currentvalue /= NUMSAMPLESI; //mean
			currentvalue = sqrt(currentvalue); //root - gives RMS current in (mA)
    1004:	22 e3       	ldi	r18, 0x32	; 50
    1006:	a2 2e       	mov	r10, r18
    1008:	b1 2c       	mov	r11, r1
    100a:	c1 2c       	mov	r12, r1
    100c:	d1 2c       	mov	r13, r1
    100e:	e1 2c       	mov	r14, r1
    1010:	f1 2c       	mov	r15, r1
    1012:	00 e0       	ldi	r16, 0x00	; 0
    1014:	10 e0       	ldi	r17, 0x00	; 0
    1016:	92 01       	movw	r18, r4
    1018:	9e d3       	rcall	.+1852   	; 0x1756 <__udivdi3>
    101a:	87 d1       	rcall	.+782    	; 0x132a <__floatundisf>
    101c:	64 d2       	rcall	.+1224   	; 0x14e6 <sqrt>
			currentvalue /= 2; //since we are operating bidirectional current and only reading the "ON" period of the signals for (T/4 + T/4) = T/2, we need halve our obtained RMS value
    101e:	e7 d0       	rcall	.+462    	; 0x11ee <__fixunssfdi>
    1020:	01 e0       	ldi	r16, 0x01	; 1
    1022:	e5 d3       	rcall	.+1994   	; 0x17ee <__lshrdi3>
    1024:	2b 87       	std	Y+11, r18	; 0x0b
    1026:	3d 8b       	std	Y+21, r19	; 0x15
    1028:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <currentvalue>
    102c:	30 93 ab 00 	sts	0x00AB, r19	; 0x8000ab <currentvalue+0x1>
    1030:	40 93 ac 00 	sts	0x00AC, r20	; 0x8000ac <currentvalue+0x2>
    1034:	50 93 ad 00 	sts	0x00AD, r21	; 0x8000ad <currentvalue+0x3>
    1038:	60 93 ae 00 	sts	0x00AE, r22	; 0x8000ae <currentvalue+0x4>
    103c:	70 93 af 00 	sts	0x00AF, r23	; 0x8000af <currentvalue+0x5>
    1040:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <currentvalue+0x6>
    1044:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <currentvalue+0x7>
			
			powervalue = currentvalue * voltagereading; //power mean (uW)
    1048:	ec 8c       	ldd	r14, Y+28	; 0x1c
    104a:	fd 8c       	ldd	r15, Y+29	; 0x1d
    104c:	67 01       	movw	r12, r14
    104e:	e1 2c       	mov	r14, r1
    1050:	f1 2c       	mov	r15, r1
    1052:	00 e0       	ldi	r16, 0x00	; 0
    1054:	10 e0       	ldi	r17, 0x00	; 0
    1056:	98 01       	movw	r18, r16
    1058:	cd 86       	std	Y+13, r12	; 0x0d
    105a:	de 86       	std	Y+14, r13	; 0x0e
    105c:	ef 86       	std	Y+15, r14	; 0x0f
    105e:	f8 8a       	std	Y+16, r15	; 0x10
    1060:	09 8b       	std	Y+17, r16	; 0x11
    1062:	1a 8b       	std	Y+18, r17	; 0x12
    1064:	2b 8b       	std	Y+19, r18	; 0x13
    1066:	3c 8b       	std	Y+20, r19	; 0x14
    1068:	ab 84       	ldd	r10, Y+11	; 0x0b
    106a:	bd 88       	ldd	r11, Y+21	; 0x15
    106c:	6a 01       	movw	r12, r20
    106e:	7b 01       	movw	r14, r22
    1070:	8c 01       	movw	r16, r24
    1072:	2d 85       	ldd	r18, Y+13	; 0x0d
    1074:	3e 85       	ldd	r19, Y+14	; 0x0e
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	16 d3       	rcall	.+1580   	; 0x16b0 <__muldi3>
    1084:	2d 87       	std	Y+13, r18	; 0x0d
    1086:	3e 8b       	std	Y+22, r19	; 0x16
    1088:	44 2e       	mov	r4, r20
    108a:	58 8f       	std	Y+24, r21	; 0x18
    108c:	6e 8f       	std	Y+30, r22	; 0x1e
    108e:	7f 8f       	std	Y+31, r23	; 0x1f
    1090:	88 a3       	std	Y+32, r24	; 0x20
    1092:	99 a3       	std	Y+33, r25	; 0x21
			powervalue /= 1000; //gives average power in (mW)
    1094:	48 ee       	ldi	r20, 0xE8	; 232
    1096:	a4 2e       	mov	r10, r20
    1098:	e3 e0       	ldi	r30, 0x03	; 3
    109a:	be 2e       	mov	r11, r30
    109c:	c1 2c       	mov	r12, r1
    109e:	d1 2c       	mov	r13, r1
    10a0:	e1 2c       	mov	r14, r1
    10a2:	f1 2c       	mov	r15, r1
    10a4:	00 e0       	ldi	r16, 0x00	; 0
    10a6:	10 e0       	ldi	r17, 0x00	; 0
    10a8:	44 2d       	mov	r20, r4
    10aa:	55 d3       	rcall	.+1706   	; 0x1756 <__udivdi3>
    10ac:	2a a3       	std	Y+34, r18	; 0x22
    10ae:	3b a3       	std	Y+35, r19	; 0x23
    10b0:	4c a3       	std	Y+36, r20	; 0x24
    10b2:	55 2e       	mov	r5, r21
    10b4:	3b 01       	movw	r6, r22
    10b6:	4c 01       	movw	r8, r24
    10b8:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <__data_end>
    10bc:	30 93 a3 00 	sts	0x00A3, r19	; 0x8000a3 <__data_end+0x1>
    10c0:	40 93 a4 00 	sts	0x00A4, r20	; 0x8000a4 <__data_end+0x2>
    10c4:	50 93 a5 00 	sts	0x00A5, r21	; 0x8000a5 <__data_end+0x3>
    10c8:	60 93 a6 00 	sts	0x00A6, r22	; 0x8000a6 <__data_end+0x4>
    10cc:	70 92 a7 00 	sts	0x00A7, r7	; 0x8000a7 <__data_end+0x5>
    10d0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__data_end+0x6>
    10d4:	90 92 a9 00 	sts	0x00A9, r9	; 0x8000a9 <__data_end+0x7>
			//sprintf(buf,"current = %u\n",powervalue);
			//uart_transmit_string(buf);
			//put all the found circuit parameters into the proper format for transmission)
			voltleft = voltagereading/1000;
    10d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10da:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10dc:	68 ee       	ldi	r22, 0xE8	; 232
    10de:	73 e0       	ldi	r23, 0x03	; 3
    10e0:	9b d2       	rcall	.+1334   	; 0x1618 <__udivmodhi4>
    10e2:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <voltleft+0x1>
    10e6:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <voltleft>
			voltright = voltagereading % 1000;
    10ea:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
    10ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			
			uint32_t freqfull = backemffreq * 0.25; //total frequency = f(T/4) / 4
    10f2:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <backemffreq>
    10f6:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <backemffreq+0x1>
    10fa:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <backemffreq+0x2>
    10fe:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <backemffreq+0x3>
    1102:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <backemffreq+0x4>
    1106:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <backemffreq+0x5>
    110a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <backemffreq+0x6>
    110e:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <backemffreq+0x7>
    1112:	0b d1       	rcall	.+534    	; 0x132a <__floatundisf>
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e8       	ldi	r20, 0x80	; 128
    111a:	5e e3       	ldi	r21, 0x3E	; 62
    111c:	7d d1       	rcall	.+762    	; 0x1418 <__mulsf3>
    111e:	9c d0       	rcall	.+312    	; 0x1258 <__fixunssfsi>
			freqleft = freqfull/1000;
    1120:	28 ee       	ldi	r18, 0xE8	; 232
    1122:	33 e0       	ldi	r19, 0x03	; 3
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	8b d2       	rcall	.+1302   	; 0x1640 <__udivmodsi4>
    112a:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <freqleft+0x1>
    112e:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <freqleft>
			freqright = freqfull % 1000;
    1132:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <freqright+0x1>
    1136:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <freqright>
			
			current = currentvalue; //current is already in mA
    113a:	9b 85       	ldd	r25, Y+11	; 0x0b
    113c:	8d 89       	ldd	r24, Y+21	; 0x15
    113e:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <current>
    1142:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <current+0x1>
			
			powerleft = powervalue / 1000;
    1146:	f0 e4       	ldi	r31, 0x40	; 64
    1148:	af 2e       	mov	r10, r31
    114a:	a2 e4       	ldi	r26, 0x42	; 66
    114c:	ba 2e       	mov	r11, r26
    114e:	bf e0       	ldi	r27, 0x0F	; 15
    1150:	cb 2e       	mov	r12, r27
    1152:	f1 2c       	mov	r15, r1
    1154:	2d 85       	ldd	r18, Y+13	; 0x0d
    1156:	3e 89       	ldd	r19, Y+22	; 0x16
    1158:	44 2d       	mov	r20, r4
    115a:	58 8d       	ldd	r21, Y+24	; 0x18
    115c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    115e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1160:	88 a1       	ldd	r24, Y+32	; 0x20
    1162:	99 a1       	ldd	r25, Y+33	; 0x21
    1164:	f8 d2       	rcall	.+1520   	; 0x1756 <__udivdi3>
    1166:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <powerleft+0x1>
    116a:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <powerleft>
			powerright = powervalue % 1000;
    116e:	88 ee       	ldi	r24, 0xE8	; 232
    1170:	a8 2e       	mov	r10, r24
    1172:	93 e0       	ldi	r25, 0x03	; 3
    1174:	b9 2e       	mov	r11, r25
    1176:	c1 2c       	mov	r12, r1
    1178:	2a a1       	ldd	r18, Y+34	; 0x22
    117a:	3b a1       	ldd	r19, Y+35	; 0x23
    117c:	4c a1       	ldd	r20, Y+36	; 0x24
    117e:	55 2d       	mov	r21, r5
    1180:	b3 01       	movw	r22, r6
    1182:	c4 01       	movw	r24, r8
    1184:	e6 d2       	rcall	.+1484   	; 0x1752 <__umoddi3>
    1186:	30 93 6b 00 	sts	0x006B, r19	; 0x80006b <powerright+0x1>
    118a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <powerright>
			
			//reset ADC indices
			current_i = 0;
    118e:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <current_i+0x1>
    1192:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <current_i>
			currentreadingindex = 0;
    1196:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <currentreadingindex+0x1>
    119a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <currentreadingindex>
    119e:	cc c9       	rjmp	.-3176   	; 0x538 <__stack+0xd9>

000011a0 <uart_init>:
 */ 

#include "uart.h"

void uart_init(){
	UCSRB |= (1<<TXEN); //set transmit and receive bit
    11a0:	53 9a       	sbi	0x0a, 3	; 10
	UCSRB |= (1<<RXCIE);
    11a2:	57 9a       	sbi	0x0a, 7	; 10
	UBRRH = (ubrrvalue >> 8); //load baud rate register with calculated value
    11a4:	10 bc       	out	0x20, r1	; 32
	UBRRL = ubrrvalue;
    11a6:	87 e6       	ldi	r24, 0x67	; 103
    11a8:	89 b9       	out	0x09, r24	; 9
	UCSRC |= ((1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0)); //set 8 bit character size
    11aa:	80 b5       	in	r24, 0x20	; 32
    11ac:	86 68       	ori	r24, 0x86	; 134
    11ae:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1<<UMSEL); //Set Asynchronous operation
    11b0:	80 b5       	in	r24, 0x20	; 32
    11b2:	8f 7b       	andi	r24, 0xBF	; 191
    11b4:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1<<UCSZ2); //set 8 bit character size
    11b6:	80 b5       	in	r24, 0x20	; 32
    11b8:	8b 7f       	andi	r24, 0xFB	; 251
    11ba:	80 bd       	out	0x20, r24	; 32
    11bc:	08 95       	ret

000011be <uart_transmit>:
		stringtransmit++;
	}
}

void uart_transmit(uint8_t data){
	while (UDREMPTY == 0){ //wait for buffer to empty
    11be:	5d 9b       	sbis	0x0b, 5	; 11
    11c0:	fe cf       	rjmp	.-4      	; 0x11be <uart_transmit>
	}
	UDR = data; //load data register with data byte
    11c2:	8c b9       	out	0x0c, r24	; 12
    11c4:	08 95       	ret

000011c6 <uart_transmit_string>:
	UCSRC &= ~(1<<UMSEL); //Set Asynchronous operation
	UCSRC &= ~(1<<UCSZ2); //set 8 bit character size
}

//Transmitter
void uart_transmit_string(char* stringtransmit){
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	ec 01       	movw	r28, r24
	while (*stringtransmit != 0x00){
    11cc:	89 91       	ld	r24, Y+
    11ce:	88 23       	and	r24, r24
    11d0:	11 f0       	breq	.+4      	; 0x11d6 <uart_transmit_string+0x10>
		uart_transmit(*stringtransmit);
    11d2:	f5 df       	rcall	.-22     	; 0x11be <uart_transmit>
    11d4:	fb cf       	rjmp	.-10     	; 0x11cc <uart_transmit_string+0x6>
		stringtransmit++;
	}
}
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <uart_receive>:
	UDR = data; //load data register with data byte
}

//Receiver
char uart_receive(){
	while (RXCOMP == 0){ //wait for receive to be completed
    11dc:	5f 9b       	sbis	0x0b, 7	; 11
    11de:	fe cf       	rjmp	.-4      	; 0x11dc <uart_receive>
	}
	return UDR; //load data register with data byte
    11e0:	8c b1       	in	r24, 0x0c	; 12
    11e2:	08 95       	ret

000011e4 <__fixsfdi>:
    11e4:	be e3       	ldi	r27, 0x3E	; 62
    11e6:	04 d0       	rcall	.+8      	; 0x11f0 <__fixunssfdi+0x2>
    11e8:	08 f4       	brcc	.+2      	; 0x11ec <__fixsfdi+0x8>
    11ea:	90 e8       	ldi	r25, 0x80	; 128
    11ec:	08 95       	ret

000011ee <__fixunssfdi>:
    11ee:	bf e3       	ldi	r27, 0x3F	; 63
    11f0:	22 27       	eor	r18, r18
    11f2:	33 27       	eor	r19, r19
    11f4:	a9 01       	movw	r20, r18
    11f6:	ef d0       	rcall	.+478    	; 0x13d6 <__fp_splitA>
    11f8:	58 f1       	brcs	.+86     	; 0x1250 <__fixunssfdi+0x62>
    11fa:	9f 57       	subi	r25, 0x7F	; 127
    11fc:	40 f1       	brcs	.+80     	; 0x124e <__fixunssfdi+0x60>
    11fe:	b9 17       	cp	r27, r25
    1200:	38 f1       	brcs	.+78     	; 0x1250 <__fixunssfdi+0x62>
    1202:	bf e3       	ldi	r27, 0x3F	; 63
    1204:	b9 1b       	sub	r27, r25
    1206:	99 27       	eor	r25, r25
    1208:	b8 50       	subi	r27, 0x08	; 8
    120a:	3a f4       	brpl	.+14     	; 0x121a <__fixunssfdi+0x2c>
    120c:	66 0f       	add	r22, r22
    120e:	77 1f       	adc	r23, r23
    1210:	88 1f       	adc	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	b3 95       	inc	r27
    1216:	d2 f3       	brmi	.-12     	; 0x120c <__fixunssfdi+0x1e>
    1218:	16 c0       	rjmp	.+44     	; 0x1246 <__fixunssfdi+0x58>
    121a:	b8 50       	subi	r27, 0x08	; 8
    121c:	4a f0       	brmi	.+18     	; 0x1230 <__fixunssfdi+0x42>
    121e:	23 2f       	mov	r18, r19
    1220:	34 2f       	mov	r19, r20
    1222:	45 2f       	mov	r20, r21
    1224:	56 2f       	mov	r21, r22
    1226:	67 2f       	mov	r22, r23
    1228:	78 2f       	mov	r23, r24
    122a:	88 27       	eor	r24, r24
    122c:	b8 50       	subi	r27, 0x08	; 8
    122e:	ba f7       	brpl	.-18     	; 0x121e <__fixunssfdi+0x30>
    1230:	b8 5f       	subi	r27, 0xF8	; 248
    1232:	49 f0       	breq	.+18     	; 0x1246 <__fixunssfdi+0x58>
    1234:	86 95       	lsr	r24
    1236:	77 95       	ror	r23
    1238:	67 95       	ror	r22
    123a:	57 95       	ror	r21
    123c:	47 95       	ror	r20
    123e:	37 95       	ror	r19
    1240:	27 95       	ror	r18
    1242:	ba 95       	dec	r27
    1244:	b9 f7       	brne	.-18     	; 0x1234 <__fixunssfdi+0x46>
    1246:	0e f4       	brtc	.+2      	; 0x124a <__fixunssfdi+0x5c>
    1248:	ae d0       	rcall	.+348    	; 0x13a6 <__fp_negdi>
    124a:	88 94       	clc
    124c:	08 95       	ret
    124e:	88 94       	clc
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	cb 01       	movw	r24, r22
    1256:	08 95       	ret

00001258 <__fixunssfsi>:
    1258:	be d0       	rcall	.+380    	; 0x13d6 <__fp_splitA>
    125a:	88 f0       	brcs	.+34     	; 0x127e <__fixunssfsi+0x26>
    125c:	9f 57       	subi	r25, 0x7F	; 127
    125e:	90 f0       	brcs	.+36     	; 0x1284 <__fixunssfsi+0x2c>
    1260:	b9 2f       	mov	r27, r25
    1262:	99 27       	eor	r25, r25
    1264:	b7 51       	subi	r27, 0x17	; 23
    1266:	a0 f0       	brcs	.+40     	; 0x1290 <__fixunssfsi+0x38>
    1268:	d1 f0       	breq	.+52     	; 0x129e <__fixunssfsi+0x46>
    126a:	66 0f       	add	r22, r22
    126c:	77 1f       	adc	r23, r23
    126e:	88 1f       	adc	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	1a f0       	brmi	.+6      	; 0x127a <__fixunssfsi+0x22>
    1274:	ba 95       	dec	r27
    1276:	c9 f7       	brne	.-14     	; 0x126a <__fixunssfsi+0x12>
    1278:	12 c0       	rjmp	.+36     	; 0x129e <__fixunssfsi+0x46>
    127a:	b1 30       	cpi	r27, 0x01	; 1
    127c:	81 f0       	breq	.+32     	; 0x129e <__fixunssfsi+0x46>
    127e:	c5 d0       	rcall	.+394    	; 0x140a <__fp_zero>
    1280:	b1 e0       	ldi	r27, 0x01	; 1
    1282:	08 95       	ret
    1284:	c2 c0       	rjmp	.+388    	; 0x140a <__fp_zero>
    1286:	67 2f       	mov	r22, r23
    1288:	78 2f       	mov	r23, r24
    128a:	88 27       	eor	r24, r24
    128c:	b8 5f       	subi	r27, 0xF8	; 248
    128e:	39 f0       	breq	.+14     	; 0x129e <__fixunssfsi+0x46>
    1290:	b9 3f       	cpi	r27, 0xF9	; 249
    1292:	cc f3       	brlt	.-14     	; 0x1286 <__fixunssfsi+0x2e>
    1294:	86 95       	lsr	r24
    1296:	77 95       	ror	r23
    1298:	67 95       	ror	r22
    129a:	b3 95       	inc	r27
    129c:	d9 f7       	brne	.-10     	; 0x1294 <__fixunssfsi+0x3c>
    129e:	3e f4       	brtc	.+14     	; 0x12ae <__fixunssfsi+0x56>
    12a0:	90 95       	com	r25
    12a2:	80 95       	com	r24
    12a4:	70 95       	com	r23
    12a6:	61 95       	neg	r22
    12a8:	7f 4f       	sbci	r23, 0xFF	; 255
    12aa:	8f 4f       	sbci	r24, 0xFF	; 255
    12ac:	9f 4f       	sbci	r25, 0xFF	; 255
    12ae:	08 95       	ret

000012b0 <__floatunsisf>:
    12b0:	e8 94       	clt
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <__floatsisf+0x12>

000012b4 <__floatsisf>:
    12b4:	97 fb       	bst	r25, 7
    12b6:	3e f4       	brtc	.+14     	; 0x12c6 <__floatsisf+0x12>
    12b8:	90 95       	com	r25
    12ba:	80 95       	com	r24
    12bc:	70 95       	com	r23
    12be:	61 95       	neg	r22
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	8f 4f       	sbci	r24, 0xFF	; 255
    12c4:	9f 4f       	sbci	r25, 0xFF	; 255
    12c6:	99 23       	and	r25, r25
    12c8:	a9 f0       	breq	.+42     	; 0x12f4 <__floatsisf+0x40>
    12ca:	f9 2f       	mov	r31, r25
    12cc:	96 e9       	ldi	r25, 0x96	; 150
    12ce:	bb 27       	eor	r27, r27
    12d0:	93 95       	inc	r25
    12d2:	f6 95       	lsr	r31
    12d4:	87 95       	ror	r24
    12d6:	77 95       	ror	r23
    12d8:	67 95       	ror	r22
    12da:	b7 95       	ror	r27
    12dc:	f1 11       	cpse	r31, r1
    12de:	f8 cf       	rjmp	.-16     	; 0x12d0 <__floatsisf+0x1c>
    12e0:	fa f4       	brpl	.+62     	; 0x1320 <__floatsisf+0x6c>
    12e2:	bb 0f       	add	r27, r27
    12e4:	11 f4       	brne	.+4      	; 0x12ea <__floatsisf+0x36>
    12e6:	60 ff       	sbrs	r22, 0
    12e8:	1b c0       	rjmp	.+54     	; 0x1320 <__floatsisf+0x6c>
    12ea:	6f 5f       	subi	r22, 0xFF	; 255
    12ec:	7f 4f       	sbci	r23, 0xFF	; 255
    12ee:	8f 4f       	sbci	r24, 0xFF	; 255
    12f0:	9f 4f       	sbci	r25, 0xFF	; 255
    12f2:	16 c0       	rjmp	.+44     	; 0x1320 <__floatsisf+0x6c>
    12f4:	88 23       	and	r24, r24
    12f6:	11 f0       	breq	.+4      	; 0x12fc <__floatsisf+0x48>
    12f8:	96 e9       	ldi	r25, 0x96	; 150
    12fa:	11 c0       	rjmp	.+34     	; 0x131e <__floatsisf+0x6a>
    12fc:	77 23       	and	r23, r23
    12fe:	21 f0       	breq	.+8      	; 0x1308 <__floatsisf+0x54>
    1300:	9e e8       	ldi	r25, 0x8E	; 142
    1302:	87 2f       	mov	r24, r23
    1304:	76 2f       	mov	r23, r22
    1306:	05 c0       	rjmp	.+10     	; 0x1312 <__floatsisf+0x5e>
    1308:	66 23       	and	r22, r22
    130a:	71 f0       	breq	.+28     	; 0x1328 <__floatsisf+0x74>
    130c:	96 e8       	ldi	r25, 0x86	; 134
    130e:	86 2f       	mov	r24, r22
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	2a f0       	brmi	.+10     	; 0x1320 <__floatsisf+0x6c>
    1316:	9a 95       	dec	r25
    1318:	66 0f       	add	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	88 1f       	adc	r24, r24
    131e:	da f7       	brpl	.-10     	; 0x1316 <__floatsisf+0x62>
    1320:	88 0f       	add	r24, r24
    1322:	96 95       	lsr	r25
    1324:	87 95       	ror	r24
    1326:	97 f9       	bld	r25, 7
    1328:	08 95       	ret

0000132a <__floatundisf>:
    132a:	e8 94       	clt

0000132c <__fp_di2sf>:
    132c:	f9 2f       	mov	r31, r25
    132e:	96 eb       	ldi	r25, 0xB6	; 182
    1330:	ff 23       	and	r31, r31
    1332:	81 f0       	breq	.+32     	; 0x1354 <__fp_di2sf+0x28>
    1334:	12 16       	cp	r1, r18
    1336:	13 06       	cpc	r1, r19
    1338:	14 06       	cpc	r1, r20
    133a:	44 0b       	sbc	r20, r20
    133c:	93 95       	inc	r25
    133e:	f6 95       	lsr	r31
    1340:	87 95       	ror	r24
    1342:	77 95       	ror	r23
    1344:	67 95       	ror	r22
    1346:	57 95       	ror	r21
    1348:	40 40       	sbci	r20, 0x00	; 0
    134a:	ff 23       	and	r31, r31
    134c:	b9 f7       	brne	.-18     	; 0x133c <__fp_di2sf+0x10>
    134e:	1b c0       	rjmp	.+54     	; 0x1386 <__fp_di2sf+0x5a>
    1350:	99 27       	eor	r25, r25
    1352:	08 95       	ret
    1354:	88 23       	and	r24, r24
    1356:	51 f4       	brne	.+20     	; 0x136c <__fp_di2sf+0x40>
    1358:	98 50       	subi	r25, 0x08	; 8
    135a:	d2 f7       	brpl	.-12     	; 0x1350 <__fp_di2sf+0x24>
    135c:	87 2b       	or	r24, r23
    135e:	76 2f       	mov	r23, r22
    1360:	65 2f       	mov	r22, r21
    1362:	54 2f       	mov	r21, r20
    1364:	43 2f       	mov	r20, r19
    1366:	32 2f       	mov	r19, r18
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	b1 f3       	breq	.-20     	; 0x1358 <__fp_di2sf+0x2c>
    136c:	12 16       	cp	r1, r18
    136e:	13 06       	cpc	r1, r19
    1370:	14 06       	cpc	r1, r20
    1372:	44 0b       	sbc	r20, r20
    1374:	88 23       	and	r24, r24
    1376:	3a f0       	brmi	.+14     	; 0x1386 <__fp_di2sf+0x5a>
    1378:	9a 95       	dec	r25
    137a:	44 0f       	add	r20, r20
    137c:	55 1f       	adc	r21, r21
    137e:	66 1f       	adc	r22, r22
    1380:	77 1f       	adc	r23, r23
    1382:	88 1f       	adc	r24, r24
    1384:	ca f7       	brpl	.-14     	; 0x1378 <__fp_di2sf+0x4c>
    1386:	55 23       	and	r21, r21
    1388:	4a f4       	brpl	.+18     	; 0x139c <__fp_di2sf+0x70>
    138a:	44 0f       	add	r20, r20
    138c:	55 1f       	adc	r21, r21
    138e:	11 f4       	brne	.+4      	; 0x1394 <__fp_di2sf+0x68>
    1390:	60 ff       	sbrs	r22, 0
    1392:	04 c0       	rjmp	.+8      	; 0x139c <__fp_di2sf+0x70>
    1394:	6f 5f       	subi	r22, 0xFF	; 255
    1396:	7f 4f       	sbci	r23, 0xFF	; 255
    1398:	8f 4f       	sbci	r24, 0xFF	; 255
    139a:	9f 4f       	sbci	r25, 0xFF	; 255
    139c:	88 0f       	add	r24, r24
    139e:	96 95       	lsr	r25
    13a0:	87 95       	ror	r24
    13a2:	97 f9       	bld	r25, 7
    13a4:	08 95       	ret

000013a6 <__fp_negdi>:
    13a6:	90 95       	com	r25
    13a8:	80 95       	com	r24
    13aa:	70 95       	com	r23
    13ac:	60 95       	com	r22
    13ae:	50 95       	com	r21
    13b0:	40 95       	com	r20
    13b2:	30 95       	com	r19
    13b4:	21 95       	neg	r18
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	4f 4f       	sbci	r20, 0xFF	; 255
    13ba:	5f 4f       	sbci	r21, 0xFF	; 255
    13bc:	6f 4f       	sbci	r22, 0xFF	; 255
    13be:	7f 4f       	sbci	r23, 0xFF	; 255
    13c0:	8f 4f       	sbci	r24, 0xFF	; 255
    13c2:	9f 4f       	sbci	r25, 0xFF	; 255
    13c4:	08 95       	ret

000013c6 <__fp_split3>:
    13c6:	57 fd       	sbrc	r21, 7
    13c8:	90 58       	subi	r25, 0x80	; 128
    13ca:	44 0f       	add	r20, r20
    13cc:	55 1f       	adc	r21, r21
    13ce:	59 f0       	breq	.+22     	; 0x13e6 <__fp_splitA+0x10>
    13d0:	5f 3f       	cpi	r21, 0xFF	; 255
    13d2:	71 f0       	breq	.+28     	; 0x13f0 <__fp_splitA+0x1a>
    13d4:	47 95       	ror	r20

000013d6 <__fp_splitA>:
    13d6:	88 0f       	add	r24, r24
    13d8:	97 fb       	bst	r25, 7
    13da:	99 1f       	adc	r25, r25
    13dc:	61 f0       	breq	.+24     	; 0x13f6 <__fp_splitA+0x20>
    13de:	9f 3f       	cpi	r25, 0xFF	; 255
    13e0:	79 f0       	breq	.+30     	; 0x1400 <__fp_splitA+0x2a>
    13e2:	87 95       	ror	r24
    13e4:	08 95       	ret
    13e6:	12 16       	cp	r1, r18
    13e8:	13 06       	cpc	r1, r19
    13ea:	14 06       	cpc	r1, r20
    13ec:	55 1f       	adc	r21, r21
    13ee:	f2 cf       	rjmp	.-28     	; 0x13d4 <__fp_split3+0xe>
    13f0:	46 95       	lsr	r20
    13f2:	f1 df       	rcall	.-30     	; 0x13d6 <__fp_splitA>
    13f4:	08 c0       	rjmp	.+16     	; 0x1406 <__fp_splitA+0x30>
    13f6:	16 16       	cp	r1, r22
    13f8:	17 06       	cpc	r1, r23
    13fa:	18 06       	cpc	r1, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	f1 cf       	rjmp	.-30     	; 0x13e2 <__fp_splitA+0xc>
    1400:	86 95       	lsr	r24
    1402:	71 05       	cpc	r23, r1
    1404:	61 05       	cpc	r22, r1
    1406:	08 94       	sec
    1408:	08 95       	ret

0000140a <__fp_zero>:
    140a:	e8 94       	clt

0000140c <__fp_szero>:
    140c:	bb 27       	eor	r27, r27
    140e:	66 27       	eor	r22, r22
    1410:	77 27       	eor	r23, r23
    1412:	cb 01       	movw	r24, r22
    1414:	97 f9       	bld	r25, 7
    1416:	08 95       	ret

00001418 <__mulsf3>:
    1418:	0b d0       	rcall	.+22     	; 0x1430 <__mulsf3x>
    141a:	d2 c0       	rjmp	.+420    	; 0x15c0 <__fp_round>
    141c:	c3 d0       	rcall	.+390    	; 0x15a4 <__fp_pscA>
    141e:	28 f0       	brcs	.+10     	; 0x142a <__mulsf3+0x12>
    1420:	c8 d0       	rcall	.+400    	; 0x15b2 <__fp_pscB>
    1422:	18 f0       	brcs	.+6      	; 0x142a <__mulsf3+0x12>
    1424:	95 23       	and	r25, r21
    1426:	09 f0       	breq	.+2      	; 0x142a <__mulsf3+0x12>
    1428:	9f c0       	rjmp	.+318    	; 0x1568 <__fp_inf>
    142a:	b2 c0       	rjmp	.+356    	; 0x1590 <__fp_nan>
    142c:	11 24       	eor	r1, r1
    142e:	ee cf       	rjmp	.-36     	; 0x140c <__fp_szero>

00001430 <__mulsf3x>:
    1430:	ca df       	rcall	.-108    	; 0x13c6 <__fp_split3>
    1432:	a0 f3       	brcs	.-24     	; 0x141c <__mulsf3+0x4>

00001434 <__mulsf3_pse>:
    1434:	95 9f       	mul	r25, r21
    1436:	d1 f3       	breq	.-12     	; 0x142c <__mulsf3+0x14>
    1438:	95 0f       	add	r25, r21
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	55 1f       	adc	r21, r21
    143e:	62 9f       	mul	r22, r18
    1440:	f0 01       	movw	r30, r0
    1442:	72 9f       	mul	r23, r18
    1444:	bb 27       	eor	r27, r27
    1446:	f0 0d       	add	r31, r0
    1448:	b1 1d       	adc	r27, r1
    144a:	63 9f       	mul	r22, r19
    144c:	aa 27       	eor	r26, r26
    144e:	f0 0d       	add	r31, r0
    1450:	b1 1d       	adc	r27, r1
    1452:	aa 1f       	adc	r26, r26
    1454:	64 9f       	mul	r22, r20
    1456:	66 27       	eor	r22, r22
    1458:	b0 0d       	add	r27, r0
    145a:	a1 1d       	adc	r26, r1
    145c:	66 1f       	adc	r22, r22
    145e:	82 9f       	mul	r24, r18
    1460:	22 27       	eor	r18, r18
    1462:	b0 0d       	add	r27, r0
    1464:	a1 1d       	adc	r26, r1
    1466:	62 1f       	adc	r22, r18
    1468:	73 9f       	mul	r23, r19
    146a:	b0 0d       	add	r27, r0
    146c:	a1 1d       	adc	r26, r1
    146e:	62 1f       	adc	r22, r18
    1470:	83 9f       	mul	r24, r19
    1472:	a0 0d       	add	r26, r0
    1474:	61 1d       	adc	r22, r1
    1476:	22 1f       	adc	r18, r18
    1478:	74 9f       	mul	r23, r20
    147a:	33 27       	eor	r19, r19
    147c:	a0 0d       	add	r26, r0
    147e:	61 1d       	adc	r22, r1
    1480:	23 1f       	adc	r18, r19
    1482:	84 9f       	mul	r24, r20
    1484:	60 0d       	add	r22, r0
    1486:	21 1d       	adc	r18, r1
    1488:	82 2f       	mov	r24, r18
    148a:	76 2f       	mov	r23, r22
    148c:	6a 2f       	mov	r22, r26
    148e:	11 24       	eor	r1, r1
    1490:	9f 57       	subi	r25, 0x7F	; 127
    1492:	50 40       	sbci	r21, 0x00	; 0
    1494:	8a f0       	brmi	.+34     	; 0x14b8 <__mulsf3_pse+0x84>
    1496:	e1 f0       	breq	.+56     	; 0x14d0 <__mulsf3_pse+0x9c>
    1498:	88 23       	and	r24, r24
    149a:	4a f0       	brmi	.+18     	; 0x14ae <__mulsf3_pse+0x7a>
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	bb 1f       	adc	r27, r27
    14a2:	66 1f       	adc	r22, r22
    14a4:	77 1f       	adc	r23, r23
    14a6:	88 1f       	adc	r24, r24
    14a8:	91 50       	subi	r25, 0x01	; 1
    14aa:	50 40       	sbci	r21, 0x00	; 0
    14ac:	a9 f7       	brne	.-22     	; 0x1498 <__mulsf3_pse+0x64>
    14ae:	9e 3f       	cpi	r25, 0xFE	; 254
    14b0:	51 05       	cpc	r21, r1
    14b2:	70 f0       	brcs	.+28     	; 0x14d0 <__mulsf3_pse+0x9c>
    14b4:	59 c0       	rjmp	.+178    	; 0x1568 <__fp_inf>
    14b6:	aa cf       	rjmp	.-172    	; 0x140c <__fp_szero>
    14b8:	5f 3f       	cpi	r21, 0xFF	; 255
    14ba:	ec f3       	brlt	.-6      	; 0x14b6 <__mulsf3_pse+0x82>
    14bc:	98 3e       	cpi	r25, 0xE8	; 232
    14be:	dc f3       	brlt	.-10     	; 0x14b6 <__mulsf3_pse+0x82>
    14c0:	86 95       	lsr	r24
    14c2:	77 95       	ror	r23
    14c4:	67 95       	ror	r22
    14c6:	b7 95       	ror	r27
    14c8:	f7 95       	ror	r31
    14ca:	e7 95       	ror	r30
    14cc:	9f 5f       	subi	r25, 0xFF	; 255
    14ce:	c1 f7       	brne	.-16     	; 0x14c0 <__mulsf3_pse+0x8c>
    14d0:	fe 2b       	or	r31, r30
    14d2:	88 0f       	add	r24, r24
    14d4:	91 1d       	adc	r25, r1
    14d6:	96 95       	lsr	r25
    14d8:	87 95       	ror	r24
    14da:	97 f9       	bld	r25, 7
    14dc:	08 95       	ret
    14de:	11 f4       	brne	.+4      	; 0x14e4 <__mulsf3_pse+0xb0>
    14e0:	0e f4       	brtc	.+2      	; 0x14e4 <__mulsf3_pse+0xb0>
    14e2:	56 c0       	rjmp	.+172    	; 0x1590 <__fp_nan>
    14e4:	47 c0       	rjmp	.+142    	; 0x1574 <__fp_mpack>

000014e6 <sqrt>:
    14e6:	77 df       	rcall	.-274    	; 0x13d6 <__fp_splitA>
    14e8:	d0 f3       	brcs	.-12     	; 0x14de <__mulsf3_pse+0xaa>
    14ea:	99 23       	and	r25, r25
    14ec:	d9 f3       	breq	.-10     	; 0x14e4 <__mulsf3_pse+0xb0>
    14ee:	ce f3       	brts	.-14     	; 0x14e2 <__mulsf3_pse+0xae>
    14f0:	9f 57       	subi	r25, 0x7F	; 127
    14f2:	55 0b       	sbc	r21, r21
    14f4:	87 ff       	sbrs	r24, 7
    14f6:	4f d0       	rcall	.+158    	; 0x1596 <__fp_norm2>
    14f8:	00 24       	eor	r0, r0
    14fa:	a0 e6       	ldi	r26, 0x60	; 96
    14fc:	40 ea       	ldi	r20, 0xA0	; 160
    14fe:	90 01       	movw	r18, r0
    1500:	80 58       	subi	r24, 0x80	; 128
    1502:	56 95       	lsr	r21
    1504:	97 95       	ror	r25
    1506:	28 f4       	brcc	.+10     	; 0x1512 <sqrt+0x2c>
    1508:	80 5c       	subi	r24, 0xC0	; 192
    150a:	66 0f       	add	r22, r22
    150c:	77 1f       	adc	r23, r23
    150e:	88 1f       	adc	r24, r24
    1510:	20 f0       	brcs	.+8      	; 0x151a <sqrt+0x34>
    1512:	26 17       	cp	r18, r22
    1514:	37 07       	cpc	r19, r23
    1516:	48 07       	cpc	r20, r24
    1518:	30 f4       	brcc	.+12     	; 0x1526 <sqrt+0x40>
    151a:	62 1b       	sub	r22, r18
    151c:	73 0b       	sbc	r23, r19
    151e:	84 0b       	sbc	r24, r20
    1520:	20 29       	or	r18, r0
    1522:	31 29       	or	r19, r1
    1524:	4a 2b       	or	r20, r26
    1526:	a6 95       	lsr	r26
    1528:	17 94       	ror	r1
    152a:	07 94       	ror	r0
    152c:	20 25       	eor	r18, r0
    152e:	31 25       	eor	r19, r1
    1530:	4a 27       	eor	r20, r26
    1532:	58 f7       	brcc	.-42     	; 0x150a <sqrt+0x24>
    1534:	66 0f       	add	r22, r22
    1536:	77 1f       	adc	r23, r23
    1538:	88 1f       	adc	r24, r24
    153a:	20 f0       	brcs	.+8      	; 0x1544 <sqrt+0x5e>
    153c:	26 17       	cp	r18, r22
    153e:	37 07       	cpc	r19, r23
    1540:	48 07       	cpc	r20, r24
    1542:	30 f4       	brcc	.+12     	; 0x1550 <sqrt+0x6a>
    1544:	62 0b       	sbc	r22, r18
    1546:	73 0b       	sbc	r23, r19
    1548:	84 0b       	sbc	r24, r20
    154a:	20 0d       	add	r18, r0
    154c:	31 1d       	adc	r19, r1
    154e:	41 1d       	adc	r20, r1
    1550:	a0 95       	com	r26
    1552:	81 f7       	brne	.-32     	; 0x1534 <sqrt+0x4e>
    1554:	b9 01       	movw	r22, r18
    1556:	84 2f       	mov	r24, r20
    1558:	91 58       	subi	r25, 0x81	; 129
    155a:	88 0f       	add	r24, r24
    155c:	96 95       	lsr	r25
    155e:	87 95       	ror	r24
    1560:	08 95       	ret

00001562 <square>:
    1562:	9b 01       	movw	r18, r22
    1564:	ac 01       	movw	r20, r24
    1566:	58 cf       	rjmp	.-336    	; 0x1418 <__mulsf3>

00001568 <__fp_inf>:
    1568:	97 f9       	bld	r25, 7
    156a:	9f 67       	ori	r25, 0x7F	; 127
    156c:	80 e8       	ldi	r24, 0x80	; 128
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	08 95       	ret

00001574 <__fp_mpack>:
    1574:	9f 3f       	cpi	r25, 0xFF	; 255
    1576:	31 f0       	breq	.+12     	; 0x1584 <__fp_mpack_finite+0xc>

00001578 <__fp_mpack_finite>:
    1578:	91 50       	subi	r25, 0x01	; 1
    157a:	20 f4       	brcc	.+8      	; 0x1584 <__fp_mpack_finite+0xc>
    157c:	87 95       	ror	r24
    157e:	77 95       	ror	r23
    1580:	67 95       	ror	r22
    1582:	b7 95       	ror	r27
    1584:	88 0f       	add	r24, r24
    1586:	91 1d       	adc	r25, r1
    1588:	96 95       	lsr	r25
    158a:	87 95       	ror	r24
    158c:	97 f9       	bld	r25, 7
    158e:	08 95       	ret

00001590 <__fp_nan>:
    1590:	9f ef       	ldi	r25, 0xFF	; 255
    1592:	80 ec       	ldi	r24, 0xC0	; 192
    1594:	08 95       	ret

00001596 <__fp_norm2>:
    1596:	91 50       	subi	r25, 0x01	; 1
    1598:	50 40       	sbci	r21, 0x00	; 0
    159a:	66 0f       	add	r22, r22
    159c:	77 1f       	adc	r23, r23
    159e:	88 1f       	adc	r24, r24
    15a0:	d2 f7       	brpl	.-12     	; 0x1596 <__fp_norm2>
    15a2:	08 95       	ret

000015a4 <__fp_pscA>:
    15a4:	00 24       	eor	r0, r0
    15a6:	0a 94       	dec	r0
    15a8:	16 16       	cp	r1, r22
    15aa:	17 06       	cpc	r1, r23
    15ac:	18 06       	cpc	r1, r24
    15ae:	09 06       	cpc	r0, r25
    15b0:	08 95       	ret

000015b2 <__fp_pscB>:
    15b2:	00 24       	eor	r0, r0
    15b4:	0a 94       	dec	r0
    15b6:	12 16       	cp	r1, r18
    15b8:	13 06       	cpc	r1, r19
    15ba:	14 06       	cpc	r1, r20
    15bc:	05 06       	cpc	r0, r21
    15be:	08 95       	ret

000015c0 <__fp_round>:
    15c0:	09 2e       	mov	r0, r25
    15c2:	03 94       	inc	r0
    15c4:	00 0c       	add	r0, r0
    15c6:	11 f4       	brne	.+4      	; 0x15cc <__fp_round+0xc>
    15c8:	88 23       	and	r24, r24
    15ca:	52 f0       	brmi	.+20     	; 0x15e0 <__fp_round+0x20>
    15cc:	bb 0f       	add	r27, r27
    15ce:	40 f4       	brcc	.+16     	; 0x15e0 <__fp_round+0x20>
    15d0:	bf 2b       	or	r27, r31
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <__fp_round+0x18>
    15d4:	60 ff       	sbrs	r22, 0
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <__fp_round+0x20>
    15d8:	6f 5f       	subi	r22, 0xFF	; 255
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	8f 4f       	sbci	r24, 0xFF	; 255
    15de:	9f 4f       	sbci	r25, 0xFF	; 255
    15e0:	08 95       	ret

000015e2 <__mulsi3>:
    15e2:	db 01       	movw	r26, r22
    15e4:	8f 93       	push	r24
    15e6:	9f 93       	push	r25
    15e8:	59 d0       	rcall	.+178    	; 0x169c <__muluhisi3>
    15ea:	bf 91       	pop	r27
    15ec:	af 91       	pop	r26
    15ee:	a2 9f       	mul	r26, r18
    15f0:	80 0d       	add	r24, r0
    15f2:	91 1d       	adc	r25, r1
    15f4:	a3 9f       	mul	r26, r19
    15f6:	90 0d       	add	r25, r0
    15f8:	b2 9f       	mul	r27, r18
    15fa:	90 0d       	add	r25, r0
    15fc:	11 24       	eor	r1, r1
    15fe:	08 95       	ret

00001600 <__udivmodqi4>:
    1600:	99 1b       	sub	r25, r25
    1602:	79 e0       	ldi	r23, 0x09	; 9
    1604:	04 c0       	rjmp	.+8      	; 0x160e <__udivmodqi4_ep>

00001606 <__udivmodqi4_loop>:
    1606:	99 1f       	adc	r25, r25
    1608:	96 17       	cp	r25, r22
    160a:	08 f0       	brcs	.+2      	; 0x160e <__udivmodqi4_ep>
    160c:	96 1b       	sub	r25, r22

0000160e <__udivmodqi4_ep>:
    160e:	88 1f       	adc	r24, r24
    1610:	7a 95       	dec	r23
    1612:	c9 f7       	brne	.-14     	; 0x1606 <__udivmodqi4_loop>
    1614:	80 95       	com	r24
    1616:	08 95       	ret

00001618 <__udivmodhi4>:
    1618:	aa 1b       	sub	r26, r26
    161a:	bb 1b       	sub	r27, r27
    161c:	51 e1       	ldi	r21, 0x11	; 17
    161e:	07 c0       	rjmp	.+14     	; 0x162e <__udivmodhi4_ep>

00001620 <__udivmodhi4_loop>:
    1620:	aa 1f       	adc	r26, r26
    1622:	bb 1f       	adc	r27, r27
    1624:	a6 17       	cp	r26, r22
    1626:	b7 07       	cpc	r27, r23
    1628:	10 f0       	brcs	.+4      	; 0x162e <__udivmodhi4_ep>
    162a:	a6 1b       	sub	r26, r22
    162c:	b7 0b       	sbc	r27, r23

0000162e <__udivmodhi4_ep>:
    162e:	88 1f       	adc	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	5a 95       	dec	r21
    1634:	a9 f7       	brne	.-22     	; 0x1620 <__udivmodhi4_loop>
    1636:	80 95       	com	r24
    1638:	90 95       	com	r25
    163a:	bc 01       	movw	r22, r24
    163c:	cd 01       	movw	r24, r26
    163e:	08 95       	ret

00001640 <__udivmodsi4>:
    1640:	a1 e2       	ldi	r26, 0x21	; 33
    1642:	1a 2e       	mov	r1, r26
    1644:	aa 1b       	sub	r26, r26
    1646:	bb 1b       	sub	r27, r27
    1648:	fd 01       	movw	r30, r26
    164a:	0d c0       	rjmp	.+26     	; 0x1666 <__udivmodsi4_ep>

0000164c <__udivmodsi4_loop>:
    164c:	aa 1f       	adc	r26, r26
    164e:	bb 1f       	adc	r27, r27
    1650:	ee 1f       	adc	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	a2 17       	cp	r26, r18
    1656:	b3 07       	cpc	r27, r19
    1658:	e4 07       	cpc	r30, r20
    165a:	f5 07       	cpc	r31, r21
    165c:	20 f0       	brcs	.+8      	; 0x1666 <__udivmodsi4_ep>
    165e:	a2 1b       	sub	r26, r18
    1660:	b3 0b       	sbc	r27, r19
    1662:	e4 0b       	sbc	r30, r20
    1664:	f5 0b       	sbc	r31, r21

00001666 <__udivmodsi4_ep>:
    1666:	66 1f       	adc	r22, r22
    1668:	77 1f       	adc	r23, r23
    166a:	88 1f       	adc	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	1a 94       	dec	r1
    1670:	69 f7       	brne	.-38     	; 0x164c <__udivmodsi4_loop>
    1672:	60 95       	com	r22
    1674:	70 95       	com	r23
    1676:	80 95       	com	r24
    1678:	90 95       	com	r25
    167a:	9b 01       	movw	r18, r22
    167c:	ac 01       	movw	r20, r24
    167e:	bd 01       	movw	r22, r26
    1680:	cf 01       	movw	r24, r30
    1682:	08 95       	ret

00001684 <__umulhisi3>:
    1684:	a2 9f       	mul	r26, r18
    1686:	b0 01       	movw	r22, r0
    1688:	b3 9f       	mul	r27, r19
    168a:	c0 01       	movw	r24, r0
    168c:	a3 9f       	mul	r26, r19
    168e:	01 d0       	rcall	.+2      	; 0x1692 <__umulhisi3+0xe>
    1690:	b2 9f       	mul	r27, r18
    1692:	70 0d       	add	r23, r0
    1694:	81 1d       	adc	r24, r1
    1696:	11 24       	eor	r1, r1
    1698:	91 1d       	adc	r25, r1
    169a:	08 95       	ret

0000169c <__muluhisi3>:
    169c:	f3 df       	rcall	.-26     	; 0x1684 <__umulhisi3>
    169e:	a5 9f       	mul	r26, r21
    16a0:	90 0d       	add	r25, r0
    16a2:	b4 9f       	mul	r27, r20
    16a4:	90 0d       	add	r25, r0
    16a6:	a4 9f       	mul	r26, r20
    16a8:	80 0d       	add	r24, r0
    16aa:	91 1d       	adc	r25, r1
    16ac:	11 24       	eor	r1, r1
    16ae:	08 95       	ret

000016b0 <__muldi3>:
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	1f 93       	push	r17
    16b6:	0f 93       	push	r16
    16b8:	9a 9d       	mul	r25, r10
    16ba:	f0 2d       	mov	r31, r0
    16bc:	21 9f       	mul	r18, r17
    16be:	f0 0d       	add	r31, r0
    16c0:	8b 9d       	mul	r24, r11
    16c2:	f0 0d       	add	r31, r0
    16c4:	8a 9d       	mul	r24, r10
    16c6:	e0 2d       	mov	r30, r0
    16c8:	f1 0d       	add	r31, r1
    16ca:	03 9f       	mul	r16, r19
    16cc:	f0 0d       	add	r31, r0
    16ce:	02 9f       	mul	r16, r18
    16d0:	e0 0d       	add	r30, r0
    16d2:	f1 1d       	adc	r31, r1
    16d4:	4e 9d       	mul	r20, r14
    16d6:	e0 0d       	add	r30, r0
    16d8:	f1 1d       	adc	r31, r1
    16da:	5e 9d       	mul	r21, r14
    16dc:	f0 0d       	add	r31, r0
    16de:	4f 9d       	mul	r20, r15
    16e0:	f0 0d       	add	r31, r0
    16e2:	7f 93       	push	r23
    16e4:	6f 93       	push	r22
    16e6:	bf 92       	push	r11
    16e8:	af 92       	push	r10
    16ea:	5f 93       	push	r21
    16ec:	4f 93       	push	r20
    16ee:	d5 01       	movw	r26, r10
    16f0:	c9 df       	rcall	.-110    	; 0x1684 <__umulhisi3>
    16f2:	8b 01       	movw	r16, r22
    16f4:	ac 01       	movw	r20, r24
    16f6:	d7 01       	movw	r26, r14
    16f8:	c5 df       	rcall	.-118    	; 0x1684 <__umulhisi3>
    16fa:	eb 01       	movw	r28, r22
    16fc:	e8 0f       	add	r30, r24
    16fe:	f9 1f       	adc	r31, r25
    1700:	d6 01       	movw	r26, r12
    1702:	1f d0       	rcall	.+62     	; 0x1742 <__muldi3_6>
    1704:	2f 91       	pop	r18
    1706:	3f 91       	pop	r19
    1708:	d6 01       	movw	r26, r12
    170a:	bc df       	rcall	.-136    	; 0x1684 <__umulhisi3>
    170c:	c6 0f       	add	r28, r22
    170e:	d7 1f       	adc	r29, r23
    1710:	e8 1f       	adc	r30, r24
    1712:	f9 1f       	adc	r31, r25
    1714:	af 91       	pop	r26
    1716:	bf 91       	pop	r27
    1718:	14 d0       	rcall	.+40     	; 0x1742 <__muldi3_6>
    171a:	2f 91       	pop	r18
    171c:	3f 91       	pop	r19
    171e:	b2 df       	rcall	.-156    	; 0x1684 <__umulhisi3>
    1720:	c6 0f       	add	r28, r22
    1722:	d7 1f       	adc	r29, r23
    1724:	e8 1f       	adc	r30, r24
    1726:	f9 1f       	adc	r31, r25
    1728:	d6 01       	movw	r26, r12
    172a:	ac df       	rcall	.-168    	; 0x1684 <__umulhisi3>
    172c:	e6 0f       	add	r30, r22
    172e:	f7 1f       	adc	r31, r23
    1730:	98 01       	movw	r18, r16
    1732:	be 01       	movw	r22, r28
    1734:	cf 01       	movw	r24, r30
    1736:	11 24       	eor	r1, r1
    1738:	0f 91       	pop	r16
    173a:	1f 91       	pop	r17
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <__muldi3_6>:
    1742:	a0 df       	rcall	.-192    	; 0x1684 <__umulhisi3>
    1744:	46 0f       	add	r20, r22
    1746:	57 1f       	adc	r21, r23
    1748:	c8 1f       	adc	r28, r24
    174a:	d9 1f       	adc	r29, r25
    174c:	08 f4       	brcc	.+2      	; 0x1750 <__muldi3_6+0xe>
    174e:	31 96       	adiw	r30, 0x01	; 1
    1750:	08 95       	ret

00001752 <__umoddi3>:
    1752:	68 94       	set
    1754:	01 c0       	rjmp	.+2      	; 0x1758 <__udivdi3_umoddi3>

00001756 <__udivdi3>:
    1756:	e8 94       	clt

00001758 <__udivdi3_umoddi3>:
    1758:	8f 92       	push	r8
    175a:	9f 92       	push	r9
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	05 d0       	rcall	.+10     	; 0x176c <__udivmod64>
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	9f 90       	pop	r9
    1768:	8f 90       	pop	r8
    176a:	08 95       	ret

0000176c <__udivmod64>:
    176c:	88 24       	eor	r8, r8
    176e:	99 24       	eor	r9, r9
    1770:	f4 01       	movw	r30, r8
    1772:	e4 01       	movw	r28, r8
    1774:	b0 e4       	ldi	r27, 0x40	; 64
    1776:	1b 2e       	mov	r1, r27
    1778:	d4 01       	movw	r26, r8
    177a:	9d 15       	cp	r25, r13
    177c:	8e 04       	cpc	r8, r14
    177e:	9f 04       	cpc	r9, r15
    1780:	e0 07       	cpc	r30, r16
    1782:	f1 07       	cpc	r31, r17
    1784:	38 f4       	brcc	.+14     	; 0x1794 <__udivmod64+0x28>
    1786:	fc 01       	movw	r30, r24
    1788:	4b 01       	movw	r8, r22
    178a:	ca 01       	movw	r24, r20
    178c:	b9 01       	movw	r22, r18
    178e:	ad 01       	movw	r20, r26
    1790:	9e 01       	movw	r18, r28
    1792:	16 94       	lsr	r1
    1794:	22 0f       	add	r18, r18
    1796:	33 1f       	adc	r19, r19
    1798:	44 1f       	adc	r20, r20
    179a:	55 1f       	adc	r21, r21
    179c:	66 1f       	adc	r22, r22
    179e:	77 1f       	adc	r23, r23
    17a0:	88 1f       	adc	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	88 1c       	adc	r8, r8
    17a6:	99 1c       	adc	r9, r9
    17a8:	ee 1f       	adc	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	cc 1f       	adc	r28, r28
    17ae:	dd 1f       	adc	r29, r29
    17b0:	aa 1f       	adc	r26, r26
    17b2:	bb 1f       	adc	r27, r27
    17b4:	8a 14       	cp	r8, r10
    17b6:	9b 04       	cpc	r9, r11
    17b8:	ec 05       	cpc	r30, r12
    17ba:	fd 05       	cpc	r31, r13
    17bc:	ce 05       	cpc	r28, r14
    17be:	df 05       	cpc	r29, r15
    17c0:	a0 07       	cpc	r26, r16
    17c2:	b1 07       	cpc	r27, r17
    17c4:	48 f0       	brcs	.+18     	; 0x17d8 <__udivmod64+0x6c>
    17c6:	8a 18       	sub	r8, r10
    17c8:	9b 08       	sbc	r9, r11
    17ca:	ec 09       	sbc	r30, r12
    17cc:	fd 09       	sbc	r31, r13
    17ce:	ce 09       	sbc	r28, r14
    17d0:	df 09       	sbc	r29, r15
    17d2:	a0 0b       	sbc	r26, r16
    17d4:	b1 0b       	sbc	r27, r17
    17d6:	21 60       	ori	r18, 0x01	; 1
    17d8:	1a 94       	dec	r1
    17da:	e1 f6       	brne	.-72     	; 0x1794 <__udivmod64+0x28>
    17dc:	2e f4       	brtc	.+10     	; 0x17e8 <__udivmod64+0x7c>
    17de:	94 01       	movw	r18, r8
    17e0:	af 01       	movw	r20, r30
    17e2:	be 01       	movw	r22, r28
    17e4:	cd 01       	movw	r24, r26
    17e6:	00 0c       	add	r0, r0
    17e8:	08 95       	ret

000017ea <__ashrdi3>:
    17ea:	97 fb       	bst	r25, 7
    17ec:	10 f8       	bld	r1, 0

000017ee <__lshrdi3>:
    17ee:	16 94       	lsr	r1
    17f0:	00 08       	sbc	r0, r0
    17f2:	0f 93       	push	r16
    17f4:	08 30       	cpi	r16, 0x08	; 8
    17f6:	98 f0       	brcs	.+38     	; 0x181e <__lshrdi3+0x30>
    17f8:	08 50       	subi	r16, 0x08	; 8
    17fa:	23 2f       	mov	r18, r19
    17fc:	34 2f       	mov	r19, r20
    17fe:	45 2f       	mov	r20, r21
    1800:	56 2f       	mov	r21, r22
    1802:	67 2f       	mov	r22, r23
    1804:	78 2f       	mov	r23, r24
    1806:	89 2f       	mov	r24, r25
    1808:	90 2d       	mov	r25, r0
    180a:	f4 cf       	rjmp	.-24     	; 0x17f4 <__lshrdi3+0x6>
    180c:	05 94       	asr	r0
    180e:	97 95       	ror	r25
    1810:	87 95       	ror	r24
    1812:	77 95       	ror	r23
    1814:	67 95       	ror	r22
    1816:	57 95       	ror	r21
    1818:	47 95       	ror	r20
    181a:	37 95       	ror	r19
    181c:	27 95       	ror	r18
    181e:	0a 95       	dec	r16
    1820:	aa f7       	brpl	.-22     	; 0x180c <__lshrdi3+0x1e>
    1822:	0f 91       	pop	r16
    1824:	08 95       	ret

00001826 <__adddi3>:
    1826:	2a 0d       	add	r18, r10
    1828:	3b 1d       	adc	r19, r11
    182a:	4c 1d       	adc	r20, r12
    182c:	5d 1d       	adc	r21, r13
    182e:	6e 1d       	adc	r22, r14
    1830:	7f 1d       	adc	r23, r15
    1832:	80 1f       	adc	r24, r16
    1834:	91 1f       	adc	r25, r17
    1836:	08 95       	ret

00001838 <__adddi3_s8>:
    1838:	00 24       	eor	r0, r0
    183a:	a7 fd       	sbrc	r26, 7
    183c:	00 94       	com	r0
    183e:	2a 0f       	add	r18, r26
    1840:	30 1d       	adc	r19, r0
    1842:	40 1d       	adc	r20, r0
    1844:	50 1d       	adc	r21, r0
    1846:	60 1d       	adc	r22, r0
    1848:	70 1d       	adc	r23, r0
    184a:	80 1d       	adc	r24, r0
    184c:	90 1d       	adc	r25, r0
    184e:	08 95       	ret

00001850 <sprintf>:
    1850:	ae e0       	ldi	r26, 0x0E	; 14
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	ed e2       	ldi	r30, 0x2D	; 45
    1856:	fc e0       	ldi	r31, 0x0C	; 12
    1858:	b2 c2       	rjmp	.+1380   	; 0x1dbe <__prologue_saves__+0x1c>
    185a:	0d 89       	ldd	r16, Y+21	; 0x15
    185c:	1e 89       	ldd	r17, Y+22	; 0x16
    185e:	86 e0       	ldi	r24, 0x06	; 6
    1860:	8c 83       	std	Y+4, r24	; 0x04
    1862:	1a 83       	std	Y+2, r17	; 0x02
    1864:	09 83       	std	Y+1, r16	; 0x01
    1866:	8f ef       	ldi	r24, 0xFF	; 255
    1868:	9f e7       	ldi	r25, 0x7F	; 127
    186a:	9e 83       	std	Y+6, r25	; 0x06
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	ae 01       	movw	r20, r28
    1870:	47 5e       	subi	r20, 0xE7	; 231
    1872:	5f 4f       	sbci	r21, 0xFF	; 255
    1874:	6f 89       	ldd	r22, Y+23	; 0x17
    1876:	78 8d       	ldd	r23, Y+24	; 0x18
    1878:	ce 01       	movw	r24, r28
    187a:	01 96       	adiw	r24, 0x01	; 1
    187c:	08 d0       	rcall	.+16     	; 0x188e <vfprintf>
    187e:	ef 81       	ldd	r30, Y+7	; 0x07
    1880:	f8 85       	ldd	r31, Y+8	; 0x08
    1882:	e0 0f       	add	r30, r16
    1884:	f1 1f       	adc	r31, r17
    1886:	10 82       	st	Z, r1
    1888:	2e 96       	adiw	r28, 0x0e	; 14
    188a:	e4 e0       	ldi	r30, 0x04	; 4
    188c:	b4 c2       	rjmp	.+1384   	; 0x1df6 <__epilogue_restores__+0x1c>

0000188e <vfprintf>:
    188e:	ab e0       	ldi	r26, 0x0B	; 11
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	ec e4       	ldi	r30, 0x4C	; 76
    1894:	fc e0       	ldi	r31, 0x0C	; 12
    1896:	85 c2       	rjmp	.+1290   	; 0x1da2 <__prologue_saves__>
    1898:	6c 01       	movw	r12, r24
    189a:	7b 01       	movw	r14, r22
    189c:	8a 01       	movw	r16, r20
    189e:	fc 01       	movw	r30, r24
    18a0:	17 82       	std	Z+7, r1	; 0x07
    18a2:	16 82       	std	Z+6, r1	; 0x06
    18a4:	83 81       	ldd	r24, Z+3	; 0x03
    18a6:	81 ff       	sbrs	r24, 1
    18a8:	bf c1       	rjmp	.+894    	; 0x1c28 <vfprintf+0x39a>
    18aa:	ce 01       	movw	r24, r28
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	3c 01       	movw	r6, r24
    18b0:	f6 01       	movw	r30, r12
    18b2:	93 81       	ldd	r25, Z+3	; 0x03
    18b4:	f7 01       	movw	r30, r14
    18b6:	93 fd       	sbrc	r25, 3
    18b8:	85 91       	lpm	r24, Z+
    18ba:	93 ff       	sbrs	r25, 3
    18bc:	81 91       	ld	r24, Z+
    18be:	7f 01       	movw	r14, r30
    18c0:	88 23       	and	r24, r24
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <vfprintf+0x38>
    18c4:	ad c1       	rjmp	.+858    	; 0x1c20 <vfprintf+0x392>
    18c6:	85 32       	cpi	r24, 0x25	; 37
    18c8:	39 f4       	brne	.+14     	; 0x18d8 <vfprintf+0x4a>
    18ca:	93 fd       	sbrc	r25, 3
    18cc:	85 91       	lpm	r24, Z+
    18ce:	93 ff       	sbrs	r25, 3
    18d0:	81 91       	ld	r24, Z+
    18d2:	7f 01       	movw	r14, r30
    18d4:	85 32       	cpi	r24, 0x25	; 37
    18d6:	21 f4       	brne	.+8      	; 0x18e0 <vfprintf+0x52>
    18d8:	b6 01       	movw	r22, r12
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	c0 d1       	rcall	.+896    	; 0x1c5e <fputc>
    18de:	e8 cf       	rjmp	.-48     	; 0x18b0 <vfprintf+0x22>
    18e0:	91 2c       	mov	r9, r1
    18e2:	21 2c       	mov	r2, r1
    18e4:	31 2c       	mov	r3, r1
    18e6:	ff e1       	ldi	r31, 0x1F	; 31
    18e8:	f3 15       	cp	r31, r3
    18ea:	d8 f0       	brcs	.+54     	; 0x1922 <vfprintf+0x94>
    18ec:	8b 32       	cpi	r24, 0x2B	; 43
    18ee:	79 f0       	breq	.+30     	; 0x190e <vfprintf+0x80>
    18f0:	38 f4       	brcc	.+14     	; 0x1900 <vfprintf+0x72>
    18f2:	80 32       	cpi	r24, 0x20	; 32
    18f4:	79 f0       	breq	.+30     	; 0x1914 <vfprintf+0x86>
    18f6:	83 32       	cpi	r24, 0x23	; 35
    18f8:	a1 f4       	brne	.+40     	; 0x1922 <vfprintf+0x94>
    18fa:	23 2d       	mov	r18, r3
    18fc:	20 61       	ori	r18, 0x10	; 16
    18fe:	1d c0       	rjmp	.+58     	; 0x193a <vfprintf+0xac>
    1900:	8d 32       	cpi	r24, 0x2D	; 45
    1902:	61 f0       	breq	.+24     	; 0x191c <vfprintf+0x8e>
    1904:	80 33       	cpi	r24, 0x30	; 48
    1906:	69 f4       	brne	.+26     	; 0x1922 <vfprintf+0x94>
    1908:	23 2d       	mov	r18, r3
    190a:	21 60       	ori	r18, 0x01	; 1
    190c:	16 c0       	rjmp	.+44     	; 0x193a <vfprintf+0xac>
    190e:	83 2d       	mov	r24, r3
    1910:	82 60       	ori	r24, 0x02	; 2
    1912:	38 2e       	mov	r3, r24
    1914:	e3 2d       	mov	r30, r3
    1916:	e4 60       	ori	r30, 0x04	; 4
    1918:	3e 2e       	mov	r3, r30
    191a:	2a c0       	rjmp	.+84     	; 0x1970 <vfprintf+0xe2>
    191c:	f3 2d       	mov	r31, r3
    191e:	f8 60       	ori	r31, 0x08	; 8
    1920:	1d c0       	rjmp	.+58     	; 0x195c <vfprintf+0xce>
    1922:	37 fc       	sbrc	r3, 7
    1924:	2d c0       	rjmp	.+90     	; 0x1980 <vfprintf+0xf2>
    1926:	20 ed       	ldi	r18, 0xD0	; 208
    1928:	28 0f       	add	r18, r24
    192a:	2a 30       	cpi	r18, 0x0A	; 10
    192c:	40 f0       	brcs	.+16     	; 0x193e <vfprintf+0xb0>
    192e:	8e 32       	cpi	r24, 0x2E	; 46
    1930:	b9 f4       	brne	.+46     	; 0x1960 <vfprintf+0xd2>
    1932:	36 fc       	sbrc	r3, 6
    1934:	75 c1       	rjmp	.+746    	; 0x1c20 <vfprintf+0x392>
    1936:	23 2d       	mov	r18, r3
    1938:	20 64       	ori	r18, 0x40	; 64
    193a:	32 2e       	mov	r3, r18
    193c:	19 c0       	rjmp	.+50     	; 0x1970 <vfprintf+0xe2>
    193e:	36 fe       	sbrs	r3, 6
    1940:	06 c0       	rjmp	.+12     	; 0x194e <vfprintf+0xc0>
    1942:	8a e0       	ldi	r24, 0x0A	; 10
    1944:	98 9e       	mul	r9, r24
    1946:	20 0d       	add	r18, r0
    1948:	11 24       	eor	r1, r1
    194a:	92 2e       	mov	r9, r18
    194c:	11 c0       	rjmp	.+34     	; 0x1970 <vfprintf+0xe2>
    194e:	ea e0       	ldi	r30, 0x0A	; 10
    1950:	2e 9e       	mul	r2, r30
    1952:	20 0d       	add	r18, r0
    1954:	11 24       	eor	r1, r1
    1956:	22 2e       	mov	r2, r18
    1958:	f3 2d       	mov	r31, r3
    195a:	f0 62       	ori	r31, 0x20	; 32
    195c:	3f 2e       	mov	r3, r31
    195e:	08 c0       	rjmp	.+16     	; 0x1970 <vfprintf+0xe2>
    1960:	8c 36       	cpi	r24, 0x6C	; 108
    1962:	21 f4       	brne	.+8      	; 0x196c <vfprintf+0xde>
    1964:	83 2d       	mov	r24, r3
    1966:	80 68       	ori	r24, 0x80	; 128
    1968:	38 2e       	mov	r3, r24
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <vfprintf+0xe2>
    196c:	88 36       	cpi	r24, 0x68	; 104
    196e:	41 f4       	brne	.+16     	; 0x1980 <vfprintf+0xf2>
    1970:	f7 01       	movw	r30, r14
    1972:	93 fd       	sbrc	r25, 3
    1974:	85 91       	lpm	r24, Z+
    1976:	93 ff       	sbrs	r25, 3
    1978:	81 91       	ld	r24, Z+
    197a:	7f 01       	movw	r14, r30
    197c:	81 11       	cpse	r24, r1
    197e:	b3 cf       	rjmp	.-154    	; 0x18e6 <vfprintf+0x58>
    1980:	98 2f       	mov	r25, r24
    1982:	9f 7d       	andi	r25, 0xDF	; 223
    1984:	95 54       	subi	r25, 0x45	; 69
    1986:	93 30       	cpi	r25, 0x03	; 3
    1988:	28 f4       	brcc	.+10     	; 0x1994 <vfprintf+0x106>
    198a:	0c 5f       	subi	r16, 0xFC	; 252
    198c:	1f 4f       	sbci	r17, 0xFF	; 255
    198e:	9f e3       	ldi	r25, 0x3F	; 63
    1990:	99 83       	std	Y+1, r25	; 0x01
    1992:	0d c0       	rjmp	.+26     	; 0x19ae <vfprintf+0x120>
    1994:	83 36       	cpi	r24, 0x63	; 99
    1996:	31 f0       	breq	.+12     	; 0x19a4 <vfprintf+0x116>
    1998:	83 37       	cpi	r24, 0x73	; 115
    199a:	71 f0       	breq	.+28     	; 0x19b8 <vfprintf+0x12a>
    199c:	83 35       	cpi	r24, 0x53	; 83
    199e:	09 f0       	breq	.+2      	; 0x19a2 <vfprintf+0x114>
    19a0:	55 c0       	rjmp	.+170    	; 0x1a4c <vfprintf+0x1be>
    19a2:	20 c0       	rjmp	.+64     	; 0x19e4 <vfprintf+0x156>
    19a4:	f8 01       	movw	r30, r16
    19a6:	80 81       	ld	r24, Z
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	0e 5f       	subi	r16, 0xFE	; 254
    19ac:	1f 4f       	sbci	r17, 0xFF	; 255
    19ae:	88 24       	eor	r8, r8
    19b0:	83 94       	inc	r8
    19b2:	91 2c       	mov	r9, r1
    19b4:	53 01       	movw	r10, r6
    19b6:	12 c0       	rjmp	.+36     	; 0x19dc <vfprintf+0x14e>
    19b8:	28 01       	movw	r4, r16
    19ba:	f2 e0       	ldi	r31, 0x02	; 2
    19bc:	4f 0e       	add	r4, r31
    19be:	51 1c       	adc	r5, r1
    19c0:	f8 01       	movw	r30, r16
    19c2:	a0 80       	ld	r10, Z
    19c4:	b1 80       	ldd	r11, Z+1	; 0x01
    19c6:	36 fe       	sbrs	r3, 6
    19c8:	03 c0       	rjmp	.+6      	; 0x19d0 <vfprintf+0x142>
    19ca:	69 2d       	mov	r22, r9
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <vfprintf+0x146>
    19d0:	6f ef       	ldi	r22, 0xFF	; 255
    19d2:	7f ef       	ldi	r23, 0xFF	; 255
    19d4:	c5 01       	movw	r24, r10
    19d6:	38 d1       	rcall	.+624    	; 0x1c48 <strnlen>
    19d8:	4c 01       	movw	r8, r24
    19da:	82 01       	movw	r16, r4
    19dc:	f3 2d       	mov	r31, r3
    19de:	ff 77       	andi	r31, 0x7F	; 127
    19e0:	3f 2e       	mov	r3, r31
    19e2:	15 c0       	rjmp	.+42     	; 0x1a0e <vfprintf+0x180>
    19e4:	28 01       	movw	r4, r16
    19e6:	22 e0       	ldi	r18, 0x02	; 2
    19e8:	42 0e       	add	r4, r18
    19ea:	51 1c       	adc	r5, r1
    19ec:	f8 01       	movw	r30, r16
    19ee:	a0 80       	ld	r10, Z
    19f0:	b1 80       	ldd	r11, Z+1	; 0x01
    19f2:	36 fe       	sbrs	r3, 6
    19f4:	03 c0       	rjmp	.+6      	; 0x19fc <vfprintf+0x16e>
    19f6:	69 2d       	mov	r22, r9
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <vfprintf+0x172>
    19fc:	6f ef       	ldi	r22, 0xFF	; 255
    19fe:	7f ef       	ldi	r23, 0xFF	; 255
    1a00:	c5 01       	movw	r24, r10
    1a02:	17 d1       	rcall	.+558    	; 0x1c32 <strnlen_P>
    1a04:	4c 01       	movw	r8, r24
    1a06:	f3 2d       	mov	r31, r3
    1a08:	f0 68       	ori	r31, 0x80	; 128
    1a0a:	3f 2e       	mov	r3, r31
    1a0c:	82 01       	movw	r16, r4
    1a0e:	33 fc       	sbrc	r3, 3
    1a10:	19 c0       	rjmp	.+50     	; 0x1a44 <vfprintf+0x1b6>
    1a12:	82 2d       	mov	r24, r2
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	88 16       	cp	r8, r24
    1a18:	99 06       	cpc	r9, r25
    1a1a:	a0 f4       	brcc	.+40     	; 0x1a44 <vfprintf+0x1b6>
    1a1c:	b6 01       	movw	r22, r12
    1a1e:	80 e2       	ldi	r24, 0x20	; 32
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	1d d1       	rcall	.+570    	; 0x1c5e <fputc>
    1a24:	2a 94       	dec	r2
    1a26:	f5 cf       	rjmp	.-22     	; 0x1a12 <vfprintf+0x184>
    1a28:	f5 01       	movw	r30, r10
    1a2a:	37 fc       	sbrc	r3, 7
    1a2c:	85 91       	lpm	r24, Z+
    1a2e:	37 fe       	sbrs	r3, 7
    1a30:	81 91       	ld	r24, Z+
    1a32:	5f 01       	movw	r10, r30
    1a34:	b6 01       	movw	r22, r12
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	12 d1       	rcall	.+548    	; 0x1c5e <fputc>
    1a3a:	21 10       	cpse	r2, r1
    1a3c:	2a 94       	dec	r2
    1a3e:	21 e0       	ldi	r18, 0x01	; 1
    1a40:	82 1a       	sub	r8, r18
    1a42:	91 08       	sbc	r9, r1
    1a44:	81 14       	cp	r8, r1
    1a46:	91 04       	cpc	r9, r1
    1a48:	79 f7       	brne	.-34     	; 0x1a28 <vfprintf+0x19a>
    1a4a:	e1 c0       	rjmp	.+450    	; 0x1c0e <vfprintf+0x380>
    1a4c:	84 36       	cpi	r24, 0x64	; 100
    1a4e:	11 f0       	breq	.+4      	; 0x1a54 <vfprintf+0x1c6>
    1a50:	89 36       	cpi	r24, 0x69	; 105
    1a52:	39 f5       	brne	.+78     	; 0x1aa2 <vfprintf+0x214>
    1a54:	f8 01       	movw	r30, r16
    1a56:	37 fe       	sbrs	r3, 7
    1a58:	07 c0       	rjmp	.+14     	; 0x1a68 <vfprintf+0x1da>
    1a5a:	60 81       	ld	r22, Z
    1a5c:	71 81       	ldd	r23, Z+1	; 0x01
    1a5e:	82 81       	ldd	r24, Z+2	; 0x02
    1a60:	93 81       	ldd	r25, Z+3	; 0x03
    1a62:	0c 5f       	subi	r16, 0xFC	; 252
    1a64:	1f 4f       	sbci	r17, 0xFF	; 255
    1a66:	08 c0       	rjmp	.+16     	; 0x1a78 <vfprintf+0x1ea>
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	07 2e       	mov	r0, r23
    1a6e:	00 0c       	add	r0, r0
    1a70:	88 0b       	sbc	r24, r24
    1a72:	99 0b       	sbc	r25, r25
    1a74:	0e 5f       	subi	r16, 0xFE	; 254
    1a76:	1f 4f       	sbci	r17, 0xFF	; 255
    1a78:	f3 2d       	mov	r31, r3
    1a7a:	ff 76       	andi	r31, 0x6F	; 111
    1a7c:	3f 2e       	mov	r3, r31
    1a7e:	97 ff       	sbrs	r25, 7
    1a80:	09 c0       	rjmp	.+18     	; 0x1a94 <vfprintf+0x206>
    1a82:	90 95       	com	r25
    1a84:	80 95       	com	r24
    1a86:	70 95       	com	r23
    1a88:	61 95       	neg	r22
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a90:	f0 68       	ori	r31, 0x80	; 128
    1a92:	3f 2e       	mov	r3, r31
    1a94:	2a e0       	ldi	r18, 0x0A	; 10
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	a3 01       	movw	r20, r6
    1a9a:	1d d1       	rcall	.+570    	; 0x1cd6 <__ultoa_invert>
    1a9c:	88 2e       	mov	r8, r24
    1a9e:	86 18       	sub	r8, r6
    1aa0:	44 c0       	rjmp	.+136    	; 0x1b2a <vfprintf+0x29c>
    1aa2:	85 37       	cpi	r24, 0x75	; 117
    1aa4:	31 f4       	brne	.+12     	; 0x1ab2 <vfprintf+0x224>
    1aa6:	23 2d       	mov	r18, r3
    1aa8:	2f 7e       	andi	r18, 0xEF	; 239
    1aaa:	b2 2e       	mov	r11, r18
    1aac:	2a e0       	ldi	r18, 0x0A	; 10
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	25 c0       	rjmp	.+74     	; 0x1afc <vfprintf+0x26e>
    1ab2:	93 2d       	mov	r25, r3
    1ab4:	99 7f       	andi	r25, 0xF9	; 249
    1ab6:	b9 2e       	mov	r11, r25
    1ab8:	8f 36       	cpi	r24, 0x6F	; 111
    1aba:	c1 f0       	breq	.+48     	; 0x1aec <vfprintf+0x25e>
    1abc:	18 f4       	brcc	.+6      	; 0x1ac4 <vfprintf+0x236>
    1abe:	88 35       	cpi	r24, 0x58	; 88
    1ac0:	79 f0       	breq	.+30     	; 0x1ae0 <vfprintf+0x252>
    1ac2:	ae c0       	rjmp	.+348    	; 0x1c20 <vfprintf+0x392>
    1ac4:	80 37       	cpi	r24, 0x70	; 112
    1ac6:	19 f0       	breq	.+6      	; 0x1ace <vfprintf+0x240>
    1ac8:	88 37       	cpi	r24, 0x78	; 120
    1aca:	21 f0       	breq	.+8      	; 0x1ad4 <vfprintf+0x246>
    1acc:	a9 c0       	rjmp	.+338    	; 0x1c20 <vfprintf+0x392>
    1ace:	e9 2f       	mov	r30, r25
    1ad0:	e0 61       	ori	r30, 0x10	; 16
    1ad2:	be 2e       	mov	r11, r30
    1ad4:	b4 fe       	sbrs	r11, 4
    1ad6:	0d c0       	rjmp	.+26     	; 0x1af2 <vfprintf+0x264>
    1ad8:	fb 2d       	mov	r31, r11
    1ada:	f4 60       	ori	r31, 0x04	; 4
    1adc:	bf 2e       	mov	r11, r31
    1ade:	09 c0       	rjmp	.+18     	; 0x1af2 <vfprintf+0x264>
    1ae0:	34 fe       	sbrs	r3, 4
    1ae2:	0a c0       	rjmp	.+20     	; 0x1af8 <vfprintf+0x26a>
    1ae4:	29 2f       	mov	r18, r25
    1ae6:	26 60       	ori	r18, 0x06	; 6
    1ae8:	b2 2e       	mov	r11, r18
    1aea:	06 c0       	rjmp	.+12     	; 0x1af8 <vfprintf+0x26a>
    1aec:	28 e0       	ldi	r18, 0x08	; 8
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	05 c0       	rjmp	.+10     	; 0x1afc <vfprintf+0x26e>
    1af2:	20 e1       	ldi	r18, 0x10	; 16
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <vfprintf+0x26e>
    1af8:	20 e1       	ldi	r18, 0x10	; 16
    1afa:	32 e0       	ldi	r19, 0x02	; 2
    1afc:	f8 01       	movw	r30, r16
    1afe:	b7 fe       	sbrs	r11, 7
    1b00:	07 c0       	rjmp	.+14     	; 0x1b10 <vfprintf+0x282>
    1b02:	60 81       	ld	r22, Z
    1b04:	71 81       	ldd	r23, Z+1	; 0x01
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	93 81       	ldd	r25, Z+3	; 0x03
    1b0a:	0c 5f       	subi	r16, 0xFC	; 252
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	06 c0       	rjmp	.+12     	; 0x1b1c <vfprintf+0x28e>
    1b10:	60 81       	ld	r22, Z
    1b12:	71 81       	ldd	r23, Z+1	; 0x01
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 5f       	subi	r16, 0xFE	; 254
    1b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1c:	a3 01       	movw	r20, r6
    1b1e:	db d0       	rcall	.+438    	; 0x1cd6 <__ultoa_invert>
    1b20:	88 2e       	mov	r8, r24
    1b22:	86 18       	sub	r8, r6
    1b24:	fb 2d       	mov	r31, r11
    1b26:	ff 77       	andi	r31, 0x7F	; 127
    1b28:	3f 2e       	mov	r3, r31
    1b2a:	36 fe       	sbrs	r3, 6
    1b2c:	0d c0       	rjmp	.+26     	; 0x1b48 <vfprintf+0x2ba>
    1b2e:	23 2d       	mov	r18, r3
    1b30:	2e 7f       	andi	r18, 0xFE	; 254
    1b32:	a2 2e       	mov	r10, r18
    1b34:	89 14       	cp	r8, r9
    1b36:	58 f4       	brcc	.+22     	; 0x1b4e <vfprintf+0x2c0>
    1b38:	34 fe       	sbrs	r3, 4
    1b3a:	0b c0       	rjmp	.+22     	; 0x1b52 <vfprintf+0x2c4>
    1b3c:	32 fc       	sbrc	r3, 2
    1b3e:	09 c0       	rjmp	.+18     	; 0x1b52 <vfprintf+0x2c4>
    1b40:	83 2d       	mov	r24, r3
    1b42:	8e 7e       	andi	r24, 0xEE	; 238
    1b44:	a8 2e       	mov	r10, r24
    1b46:	05 c0       	rjmp	.+10     	; 0x1b52 <vfprintf+0x2c4>
    1b48:	b8 2c       	mov	r11, r8
    1b4a:	a3 2c       	mov	r10, r3
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <vfprintf+0x2c6>
    1b4e:	b8 2c       	mov	r11, r8
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <vfprintf+0x2c6>
    1b52:	b9 2c       	mov	r11, r9
    1b54:	a4 fe       	sbrs	r10, 4
    1b56:	0f c0       	rjmp	.+30     	; 0x1b76 <vfprintf+0x2e8>
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e8 0d       	add	r30, r8
    1b5c:	f1 1d       	adc	r31, r1
    1b5e:	80 81       	ld	r24, Z
    1b60:	80 33       	cpi	r24, 0x30	; 48
    1b62:	21 f4       	brne	.+8      	; 0x1b6c <vfprintf+0x2de>
    1b64:	9a 2d       	mov	r25, r10
    1b66:	99 7e       	andi	r25, 0xE9	; 233
    1b68:	a9 2e       	mov	r10, r25
    1b6a:	09 c0       	rjmp	.+18     	; 0x1b7e <vfprintf+0x2f0>
    1b6c:	a2 fe       	sbrs	r10, 2
    1b6e:	06 c0       	rjmp	.+12     	; 0x1b7c <vfprintf+0x2ee>
    1b70:	b3 94       	inc	r11
    1b72:	b3 94       	inc	r11
    1b74:	04 c0       	rjmp	.+8      	; 0x1b7e <vfprintf+0x2f0>
    1b76:	8a 2d       	mov	r24, r10
    1b78:	86 78       	andi	r24, 0x86	; 134
    1b7a:	09 f0       	breq	.+2      	; 0x1b7e <vfprintf+0x2f0>
    1b7c:	b3 94       	inc	r11
    1b7e:	a3 fc       	sbrc	r10, 3
    1b80:	10 c0       	rjmp	.+32     	; 0x1ba2 <vfprintf+0x314>
    1b82:	a0 fe       	sbrs	r10, 0
    1b84:	06 c0       	rjmp	.+12     	; 0x1b92 <vfprintf+0x304>
    1b86:	b2 14       	cp	r11, r2
    1b88:	80 f4       	brcc	.+32     	; 0x1baa <vfprintf+0x31c>
    1b8a:	28 0c       	add	r2, r8
    1b8c:	92 2c       	mov	r9, r2
    1b8e:	9b 18       	sub	r9, r11
    1b90:	0d c0       	rjmp	.+26     	; 0x1bac <vfprintf+0x31e>
    1b92:	b2 14       	cp	r11, r2
    1b94:	58 f4       	brcc	.+22     	; 0x1bac <vfprintf+0x31e>
    1b96:	b6 01       	movw	r22, r12
    1b98:	80 e2       	ldi	r24, 0x20	; 32
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	60 d0       	rcall	.+192    	; 0x1c5e <fputc>
    1b9e:	b3 94       	inc	r11
    1ba0:	f8 cf       	rjmp	.-16     	; 0x1b92 <vfprintf+0x304>
    1ba2:	b2 14       	cp	r11, r2
    1ba4:	18 f4       	brcc	.+6      	; 0x1bac <vfprintf+0x31e>
    1ba6:	2b 18       	sub	r2, r11
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <vfprintf+0x320>
    1baa:	98 2c       	mov	r9, r8
    1bac:	21 2c       	mov	r2, r1
    1bae:	a4 fe       	sbrs	r10, 4
    1bb0:	0f c0       	rjmp	.+30     	; 0x1bd0 <vfprintf+0x342>
    1bb2:	b6 01       	movw	r22, r12
    1bb4:	80 e3       	ldi	r24, 0x30	; 48
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	52 d0       	rcall	.+164    	; 0x1c5e <fputc>
    1bba:	a2 fe       	sbrs	r10, 2
    1bbc:	16 c0       	rjmp	.+44     	; 0x1bea <vfprintf+0x35c>
    1bbe:	a1 fc       	sbrc	r10, 1
    1bc0:	03 c0       	rjmp	.+6      	; 0x1bc8 <vfprintf+0x33a>
    1bc2:	88 e7       	ldi	r24, 0x78	; 120
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <vfprintf+0x33e>
    1bc8:	88 e5       	ldi	r24, 0x58	; 88
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	b6 01       	movw	r22, r12
    1bce:	0c c0       	rjmp	.+24     	; 0x1be8 <vfprintf+0x35a>
    1bd0:	8a 2d       	mov	r24, r10
    1bd2:	86 78       	andi	r24, 0x86	; 134
    1bd4:	51 f0       	breq	.+20     	; 0x1bea <vfprintf+0x35c>
    1bd6:	a1 fe       	sbrs	r10, 1
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <vfprintf+0x350>
    1bda:	8b e2       	ldi	r24, 0x2B	; 43
    1bdc:	01 c0       	rjmp	.+2      	; 0x1be0 <vfprintf+0x352>
    1bde:	80 e2       	ldi	r24, 0x20	; 32
    1be0:	a7 fc       	sbrc	r10, 7
    1be2:	8d e2       	ldi	r24, 0x2D	; 45
    1be4:	b6 01       	movw	r22, r12
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	3a d0       	rcall	.+116    	; 0x1c5e <fputc>
    1bea:	89 14       	cp	r8, r9
    1bec:	30 f4       	brcc	.+12     	; 0x1bfa <vfprintf+0x36c>
    1bee:	b6 01       	movw	r22, r12
    1bf0:	80 e3       	ldi	r24, 0x30	; 48
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	34 d0       	rcall	.+104    	; 0x1c5e <fputc>
    1bf6:	9a 94       	dec	r9
    1bf8:	f8 cf       	rjmp	.-16     	; 0x1bea <vfprintf+0x35c>
    1bfa:	8a 94       	dec	r8
    1bfc:	f3 01       	movw	r30, r6
    1bfe:	e8 0d       	add	r30, r8
    1c00:	f1 1d       	adc	r31, r1
    1c02:	80 81       	ld	r24, Z
    1c04:	b6 01       	movw	r22, r12
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	2a d0       	rcall	.+84     	; 0x1c5e <fputc>
    1c0a:	81 10       	cpse	r8, r1
    1c0c:	f6 cf       	rjmp	.-20     	; 0x1bfa <vfprintf+0x36c>
    1c0e:	22 20       	and	r2, r2
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <vfprintf+0x386>
    1c12:	4e ce       	rjmp	.-868    	; 0x18b0 <vfprintf+0x22>
    1c14:	b6 01       	movw	r22, r12
    1c16:	80 e2       	ldi	r24, 0x20	; 32
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	21 d0       	rcall	.+66     	; 0x1c5e <fputc>
    1c1c:	2a 94       	dec	r2
    1c1e:	f7 cf       	rjmp	.-18     	; 0x1c0e <vfprintf+0x380>
    1c20:	f6 01       	movw	r30, r12
    1c22:	86 81       	ldd	r24, Z+6	; 0x06
    1c24:	97 81       	ldd	r25, Z+7	; 0x07
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <vfprintf+0x39e>
    1c28:	8f ef       	ldi	r24, 0xFF	; 255
    1c2a:	9f ef       	ldi	r25, 0xFF	; 255
    1c2c:	2b 96       	adiw	r28, 0x0b	; 11
    1c2e:	e2 e1       	ldi	r30, 0x12	; 18
    1c30:	d4 c0       	rjmp	.+424    	; 0x1dda <__epilogue_restores__>

00001c32 <strnlen_P>:
    1c32:	fc 01       	movw	r30, r24
    1c34:	05 90       	lpm	r0, Z+
    1c36:	61 50       	subi	r22, 0x01	; 1
    1c38:	70 40       	sbci	r23, 0x00	; 0
    1c3a:	01 10       	cpse	r0, r1
    1c3c:	d8 f7       	brcc	.-10     	; 0x1c34 <strnlen_P+0x2>
    1c3e:	80 95       	com	r24
    1c40:	90 95       	com	r25
    1c42:	8e 0f       	add	r24, r30
    1c44:	9f 1f       	adc	r25, r31
    1c46:	08 95       	ret

00001c48 <strnlen>:
    1c48:	fc 01       	movw	r30, r24
    1c4a:	61 50       	subi	r22, 0x01	; 1
    1c4c:	70 40       	sbci	r23, 0x00	; 0
    1c4e:	01 90       	ld	r0, Z+
    1c50:	01 10       	cpse	r0, r1
    1c52:	d8 f7       	brcc	.-10     	; 0x1c4a <strnlen+0x2>
    1c54:	80 95       	com	r24
    1c56:	90 95       	com	r25
    1c58:	8e 0f       	add	r24, r30
    1c5a:	9f 1f       	adc	r25, r31
    1c5c:	08 95       	ret

00001c5e <fputc>:
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	fb 01       	movw	r30, r22
    1c68:	23 81       	ldd	r18, Z+3	; 0x03
    1c6a:	21 fd       	sbrc	r18, 1
    1c6c:	03 c0       	rjmp	.+6      	; 0x1c74 <fputc+0x16>
    1c6e:	8f ef       	ldi	r24, 0xFF	; 255
    1c70:	9f ef       	ldi	r25, 0xFF	; 255
    1c72:	2c c0       	rjmp	.+88     	; 0x1ccc <fputc+0x6e>
    1c74:	22 ff       	sbrs	r18, 2
    1c76:	16 c0       	rjmp	.+44     	; 0x1ca4 <fputc+0x46>
    1c78:	46 81       	ldd	r20, Z+6	; 0x06
    1c7a:	57 81       	ldd	r21, Z+7	; 0x07
    1c7c:	24 81       	ldd	r18, Z+4	; 0x04
    1c7e:	35 81       	ldd	r19, Z+5	; 0x05
    1c80:	42 17       	cp	r20, r18
    1c82:	53 07       	cpc	r21, r19
    1c84:	44 f4       	brge	.+16     	; 0x1c96 <fputc+0x38>
    1c86:	a0 81       	ld	r26, Z
    1c88:	b1 81       	ldd	r27, Z+1	; 0x01
    1c8a:	9d 01       	movw	r18, r26
    1c8c:	2f 5f       	subi	r18, 0xFF	; 255
    1c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c90:	31 83       	std	Z+1, r19	; 0x01
    1c92:	20 83       	st	Z, r18
    1c94:	8c 93       	st	X, r24
    1c96:	26 81       	ldd	r18, Z+6	; 0x06
    1c98:	37 81       	ldd	r19, Z+7	; 0x07
    1c9a:	2f 5f       	subi	r18, 0xFF	; 255
    1c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9e:	37 83       	std	Z+7, r19	; 0x07
    1ca0:	26 83       	std	Z+6, r18	; 0x06
    1ca2:	14 c0       	rjmp	.+40     	; 0x1ccc <fputc+0x6e>
    1ca4:	8b 01       	movw	r16, r22
    1ca6:	ec 01       	movw	r28, r24
    1ca8:	fb 01       	movw	r30, r22
    1caa:	00 84       	ldd	r0, Z+8	; 0x08
    1cac:	f1 85       	ldd	r31, Z+9	; 0x09
    1cae:	e0 2d       	mov	r30, r0
    1cb0:	09 95       	icall
    1cb2:	89 2b       	or	r24, r25
    1cb4:	e1 f6       	brne	.-72     	; 0x1c6e <fputc+0x10>
    1cb6:	d8 01       	movw	r26, r16
    1cb8:	16 96       	adiw	r26, 0x06	; 6
    1cba:	8d 91       	ld	r24, X+
    1cbc:	9c 91       	ld	r25, X
    1cbe:	17 97       	sbiw	r26, 0x07	; 7
    1cc0:	01 96       	adiw	r24, 0x01	; 1
    1cc2:	17 96       	adiw	r26, 0x07	; 7
    1cc4:	9c 93       	st	X, r25
    1cc6:	8e 93       	st	-X, r24
    1cc8:	16 97       	sbiw	r26, 0x06	; 6
    1cca:	ce 01       	movw	r24, r28
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	1f 91       	pop	r17
    1cd2:	0f 91       	pop	r16
    1cd4:	08 95       	ret

00001cd6 <__ultoa_invert>:
    1cd6:	fa 01       	movw	r30, r20
    1cd8:	aa 27       	eor	r26, r26
    1cda:	28 30       	cpi	r18, 0x08	; 8
    1cdc:	51 f1       	breq	.+84     	; 0x1d32 <__ultoa_invert+0x5c>
    1cde:	20 31       	cpi	r18, 0x10	; 16
    1ce0:	81 f1       	breq	.+96     	; 0x1d42 <__ultoa_invert+0x6c>
    1ce2:	e8 94       	clt
    1ce4:	6f 93       	push	r22
    1ce6:	6e 7f       	andi	r22, 0xFE	; 254
    1ce8:	6e 5f       	subi	r22, 0xFE	; 254
    1cea:	7f 4f       	sbci	r23, 0xFF	; 255
    1cec:	8f 4f       	sbci	r24, 0xFF	; 255
    1cee:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf0:	af 4f       	sbci	r26, 0xFF	; 255
    1cf2:	b1 e0       	ldi	r27, 0x01	; 1
    1cf4:	3e d0       	rcall	.+124    	; 0x1d72 <__ultoa_invert+0x9c>
    1cf6:	b4 e0       	ldi	r27, 0x04	; 4
    1cf8:	3c d0       	rcall	.+120    	; 0x1d72 <__ultoa_invert+0x9c>
    1cfa:	67 0f       	add	r22, r23
    1cfc:	78 1f       	adc	r23, r24
    1cfe:	89 1f       	adc	r24, r25
    1d00:	9a 1f       	adc	r25, r26
    1d02:	a1 1d       	adc	r26, r1
    1d04:	68 0f       	add	r22, r24
    1d06:	79 1f       	adc	r23, r25
    1d08:	8a 1f       	adc	r24, r26
    1d0a:	91 1d       	adc	r25, r1
    1d0c:	a1 1d       	adc	r26, r1
    1d0e:	6a 0f       	add	r22, r26
    1d10:	71 1d       	adc	r23, r1
    1d12:	81 1d       	adc	r24, r1
    1d14:	91 1d       	adc	r25, r1
    1d16:	a1 1d       	adc	r26, r1
    1d18:	20 d0       	rcall	.+64     	; 0x1d5a <__ultoa_invert+0x84>
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <__ultoa_invert+0x48>
    1d1c:	68 94       	set
    1d1e:	3f 91       	pop	r19
    1d20:	2a e0       	ldi	r18, 0x0A	; 10
    1d22:	26 9f       	mul	r18, r22
    1d24:	11 24       	eor	r1, r1
    1d26:	30 19       	sub	r19, r0
    1d28:	30 5d       	subi	r19, 0xD0	; 208
    1d2a:	31 93       	st	Z+, r19
    1d2c:	de f6       	brtc	.-74     	; 0x1ce4 <__ultoa_invert+0xe>
    1d2e:	cf 01       	movw	r24, r30
    1d30:	08 95       	ret
    1d32:	46 2f       	mov	r20, r22
    1d34:	47 70       	andi	r20, 0x07	; 7
    1d36:	40 5d       	subi	r20, 0xD0	; 208
    1d38:	41 93       	st	Z+, r20
    1d3a:	b3 e0       	ldi	r27, 0x03	; 3
    1d3c:	0f d0       	rcall	.+30     	; 0x1d5c <__ultoa_invert+0x86>
    1d3e:	c9 f7       	brne	.-14     	; 0x1d32 <__ultoa_invert+0x5c>
    1d40:	f6 cf       	rjmp	.-20     	; 0x1d2e <__ultoa_invert+0x58>
    1d42:	46 2f       	mov	r20, r22
    1d44:	4f 70       	andi	r20, 0x0F	; 15
    1d46:	40 5d       	subi	r20, 0xD0	; 208
    1d48:	4a 33       	cpi	r20, 0x3A	; 58
    1d4a:	18 f0       	brcs	.+6      	; 0x1d52 <__ultoa_invert+0x7c>
    1d4c:	49 5d       	subi	r20, 0xD9	; 217
    1d4e:	31 fd       	sbrc	r19, 1
    1d50:	40 52       	subi	r20, 0x20	; 32
    1d52:	41 93       	st	Z+, r20
    1d54:	02 d0       	rcall	.+4      	; 0x1d5a <__ultoa_invert+0x84>
    1d56:	a9 f7       	brne	.-22     	; 0x1d42 <__ultoa_invert+0x6c>
    1d58:	ea cf       	rjmp	.-44     	; 0x1d2e <__ultoa_invert+0x58>
    1d5a:	b4 e0       	ldi	r27, 0x04	; 4
    1d5c:	a6 95       	lsr	r26
    1d5e:	97 95       	ror	r25
    1d60:	87 95       	ror	r24
    1d62:	77 95       	ror	r23
    1d64:	67 95       	ror	r22
    1d66:	ba 95       	dec	r27
    1d68:	c9 f7       	brne	.-14     	; 0x1d5c <__ultoa_invert+0x86>
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	61 05       	cpc	r22, r1
    1d6e:	71 05       	cpc	r23, r1
    1d70:	08 95       	ret
    1d72:	9b 01       	movw	r18, r22
    1d74:	ac 01       	movw	r20, r24
    1d76:	0a 2e       	mov	r0, r26
    1d78:	06 94       	lsr	r0
    1d7a:	57 95       	ror	r21
    1d7c:	47 95       	ror	r20
    1d7e:	37 95       	ror	r19
    1d80:	27 95       	ror	r18
    1d82:	ba 95       	dec	r27
    1d84:	c9 f7       	brne	.-14     	; 0x1d78 <__ultoa_invert+0xa2>
    1d86:	62 0f       	add	r22, r18
    1d88:	73 1f       	adc	r23, r19
    1d8a:	84 1f       	adc	r24, r20
    1d8c:	95 1f       	adc	r25, r21
    1d8e:	a0 1d       	adc	r26, r0
    1d90:	08 95       	ret

00001d92 <eeprom_read_byte>:
    1d92:	e1 99       	sbic	0x1c, 1	; 28
    1d94:	fe cf       	rjmp	.-4      	; 0x1d92 <eeprom_read_byte>
    1d96:	9f bb       	out	0x1f, r25	; 31
    1d98:	8e bb       	out	0x1e, r24	; 30
    1d9a:	e0 9a       	sbi	0x1c, 0	; 28
    1d9c:	99 27       	eor	r25, r25
    1d9e:	8d b3       	in	r24, 0x1d	; 29
    1da0:	08 95       	ret

00001da2 <__prologue_saves__>:
    1da2:	2f 92       	push	r2
    1da4:	3f 92       	push	r3
    1da6:	4f 92       	push	r4
    1da8:	5f 92       	push	r5
    1daa:	6f 92       	push	r6
    1dac:	7f 92       	push	r7
    1dae:	8f 92       	push	r8
    1db0:	9f 92       	push	r9
    1db2:	af 92       	push	r10
    1db4:	bf 92       	push	r11
    1db6:	cf 92       	push	r12
    1db8:	df 92       	push	r13
    1dba:	ef 92       	push	r14
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	ca 1b       	sub	r28, r26
    1dcc:	db 0b       	sbc	r29, r27
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
    1dd8:	09 94       	ijmp

00001dda <__epilogue_restores__>:
    1dda:	2a 88       	ldd	r2, Y+18	; 0x12
    1ddc:	39 88       	ldd	r3, Y+17	; 0x11
    1dde:	48 88       	ldd	r4, Y+16	; 0x10
    1de0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1de2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1de4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1de6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1de8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1dea:	aa 84       	ldd	r10, Y+10	; 0x0a
    1dec:	b9 84       	ldd	r11, Y+9	; 0x09
    1dee:	c8 84       	ldd	r12, Y+8	; 0x08
    1df0:	df 80       	ldd	r13, Y+7	; 0x07
    1df2:	ee 80       	ldd	r14, Y+6	; 0x06
    1df4:	fd 80       	ldd	r15, Y+5	; 0x05
    1df6:	0c 81       	ldd	r16, Y+4	; 0x04
    1df8:	1b 81       	ldd	r17, Y+3	; 0x03
    1dfa:	aa 81       	ldd	r26, Y+2	; 0x02
    1dfc:	b9 81       	ldd	r27, Y+1	; 0x01
    1dfe:	ce 0f       	add	r28, r30
    1e00:	d1 1d       	adc	r29, r1
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	ed 01       	movw	r28, r26
    1e0e:	08 95       	ret

00001e10 <_exit>:
    1e10:	f8 94       	cli

00001e12 <__stop_program>:
    1e12:	ff cf       	rjmp	.-2      	; 0x1e12 <__stop_program>
