
EE311.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001710  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00001710  000017a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001d7  00800084  00800084  000017c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000100b  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081a  00000000  00000000  00002917  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb4  00000000  00000000  00003131  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00003ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c6  00000000  00000000  00003ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000344  00000000  00000000  00004496  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000047da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	a8 c1       	rjmp	.+848    	; 0x358 <__vector_3>
       8:	d4 c1       	rjmp	.+936    	; 0x3b2 <__vector_4>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	ab c0       	rjmp	.+342    	; 0x164 <__vector_6>
       e:	f8 c0       	rjmp	.+496    	; 0x200 <__vector_7>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	91 c0       	rjmp	.+290    	; 0x136 <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	5e c0       	rjmp	.+188    	; 0xd4 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 e1       	ldi	r30, 0x10	; 16
      3a:	f7 e1       	ldi	r31, 0x17	; 23
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a4 38       	cpi	r26, 0x84	; 132
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	22 e0       	ldi	r18, 0x02	; 2
      4a:	a4 e8       	ldi	r26, 0x84	; 132
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	ab 35       	cpi	r26, 0x5B	; 91
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	e7 d1       	rcall	.+974    	; 0x428 <main>
      5a:	58 cb       	rjmp	.-2384   	; 0xfffff70c <__eeprom_end+0xff7ef70c>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <adc_read>:
#include "adc.h"

#define ADCSTATUS (ADCSRA & (1<<ADIF))

uint16_t adc_read(uint8_t channel){
	ADMUX &= 0xF0; //clear previous setting
      5e:	97 b1       	in	r25, 0x07	; 7
      60:	90 7f       	andi	r25, 0xF0	; 240
      62:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel; //add channel setting
      64:	97 b1       	in	r25, 0x07	; 7
      66:	89 2b       	or	r24, r25
      68:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA |= (1<<ADSC); //start conversion
      6a:	36 9a       	sbi	0x06, 6	; 6
	
	while (ADCSTATUS == 0){ //block until conversion finishes
      6c:	34 9b       	sbis	0x06, 4	; 6
      6e:	fe cf       	rjmp	.-4      	; 0x6c <adc_read+0xe>
	}
	return ADC; //return value in mV  
      70:	84 b1       	in	r24, 0x04	; 4
      72:	95 b1       	in	r25, 0x05	; 5
	
}
      74:	08 95       	ret

00000076 <adc_convert>:

uint32_t adc_convert(uint16_t rawvalue){
	return (uint32_t)((uint32_t)rawvalue*voltagereference/1024);
      76:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <voltagereference>
      7a:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <voltagereference+0x1>
      7e:	9c 01       	movw	r18, r24
      80:	8e d8       	rcall	.-3812   	; 0xfffff19e <__eeprom_end+0xff7ef19e>
      82:	2a e0       	ldi	r18, 0x0A	; 10
      84:	96 95       	lsr	r25
      86:	87 95       	ror	r24
      88:	77 95       	ror	r23
      8a:	67 95       	ror	r22
      8c:	2a 95       	dec	r18
      8e:	d1 f7       	brne	.-12     	; 0x84 <adc_convert+0xe>
}
      90:	08 95       	ret

00000092 <update_vref>:

void update_vref(){
	ADMUX |= 14; //set channel to bandgap reference
      92:	87 b1       	in	r24, 0x07	; 7
      94:	8e 60       	ori	r24, 0x0E	; 14
      96:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); //start conversion
      98:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSTATUS == 0){ //block until conversion finishes
      9a:	34 9b       	sbis	0x06, 4	; 6
      9c:	fe cf       	rjmp	.-4      	; 0x9a <update_vref+0x8>
	}
	uint16_t bgrawvalue = ADC; //store ADC value for bandgap (1.30V)
      9e:	24 b1       	in	r18, 0x04	; 4
      a0:	35 b1       	in	r19, 0x05	; 5
	voltagereference = (uint32_t)((uint32_t)1300*1024/bgrawvalue); //calculate vref using bandgap
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	50 e0       	ldi	r21, 0x00	; 0
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	70 e5       	ldi	r23, 0x50	; 80
      aa:	84 e1       	ldi	r24, 0x14	; 20
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	55 d8       	rcall	.-3926   	; 0xfffff15a <__eeprom_end+0xff7ef15a>
      b0:	30 93 a1 00 	sts	0x00A1, r19	; 0x8000a1 <voltagereference+0x1>
      b4:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <voltagereference>
      b8:	08 95       	ret

000000ba <adc_init>:
}

void adc_init(){
	ADMUX &= ~(1<<REFS1);
      ba:	3f 98       	cbi	0x07, 7	; 7
	ADMUX |= (1<<REFS0); //use AVcc reference
      bc:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN); //enable ADC
      be:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= ((1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2)); //use clock divider of /128 for 125khz ADC frequency
      c0:	86 b1       	in	r24, 0x06	; 6
      c2:	87 60       	ori	r24, 0x07	; 7
      c4:	86 b9       	out	0x06, r24	; 6
	voltagereference = 5000;
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
      ca:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <voltagereference+0x1>
      ce:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <voltagereference>
	update_vref();
      d2:	df cf       	rjmp	.-66     	; 0x92 <update_vref>

000000d4 <__vector_11>:
 *  Author: sshe325
 */ 

#include "interrupts.h"

ISR(USART_RXC_vect){
      d4:	1f 92       	push	r1
      d6:	0f 92       	push	r0
      d8:	0f b6       	in	r0, 0x3f	; 63
      da:	0f 92       	push	r0
      dc:	11 24       	eor	r1, r1
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	00 d0       	rcall	.+0      	; 0xe4 <__vector_11+0x10>
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
	//dynamically allocate and reallocate space for string
	str_buffer = calloc(1,sizeof(char));
      e8:	61 e0       	ldi	r22, 0x01	; 1
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	c1 d8       	rcall	.-3710   	; 0xfffff274 <__eeprom_end+0xff7ef274>
      f2:	8c 01       	movw	r16, r24
      f4:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <str_buffer+0x1>
      f8:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <str_buffer>
	char* buffer_ptr = str_buffer;
	int size = 1;
	*str_buffer = uart_receive();
      fc:	17 d6       	rcall	.+3118   	; 0xd2c <uart_receive>
      fe:	f8 01       	movw	r30, r16
     100:	80 83       	st	Z, r24

ISR(USART_RXC_vect){
	//dynamically allocate and reallocate space for string
	str_buffer = calloc(1,sizeof(char));
	char* buffer_ptr = str_buffer;
	int size = 1;
     102:	01 e0       	ldi	r16, 0x01	; 1
     104:	10 e0       	ldi	r17, 0x00	; 0
	*str_buffer = uart_receive();
	//only end receive when we receive a newline
	while ((*buffer_ptr != '\n') || (*buffer_ptr != '\r')){
		str_buffer = realloc(str_buffer,(++size)*sizeof(char));
     106:	0f 5f       	subi	r16, 0xFF	; 255
     108:	1f 4f       	sbci	r17, 0xFF	; 255
     10a:	b8 01       	movw	r22, r16
     10c:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <str_buffer>
     110:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <str_buffer+0x1>
     114:	ea d9       	rcall	.-3116   	; 0xfffff4ea <__eeprom_end+0xff7ef4ea>
     116:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <str_buffer+0x1>
     11a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <str_buffer>
		//make a null terminated string for strcat()
		char uart_char[2];
		uart_char[0] = uart_receive();
     11e:	06 d6       	rcall	.+3084   	; 0xd2c <uart_receive>
     120:	89 83       	std	Y+1, r24	; 0x01
		uart_char[1] = '\0';
     122:	1a 82       	std	Y+2, r1	; 0x02
		strcat(str_buffer,uart_char);
     124:	be 01       	movw	r22, r28
     126:	6f 5f       	subi	r22, 0xFF	; 255
     128:	7f 4f       	sbci	r23, 0xFF	; 255
     12a:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <str_buffer>
     12e:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <str_buffer+0x1>
     132:	aa da       	rcall	.-2732   	; 0xfffff688 <__eeprom_end+0xff7ef688>
     134:	e8 cf       	rjmp	.-48     	; 0x106 <__vector_11+0x32>

00000136 <__vector_9>:
	//set flag to indicate received data
	data_received = 1;
}

//interrupt to increment overflow counter
ISR(TIMER0_OVF_vect){
     136:	1f 92       	push	r1
     138:	0f 92       	push	r0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	0f 92       	push	r0
     13e:	11 24       	eor	r1, r1
     140:	8f 93       	push	r24
     142:	9f 93       	push	r25
	++timer0_ovf_count;
     144:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <timer0_ovf_count>
     148:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <timer0_ovf_count+0x1>
     14c:	01 96       	adiw	r24, 0x01	; 1
     14e:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <timer0_ovf_count+0x1>
     152:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <timer0_ovf_count>
}
     156:	9f 91       	pop	r25
     158:	8f 91       	pop	r24
     15a:	0f 90       	pop	r0
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	0f 90       	pop	r0
     160:	1f 90       	pop	r1
     162:	18 95       	reti

00000164 <__vector_6>:

//interrupt to handle T/4 or 3T/4 time crossing
ISR(TIMER1_COMPA_vect){
     164:	1f 92       	push	r1
     166:	0f 92       	push	r0
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	0f 92       	push	r0
     16c:	11 24       	eor	r1, r1
     16e:	8f 93       	push	r24
     170:	9f 93       	push	r25
		//turn off PWM timer
		TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     172:	85 b5       	in	r24, 0x25	; 37
     174:	88 7f       	andi	r24, 0xF8	; 248
     176:	85 bd       	out	0x25, r24	; 37
		//PORTD &= ~(1<<PD7);
		//turn on right NMOS
		//PORTB &= ~(1<<PB0);
		
		//indicate that RHS/LHS voltage are both off
		voltage_right_on = 0;
     178:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <voltage_right_on+0x1>
     17c:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <voltage_right_on>
		voltage_left_on = 0;
     180:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <voltage_left_on+0x1>
     184:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <voltage_left_on>
		
		//since we have stopped pulsing PWM, stop reading current ADC
		readadci = 0;
     188:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <readadci+0x1>
     18c:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <readadci>
		//disable PWM signals
		if (!t2){
     190:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     194:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
			//right to left current
			//turn off PMOSes, turn on left NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
     198:	c2 98       	cbi	0x18, 2	; 24
		voltage_left_on = 0;
		
		//since we have stopped pulsing PWM, stop reading current ADC
		readadci = 0;
		//disable PWM signals
		if (!t2){
     19a:	89 2b       	or	r24, r25
     19c:	71 f4       	brne	.+28     	; 0x1ba <__vector_6+0x56>
			//right to left current
			//turn off PMOSes, turn on left NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
			//turn on left NMOS
			PORTB &= ~(1<<PB1);
     19e:	c1 98       	cbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     1a0:	97 98       	cbi	0x12, 7	; 18
			//turn off right NMOS
			PORTB |= (1<<PB0);
     1a2:	c0 9a       	sbi	0x18, 0	; 24
			//indicate that we are ready to start reading motor LHS back emf
			readadc = 1;
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <readadc+0x1>
     1ac:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <readadc>
			readadcmotorleft = 1;
     1b0:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <readadcmotorleft+0x1>
     1b4:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <readadcmotorleft>
     1b8:	0d c0       	rjmp	.+26     	; 0x1d4 <__vector_6+0x70>
			//left to right current
			//turn off PMOSes, turn on right NMOS so motor generates back emf
			//turn off left PMOS
			PORTB &= ~(1<<PB2);
			//turn off left NMOS
			PORTB |= (1<<PB1);
     1ba:	c1 9a       	sbi	0x18, 1	; 24
			//turn off right PMOS
			PORTD &= ~(1<<PD7);
     1bc:	97 98       	cbi	0x12, 7	; 18
			//turn on right NMOS
			PORTB &= ~(1<<PB0);
     1be:	c0 98       	cbi	0x18, 0	; 24
			//indicate that we are ready to start reading motor RHS back emf
			readadc = 1;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <readadc+0x1>
     1c8:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <readadc>
			readadcmotorright = 1;
     1cc:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <readadcmotorright+0x1>
     1d0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <readadcmotorright>
			backemffound = 0;
     1d4:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <backemffound+0x1>
     1d8:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <backemffound>
			//reset backemf index
			backemfreadingindex = 0;
     1dc:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <backemfreadingindex+0x1>
     1e0:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <backemfreadingindex>
		}
		//turn on timer 0 with prescaler /256 to measure backemf time
		TCCR0 |= ((1<<CS02));
     1e4:	83 b7       	in	r24, 0x33	; 51
     1e6:	84 60       	ori	r24, 0x04	; 4
     1e8:	83 bf       	out	0x33, r24	; 51
		TCCR0 &= ~((1<<CS01)|(1<<CS00));
     1ea:	83 b7       	in	r24, 0x33	; 51
     1ec:	8c 7f       	andi	r24, 0xFC	; 252
     1ee:	83 bf       	out	0x33, r24	; 51
		//reset PWM timer counter
		TCNT2 = 0;
     1f0:	14 bc       	out	0x24, r1	; 36
}
     1f2:	9f 91       	pop	r25
     1f4:	8f 91       	pop	r24
     1f6:	0f 90       	pop	r0
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	0f 90       	pop	r0
     1fc:	1f 90       	pop	r1
     1fe:	18 95       	reti

00000200 <__vector_7>:

//interrupt to handle T or T/2 time crossing
ISR(TIMER1_COMPB_vect){
     200:	1f 92       	push	r1
     202:	0f 92       	push	r0
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	0f 92       	push	r0
     208:	11 24       	eor	r1, r1
     20a:	2f 93       	push	r18
     20c:	3f 93       	push	r19
     20e:	8f 93       	push	r24
     210:	9f 93       	push	r25
		TCCR1B |= (1<<CS12);
		TCCR1B &= ~((1<<CS11) | (1<<CS10));
		stop_counter = 0;
	}*/
		//back emf pulse has expired (we are driving the motor now), stop reading the adc
		readadcmotorleft = 0;
     212:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <readadcmotorleft+0x1>
     216:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <readadcmotorleft>
		readadcmotorright = 0;
     21a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <readadcmotorright+0x1>
     21e:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <readadcmotorright>
		if (numcycles >= 50){
     222:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <numcycles>
     226:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <numcycles+0x1>
				backemffreq = 1000000000/backemftime;
				backemffound = 1; //indicate that a back emf value has been "found"
			}*/
		}
		
		if (t2){
     22a:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     22e:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
     232:	89 2b       	or	r24, r25
     234:	39 f1       	breq	.+78     	; 0x284 <__vector_7+0x84>
			//T time crossing has been handled, T/2 is next
			t2 = 0;
     236:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <t2+0x1>
     23a:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <t2>
			//turn off timer1
			TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     23e:	8e b5       	in	r24, 0x2e	; 46
     240:	88 7f       	andi	r24, 0xF8	; 248
     242:	8e bd       	out	0x2e, r24	; 46
			//turn off PWM
			TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     244:	85 b5       	in	r24, 0x25	; 37
     246:	88 7f       	andi	r24, 0xF8	; 248
     248:	85 bd       	out	0x25, r24	; 37
			//reset timer1 counter
			TCNT1 = 0;
     24a:	1d bc       	out	0x2d, r1	; 45
     24c:	1c bc       	out	0x2c, r1	; 44
			//reset PWM timer counter
			TCNT2 = 0;
     24e:	14 bc       	out	0x24, r1	; 36
			//turn on timer 1 again (prescaler /256)
			TCCR1B |= (1<<CS12);
     250:	8e b5       	in	r24, 0x2e	; 46
     252:	84 60       	ori	r24, 0x04	; 4
     254:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &= ~((1<<CS11) | (1<<CS10));
     256:	8e b5       	in	r24, 0x2e	; 46
     258:	8c 7f       	andi	r24, 0xFC	; 252
     25a:	8e bd       	out	0x2e, r24	; 46
			//turn on PWM signals
			if (t2){
     25c:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     260:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
     264:	89 2b       	or	r24, r25
     266:	39 f0       	breq	.+14     	; 0x276 <__vector_7+0x76>
				//right to left current
				//turn off left PMOS
				PORTB &= ~(1<<PB2);
     268:	c2 98       	cbi	0x18, 2	; 24
				//turn on left NMOS
				PORTB &= ~(1<<PB1);
     26a:	c1 98       	cbi	0x18, 1	; 24
				//turn on right PMOS
				PORTD |= (1<<PD7);
     26c:	97 9a       	sbi	0x12, 7	; 18
				//turn off right NMOS
				PORTB |= (1<<PB0);
     26e:	c0 9a       	sbi	0x18, 0	; 24
				//indicate that we are ready to read adc from motor RHS to measure voltage and current
				readadc = 1;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	26 c0       	rjmp	.+76     	; 0x2c2 <__vector_7+0xc2>
				voltage_right_on = 1;
			}
			else{
				//left to right current
				//turn on left PMOS
				PORTB |= (1<<PB2);
     276:	c2 9a       	sbi	0x18, 2	; 24
				//turn off left NMOS
				PORTB |= (1<<PB1);
     278:	c1 9a       	sbi	0x18, 1	; 24
				//turn off right PMOS
				PORTD &= ~(1<<PD7);
     27a:	97 98       	cbi	0x12, 7	; 18
				//turn on right NMOS
				PORTB &= ~(1<<PB0);
     27c:	c0 98       	cbi	0x18, 0	; 24
				//indicate that we are ready to read adc from motor LHS to measure voltage and current
				readadc = 1;
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	34 c0       	rjmp	.+104    	; 0x2ec <__vector_7+0xec>
			TCCR2 |= ((1<<CS22) | (1<<CS21));
			TCCR2 &= ~((1<<CS20));
			
		}
		else{
			t2 = 1;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <t2+0x1>
     28c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <t2>
			//turn off timer1
			TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     290:	2e b5       	in	r18, 0x2e	; 46
     292:	28 7f       	andi	r18, 0xF8	; 248
     294:	2e bd       	out	0x2e, r18	; 46
			//turn off PWM
			TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     296:	25 b5       	in	r18, 0x25	; 37
     298:	28 7f       	andi	r18, 0xF8	; 248
     29a:	25 bd       	out	0x25, r18	; 37
			//reset timer1 counter
			TCNT1 = 0;
     29c:	1d bc       	out	0x2d, r1	; 45
     29e:	1c bc       	out	0x2c, r1	; 44
			//reset PWM timer counter
			TCNT2 = 0;
     2a0:	14 bc       	out	0x24, r1	; 36
			//turn on timer 1 again (prescaler /256)
			TCCR1B |= (1<<CS12);
     2a2:	2e b5       	in	r18, 0x2e	; 46
     2a4:	24 60       	ori	r18, 0x04	; 4
     2a6:	2e bd       	out	0x2e, r18	; 46
			TCCR1B &= ~((1<<CS11) | (1<<CS10));
     2a8:	2e b5       	in	r18, 0x2e	; 46
     2aa:	2c 7f       	andi	r18, 0xFC	; 252
     2ac:	2e bd       	out	0x2e, r18	; 46
			//turn on PWM timer counter (prescaler /64)
			//turn on PWM signals
			if (t2){
     2ae:	20 91 ae 00 	lds	r18, 0x00AE	; 0x8000ae <t2>
     2b2:	30 91 af 00 	lds	r19, 0x00AF	; 0x8000af <t2+0x1>
     2b6:	23 2b       	or	r18, r19
     2b8:	a9 f0       	breq	.+42     	; 0x2e4 <__vector_7+0xe4>
				//right to left current
				//turn off left PMOS
				PORTB &= ~(1<<PB2);
     2ba:	c2 98       	cbi	0x18, 2	; 24
				//turn on left NMOS
				PORTB &= ~(1<<PB1);
     2bc:	c1 98       	cbi	0x18, 1	; 24
				//turn on right PMOS
				PORTD |= (1<<PD7);
     2be:	97 9a       	sbi	0x12, 7	; 18
				//turn off right NMOS
				PORTB |= (1<<PB0);
     2c0:	c0 9a       	sbi	0x18, 0	; 24
				//indicate that we are ready to read adc from motor RHS to measure voltage and current
				readadc = 1;
     2c2:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <readadc+0x1>
     2c6:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <readadc>
				readadcv = 1;
     2ca:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <readadcv+0x1>
     2ce:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <readadcv>
				readadci = 1;
     2d2:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <readadci+0x1>
     2d6:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <readadci>
				//indicate that RHS voltage is on
				voltage_right_on = 1;
     2da:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <voltage_right_on+0x1>
     2de:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <voltage_right_on>
     2e2:	14 c0       	rjmp	.+40     	; 0x30c <__vector_7+0x10c>
			}
			else{
				//left to right current
				//turn on left PMOS
				PORTB |= (1<<PB2);
     2e4:	c2 9a       	sbi	0x18, 2	; 24
				//turn off left NMOS
				PORTB |= (1<<PB1);
     2e6:	c1 9a       	sbi	0x18, 1	; 24
				//turn off right PMOS
				PORTD &= ~(1<<PD7);
     2e8:	97 98       	cbi	0x12, 7	; 18
				//turn on right NMOS
				PORTB &= ~(1<<PB0);
     2ea:	c0 98       	cbi	0x18, 0	; 24
				//indicate that we are ready to read adc from motor LHS to measure voltage and current
				readadc = 1;
     2ec:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <readadc+0x1>
     2f0:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <readadc>
				readadcv = 1;
     2f4:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <readadcv+0x1>
     2f8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <readadcv>
				readadci = 1;
     2fc:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <readadci+0x1>
     300:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <readadci>
				//indicate that LHS voltage is on
				voltage_left_on = 1;
     304:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <voltage_left_on+0x1>
     308:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <voltage_left_on>
			}
			//turn on PWM timer counter (prescaler /256)
			TCCR2 |= ((1<<CS22) | (1<<CS21));
     30c:	85 b5       	in	r24, 0x25	; 37
     30e:	86 60       	ori	r24, 0x06	; 6
     310:	85 bd       	out	0x25, r24	; 37
			TCCR2 &= ~((1<<CS20));
     312:	85 b5       	in	r24, 0x25	; 37
     314:	8e 7f       	andi	r24, 0xFE	; 254
     316:	85 bd       	out	0x25, r24	; 37
			
		}
		//++stop_counter;
		//stop back emf timer since the time to measure it has expired
		TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     318:	83 b7       	in	r24, 0x33	; 51
     31a:	88 7f       	andi	r24, 0xF8	; 248
     31c:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;
     31e:	12 be       	out	0x32, r1	; 50
		timer0_ovf_count = 0;
     320:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <timer0_ovf_count+0x1>
     324:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <timer0_ovf_count>
		if (numcycles != 50) ++numcycles;
     328:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <numcycles>
     32c:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <numcycles+0x1>
     330:	c2 97       	sbiw	r24, 0x32	; 50
     332:	49 f0       	breq	.+18     	; 0x346 <__vector_7+0x146>
     334:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <numcycles>
     338:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <numcycles+0x1>
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <numcycles+0x1>
     342:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <numcycles>
}
     346:	9f 91       	pop	r25
     348:	8f 91       	pop	r24
     34a:	3f 91       	pop	r19
     34c:	2f 91       	pop	r18
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <__vector_3>:

//PWM duty cycle expired, shut off PWM signals
ISR(TIMER2_COMP_vect){
     358:	1f 92       	push	r1
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	0f 92       	push	r0
     360:	11 24       	eor	r1, r1
     362:	8f 93       	push	r24
     364:	9f 93       	push	r25
		PORTD &= ~(1<<PD7);
		//turn off right NMOS
		PORTB |= (1<<PB0);
	}*/
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     366:	85 b5       	in	r24, 0x25	; 37
     368:	88 7f       	andi	r24, 0xF8	; 248
     36a:	85 bd       	out	0x25, r24	; 37
	
	if (t2){
     36c:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     370:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
		//right to left current
		//turn off PMOSes, turn on left NMOS so motor brakes
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     374:	c2 98       	cbi	0x18, 2	; 24
		PORTB |= (1<<PB0);
	}*/
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
	
	if (t2){
     376:	89 2b       	or	r24, r25
     378:	41 f0       	breq	.+16     	; 0x38a <__vector_3+0x32>
		//right to left current
		//turn off PMOSes, turn on left NMOS so motor brakes
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     37a:	c1 98       	cbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     37c:	97 98       	cbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     37e:	c0 9a       	sbi	0x18, 0	; 24
		//indicate that RHS voltage is off
		voltage_right_on = 0;
     380:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <voltage_right_on+0x1>
     384:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <voltage_right_on>
     388:	07 c0       	rjmp	.+14     	; 0x398 <__vector_3+0x40>
		//left to right current
		//turn off PMOSes, turn on right NMOS so motor brakes?!
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
		//turn off left NMOS
		PORTB |= (1<<PB1);
     38a:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     38c:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     38e:	c0 98       	cbi	0x18, 0	; 24
		//indicate that LHS voltage is off
		voltage_left_on = 0;
     390:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <voltage_left_on+0x1>
     394:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <voltage_left_on>
	}
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     398:	85 b5       	in	r24, 0x25	; 37
     39a:	86 60       	ori	r24, 0x06	; 6
     39c:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     39e:	85 b5       	in	r24, 0x25	; 37
     3a0:	8e 7f       	andi	r24, 0xFE	; 254
     3a2:	85 bd       	out	0x25, r24	; 37
}
     3a4:	9f 91       	pop	r25
     3a6:	8f 91       	pop	r24
     3a8:	0f 90       	pop	r0
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	0f 90       	pop	r0
     3ae:	1f 90       	pop	r1
     3b0:	18 95       	reti

000003b2 <__vector_4>:

//PWM restarted, change switches according to current current direction
ISR(TIMER2_OVF_vect){
     3b2:	1f 92       	push	r1
     3b4:	0f 92       	push	r0
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	0f 92       	push	r0
     3ba:	11 24       	eor	r1, r1
     3bc:	8f 93       	push	r24
     3be:	9f 93       	push	r25
	//turn off PWM
	TCCR2 &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     3c0:	85 b5       	in	r24, 0x25	; 37
     3c2:	88 7f       	andi	r24, 0xF8	; 248
     3c4:	85 bd       	out	0x25, r24	; 37
	TCCR2 = 0;
     3c6:	15 bc       	out	0x25, r1	; 37
	if (t2){
     3c8:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <t2>
     3cc:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <t2+0x1>
     3d0:	89 2b       	or	r24, r25
     3d2:	79 f0       	breq	.+30     	; 0x3f2 <__vector_4+0x40>
		//right to left current
		//turn off left PMOS
		PORTB &= ~(1<<PB2);
     3d4:	c2 98       	cbi	0x18, 2	; 24
		//turn on left NMOS
		PORTB &= ~(1<<PB1);
     3d6:	c1 98       	cbi	0x18, 1	; 24
		//turn on right PMOS
		PORTD |= (1<<PD7);
     3d8:	97 9a       	sbi	0x12, 7	; 18
		//turn off right NMOS
		PORTB |= (1<<PB0);
     3da:	c0 9a       	sbi	0x18, 0	; 24
		//indicate that RHS voltage is on
		readadc = 1;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <readadc+0x1>
     3e4:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <readadc>
		voltage_right_on = 1;
     3e8:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <voltage_right_on+0x1>
     3ec:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <voltage_right_on>
     3f0:	0e c0       	rjmp	.+28     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	}
	else{
		//left to right current
		//turn on left PMOS
		PORTB |= (1<<PB2);
     3f2:	c2 9a       	sbi	0x18, 2	; 24
		//turn off left NMOS
		PORTB |= (1<<PB1);
     3f4:	c1 9a       	sbi	0x18, 1	; 24
		//turn off right PMOS
		PORTD &= ~(1<<PD7);
     3f6:	97 98       	cbi	0x12, 7	; 18
		//turn on right NMOS
		PORTB &= ~(1<<PB0);
     3f8:	c0 98       	cbi	0x18, 0	; 24
		//indicate that LHS voltage is on
		readadc = 1;
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <readadc+0x1>
     402:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <readadc>
		voltage_left_on = 1;
     406:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <voltage_left_on+0x1>
     40a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <voltage_left_on>
	}
	//turn on PWM timer counter (prescaler /256)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     40e:	85 b5       	in	r24, 0x25	; 37
     410:	86 60       	ori	r24, 0x06	; 6
     412:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     414:	85 b5       	in	r24, 0x25	; 37
     416:	8e 7f       	andi	r24, 0xFE	; 254
     418:	85 bd       	out	0x25, r24	; 37
     41a:	9f 91       	pop	r25
     41c:	8f 91       	pop	r24
     41e:	0f 90       	pop	r0
     420:	0f be       	out	0x3f, r0	; 63
     422:	0f 90       	pop	r0
     424:	1f 90       	pop	r1
     426:	18 95       	reti

00000428 <main>:
uint32_t powerarray[NUMSAMPLESI];
uint64_t currentvalue = 0;
uint64_t powervalue = 0;

int main(void)
{
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	66 97       	sbiw	r28, 0x16	; 22
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
	//char transmit_buffer[200];
	//sprintf(transmit_buffer, "{\n%3s\"3\":\n%3s{\n%7s\"mfc\":\n%7s{\n%11s\"req\": \"%3s\",\n%11s\"cur\": \"%3s\"\n%7s},\n%7s\"ver\": \"1.0.0\",\n%7s\"param\":\n%7s{\n%11s\"pwr\":  \"%d.%dW\",\n%11s\"freq\": \"%d.%dHz\",\n%11s\"curr\": \"%dmA\",\n%11s\"volt\": \"%d.%dV\",\n%7s}\n%3s}\n}", "", "", "", "", "", "", "", OCR2, "", "", "", "", "", powerleft, powerright, "", freqleft, freqright, "", current, "", voltleft, voltright, "", "");
	//eeprom_write_byte(0,'0');
	t2 = 0; //flag for if T/2 time crossing is next to be handled
     43c:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <t2+0x1>
     440:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <t2>
	stop_counter = 0; //counter to stop PWM every STOPCYCLE/2 number of cycles
     444:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <stop_counter+0x1>
     448:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <stop_counter>
	data_received = 0; //set data received flag to 0 initially
     44c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <data_received+0x1>
     450:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <data_received>
	timer0_ovf_count = 0;//set timer0 overflow count to 0 initially
     454:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <timer0_ovf_count+0x1>
     458:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <timer0_ovf_count>
	current_i = 0; //initialise current reading index
     45c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <current_i+0x1>
     460:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <current_i>
	backemfreadingindex = 0; //initialise backemf reading index
     464:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <backemfreadingindex+0x1>
     468:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <backemfreadingindex>
	readadc = 0;
     46c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <readadc+0x1>
     470:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <readadc>
	readadcv = 0;
     474:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <readadcv+0x1>
     478:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <readadcv>
	readadci = 0;
     47c:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <readadci+0x1>
     480:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <readadci>
	numcycles = 0;
     484:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <numcycles+0x1>
     488:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <numcycles>
	voltagereference = 5000;
     48c:	88 e8       	ldi	r24, 0x88	; 136
     48e:	93 e1       	ldi	r25, 0x13	; 19
     490:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <voltagereference+0x1>
     494:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <voltagereference>
	//set PWM ports as output
	DDRB |= ((1<<PB2)|(1<<PB1)|(1<<PB0));
     498:	87 b3       	in	r24, 0x17	; 23
     49a:	87 60       	ori	r24, 0x07	; 7
     49c:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<PD7);
     49e:	8f 9a       	sbi	0x11, 7	; 17
	
	//set normal timer mode
	TCCR2 &= ~(1<<WGM20);
     4a0:	85 b5       	in	r24, 0x25	; 37
     4a2:	8f 7b       	andi	r24, 0xBF	; 191
     4a4:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(1<<WGM21);
     4a6:	85 b5       	in	r24, 0x25	; 37
     4a8:	87 7f       	andi	r24, 0xF7	; 247
     4aa:	85 bd       	out	0x25, r24	; 37
	
	//disconnect OC2 port
	TCCR2 &= ~((1<<COM21) | (1<<COM20));
     4ac:	85 b5       	in	r24, 0x25	; 37
     4ae:	8f 7c       	andi	r24, 0xCF	; 207
     4b0:	85 bd       	out	0x25, r24	; 37
	
	//set output compare value for timer 2 between 0-255 (OCR2/255 % duty cycle)
	duty_request = 128;
     4b2:	80 e8       	ldi	r24, 0x80	; 128
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <duty_request+0x1>
     4ba:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <duty_request>
	OCR2 = duty_request;
     4be:	80 e8       	ldi	r24, 0x80	; 128
     4c0:	83 bd       	out	0x23, r24	; 35
	
	//set prescaler of 64 (gives effective PWM frequency of 980Hz)
	//TCCR2 |= (1<<CS22);
	//TCCR2 &= ~((1<<CS21) | (1<<CS20));
	//set prescaler of 256 (gives effective PWM frequency of 245Hz)
	TCCR2 |= ((1<<CS22) | (1<<CS21));
     4c2:	85 b5       	in	r24, 0x25	; 37
     4c4:	86 60       	ori	r24, 0x06	; 6
     4c6:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<CS20));
     4c8:	85 b5       	in	r24, 0x25	; 37
     4ca:	8e 7f       	andi	r24, 0xFE	; 254
     4cc:	85 bd       	out	0x25, r24	; 37
	
	//turn off PMOSes, turn on NMOSes so motor brakes?!
	//turn off left PMOS
	PORTB &= ~(1<<PB2);
     4ce:	c2 98       	cbi	0x18, 2	; 24
	//turn on left NMOS
	PORTB &= ~(1<<PB1);
     4d0:	c1 98       	cbi	0x18, 1	; 24
	//turn off right PMOS
	PORTD &= ~(1<<PD7);
     4d2:	97 98       	cbi	0x12, 7	; 18
	//turn on right NMOS
	PORTB &= ~(1<<PB0);
     4d4:	c0 98       	cbi	0x18, 0	; 24
	
	//set timer 1 to normal mode
	TCCR1B &= ~((1<<WGM13) | (1<<WGM12));
     4d6:	8e b5       	in	r24, 0x2e	; 46
     4d8:	87 7e       	andi	r24, 0xE7	; 231
     4da:	8e bd       	out	0x2e, r24	; 46
	TCCR1A &= ~((1<<WGM11) | (1<<WGM10));
     4dc:	8f b5       	in	r24, 0x2f	; 47
     4de:	8c 7f       	andi	r24, 0xFC	; 252
     4e0:	8f bd       	out	0x2f, r24	; 47
	
	//set prescaler to /256
	TCCR1B |= (1<<CS12);
     4e2:	8e b5       	in	r24, 0x2e	; 46
     4e4:	84 60       	ori	r24, 0x04	; 4
     4e6:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1<<CS11) | (1<<CS10));
     4e8:	8e b5       	in	r24, 0x2e	; 46
     4ea:	8c 7f       	andi	r24, 0xFC	; 252
     4ec:	8e bd       	out	0x2e, r24	; 46
	
	//set timer 1 overflow A and B compare values
	OCR1A = 1150; //for T/4
     4ee:	8e e7       	ldi	r24, 0x7E	; 126
     4f0:	94 e0       	ldi	r25, 0x04	; 4
     4f2:	9b bd       	out	0x2b, r25	; 43
     4f4:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 2300; //for 12.5Hz resonant frequency (for T/2)
     4f6:	8c ef       	ldi	r24, 0xFC	; 252
     4f8:	98 e0       	ldi	r25, 0x08	; 8
     4fa:	99 bd       	out	0x29, r25	; 41
     4fc:	88 bd       	out	0x28, r24	; 40
	//enable timer 2 compare match interrupt and overflow interrupt
	TIMSK |= ((1<<OCIE2) | (1<<TOIE2));
     4fe:	89 b7       	in	r24, 0x39	; 57
     500:	80 6c       	ori	r24, 0xC0	; 192
     502:	89 bf       	out	0x39, r24	; 57
	//enable timer 1 compare match A and B interrupts
	TIMSK |= ((1<<OCIE1A) | (1<<OCIE1B));
     504:	89 b7       	in	r24, 0x39	; 57
     506:	88 61       	ori	r24, 0x18	; 24
     508:	89 bf       	out	0x39, r24	; 57
	//enable timer 0 overflow interrupt
	TIMSK |= (1<<TOIE0);
     50a:	89 b7       	in	r24, 0x39	; 57
     50c:	81 60       	ori	r24, 0x01	; 1
     50e:	89 bf       	out	0x39, r24	; 57
	//mark T PWM pulse to be handled next
	t2 = 0;
     510:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <t2+0x1>
     514:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <t2>
	
	//enable and initialise UART
	uart_init();
     518:	f4 d3       	rcall	.+2024   	; 0xd02 <uart_init>
	//enable and initialise ADC
	adc_init();
     51a:	cf dd       	rcall	.-1122   	; 0xba <adc_init>
	//enable global interrupts
	sei();
     51c:	78 94       	sei
    while (1)
    {
		//gradual duty cycle increase logic to couple with resonant frequency detection module
		//this is because changing the PWM duty cycle also changes the resonant frequency
		if (OCR2 < duty_request)
     51e:	23 b5       	in	r18, 0x23	; 35
     520:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <duty_request>
     524:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <duty_request+0x1>
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	28 17       	cp	r18, r24
     52c:	39 07       	cpc	r19, r25
     52e:	10 f4       	brcc	.+4      	; 0x534 <__stack+0xd5>
			OCR2 = duty_request + 1;
     530:	8f 5f       	subi	r24, 0xFF	; 255
     532:	06 c0       	rjmp	.+12     	; 0x540 <__stack+0xe1>
		else if (OCR2 > duty_request){
     534:	23 b5       	in	r18, 0x23	; 35
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	82 17       	cp	r24, r18
     53a:	93 07       	cpc	r25, r19
     53c:	10 f4       	brcc	.+4      	; 0x542 <__stack+0xe3>
			OCR2 = duty_request - 1;
     53e:	81 50       	subi	r24, 0x01	; 1
     540:	83 bd       	out	0x23, r24	; 35
			while (UDREMPTY == 0);
			//reenable receiver after transmission is complete
			UCSRB |= (1<<RXEN);
			transmit_data = 0;
		}*/
		uart_transmit(48);
     542:	80 e3       	ldi	r24, 0x30	; 48
     544:	ef d3       	rcall	.+2014   	; 0xd24 <uart_transmit>
		//if adc has to be read
		if (numcycles >= 50){
     546:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <numcycles>
     54a:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <numcycles+0x1>
     54e:	c2 97       	sbiw	r24, 0x32	; 50
     550:	08 f4       	brcc	.+2      	; 0x554 <__stack+0xf5>
     552:	91 c2       	rjmp	.+1314   	; 0xa76 <__stack+0x617>
			if (readadc){
     554:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <readadc>
     558:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <readadc+0x1>
     55c:	89 2b       	or	r24, r25
     55e:	09 f4       	brne	.+2      	; 0x562 <__stack+0x103>
     560:	8a c2       	rjmp	.+1300   	; 0xa76 <__stack+0x617>
				if (!backemffound){
     562:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <backemffound>
     566:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <backemffound+0x1>
     56a:	89 2b       	or	r24, r25
     56c:	09 f0       	breq	.+2      	; 0x570 <__stack+0x111>
     56e:	90 c1       	rjmp	.+800    	; 0x890 <__stack+0x431>
					if (readadcmotorleft){
     570:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <readadcmotorleft>
     574:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <readadcmotorleft+0x1>
     578:	89 2b       	or	r24, r25
     57a:	09 f4       	brne	.+2      	; 0x57e <__stack+0x11f>
     57c:	c1 c0       	rjmp	.+386    	; 0x700 <__stack+0x2a1>
						//turn off timer 0
						TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     57e:	83 b7       	in	r24, 0x33	; 51
     580:	88 7f       	andi	r24, 0xF8	; 248
     582:	83 bf       	out	0x33, r24	; 51
						//store time value for current sample
						backemftime = (TCNT0 + (timer0_ovf_count*256)); //store time value in 16 microseconds
     584:	22 b7       	in	r18, 0x32	; 50
     586:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <timer0_ovf_count>
     58a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <timer0_ovf_count+0x1>
     58e:	98 2f       	mov	r25, r24
     590:	88 27       	eor	r24, r24
     592:	82 0f       	add	r24, r18
     594:	91 1d       	adc	r25, r1
     596:	8c 01       	movw	r16, r24
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e0       	ldi	r20, 0x00	; 0
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	ba 01       	movw	r22, r20
     5a2:	8f 87       	std	Y+15, r24	; 0x0f
     5a4:	18 8b       	std	Y+16, r17	; 0x10
     5a6:	29 8b       	std	Y+17, r18	; 0x11
     5a8:	3a 8b       	std	Y+18, r19	; 0x12
     5aa:	4b 8b       	std	Y+19, r20	; 0x13
     5ac:	5c 8b       	std	Y+20, r21	; 0x14
     5ae:	6d 8b       	std	Y+21, r22	; 0x15
     5b0:	7e 8b       	std	Y+22, r23	; 0x16
     5b2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <backemftime>
     5b6:	10 93 75 00 	sts	0x0075, r17	; 0x800075 <backemftime+0x1>
     5ba:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <backemftime+0x2>
     5be:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <backemftime+0x3>
     5c2:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <backemftime+0x4>
     5c6:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <backemftime+0x5>
     5ca:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <backemftime+0x6>
     5ce:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <backemftime+0x7>
						//turn on timer 0 with prescaler /256 to keep measuring time
						TCCR0 |= ((1<<CS02));
     5d2:	83 b7       	in	r24, 0x33	; 51
     5d4:	84 60       	ori	r24, 0x04	; 4
     5d6:	83 bf       	out	0x33, r24	; 51
						TCCR0 &= ~((1<<CS01)|(1<<CS00));
     5d8:	83 b7       	in	r24, 0x33	; 51
     5da:	8c 7f       	andi	r24, 0xFC	; 252
     5dc:	83 bf       	out	0x33, r24	; 51
						
						reading = adc_convert((adc_read(LHSVOLTAGECHANNEL)));
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	3e dd       	rcall	.-1412   	; 0x5e <adc_read>
     5e2:	49 dd       	rcall	.-1390   	; 0x76 <adc_convert>
     5e4:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <reading+0x1>
     5e8:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <reading>
						if (backemfreadingindex >= 3){
     5ec:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <backemfreadingindex>
     5f0:	30 91 b7 00 	lds	r19, 0x00B7	; 0x8000b7 <backemfreadingindex+0x1>
     5f4:	23 30       	cpi	r18, 0x03	; 3
     5f6:	31 05       	cpc	r19, r1
     5f8:	d0 f0       	brcs	.+52     	; 0x62e <__stack+0x1cf>
							backemfreadingindex = 2;
     5fa:	22 e0       	ldi	r18, 0x02	; 2
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	30 93 b7 00 	sts	0x00B7, r19	; 0x8000b7 <backemfreadingindex+0x1>
     602:	20 93 b6 00 	sts	0x00B6, r18	; 0x8000b6 <backemfreadingindex>
							backemfreading[0] = backemfreading[1];
     606:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <backemfreading+0x2>
     60a:	30 91 c2 00 	lds	r19, 0x00C2	; 0x8000c2 <backemfreading+0x3>
     60e:	30 93 c0 00 	sts	0x00C0, r19	; 0x8000c0 <backemfreading+0x1>
     612:	20 93 bf 00 	sts	0x00BF, r18	; 0x8000bf <backemfreading>
							backemfreading[1] = backemfreading[2];
     616:	20 91 c3 00 	lds	r18, 0x00C3	; 0x8000c3 <backemfreading+0x4>
     61a:	30 91 c4 00 	lds	r19, 0x00C4	; 0x8000c4 <backemfreading+0x5>
     61e:	30 93 c2 00 	sts	0x00C2, r19	; 0x8000c2 <backemfreading+0x3>
     622:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <backemfreading+0x2>
							backemfreading[2] = 0;
     626:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <backemfreading+0x5>
     62a:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <backemfreading+0x4>
						}
						
						backemfreading[backemfreadingindex] = reading;
     62e:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <backemfreadingindex>
     632:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <backemfreadingindex+0x1>
     636:	ee 0f       	add	r30, r30
     638:	ff 1f       	adc	r31, r31
     63a:	e1 54       	subi	r30, 0x41	; 65
     63c:	ff 4f       	sbci	r31, 0xFF	; 255
     63e:	71 83       	std	Z+1, r23	; 0x01
     640:	60 83       	st	Z, r22
						if (backemfreadingindex < 3) ++backemfreadingindex;
     642:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <backemfreadingindex>
     646:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <backemfreadingindex+0x1>
     64a:	03 97       	sbiw	r24, 0x03	; 3
     64c:	48 f4       	brcc	.+18     	; 0x660 <__stack+0x201>
     64e:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <backemfreadingindex>
     652:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <backemfreadingindex+0x1>
     656:	01 96       	adiw	r24, 0x01	; 1
     658:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <backemfreadingindex+0x1>
     65c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <backemfreadingindex>
						
						//if we have gathered at least 3 samples so far, start testing for maximum point reachage
						if (backemfreadingindex == 3){
     660:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <backemfreadingindex>
     664:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <backemfreadingindex+0x1>
     668:	03 97       	sbiw	r24, 0x03	; 3
     66a:	09 f0       	breq	.+2      	; 0x66e <__stack+0x20f>
     66c:	04 c2       	rjmp	.+1032   	; 0xa76 <__stack+0x617>
							if ((backemfreading[2] - backemfreading[1]) < 10){ //&& ((backemfreading[2] - backemfreading[0]) < 10) && ((backemfreading[1] - backemfreading[0]) < 10)){//hysteresis of 50mV
     66e:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <backemfreading+0x4>
     672:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <backemfreading+0x5>
     676:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <backemfreading+0x2>
     67a:	30 91 c2 00 	lds	r19, 0x00C2	; 0x8000c2 <backemfreading+0x3>
     67e:	82 1b       	sub	r24, r18
     680:	93 0b       	sbc	r25, r19
     682:	0a 97       	sbiw	r24, 0x0a	; 10
     684:	08 f0       	brcs	.+2      	; 0x688 <__stack+0x229>
     686:	f7 c1       	rjmp	.+1006   	; 0xa76 <__stack+0x617>
								//we have found max, reset timer 0 count and overflow counter, and calculate frequency using stored time
								backemffound = 1;
     688:	41 e0       	ldi	r20, 0x01	; 1
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	50 93 ab 00 	sts	0x00AB, r21	; 0x8000ab <backemffound+0x1>
     690:	40 93 aa 00 	sts	0x00AA, r20	; 0x8000aa <backemffound>
								char buf[10];
								//sprintf(buf,"%d",backemftime);
								//uart_transmit_string(buf);
								TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     694:	83 b7       	in	r24, 0x33	; 51
     696:	88 7f       	andi	r24, 0xF8	; 248
     698:	83 bf       	out	0x33, r24	; 51
								TCNT0 = 0;
     69a:	12 be       	out	0x32, r1	; 50
								timer0_ovf_count = 0;
     69c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <timer0_ovf_count+0x1>
     6a0:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <timer0_ovf_count>
								backemffreq = 1000000000/backemftime; //find backemf frequency in millihertz
     6a4:	a0 90 74 00 	lds	r10, 0x0074	; 0x800074 <backemftime>
     6a8:	b0 90 75 00 	lds	r11, 0x0075	; 0x800075 <backemftime+0x1>
     6ac:	c0 90 76 00 	lds	r12, 0x0076	; 0x800076 <backemftime+0x2>
     6b0:	d0 90 77 00 	lds	r13, 0x0077	; 0x800077 <backemftime+0x3>
     6b4:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <backemftime+0x4>
     6b8:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <backemftime+0x5>
     6bc:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <backemftime+0x6>
     6c0:	10 91 7b 00 	lds	r17, 0x007B	; 0x80007b <backemftime+0x7>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	3a ec       	ldi	r19, 0xCA	; 202
     6c8:	4a e9       	ldi	r20, 0x9A	; 154
     6ca:	5b e3       	ldi	r21, 0x3B	; 59
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	7c d5       	rcall	.+2808   	; 0x11ce <__udivdi3>
     6d6:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <backemffreq>
     6da:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <backemffreq+0x1>
     6de:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <backemffreq+0x2>
     6e2:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <backemffreq+0x3>
     6e6:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <backemffreq+0x4>
     6ea:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <backemffreq+0x5>
     6ee:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <backemffreq+0x6>
     6f2:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <backemffreq+0x7>
								readadcmotorleft = 0;//we have successfully found back-emf, no need to keep reading
     6f6:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <readadcmotorleft+0x1>
     6fa:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <readadcmotorleft>
     6fe:	bb c1       	rjmp	.+886    	; 0xa76 <__stack+0x617>
						
						//left side motor back emf is ready to be read, start timer and keep reading (and storing current and previous timer value each time) until max value stabilises
						//possibly enable ADC interrupt and write a separate function to do non-blocking ADC converts and timer stores to not block other code
						//once max has stabilised and corresponding time has been obtained, calculate resonant frequency and adjust duty cycle on next while () iteration (if required) and do resonant_done = 1;
					}
					else if (readadcmotorright){
     700:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <readadcmotorright>
     704:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <readadcmotorright+0x1>
     708:	89 2b       	or	r24, r25
     70a:	09 f4       	brne	.+2      	; 0x70e <__stack+0x2af>
     70c:	b4 c1       	rjmp	.+872    	; 0xa76 <__stack+0x617>
						//turn off timer 0
						TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     70e:	83 b7       	in	r24, 0x33	; 51
     710:	88 7f       	andi	r24, 0xF8	; 248
     712:	83 bf       	out	0x33, r24	; 51
						//store time value for current sample
						backemftime = (TCNT0 + (timer0_ovf_count*256)); //store time value in 16 microseconds
     714:	22 b7       	in	r18, 0x32	; 50
     716:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <timer0_ovf_count>
     71a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <timer0_ovf_count+0x1>
     71e:	98 2f       	mov	r25, r24
     720:	88 27       	eor	r24, r24
     722:	82 0f       	add	r24, r18
     724:	91 1d       	adc	r25, r1
     726:	8c 01       	movw	r16, r24
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	ba 01       	movw	r22, r20
     732:	8f 87       	std	Y+15, r24	; 0x0f
     734:	18 8b       	std	Y+16, r17	; 0x10
     736:	29 8b       	std	Y+17, r18	; 0x11
     738:	3a 8b       	std	Y+18, r19	; 0x12
     73a:	4b 8b       	std	Y+19, r20	; 0x13
     73c:	5c 8b       	std	Y+20, r21	; 0x14
     73e:	6d 8b       	std	Y+21, r22	; 0x15
     740:	7e 8b       	std	Y+22, r23	; 0x16
     742:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <backemftime>
     746:	10 93 75 00 	sts	0x0075, r17	; 0x800075 <backemftime+0x1>
     74a:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <backemftime+0x2>
     74e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <backemftime+0x3>
     752:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <backemftime+0x4>
     756:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <backemftime+0x5>
     75a:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <backemftime+0x6>
     75e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <backemftime+0x7>
						//turn on timer 0 with prescaler /256 to keep measuring time
						TCCR0 |= ((1<<CS02));
     762:	83 b7       	in	r24, 0x33	; 51
     764:	84 60       	ori	r24, 0x04	; 4
     766:	83 bf       	out	0x33, r24	; 51
						TCCR0 &= ~((1<<CS01)|(1<<CS00));
     768:	83 b7       	in	r24, 0x33	; 51
     76a:	8c 7f       	andi	r24, 0xFC	; 252
     76c:	83 bf       	out	0x33, r24	; 51
						//read back emf voltage
						reading = adc_convert((adc_read(RHSVOLTAGECHANNEL)));
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	76 dc       	rcall	.-1812   	; 0x5e <adc_read>
     772:	81 dc       	rcall	.-1790   	; 0x76 <adc_convert>
     774:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <reading+0x1>
     778:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <reading>
						//back emf sample storage (to avoid buffer overflow)
						if (backemfreadingindex >= 3){
     77c:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <backemfreadingindex>
     780:	30 91 b7 00 	lds	r19, 0x00B7	; 0x8000b7 <backemfreadingindex+0x1>
     784:	23 30       	cpi	r18, 0x03	; 3
     786:	31 05       	cpc	r19, r1
     788:	d0 f0       	brcs	.+52     	; 0x7be <__stack+0x35f>
							backemfreadingindex = 2;
     78a:	22 e0       	ldi	r18, 0x02	; 2
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	30 93 b7 00 	sts	0x00B7, r19	; 0x8000b7 <backemfreadingindex+0x1>
     792:	20 93 b6 00 	sts	0x00B6, r18	; 0x8000b6 <backemfreadingindex>
							backemfreading[0] = backemfreading[1];
     796:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <backemfreading+0x2>
     79a:	30 91 c2 00 	lds	r19, 0x00C2	; 0x8000c2 <backemfreading+0x3>
     79e:	30 93 c0 00 	sts	0x00C0, r19	; 0x8000c0 <backemfreading+0x1>
     7a2:	20 93 bf 00 	sts	0x00BF, r18	; 0x8000bf <backemfreading>
							backemfreading[1] = backemfreading[2];
     7a6:	20 91 c3 00 	lds	r18, 0x00C3	; 0x8000c3 <backemfreading+0x4>
     7aa:	30 91 c4 00 	lds	r19, 0x00C4	; 0x8000c4 <backemfreading+0x5>
     7ae:	30 93 c2 00 	sts	0x00C2, r19	; 0x8000c2 <backemfreading+0x3>
     7b2:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <backemfreading+0x2>
							backemfreading[2] = 0;
     7b6:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <backemfreading+0x5>
     7ba:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <backemfreading+0x4>
						}
						backemfreading[backemfreadingindex] = reading;
     7be:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <backemfreadingindex>
     7c2:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <backemfreadingindex+0x1>
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	e1 54       	subi	r30, 0x41	; 65
     7cc:	ff 4f       	sbci	r31, 0xFF	; 255
     7ce:	71 83       	std	Z+1, r23	; 0x01
     7d0:	60 83       	st	Z, r22
						if (backemfreadingindex < 3) ++backemfreadingindex;
     7d2:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <backemfreadingindex>
     7d6:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <backemfreadingindex+0x1>
     7da:	03 97       	sbiw	r24, 0x03	; 3
     7dc:	48 f4       	brcc	.+18     	; 0x7f0 <__stack+0x391>
     7de:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <backemfreadingindex>
     7e2:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <backemfreadingindex+0x1>
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <backemfreadingindex+0x1>
     7ec:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <backemfreadingindex>
						
						//if we have gathered at least 3 samples so far, start testing for maximum point reachage
						if (backemfreadingindex == 3){
     7f0:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <backemfreadingindex>
     7f4:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <backemfreadingindex+0x1>
     7f8:	03 97       	sbiw	r24, 0x03	; 3
     7fa:	09 f0       	breq	.+2      	; 0x7fe <__stack+0x39f>
     7fc:	3c c1       	rjmp	.+632    	; 0xa76 <__stack+0x617>
							if ((backemfreading[2] - backemfreading[1]) < 10){ //&& ((backemfreading[2] - backemfreading[0]) < 10) && ((backemfreading[1] - backemfreading[0]) < 10)){//hysteresis of 50mV
     7fe:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <backemfreading+0x4>
     802:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <backemfreading+0x5>
     806:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <backemfreading+0x2>
     80a:	30 91 c2 00 	lds	r19, 0x00C2	; 0x8000c2 <backemfreading+0x3>
     80e:	82 1b       	sub	r24, r18
     810:	93 0b       	sbc	r25, r19
     812:	0a 97       	sbiw	r24, 0x0a	; 10
     814:	08 f0       	brcs	.+2      	; 0x818 <__stack+0x3b9>
     816:	2f c1       	rjmp	.+606    	; 0xa76 <__stack+0x617>
								//we have found max, reset timer 0 count and overflow counter, and calculate frequency using stored time
								backemffound = 1;
     818:	41 e0       	ldi	r20, 0x01	; 1
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	50 93 ab 00 	sts	0x00AB, r21	; 0x8000ab <backemffound+0x1>
     820:	40 93 aa 00 	sts	0x00AA, r20	; 0x8000aa <backemffound>
								char buf[10];
								//sprintf(buf,"%d",backemftime);
								//uart_transmit_string(buf);
								TCCR0 &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
     824:	83 b7       	in	r24, 0x33	; 51
     826:	88 7f       	andi	r24, 0xF8	; 248
     828:	83 bf       	out	0x33, r24	; 51
								TCNT0 = 0;
     82a:	12 be       	out	0x32, r1	; 50
								timer0_ovf_count = 0;
     82c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <timer0_ovf_count+0x1>
     830:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <timer0_ovf_count>
								backemffreq = 1000000000/backemftime; //find backemf frequency in millihertz
     834:	a0 90 74 00 	lds	r10, 0x0074	; 0x800074 <backemftime>
     838:	b0 90 75 00 	lds	r11, 0x0075	; 0x800075 <backemftime+0x1>
     83c:	c0 90 76 00 	lds	r12, 0x0076	; 0x800076 <backemftime+0x2>
     840:	d0 90 77 00 	lds	r13, 0x0077	; 0x800077 <backemftime+0x3>
     844:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <backemftime+0x4>
     848:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <backemftime+0x5>
     84c:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <backemftime+0x6>
     850:	10 91 7b 00 	lds	r17, 0x007B	; 0x80007b <backemftime+0x7>
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	3a ec       	ldi	r19, 0xCA	; 202
     858:	4a e9       	ldi	r20, 0x9A	; 154
     85a:	5b e3       	ldi	r21, 0x3B	; 59
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	b4 d4       	rcall	.+2408   	; 0x11ce <__udivdi3>
     866:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <backemffreq>
     86a:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <backemffreq+0x1>
     86e:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <backemffreq+0x2>
     872:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <backemffreq+0x3>
     876:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <backemffreq+0x4>
     87a:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <backemffreq+0x5>
     87e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <backemffreq+0x6>
     882:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <backemffreq+0x7>
								readadcmotorright = 0;//we have successfully found back-emf, no need to keep reading
     886:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <readadcmotorright+0x1>
     88a:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <readadcmotorright>
     88e:	f3 c0       	rjmp	.+486    	; 0xa76 <__stack+0x617>
						//possibly enable ADC interrupt and write a separate function to do non-blocking ADC converts and timer stores to not block other code
						//once max has stabilised and corresponding time has been obtained, calculate resonant frequency and adjust duty cycle on next while () iteration (if required) and do resonant_done = 1;
					}
				}
				else{//resonant frequency calculation has priority, so do everything else in this else block
					if (readadcv){
     890:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <readadcv>
     894:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <readadcv+0x1>
     898:	89 2b       	or	r24, r25
     89a:	41 f1       	breq	.+80     	; 0x8ec <__stack+0x48d>
						if (voltage_left_on){
     89c:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <voltage_left_on>
     8a0:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <voltage_left_on+0x1>
     8a4:	89 2b       	or	r24, r25
     8a6:	11 f0       	breq	.+4      	; 0x8ac <__stack+0x44d>
							//read motor_left for VCC
							reading = adc_convert(adc_read(LHSVOLTAGECHANNEL));
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	07 c0       	rjmp	.+14     	; 0x8ba <__stack+0x45b>
							voltagereading = (reading - 220)*2.6997; //store actual voltage value
						}
						else if (voltage_right_on){
     8ac:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <voltage_right_on>
     8b0:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <voltage_right_on+0x1>
     8b4:	89 2b       	or	r24, r25
     8b6:	b1 f0       	breq	.+44     	; 0x8e4 <__stack+0x485>
							//read motor_right for VCC
							reading = adc_convert(adc_read(RHSVOLTAGECHANNEL));
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	d1 db       	rcall	.-2142   	; 0x5e <adc_read>
     8bc:	dc db       	rcall	.-2120   	; 0x76 <adc_convert>
     8be:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <reading+0x1>
     8c2:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <reading>
							voltagereading = (reading - 220)*2.6997; //store actual voltage value
     8c6:	6c 5d       	subi	r22, 0xDC	; 220
     8c8:	71 09       	sbc	r23, r1
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	98 d2       	rcall	.+1328   	; 0xe00 <__floatunsisf>
     8d0:	23 ee       	ldi	r18, 0xE3	; 227
     8d2:	37 ec       	ldi	r19, 0xC7	; 199
     8d4:	4c e2       	ldi	r20, 0x2C	; 44
     8d6:	50 e4       	ldi	r21, 0x40	; 64
     8d8:	47 d3       	rcall	.+1678   	; 0xf68 <__mulsf3>
     8da:	66 d2       	rcall	.+1228   	; 0xda8 <__fixunssfsi>
     8dc:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <voltagereading+0x1>
     8e0:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <voltagereading>
						}
						//we have read voltage value (only need to do this once because we are assuming Vcc remains constant between PWM pulses), turn off voltage reading flag
						readadcv = 0;
     8e4:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <readadcv+0x1>
     8e8:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <readadcv>
					}
					if (readadci){
     8ec:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <readadci>
     8f0:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <readadci+0x1>
     8f4:	89 2b       	or	r24, r25
     8f6:	09 f4       	brne	.+2      	; 0x8fa <__stack+0x49b>
     8f8:	be c0       	rjmp	.+380    	; 0xa76 <__stack+0x617>
						if (current_i != NUMSAMPLESI){
     8fa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <current_i>
     8fe:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <current_i+0x1>
     902:	c2 97       	sbiw	r24, 0x32	; 50
     904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x4a9>
     906:	b7 c0       	rjmp	.+366    	; 0xa76 <__stack+0x617>
							if ((voltage_left_on) || (voltage_right_on)){
     908:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <voltage_left_on>
     90c:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <voltage_left_on+0x1>
     910:	89 2b       	or	r24, r25
     912:	39 f4       	brne	.+14     	; 0x922 <__stack+0x4c3>
     914:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <voltage_right_on>
     918:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <voltage_right_on+0x1>
     91c:	89 2b       	or	r24, r25
     91e:	09 f4       	brne	.+2      	; 0x922 <__stack+0x4c3>
     920:	70 c0       	rjmp	.+224    	; 0xa02 <__stack+0x5a3>
								//store current ADC samples into array, do NOT reset the index between sampling intervals so we can build up a full array
								//also at the same time, multiply adc current value by the voltage value to get the instantaneous power array
								//store only alternate samples (i % 50 == 0) (so we don't get more than ~50 samples for the whole of T/4)
								reading = adc_convert(adc_read(ISHIFTEDCHANNEL));
     922:	82 e0       	ldi	r24, 0x02	; 2
     924:	9c db       	rcall	.-2248   	; 0x5e <adc_read>
     926:	a7 db       	rcall	.-2226   	; 0x76 <adc_convert>
     928:	6b 01       	movw	r12, r22
     92a:	7c 01       	movw	r14, r24
     92c:	8b 01       	movw	r16, r22
     92e:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <reading+0x1>
     932:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <reading>
								if ((current_i % 50) == 0){
     936:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <current_i>
     93a:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <current_i+0x1>
     93e:	62 e3       	ldi	r22, 0x32	; 50
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	f7 d3       	rcall	.+2030   	; 0x1132 <__udivmodhi4>
     944:	89 2b       	or	r24, r25
     946:	09 f0       	breq	.+2      	; 0x94a <__stack+0x4eb>
     948:	8d c0       	rjmp	.+282    	; 0xa64 <__stack+0x605>
									currentarray[currentreadingindex] = ((reading - 220) * 0.2074) * 10; //store actual current value (mA)
     94a:	60 91 bc 00 	lds	r22, 0x00BC	; 0x8000bc <currentreadingindex>
     94e:	70 91 bd 00 	lds	r23, 0x00BD	; 0x8000bd <currentreadingindex+0x1>
     952:	66 0f       	add	r22, r22
     954:	77 1f       	adc	r23, r23
     956:	66 0f       	add	r22, r22
     958:	77 1f       	adc	r23, r23
     95a:	63 57       	subi	r22, 0x73	; 115
     95c:	7e 4f       	sbci	r23, 0xFE	; 254
     95e:	7e 87       	std	Y+14, r23	; 0x0e
     960:	6d 87       	std	Y+13, r22	; 0x0d
     962:	7c ed       	ldi	r23, 0xDC	; 220
     964:	c7 1a       	sub	r12, r23
     966:	d1 08       	sbc	r13, r1
     968:	b6 01       	movw	r22, r12
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	48 d2       	rcall	.+1168   	; 0xe00 <__floatunsisf>
     970:	2a ea       	ldi	r18, 0xAA	; 170
     972:	30 e6       	ldi	r19, 0x60	; 96
     974:	44 e5       	ldi	r20, 0x54	; 84
     976:	5e e3       	ldi	r21, 0x3E	; 62
     978:	f7 d2       	rcall	.+1518   	; 0xf68 <__mulsf3>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	f2 d2       	rcall	.+1508   	; 0xf68 <__mulsf3>
     984:	11 d2       	rcall	.+1058   	; 0xda8 <__fixunssfsi>
     986:	ed 85       	ldd	r30, Y+13	; 0x0d
     988:	fe 85       	ldd	r31, Y+14	; 0x0e
     98a:	60 83       	st	Z, r22
     98c:	71 83       	std	Z+1, r23	; 0x01
     98e:	82 83       	std	Z+2, r24	; 0x02
     990:	93 83       	std	Z+3, r25	; 0x03
									powerarray[currentreadingindex] = currentarray[currentreadingindex] * voltagereading; //store power in uW
     992:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <currentreadingindex>
     996:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <currentreadingindex+0x1>
     99a:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <currentreadingindex>
     99e:	30 91 bd 00 	lds	r19, 0x00BD	; 0x8000bd <currentreadingindex+0x1>
     9a2:	ee 0f       	add	r30, r30
     9a4:	ff 1f       	adc	r31, r31
     9a6:	ee 0f       	add	r30, r30
     9a8:	ff 1f       	adc	r31, r31
     9aa:	af 01       	movw	r20, r30
     9ac:	4b 53       	subi	r20, 0x3B	; 59
     9ae:	5f 4f       	sbci	r21, 0xFF	; 255
     9b0:	7a 01       	movw	r14, r20
     9b2:	22 0f       	add	r18, r18
     9b4:	33 1f       	adc	r19, r19
     9b6:	22 0f       	add	r18, r18
     9b8:	33 1f       	adc	r19, r19
     9ba:	23 57       	subi	r18, 0x73	; 115
     9bc:	3e 4f       	sbci	r19, 0xFE	; 254
     9be:	a0 91 96 00 	lds	r26, 0x0096	; 0x800096 <voltagereading>
     9c2:	b0 91 97 00 	lds	r27, 0x0097	; 0x800097 <voltagereading+0x1>
     9c6:	f9 01       	movw	r30, r18
     9c8:	20 81       	ld	r18, Z
     9ca:	31 81       	ldd	r19, Z+1	; 0x01
     9cc:	42 81       	ldd	r20, Z+2	; 0x02
     9ce:	53 81       	ldd	r21, Z+3	; 0x03
     9d0:	f2 d3       	rcall	.+2020   	; 0x11b6 <__muluhisi3>
     9d2:	f7 01       	movw	r30, r14
     9d4:	60 83       	st	Z, r22
     9d6:	71 83       	std	Z+1, r23	; 0x01
     9d8:	82 83       	std	Z+2, r24	; 0x02
     9da:	93 83       	std	Z+3, r25	; 0x03
									++currentreadingindex;
     9dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <currentreadingindex>
     9e0:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <currentreadingindex+0x1>
     9e4:	01 96       	adiw	r24, 0x01	; 1
     9e6:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <currentreadingindex+0x1>
     9ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <currentreadingindex>
									if (reading > 3000) {//short circuit condition test
     9ee:	09 3b       	cpi	r16, 0xB9	; 185
     9f0:	1b 40       	sbci	r17, 0x0B	; 11
     9f2:	c0 f1       	brcs	.+112    	; 0xa64 <__stack+0x605>
										shortcircuit = 1;
     9f4:	01 e0       	ldi	r16, 0x01	; 1
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	10 93 95 00 	sts	0x0095, r17	; 0x800095 <shortcircuit+0x1>
     9fc:	00 93 94 00 	sts	0x0094, r16	; 0x800094 <shortcircuit>
     a00:	31 c0       	rjmp	.+98     	; 0xa64 <__stack+0x605>
								//if PWM is turned off, current is 0
								//therefore store a 0 in the array (again, do not reset the index yet)
								//but make sure to read still ADC to generate the correct number of samples (because we don't have a spare timer)
								//also at the same time, multiply adc current value by the voltage value to get the instantaneous power array
								//store only alternate samples (every 25th sample using (i % 50 == 0)) (so we don't get more than ~50 samples)
								adc_convert(adc_read(ISHIFTEDCHANNEL));
     a02:	82 e0       	ldi	r24, 0x02	; 2
     a04:	2c db       	rcall	.-2472   	; 0x5e <adc_read>
     a06:	37 db       	rcall	.-2450   	; 0x76 <adc_convert>
								if ((current_i % 50) == 0){
     a08:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <current_i>
     a0c:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <current_i+0x1>
     a10:	62 e3       	ldi	r22, 0x32	; 50
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	8e d3       	rcall	.+1820   	; 0x1132 <__udivmodhi4>
     a16:	89 2b       	or	r24, r25
     a18:	29 f5       	brne	.+74     	; 0xa64 <__stack+0x605>
									currentarray[currentreadingindex] = 0;
     a1a:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <currentreadingindex>
     a1e:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <currentreadingindex+0x1>
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	ee 0f       	add	r30, r30
     a28:	ff 1f       	adc	r31, r31
     a2a:	e3 57       	subi	r30, 0x73	; 115
     a2c:	fe 4f       	sbci	r31, 0xFE	; 254
     a2e:	10 82       	st	Z, r1
     a30:	11 82       	std	Z+1, r1	; 0x01
     a32:	12 82       	std	Z+2, r1	; 0x02
     a34:	13 82       	std	Z+3, r1	; 0x03
									powerarray[currentreadingindex] = 0;
     a36:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <currentreadingindex>
     a3a:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <currentreadingindex+0x1>
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	ee 0f       	add	r30, r30
     a44:	ff 1f       	adc	r31, r31
     a46:	eb 53       	subi	r30, 0x3B	; 59
     a48:	ff 4f       	sbci	r31, 0xFF	; 255
     a4a:	10 82       	st	Z, r1
     a4c:	11 82       	std	Z+1, r1	; 0x01
     a4e:	12 82       	std	Z+2, r1	; 0x02
     a50:	13 82       	std	Z+3, r1	; 0x03
									++currentreadingindex;
     a52:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <currentreadingindex>
     a56:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <currentreadingindex+0x1>
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <currentreadingindex+0x1>
     a60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <currentreadingindex>
								}
							}
							++current_i;
     a64:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <current_i>
     a68:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <current_i+0x1>
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <current_i+0x1>
     a72:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <current_i>
				}
			}
		}
		
		//driving frequency adjustment here
		if (backemffound){
     a76:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <backemffound>
     a7a:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <backemffound+0x1>
     a7e:	89 2b       	or	r24, r25
     a80:	a9 f0       	breq	.+42     	; 0xaac <__stack+0x64d>
			if (TCNT1 < OCR1A){
     a82:	2c b5       	in	r18, 0x2c	; 44
     a84:	3d b5       	in	r19, 0x2d	; 45
     a86:	8a b5       	in	r24, 0x2a	; 42
     a88:	9b b5       	in	r25, 0x2b	; 43
     a8a:	28 17       	cp	r18, r24
     a8c:	39 07       	cpc	r19, r25
     a8e:	70 f4       	brcc	.+28     	; 0xaac <__stack+0x64d>
				//if (((backemftime - OCR1A) < 1000) || (OCR1A - (backemftime) < 1000)){
				backemffound = 0; //reset found flag
     a90:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <backemffound+0x1>
     a94:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <backemffound>
				//backemftime = 1250;
				OCR1A = 1250; //t/4 = backemf/16
     a98:	22 ee       	ldi	r18, 0xE2	; 226
     a9a:	34 e0       	ldi	r19, 0x04	; 4
     a9c:	3b bd       	out	0x2b, r19	; 43
     a9e:	2a bd       	out	0x2a, r18	; 42
				OCR1B = OCR1A * 2;//t/2 is always 2 * t/4
     aa0:	8a b5       	in	r24, 0x2a	; 42
     aa2:	9b b5       	in	r25, 0x2b	; 43
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	99 bd       	out	0x29, r25	; 41
     aaa:	88 bd       	out	0x28, r24	; 40
				//}
			}
		}
		
		//once we have done adc readings, do rms/power calcs and store the values in their proper places
		if (currentreadingindex == NUMSAMPLESI){
     aac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <currentreadingindex>
     ab0:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <currentreadingindex+0x1>
     ab4:	c2 97       	sbiw	r24, 0x32	; 50
     ab6:	09 f0       	breq	.+2      	; 0xaba <__stack+0x65b>
     ab8:	32 cd       	rjmp	.-1436   	; 0x51e <__stack+0xbf>
     aba:	30 91 84 00 	lds	r19, 0x0084	; 0x800084 <__data_end>
     abe:	39 83       	std	Y+1, r19	; 0x01
     ac0:	40 91 85 00 	lds	r20, 0x0085	; 0x800085 <__data_end+0x1>
     ac4:	4a 83       	std	Y+2, r20	; 0x02
     ac6:	50 91 86 00 	lds	r21, 0x0086	; 0x800086 <__data_end+0x2>
     aca:	5b 83       	std	Y+3, r21	; 0x03
     acc:	60 91 87 00 	lds	r22, 0x0087	; 0x800087 <__data_end+0x3>
     ad0:	6c 83       	std	Y+4, r22	; 0x04
     ad2:	70 91 88 00 	lds	r23, 0x0088	; 0x800088 <__data_end+0x4>
     ad6:	7d 83       	std	Y+5, r23	; 0x05
     ad8:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <__data_end+0x5>
     adc:	8e 83       	std	Y+6, r24	; 0x06
     ade:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <__data_end+0x6>
     ae2:	9f 83       	std	Y+7, r25	; 0x07
     ae4:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <__data_end+0x7>
     ae8:	e8 87       	std	Y+8, r30	; 0x08
     aea:	80 90 8c 00 	lds	r8, 0x008C	; 0x80008c <currentvalue>
     aee:	90 90 8d 00 	lds	r9, 0x008D	; 0x80008d <currentvalue+0x1>
     af2:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <currentvalue+0x2>
     af6:	f9 87       	std	Y+9, r31	; 0x09
     af8:	00 91 8f 00 	lds	r16, 0x008F	; 0x80008f <currentvalue+0x3>
     afc:	0a 87       	std	Y+10, r16	; 0x0a
     afe:	10 91 90 00 	lds	r17, 0x0090	; 0x800090 <currentvalue+0x4>
     b02:	1b 87       	std	Y+11, r17	; 0x0b
     b04:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <currentvalue+0x5>
     b08:	2c 87       	std	Y+12, r18	; 0x0c
     b0a:	20 90 92 00 	lds	r2, 0x0092	; 0x800092 <currentvalue+0x6>
     b0e:	30 90 93 00 	lds	r3, 0x0093	; 0x800093 <currentvalue+0x7>
     b12:	4d e8       	ldi	r20, 0x8D	; 141
     b14:	51 e0       	ldi	r21, 0x01	; 1
     b16:	58 8b       	std	Y+16, r21	; 0x10
     b18:	4f 87       	std	Y+15, r20	; 0x0f
     b1a:	65 ec       	ldi	r22, 0xC5	; 197
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	7e 87       	std	Y+14, r23	; 0x0e
     b20:	6d 87       	std	Y+13, r22	; 0x0d
			//calculate RMS current
			for (int i = 0; i < NUMSAMPLESI; ++i){
				currentarray[i] = square(currentarray[i]); //square
     b22:	ef 85       	ldd	r30, Y+15	; 0x0f
     b24:	f8 89       	ldd	r31, Y+16	; 0x10
     b26:	60 81       	ld	r22, Z
     b28:	71 81       	ldd	r23, Z+1	; 0x01
     b2a:	82 81       	ldd	r24, Z+2	; 0x02
     b2c:	93 81       	ldd	r25, Z+3	; 0x03
     b2e:	68 d1       	rcall	.+720    	; 0xe00 <__floatunsisf>
     b30:	c0 d2       	rcall	.+1408   	; 0x10b2 <square>
     b32:	3a d1       	rcall	.+628    	; 0xda8 <__fixunssfsi>
     b34:	2b 01       	movw	r4, r22
     b36:	3c 01       	movw	r6, r24
     b38:	ef 85       	ldd	r30, Y+15	; 0x0f
     b3a:	f8 89       	ldd	r31, Y+16	; 0x10
     b3c:	61 93       	st	Z+, r22
     b3e:	71 93       	st	Z+, r23
     b40:	81 93       	st	Z+, r24
     b42:	91 93       	st	Z+, r25
     b44:	f8 8b       	std	Y+16, r31	; 0x10
     b46:	ef 87       	std	Y+15, r30	; 0x0f
				powervalue += powerarray[i]; //summation of power 
     b48:	ed 85       	ldd	r30, Y+13	; 0x0d
     b4a:	fe 85       	ldd	r31, Y+14	; 0x0e
     b4c:	81 91       	ld	r24, Z+
     b4e:	91 91       	ld	r25, Z+
     b50:	a1 91       	ld	r26, Z+
     b52:	b1 91       	ld	r27, Z+
     b54:	fe 87       	std	Y+14, r31	; 0x0e
     b56:	ed 87       	std	Y+13, r30	; 0x0d
     b58:	5c 01       	movw	r10, r24
     b5a:	6d 01       	movw	r12, r26
     b5c:	9c 01       	movw	r18, r24
     b5e:	a6 01       	movw	r20, r12
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a9 80       	ldd	r10, Y+1	; 0x01
     b6a:	ba 80       	ldd	r11, Y+2	; 0x02
     b6c:	cb 80       	ldd	r12, Y+3	; 0x03
     b6e:	dc 80       	ldd	r13, Y+4	; 0x04
     b70:	ed 80       	ldd	r14, Y+5	; 0x05
     b72:	fe 80       	ldd	r15, Y+6	; 0x06
     b74:	0f 81       	ldd	r16, Y+7	; 0x07
     b76:	18 85       	ldd	r17, Y+8	; 0x08
     b78:	74 d3       	rcall	.+1768   	; 0x1262 <__adddi3>
     b7a:	29 83       	std	Y+1, r18	; 0x01
     b7c:	3a 83       	std	Y+2, r19	; 0x02
     b7e:	4b 83       	std	Y+3, r20	; 0x03
     b80:	5c 83       	std	Y+4, r21	; 0x04
     b82:	6d 83       	std	Y+5, r22	; 0x05
     b84:	7e 83       	std	Y+6, r23	; 0x06
     b86:	8f 83       	std	Y+7, r24	; 0x07
     b88:	98 87       	std	Y+8, r25	; 0x08
				currentvalue += currentarray[i];//summation of current^2
     b8a:	63 01       	movw	r12, r6
     b8c:	52 01       	movw	r10, r4
     b8e:	92 01       	movw	r18, r4
     b90:	a6 01       	movw	r20, r12
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	54 01       	movw	r10, r8
     b9c:	c9 84       	ldd	r12, Y+9	; 0x09
     b9e:	da 84       	ldd	r13, Y+10	; 0x0a
     ba0:	eb 84       	ldd	r14, Y+11	; 0x0b
     ba2:	fc 84       	ldd	r15, Y+12	; 0x0c
     ba4:	81 01       	movw	r16, r2
     ba6:	5d d3       	rcall	.+1722   	; 0x1262 <__adddi3>
     ba8:	49 01       	movw	r8, r18
     baa:	49 87       	std	Y+9, r20	; 0x09
     bac:	5a 87       	std	Y+10, r21	; 0x0a
     bae:	6b 87       	std	Y+11, r22	; 0x0b
     bb0:	7c 87       	std	Y+12, r23	; 0x0c
     bb2:	1c 01       	movw	r2, r24
		}
		
		//once we have done adc readings, do rms/power calcs and store the values in their proper places
		if (currentreadingindex == NUMSAMPLESI){
			//calculate RMS current
			for (int i = 0; i < NUMSAMPLESI; ++i){
     bb4:	05 e5       	ldi	r16, 0x55	; 85
     bb6:	12 e0       	ldi	r17, 0x02	; 2
     bb8:	2f 85       	ldd	r18, Y+15	; 0x0f
     bba:	38 89       	ldd	r19, Y+16	; 0x10
     bbc:	02 17       	cp	r16, r18
     bbe:	13 07       	cpc	r17, r19
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <__stack+0x765>
     bc2:	af cf       	rjmp	.-162    	; 0xb22 <__stack+0x6c3>
				currentarray[i] = square(currentarray[i]); //square
				powervalue += powerarray[i]; //summation of power 
				currentvalue += currentarray[i];//summation of current^2
			}
			currentvalue /= NUMSAMPLESI; //mean
			currentvalue = sqrt(currentvalue); //root - gives RMS current in (mA)
     bc4:	82 e3       	ldi	r24, 0x32	; 50
     bc6:	a8 2e       	mov	r10, r24
     bc8:	b1 2c       	mov	r11, r1
     bca:	c1 2c       	mov	r12, r1
     bcc:	d1 2c       	mov	r13, r1
     bce:	e1 2c       	mov	r14, r1
     bd0:	f1 2c       	mov	r15, r1
     bd2:	00 e0       	ldi	r16, 0x00	; 0
     bd4:	10 e0       	ldi	r17, 0x00	; 0
     bd6:	94 01       	movw	r18, r8
     bd8:	c1 01       	movw	r24, r2
     bda:	f9 d2       	rcall	.+1522   	; 0x11ce <__udivdi3>
     bdc:	4e d1       	rcall	.+668    	; 0xe7a <__floatundisf>
     bde:	2b d2       	rcall	.+1110   	; 0x1036 <sqrt>
     be0:	ae d0       	rcall	.+348    	; 0xd3e <__fixunssfdi>
     be2:	19 01       	movw	r2, r18
     be4:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <currentvalue>
     be8:	30 92 8d 00 	sts	0x008D, r3	; 0x80008d <currentvalue+0x1>
     bec:	40 93 8e 00 	sts	0x008E, r20	; 0x80008e <currentvalue+0x2>
     bf0:	50 93 8f 00 	sts	0x008F, r21	; 0x80008f <currentvalue+0x3>
     bf4:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <currentvalue+0x4>
     bf8:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <currentvalue+0x5>
     bfc:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <currentvalue+0x6>
     c00:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <currentvalue+0x7>

			powervalue /= NUMSAMPLESI; //power mean (uW)
			powervalue /= 1000; //gives average power in (mW)
     c04:	90 e5       	ldi	r25, 0x50	; 80
     c06:	a9 2e       	mov	r10, r25
     c08:	23 ec       	ldi	r18, 0xC3	; 195
     c0a:	b2 2e       	mov	r11, r18
     c0c:	29 81       	ldd	r18, Y+1	; 0x01
     c0e:	3a 81       	ldd	r19, Y+2	; 0x02
     c10:	4b 81       	ldd	r20, Y+3	; 0x03
     c12:	5c 81       	ldd	r21, Y+4	; 0x04
     c14:	6d 81       	ldd	r22, Y+5	; 0x05
     c16:	7e 81       	ldd	r23, Y+6	; 0x06
     c18:	8f 81       	ldd	r24, Y+7	; 0x07
     c1a:	98 85       	ldd	r25, Y+8	; 0x08
     c1c:	d8 d2       	rcall	.+1456   	; 0x11ce <__udivdi3>
     c1e:	29 01       	movw	r4, r18
     c20:	3a 01       	movw	r6, r20
     c22:	4b 01       	movw	r8, r22
     c24:	8a 87       	std	Y+10, r24	; 0x0a
     c26:	99 87       	std	Y+9, r25	; 0x09
     c28:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__data_end>
     c2c:	50 92 85 00 	sts	0x0085, r5	; 0x800085 <__data_end+0x1>
     c30:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__data_end+0x2>
     c34:	70 92 87 00 	sts	0x0087, r7	; 0x800087 <__data_end+0x3>
     c38:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__data_end+0x4>
     c3c:	90 92 89 00 	sts	0x0089, r9	; 0x800089 <__data_end+0x5>
     c40:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end+0x6>
     c44:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__data_end+0x7>
			
			//put all the found circuit parameters into the proper format for transmission)
			voltleft = voltagereading/1000;
     c48:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <voltagereading>
     c4c:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <voltagereading+0x1>
     c50:	68 ee       	ldi	r22, 0xE8	; 232
     c52:	73 e0       	ldi	r23, 0x03	; 3
     c54:	6e d2       	rcall	.+1244   	; 0x1132 <__udivmodhi4>
     c56:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <voltleft+0x1>
     c5a:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <voltleft>
			voltright = voltagereading % 1000;
     c5e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <voltright+0x1>
     c62:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <voltright>
			
			uint32_t freqfull = backemffreq * 0.25; //total frequency = f(T/4) / 4
     c66:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <backemffreq>
     c6a:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <backemffreq+0x1>
     c6e:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <backemffreq+0x2>
     c72:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <backemffreq+0x3>
     c76:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <backemffreq+0x4>
     c7a:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <backemffreq+0x5>
     c7e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <backemffreq+0x6>
     c82:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <backemffreq+0x7>
     c86:	f9 d0       	rcall	.+498    	; 0xe7a <__floatundisf>
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e8       	ldi	r20, 0x80	; 128
     c8e:	5e e3       	ldi	r21, 0x3E	; 62
     c90:	6b d1       	rcall	.+726    	; 0xf68 <__mulsf3>
     c92:	8a d0       	rcall	.+276    	; 0xda8 <__fixunssfsi>
			freqleft = freqfull/1000;
     c94:	28 ee       	ldi	r18, 0xE8	; 232
     c96:	33 e0       	ldi	r19, 0x03	; 3
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	5e d2       	rcall	.+1212   	; 0x115a <__udivmodsi4>
     c9e:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <freqleft+0x1>
     ca2:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <freqleft>
			freqright = freqfull % 1000;
     ca6:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <freqright+0x1>
     caa:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <freqright>
			
			current = currentvalue; //current is already in mA
     cae:	20 92 6a 00 	sts	0x006A, r2	; 0x80006a <current>
     cb2:	30 92 6b 00 	sts	0x006B, r3	; 0x80006b <current+0x1>
			
			powerleft = powervalue / 1000;
     cb6:	30 e8       	ldi	r19, 0x80	; 128
     cb8:	a3 2e       	mov	r10, r19
     cba:	40 ef       	ldi	r20, 0xF0	; 240
     cbc:	b4 2e       	mov	r11, r20
     cbe:	5a ef       	ldi	r21, 0xFA	; 250
     cc0:	c5 2e       	mov	r12, r21
     cc2:	62 e0       	ldi	r22, 0x02	; 2
     cc4:	d6 2e       	mov	r13, r22
     cc6:	29 81       	ldd	r18, Y+1	; 0x01
     cc8:	3a 81       	ldd	r19, Y+2	; 0x02
     cca:	4b 81       	ldd	r20, Y+3	; 0x03
     ccc:	5c 81       	ldd	r21, Y+4	; 0x04
     cce:	6d 81       	ldd	r22, Y+5	; 0x05
     cd0:	7e 81       	ldd	r23, Y+6	; 0x06
     cd2:	8f 81       	ldd	r24, Y+7	; 0x07
     cd4:	98 85       	ldd	r25, Y+8	; 0x08
     cd6:	7b d2       	rcall	.+1270   	; 0x11ce <__udivdi3>
     cd8:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <powerleft+0x1>
     cdc:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <powerleft>
			powerright = powervalue % 1000;
     ce0:	78 ee       	ldi	r23, 0xE8	; 232
     ce2:	a7 2e       	mov	r10, r23
     ce4:	e3 e0       	ldi	r30, 0x03	; 3
     ce6:	be 2e       	mov	r11, r30
     ce8:	c1 2c       	mov	r12, r1
     cea:	d1 2c       	mov	r13, r1
     cec:	92 01       	movw	r18, r4
     cee:	a3 01       	movw	r20, r6
     cf0:	b4 01       	movw	r22, r8
     cf2:	8a 85       	ldd	r24, Y+10	; 0x0a
     cf4:	99 85       	ldd	r25, Y+9	; 0x09
     cf6:	69 d2       	rcall	.+1234   	; 0x11ca <__umoddi3>
     cf8:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <powerright+0x1>
     cfc:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <powerright>
     d00:	0e cc       	rjmp	.-2020   	; 0x51e <__stack+0xbf>

00000d02 <uart_init>:
void uart_transmit_string(char* stringtransmit){
	while (*stringtransmit != 0x00){
		uart_transmit(*stringtransmit);
		stringtransmit++;
	}
}
     d02:	8a b1       	in	r24, 0x0a	; 10
     d04:	88 61       	ori	r24, 0x18	; 24
     d06:	8a b9       	out	0x0a, r24	; 10
     d08:	57 9a       	sbi	0x0a, 7	; 10
     d0a:	10 bc       	out	0x20, r1	; 32
     d0c:	87 e6       	ldi	r24, 0x67	; 103
     d0e:	89 b9       	out	0x09, r24	; 9
     d10:	80 b5       	in	r24, 0x20	; 32
     d12:	86 68       	ori	r24, 0x86	; 134
     d14:	80 bd       	out	0x20, r24	; 32
     d16:	80 b5       	in	r24, 0x20	; 32
     d18:	8f 7b       	andi	r24, 0xBF	; 191
     d1a:	80 bd       	out	0x20, r24	; 32
     d1c:	80 b5       	in	r24, 0x20	; 32
     d1e:	8b 7f       	andi	r24, 0xFB	; 251
     d20:	80 bd       	out	0x20, r24	; 32
     d22:	08 95       	ret

00000d24 <uart_transmit>:
     d24:	5d 9b       	sbis	0x0b, 5	; 11
     d26:	fe cf       	rjmp	.-4      	; 0xd24 <uart_transmit>
     d28:	8c b9       	out	0x0c, r24	; 12
     d2a:	08 95       	ret

00000d2c <uart_receive>:
	UDR = data; //load data register with data byte
}

//Receiver
char uart_receive(){
	while (RXCOMP == 0){ //wait for receive to be completed
     d2c:	5f 9b       	sbis	0x0b, 7	; 11
     d2e:	fe cf       	rjmp	.-4      	; 0xd2c <uart_receive>
	}
	return UDR; //load data register with data byte
     d30:	8c b1       	in	r24, 0x0c	; 12
     d32:	08 95       	ret

00000d34 <__fixsfdi>:
     d34:	be e3       	ldi	r27, 0x3E	; 62
     d36:	04 d0       	rcall	.+8      	; 0xd40 <__fixunssfdi+0x2>
     d38:	08 f4       	brcc	.+2      	; 0xd3c <__fixsfdi+0x8>
     d3a:	90 e8       	ldi	r25, 0x80	; 128
     d3c:	08 95       	ret

00000d3e <__fixunssfdi>:
     d3e:	bf e3       	ldi	r27, 0x3F	; 63
     d40:	22 27       	eor	r18, r18
     d42:	33 27       	eor	r19, r19
     d44:	a9 01       	movw	r20, r18
     d46:	ef d0       	rcall	.+478    	; 0xf26 <__fp_splitA>
     d48:	58 f1       	brcs	.+86     	; 0xda0 <__fixunssfdi+0x62>
     d4a:	9f 57       	subi	r25, 0x7F	; 127
     d4c:	40 f1       	brcs	.+80     	; 0xd9e <__fixunssfdi+0x60>
     d4e:	b9 17       	cp	r27, r25
     d50:	38 f1       	brcs	.+78     	; 0xda0 <__fixunssfdi+0x62>
     d52:	bf e3       	ldi	r27, 0x3F	; 63
     d54:	b9 1b       	sub	r27, r25
     d56:	99 27       	eor	r25, r25
     d58:	b8 50       	subi	r27, 0x08	; 8
     d5a:	3a f4       	brpl	.+14     	; 0xd6a <__fixunssfdi+0x2c>
     d5c:	66 0f       	add	r22, r22
     d5e:	77 1f       	adc	r23, r23
     d60:	88 1f       	adc	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	b3 95       	inc	r27
     d66:	d2 f3       	brmi	.-12     	; 0xd5c <__fixunssfdi+0x1e>
     d68:	16 c0       	rjmp	.+44     	; 0xd96 <__fixunssfdi+0x58>
     d6a:	b8 50       	subi	r27, 0x08	; 8
     d6c:	4a f0       	brmi	.+18     	; 0xd80 <__fixunssfdi+0x42>
     d6e:	23 2f       	mov	r18, r19
     d70:	34 2f       	mov	r19, r20
     d72:	45 2f       	mov	r20, r21
     d74:	56 2f       	mov	r21, r22
     d76:	67 2f       	mov	r22, r23
     d78:	78 2f       	mov	r23, r24
     d7a:	88 27       	eor	r24, r24
     d7c:	b8 50       	subi	r27, 0x08	; 8
     d7e:	ba f7       	brpl	.-18     	; 0xd6e <__fixunssfdi+0x30>
     d80:	b8 5f       	subi	r27, 0xF8	; 248
     d82:	49 f0       	breq	.+18     	; 0xd96 <__fixunssfdi+0x58>
     d84:	86 95       	lsr	r24
     d86:	77 95       	ror	r23
     d88:	67 95       	ror	r22
     d8a:	57 95       	ror	r21
     d8c:	47 95       	ror	r20
     d8e:	37 95       	ror	r19
     d90:	27 95       	ror	r18
     d92:	ba 95       	dec	r27
     d94:	b9 f7       	brne	.-18     	; 0xd84 <__fixunssfdi+0x46>
     d96:	0e f4       	brtc	.+2      	; 0xd9a <__fixunssfdi+0x5c>
     d98:	ae d0       	rcall	.+348    	; 0xef6 <__fp_negdi>
     d9a:	88 94       	clc
     d9c:	08 95       	ret
     d9e:	88 94       	clc
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	cb 01       	movw	r24, r22
     da6:	08 95       	ret

00000da8 <__fixunssfsi>:
     da8:	be d0       	rcall	.+380    	; 0xf26 <__fp_splitA>
     daa:	88 f0       	brcs	.+34     	; 0xdce <__fixunssfsi+0x26>
     dac:	9f 57       	subi	r25, 0x7F	; 127
     dae:	90 f0       	brcs	.+36     	; 0xdd4 <__fixunssfsi+0x2c>
     db0:	b9 2f       	mov	r27, r25
     db2:	99 27       	eor	r25, r25
     db4:	b7 51       	subi	r27, 0x17	; 23
     db6:	a0 f0       	brcs	.+40     	; 0xde0 <__fixunssfsi+0x38>
     db8:	d1 f0       	breq	.+52     	; 0xdee <__fixunssfsi+0x46>
     dba:	66 0f       	add	r22, r22
     dbc:	77 1f       	adc	r23, r23
     dbe:	88 1f       	adc	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	1a f0       	brmi	.+6      	; 0xdca <__fixunssfsi+0x22>
     dc4:	ba 95       	dec	r27
     dc6:	c9 f7       	brne	.-14     	; 0xdba <__fixunssfsi+0x12>
     dc8:	12 c0       	rjmp	.+36     	; 0xdee <__fixunssfsi+0x46>
     dca:	b1 30       	cpi	r27, 0x01	; 1
     dcc:	81 f0       	breq	.+32     	; 0xdee <__fixunssfsi+0x46>
     dce:	c5 d0       	rcall	.+394    	; 0xf5a <__fp_zero>
     dd0:	b1 e0       	ldi	r27, 0x01	; 1
     dd2:	08 95       	ret
     dd4:	c2 c0       	rjmp	.+388    	; 0xf5a <__fp_zero>
     dd6:	67 2f       	mov	r22, r23
     dd8:	78 2f       	mov	r23, r24
     dda:	88 27       	eor	r24, r24
     ddc:	b8 5f       	subi	r27, 0xF8	; 248
     dde:	39 f0       	breq	.+14     	; 0xdee <__fixunssfsi+0x46>
     de0:	b9 3f       	cpi	r27, 0xF9	; 249
     de2:	cc f3       	brlt	.-14     	; 0xdd6 <__fixunssfsi+0x2e>
     de4:	86 95       	lsr	r24
     de6:	77 95       	ror	r23
     de8:	67 95       	ror	r22
     dea:	b3 95       	inc	r27
     dec:	d9 f7       	brne	.-10     	; 0xde4 <__fixunssfsi+0x3c>
     dee:	3e f4       	brtc	.+14     	; 0xdfe <__fixunssfsi+0x56>
     df0:	90 95       	com	r25
     df2:	80 95       	com	r24
     df4:	70 95       	com	r23
     df6:	61 95       	neg	r22
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	8f 4f       	sbci	r24, 0xFF	; 255
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	08 95       	ret

00000e00 <__floatunsisf>:
     e00:	e8 94       	clt
     e02:	09 c0       	rjmp	.+18     	; 0xe16 <__floatsisf+0x12>

00000e04 <__floatsisf>:
     e04:	97 fb       	bst	r25, 7
     e06:	3e f4       	brtc	.+14     	; 0xe16 <__floatsisf+0x12>
     e08:	90 95       	com	r25
     e0a:	80 95       	com	r24
     e0c:	70 95       	com	r23
     e0e:	61 95       	neg	r22
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	8f 4f       	sbci	r24, 0xFF	; 255
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	99 23       	and	r25, r25
     e18:	a9 f0       	breq	.+42     	; 0xe44 <__floatsisf+0x40>
     e1a:	f9 2f       	mov	r31, r25
     e1c:	96 e9       	ldi	r25, 0x96	; 150
     e1e:	bb 27       	eor	r27, r27
     e20:	93 95       	inc	r25
     e22:	f6 95       	lsr	r31
     e24:	87 95       	ror	r24
     e26:	77 95       	ror	r23
     e28:	67 95       	ror	r22
     e2a:	b7 95       	ror	r27
     e2c:	f1 11       	cpse	r31, r1
     e2e:	f8 cf       	rjmp	.-16     	; 0xe20 <__floatsisf+0x1c>
     e30:	fa f4       	brpl	.+62     	; 0xe70 <__floatsisf+0x6c>
     e32:	bb 0f       	add	r27, r27
     e34:	11 f4       	brne	.+4      	; 0xe3a <__floatsisf+0x36>
     e36:	60 ff       	sbrs	r22, 0
     e38:	1b c0       	rjmp	.+54     	; 0xe70 <__floatsisf+0x6c>
     e3a:	6f 5f       	subi	r22, 0xFF	; 255
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	8f 4f       	sbci	r24, 0xFF	; 255
     e40:	9f 4f       	sbci	r25, 0xFF	; 255
     e42:	16 c0       	rjmp	.+44     	; 0xe70 <__floatsisf+0x6c>
     e44:	88 23       	and	r24, r24
     e46:	11 f0       	breq	.+4      	; 0xe4c <__floatsisf+0x48>
     e48:	96 e9       	ldi	r25, 0x96	; 150
     e4a:	11 c0       	rjmp	.+34     	; 0xe6e <__floatsisf+0x6a>
     e4c:	77 23       	and	r23, r23
     e4e:	21 f0       	breq	.+8      	; 0xe58 <__floatsisf+0x54>
     e50:	9e e8       	ldi	r25, 0x8E	; 142
     e52:	87 2f       	mov	r24, r23
     e54:	76 2f       	mov	r23, r22
     e56:	05 c0       	rjmp	.+10     	; 0xe62 <__floatsisf+0x5e>
     e58:	66 23       	and	r22, r22
     e5a:	71 f0       	breq	.+28     	; 0xe78 <__floatsisf+0x74>
     e5c:	96 e8       	ldi	r25, 0x86	; 134
     e5e:	86 2f       	mov	r24, r22
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	2a f0       	brmi	.+10     	; 0xe70 <__floatsisf+0x6c>
     e66:	9a 95       	dec	r25
     e68:	66 0f       	add	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	88 1f       	adc	r24, r24
     e6e:	da f7       	brpl	.-10     	; 0xe66 <__floatsisf+0x62>
     e70:	88 0f       	add	r24, r24
     e72:	96 95       	lsr	r25
     e74:	87 95       	ror	r24
     e76:	97 f9       	bld	r25, 7
     e78:	08 95       	ret

00000e7a <__floatundisf>:
     e7a:	e8 94       	clt

00000e7c <__fp_di2sf>:
     e7c:	f9 2f       	mov	r31, r25
     e7e:	96 eb       	ldi	r25, 0xB6	; 182
     e80:	ff 23       	and	r31, r31
     e82:	81 f0       	breq	.+32     	; 0xea4 <__fp_di2sf+0x28>
     e84:	12 16       	cp	r1, r18
     e86:	13 06       	cpc	r1, r19
     e88:	14 06       	cpc	r1, r20
     e8a:	44 0b       	sbc	r20, r20
     e8c:	93 95       	inc	r25
     e8e:	f6 95       	lsr	r31
     e90:	87 95       	ror	r24
     e92:	77 95       	ror	r23
     e94:	67 95       	ror	r22
     e96:	57 95       	ror	r21
     e98:	40 40       	sbci	r20, 0x00	; 0
     e9a:	ff 23       	and	r31, r31
     e9c:	b9 f7       	brne	.-18     	; 0xe8c <__fp_di2sf+0x10>
     e9e:	1b c0       	rjmp	.+54     	; 0xed6 <__fp_di2sf+0x5a>
     ea0:	99 27       	eor	r25, r25
     ea2:	08 95       	ret
     ea4:	88 23       	and	r24, r24
     ea6:	51 f4       	brne	.+20     	; 0xebc <__fp_di2sf+0x40>
     ea8:	98 50       	subi	r25, 0x08	; 8
     eaa:	d2 f7       	brpl	.-12     	; 0xea0 <__fp_di2sf+0x24>
     eac:	87 2b       	or	r24, r23
     eae:	76 2f       	mov	r23, r22
     eb0:	65 2f       	mov	r22, r21
     eb2:	54 2f       	mov	r21, r20
     eb4:	43 2f       	mov	r20, r19
     eb6:	32 2f       	mov	r19, r18
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	b1 f3       	breq	.-20     	; 0xea8 <__fp_di2sf+0x2c>
     ebc:	12 16       	cp	r1, r18
     ebe:	13 06       	cpc	r1, r19
     ec0:	14 06       	cpc	r1, r20
     ec2:	44 0b       	sbc	r20, r20
     ec4:	88 23       	and	r24, r24
     ec6:	3a f0       	brmi	.+14     	; 0xed6 <__fp_di2sf+0x5a>
     ec8:	9a 95       	dec	r25
     eca:	44 0f       	add	r20, r20
     ecc:	55 1f       	adc	r21, r21
     ece:	66 1f       	adc	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	88 1f       	adc	r24, r24
     ed4:	ca f7       	brpl	.-14     	; 0xec8 <__fp_di2sf+0x4c>
     ed6:	55 23       	and	r21, r21
     ed8:	4a f4       	brpl	.+18     	; 0xeec <__fp_di2sf+0x70>
     eda:	44 0f       	add	r20, r20
     edc:	55 1f       	adc	r21, r21
     ede:	11 f4       	brne	.+4      	; 0xee4 <__fp_di2sf+0x68>
     ee0:	60 ff       	sbrs	r22, 0
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <__fp_di2sf+0x70>
     ee4:	6f 5f       	subi	r22, 0xFF	; 255
     ee6:	7f 4f       	sbci	r23, 0xFF	; 255
     ee8:	8f 4f       	sbci	r24, 0xFF	; 255
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	88 0f       	add	r24, r24
     eee:	96 95       	lsr	r25
     ef0:	87 95       	ror	r24
     ef2:	97 f9       	bld	r25, 7
     ef4:	08 95       	ret

00000ef6 <__fp_negdi>:
     ef6:	90 95       	com	r25
     ef8:	80 95       	com	r24
     efa:	70 95       	com	r23
     efc:	60 95       	com	r22
     efe:	50 95       	com	r21
     f00:	40 95       	com	r20
     f02:	30 95       	com	r19
     f04:	21 95       	neg	r18
     f06:	3f 4f       	sbci	r19, 0xFF	; 255
     f08:	4f 4f       	sbci	r20, 0xFF	; 255
     f0a:	5f 4f       	sbci	r21, 0xFF	; 255
     f0c:	6f 4f       	sbci	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	8f 4f       	sbci	r24, 0xFF	; 255
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	08 95       	ret

00000f16 <__fp_split3>:
     f16:	57 fd       	sbrc	r21, 7
     f18:	90 58       	subi	r25, 0x80	; 128
     f1a:	44 0f       	add	r20, r20
     f1c:	55 1f       	adc	r21, r21
     f1e:	59 f0       	breq	.+22     	; 0xf36 <__fp_splitA+0x10>
     f20:	5f 3f       	cpi	r21, 0xFF	; 255
     f22:	71 f0       	breq	.+28     	; 0xf40 <__fp_splitA+0x1a>
     f24:	47 95       	ror	r20

00000f26 <__fp_splitA>:
     f26:	88 0f       	add	r24, r24
     f28:	97 fb       	bst	r25, 7
     f2a:	99 1f       	adc	r25, r25
     f2c:	61 f0       	breq	.+24     	; 0xf46 <__fp_splitA+0x20>
     f2e:	9f 3f       	cpi	r25, 0xFF	; 255
     f30:	79 f0       	breq	.+30     	; 0xf50 <__fp_splitA+0x2a>
     f32:	87 95       	ror	r24
     f34:	08 95       	ret
     f36:	12 16       	cp	r1, r18
     f38:	13 06       	cpc	r1, r19
     f3a:	14 06       	cpc	r1, r20
     f3c:	55 1f       	adc	r21, r21
     f3e:	f2 cf       	rjmp	.-28     	; 0xf24 <__fp_split3+0xe>
     f40:	46 95       	lsr	r20
     f42:	f1 df       	rcall	.-30     	; 0xf26 <__fp_splitA>
     f44:	08 c0       	rjmp	.+16     	; 0xf56 <__fp_splitA+0x30>
     f46:	16 16       	cp	r1, r22
     f48:	17 06       	cpc	r1, r23
     f4a:	18 06       	cpc	r1, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	f1 cf       	rjmp	.-30     	; 0xf32 <__fp_splitA+0xc>
     f50:	86 95       	lsr	r24
     f52:	71 05       	cpc	r23, r1
     f54:	61 05       	cpc	r22, r1
     f56:	08 94       	sec
     f58:	08 95       	ret

00000f5a <__fp_zero>:
     f5a:	e8 94       	clt

00000f5c <__fp_szero>:
     f5c:	bb 27       	eor	r27, r27
     f5e:	66 27       	eor	r22, r22
     f60:	77 27       	eor	r23, r23
     f62:	cb 01       	movw	r24, r22
     f64:	97 f9       	bld	r25, 7
     f66:	08 95       	ret

00000f68 <__mulsf3>:
     f68:	0b d0       	rcall	.+22     	; 0xf80 <__mulsf3x>
     f6a:	d2 c0       	rjmp	.+420    	; 0x1110 <__fp_round>
     f6c:	c3 d0       	rcall	.+390    	; 0x10f4 <__fp_pscA>
     f6e:	28 f0       	brcs	.+10     	; 0xf7a <__mulsf3+0x12>
     f70:	c8 d0       	rcall	.+400    	; 0x1102 <__fp_pscB>
     f72:	18 f0       	brcs	.+6      	; 0xf7a <__mulsf3+0x12>
     f74:	95 23       	and	r25, r21
     f76:	09 f0       	breq	.+2      	; 0xf7a <__mulsf3+0x12>
     f78:	9f c0       	rjmp	.+318    	; 0x10b8 <__fp_inf>
     f7a:	b2 c0       	rjmp	.+356    	; 0x10e0 <__fp_nan>
     f7c:	11 24       	eor	r1, r1
     f7e:	ee cf       	rjmp	.-36     	; 0xf5c <__fp_szero>

00000f80 <__mulsf3x>:
     f80:	ca df       	rcall	.-108    	; 0xf16 <__fp_split3>
     f82:	a0 f3       	brcs	.-24     	; 0xf6c <__mulsf3+0x4>

00000f84 <__mulsf3_pse>:
     f84:	95 9f       	mul	r25, r21
     f86:	d1 f3       	breq	.-12     	; 0xf7c <__mulsf3+0x14>
     f88:	95 0f       	add	r25, r21
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	55 1f       	adc	r21, r21
     f8e:	62 9f       	mul	r22, r18
     f90:	f0 01       	movw	r30, r0
     f92:	72 9f       	mul	r23, r18
     f94:	bb 27       	eor	r27, r27
     f96:	f0 0d       	add	r31, r0
     f98:	b1 1d       	adc	r27, r1
     f9a:	63 9f       	mul	r22, r19
     f9c:	aa 27       	eor	r26, r26
     f9e:	f0 0d       	add	r31, r0
     fa0:	b1 1d       	adc	r27, r1
     fa2:	aa 1f       	adc	r26, r26
     fa4:	64 9f       	mul	r22, r20
     fa6:	66 27       	eor	r22, r22
     fa8:	b0 0d       	add	r27, r0
     faa:	a1 1d       	adc	r26, r1
     fac:	66 1f       	adc	r22, r22
     fae:	82 9f       	mul	r24, r18
     fb0:	22 27       	eor	r18, r18
     fb2:	b0 0d       	add	r27, r0
     fb4:	a1 1d       	adc	r26, r1
     fb6:	62 1f       	adc	r22, r18
     fb8:	73 9f       	mul	r23, r19
     fba:	b0 0d       	add	r27, r0
     fbc:	a1 1d       	adc	r26, r1
     fbe:	62 1f       	adc	r22, r18
     fc0:	83 9f       	mul	r24, r19
     fc2:	a0 0d       	add	r26, r0
     fc4:	61 1d       	adc	r22, r1
     fc6:	22 1f       	adc	r18, r18
     fc8:	74 9f       	mul	r23, r20
     fca:	33 27       	eor	r19, r19
     fcc:	a0 0d       	add	r26, r0
     fce:	61 1d       	adc	r22, r1
     fd0:	23 1f       	adc	r18, r19
     fd2:	84 9f       	mul	r24, r20
     fd4:	60 0d       	add	r22, r0
     fd6:	21 1d       	adc	r18, r1
     fd8:	82 2f       	mov	r24, r18
     fda:	76 2f       	mov	r23, r22
     fdc:	6a 2f       	mov	r22, r26
     fde:	11 24       	eor	r1, r1
     fe0:	9f 57       	subi	r25, 0x7F	; 127
     fe2:	50 40       	sbci	r21, 0x00	; 0
     fe4:	8a f0       	brmi	.+34     	; 0x1008 <__mulsf3_pse+0x84>
     fe6:	e1 f0       	breq	.+56     	; 0x1020 <__mulsf3_pse+0x9c>
     fe8:	88 23       	and	r24, r24
     fea:	4a f0       	brmi	.+18     	; 0xffe <__mulsf3_pse+0x7a>
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	bb 1f       	adc	r27, r27
     ff2:	66 1f       	adc	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	88 1f       	adc	r24, r24
     ff8:	91 50       	subi	r25, 0x01	; 1
     ffa:	50 40       	sbci	r21, 0x00	; 0
     ffc:	a9 f7       	brne	.-22     	; 0xfe8 <__mulsf3_pse+0x64>
     ffe:	9e 3f       	cpi	r25, 0xFE	; 254
    1000:	51 05       	cpc	r21, r1
    1002:	70 f0       	brcs	.+28     	; 0x1020 <__mulsf3_pse+0x9c>
    1004:	59 c0       	rjmp	.+178    	; 0x10b8 <__fp_inf>
    1006:	aa cf       	rjmp	.-172    	; 0xf5c <__fp_szero>
    1008:	5f 3f       	cpi	r21, 0xFF	; 255
    100a:	ec f3       	brlt	.-6      	; 0x1006 <__mulsf3_pse+0x82>
    100c:	98 3e       	cpi	r25, 0xE8	; 232
    100e:	dc f3       	brlt	.-10     	; 0x1006 <__mulsf3_pse+0x82>
    1010:	86 95       	lsr	r24
    1012:	77 95       	ror	r23
    1014:	67 95       	ror	r22
    1016:	b7 95       	ror	r27
    1018:	f7 95       	ror	r31
    101a:	e7 95       	ror	r30
    101c:	9f 5f       	subi	r25, 0xFF	; 255
    101e:	c1 f7       	brne	.-16     	; 0x1010 <__mulsf3_pse+0x8c>
    1020:	fe 2b       	or	r31, r30
    1022:	88 0f       	add	r24, r24
    1024:	91 1d       	adc	r25, r1
    1026:	96 95       	lsr	r25
    1028:	87 95       	ror	r24
    102a:	97 f9       	bld	r25, 7
    102c:	08 95       	ret
    102e:	11 f4       	brne	.+4      	; 0x1034 <__mulsf3_pse+0xb0>
    1030:	0e f4       	brtc	.+2      	; 0x1034 <__mulsf3_pse+0xb0>
    1032:	56 c0       	rjmp	.+172    	; 0x10e0 <__fp_nan>
    1034:	47 c0       	rjmp	.+142    	; 0x10c4 <__fp_mpack>

00001036 <sqrt>:
    1036:	77 df       	rcall	.-274    	; 0xf26 <__fp_splitA>
    1038:	d0 f3       	brcs	.-12     	; 0x102e <__mulsf3_pse+0xaa>
    103a:	99 23       	and	r25, r25
    103c:	d9 f3       	breq	.-10     	; 0x1034 <__mulsf3_pse+0xb0>
    103e:	ce f3       	brts	.-14     	; 0x1032 <__mulsf3_pse+0xae>
    1040:	9f 57       	subi	r25, 0x7F	; 127
    1042:	55 0b       	sbc	r21, r21
    1044:	87 ff       	sbrs	r24, 7
    1046:	4f d0       	rcall	.+158    	; 0x10e6 <__fp_norm2>
    1048:	00 24       	eor	r0, r0
    104a:	a0 e6       	ldi	r26, 0x60	; 96
    104c:	40 ea       	ldi	r20, 0xA0	; 160
    104e:	90 01       	movw	r18, r0
    1050:	80 58       	subi	r24, 0x80	; 128
    1052:	56 95       	lsr	r21
    1054:	97 95       	ror	r25
    1056:	28 f4       	brcc	.+10     	; 0x1062 <sqrt+0x2c>
    1058:	80 5c       	subi	r24, 0xC0	; 192
    105a:	66 0f       	add	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	88 1f       	adc	r24, r24
    1060:	20 f0       	brcs	.+8      	; 0x106a <sqrt+0x34>
    1062:	26 17       	cp	r18, r22
    1064:	37 07       	cpc	r19, r23
    1066:	48 07       	cpc	r20, r24
    1068:	30 f4       	brcc	.+12     	; 0x1076 <sqrt+0x40>
    106a:	62 1b       	sub	r22, r18
    106c:	73 0b       	sbc	r23, r19
    106e:	84 0b       	sbc	r24, r20
    1070:	20 29       	or	r18, r0
    1072:	31 29       	or	r19, r1
    1074:	4a 2b       	or	r20, r26
    1076:	a6 95       	lsr	r26
    1078:	17 94       	ror	r1
    107a:	07 94       	ror	r0
    107c:	20 25       	eor	r18, r0
    107e:	31 25       	eor	r19, r1
    1080:	4a 27       	eor	r20, r26
    1082:	58 f7       	brcc	.-42     	; 0x105a <sqrt+0x24>
    1084:	66 0f       	add	r22, r22
    1086:	77 1f       	adc	r23, r23
    1088:	88 1f       	adc	r24, r24
    108a:	20 f0       	brcs	.+8      	; 0x1094 <sqrt+0x5e>
    108c:	26 17       	cp	r18, r22
    108e:	37 07       	cpc	r19, r23
    1090:	48 07       	cpc	r20, r24
    1092:	30 f4       	brcc	.+12     	; 0x10a0 <sqrt+0x6a>
    1094:	62 0b       	sbc	r22, r18
    1096:	73 0b       	sbc	r23, r19
    1098:	84 0b       	sbc	r24, r20
    109a:	20 0d       	add	r18, r0
    109c:	31 1d       	adc	r19, r1
    109e:	41 1d       	adc	r20, r1
    10a0:	a0 95       	com	r26
    10a2:	81 f7       	brne	.-32     	; 0x1084 <sqrt+0x4e>
    10a4:	b9 01       	movw	r22, r18
    10a6:	84 2f       	mov	r24, r20
    10a8:	91 58       	subi	r25, 0x81	; 129
    10aa:	88 0f       	add	r24, r24
    10ac:	96 95       	lsr	r25
    10ae:	87 95       	ror	r24
    10b0:	08 95       	ret

000010b2 <square>:
    10b2:	9b 01       	movw	r18, r22
    10b4:	ac 01       	movw	r20, r24
    10b6:	58 cf       	rjmp	.-336    	; 0xf68 <__mulsf3>

000010b8 <__fp_inf>:
    10b8:	97 f9       	bld	r25, 7
    10ba:	9f 67       	ori	r25, 0x7F	; 127
    10bc:	80 e8       	ldi	r24, 0x80	; 128
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	08 95       	ret

000010c4 <__fp_mpack>:
    10c4:	9f 3f       	cpi	r25, 0xFF	; 255
    10c6:	31 f0       	breq	.+12     	; 0x10d4 <__fp_mpack_finite+0xc>

000010c8 <__fp_mpack_finite>:
    10c8:	91 50       	subi	r25, 0x01	; 1
    10ca:	20 f4       	brcc	.+8      	; 0x10d4 <__fp_mpack_finite+0xc>
    10cc:	87 95       	ror	r24
    10ce:	77 95       	ror	r23
    10d0:	67 95       	ror	r22
    10d2:	b7 95       	ror	r27
    10d4:	88 0f       	add	r24, r24
    10d6:	91 1d       	adc	r25, r1
    10d8:	96 95       	lsr	r25
    10da:	87 95       	ror	r24
    10dc:	97 f9       	bld	r25, 7
    10de:	08 95       	ret

000010e0 <__fp_nan>:
    10e0:	9f ef       	ldi	r25, 0xFF	; 255
    10e2:	80 ec       	ldi	r24, 0xC0	; 192
    10e4:	08 95       	ret

000010e6 <__fp_norm2>:
    10e6:	91 50       	subi	r25, 0x01	; 1
    10e8:	50 40       	sbci	r21, 0x00	; 0
    10ea:	66 0f       	add	r22, r22
    10ec:	77 1f       	adc	r23, r23
    10ee:	88 1f       	adc	r24, r24
    10f0:	d2 f7       	brpl	.-12     	; 0x10e6 <__fp_norm2>
    10f2:	08 95       	ret

000010f4 <__fp_pscA>:
    10f4:	00 24       	eor	r0, r0
    10f6:	0a 94       	dec	r0
    10f8:	16 16       	cp	r1, r22
    10fa:	17 06       	cpc	r1, r23
    10fc:	18 06       	cpc	r1, r24
    10fe:	09 06       	cpc	r0, r25
    1100:	08 95       	ret

00001102 <__fp_pscB>:
    1102:	00 24       	eor	r0, r0
    1104:	0a 94       	dec	r0
    1106:	12 16       	cp	r1, r18
    1108:	13 06       	cpc	r1, r19
    110a:	14 06       	cpc	r1, r20
    110c:	05 06       	cpc	r0, r21
    110e:	08 95       	ret

00001110 <__fp_round>:
    1110:	09 2e       	mov	r0, r25
    1112:	03 94       	inc	r0
    1114:	00 0c       	add	r0, r0
    1116:	11 f4       	brne	.+4      	; 0x111c <__fp_round+0xc>
    1118:	88 23       	and	r24, r24
    111a:	52 f0       	brmi	.+20     	; 0x1130 <__fp_round+0x20>
    111c:	bb 0f       	add	r27, r27
    111e:	40 f4       	brcc	.+16     	; 0x1130 <__fp_round+0x20>
    1120:	bf 2b       	or	r27, r31
    1122:	11 f4       	brne	.+4      	; 0x1128 <__fp_round+0x18>
    1124:	60 ff       	sbrs	r22, 0
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <__fp_round+0x20>
    1128:	6f 5f       	subi	r22, 0xFF	; 255
    112a:	7f 4f       	sbci	r23, 0xFF	; 255
    112c:	8f 4f       	sbci	r24, 0xFF	; 255
    112e:	9f 4f       	sbci	r25, 0xFF	; 255
    1130:	08 95       	ret

00001132 <__udivmodhi4>:
    1132:	aa 1b       	sub	r26, r26
    1134:	bb 1b       	sub	r27, r27
    1136:	51 e1       	ldi	r21, 0x11	; 17
    1138:	07 c0       	rjmp	.+14     	; 0x1148 <__udivmodhi4_ep>

0000113a <__udivmodhi4_loop>:
    113a:	aa 1f       	adc	r26, r26
    113c:	bb 1f       	adc	r27, r27
    113e:	a6 17       	cp	r26, r22
    1140:	b7 07       	cpc	r27, r23
    1142:	10 f0       	brcs	.+4      	; 0x1148 <__udivmodhi4_ep>
    1144:	a6 1b       	sub	r26, r22
    1146:	b7 0b       	sbc	r27, r23

00001148 <__udivmodhi4_ep>:
    1148:	88 1f       	adc	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	5a 95       	dec	r21
    114e:	a9 f7       	brne	.-22     	; 0x113a <__udivmodhi4_loop>
    1150:	80 95       	com	r24
    1152:	90 95       	com	r25
    1154:	bc 01       	movw	r22, r24
    1156:	cd 01       	movw	r24, r26
    1158:	08 95       	ret

0000115a <__udivmodsi4>:
    115a:	a1 e2       	ldi	r26, 0x21	; 33
    115c:	1a 2e       	mov	r1, r26
    115e:	aa 1b       	sub	r26, r26
    1160:	bb 1b       	sub	r27, r27
    1162:	fd 01       	movw	r30, r26
    1164:	0d c0       	rjmp	.+26     	; 0x1180 <__udivmodsi4_ep>

00001166 <__udivmodsi4_loop>:
    1166:	aa 1f       	adc	r26, r26
    1168:	bb 1f       	adc	r27, r27
    116a:	ee 1f       	adc	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	a2 17       	cp	r26, r18
    1170:	b3 07       	cpc	r27, r19
    1172:	e4 07       	cpc	r30, r20
    1174:	f5 07       	cpc	r31, r21
    1176:	20 f0       	brcs	.+8      	; 0x1180 <__udivmodsi4_ep>
    1178:	a2 1b       	sub	r26, r18
    117a:	b3 0b       	sbc	r27, r19
    117c:	e4 0b       	sbc	r30, r20
    117e:	f5 0b       	sbc	r31, r21

00001180 <__udivmodsi4_ep>:
    1180:	66 1f       	adc	r22, r22
    1182:	77 1f       	adc	r23, r23
    1184:	88 1f       	adc	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	1a 94       	dec	r1
    118a:	69 f7       	brne	.-38     	; 0x1166 <__udivmodsi4_loop>
    118c:	60 95       	com	r22
    118e:	70 95       	com	r23
    1190:	80 95       	com	r24
    1192:	90 95       	com	r25
    1194:	9b 01       	movw	r18, r22
    1196:	ac 01       	movw	r20, r24
    1198:	bd 01       	movw	r22, r26
    119a:	cf 01       	movw	r24, r30
    119c:	08 95       	ret

0000119e <__umulhisi3>:
    119e:	a2 9f       	mul	r26, r18
    11a0:	b0 01       	movw	r22, r0
    11a2:	b3 9f       	mul	r27, r19
    11a4:	c0 01       	movw	r24, r0
    11a6:	a3 9f       	mul	r26, r19
    11a8:	01 d0       	rcall	.+2      	; 0x11ac <__umulhisi3+0xe>
    11aa:	b2 9f       	mul	r27, r18
    11ac:	70 0d       	add	r23, r0
    11ae:	81 1d       	adc	r24, r1
    11b0:	11 24       	eor	r1, r1
    11b2:	91 1d       	adc	r25, r1
    11b4:	08 95       	ret

000011b6 <__muluhisi3>:
    11b6:	f3 df       	rcall	.-26     	; 0x119e <__umulhisi3>
    11b8:	a5 9f       	mul	r26, r21
    11ba:	90 0d       	add	r25, r0
    11bc:	b4 9f       	mul	r27, r20
    11be:	90 0d       	add	r25, r0
    11c0:	a4 9f       	mul	r26, r20
    11c2:	80 0d       	add	r24, r0
    11c4:	91 1d       	adc	r25, r1
    11c6:	11 24       	eor	r1, r1
    11c8:	08 95       	ret

000011ca <__umoddi3>:
    11ca:	68 94       	set
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <__udivdi3_umoddi3>

000011ce <__udivdi3>:
    11ce:	e8 94       	clt

000011d0 <__udivdi3_umoddi3>:
    11d0:	8f 92       	push	r8
    11d2:	9f 92       	push	r9
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	05 d0       	rcall	.+10     	; 0x11e4 <__udivmod64>
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	9f 90       	pop	r9
    11e0:	8f 90       	pop	r8
    11e2:	08 95       	ret

000011e4 <__udivmod64>:
    11e4:	88 24       	eor	r8, r8
    11e6:	99 24       	eor	r9, r9
    11e8:	f4 01       	movw	r30, r8
    11ea:	e4 01       	movw	r28, r8
    11ec:	b0 e4       	ldi	r27, 0x40	; 64
    11ee:	1b 2e       	mov	r1, r27
    11f0:	d4 01       	movw	r26, r8
    11f2:	9d 15       	cp	r25, r13
    11f4:	8e 04       	cpc	r8, r14
    11f6:	9f 04       	cpc	r9, r15
    11f8:	e0 07       	cpc	r30, r16
    11fa:	f1 07       	cpc	r31, r17
    11fc:	38 f4       	brcc	.+14     	; 0x120c <__udivmod64+0x28>
    11fe:	fc 01       	movw	r30, r24
    1200:	4b 01       	movw	r8, r22
    1202:	ca 01       	movw	r24, r20
    1204:	b9 01       	movw	r22, r18
    1206:	ad 01       	movw	r20, r26
    1208:	9e 01       	movw	r18, r28
    120a:	16 94       	lsr	r1
    120c:	22 0f       	add	r18, r18
    120e:	33 1f       	adc	r19, r19
    1210:	44 1f       	adc	r20, r20
    1212:	55 1f       	adc	r21, r21
    1214:	66 1f       	adc	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	88 1f       	adc	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	88 1c       	adc	r8, r8
    121e:	99 1c       	adc	r9, r9
    1220:	ee 1f       	adc	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	cc 1f       	adc	r28, r28
    1226:	dd 1f       	adc	r29, r29
    1228:	aa 1f       	adc	r26, r26
    122a:	bb 1f       	adc	r27, r27
    122c:	8a 14       	cp	r8, r10
    122e:	9b 04       	cpc	r9, r11
    1230:	ec 05       	cpc	r30, r12
    1232:	fd 05       	cpc	r31, r13
    1234:	ce 05       	cpc	r28, r14
    1236:	df 05       	cpc	r29, r15
    1238:	a0 07       	cpc	r26, r16
    123a:	b1 07       	cpc	r27, r17
    123c:	48 f0       	brcs	.+18     	; 0x1250 <__udivmod64+0x6c>
    123e:	8a 18       	sub	r8, r10
    1240:	9b 08       	sbc	r9, r11
    1242:	ec 09       	sbc	r30, r12
    1244:	fd 09       	sbc	r31, r13
    1246:	ce 09       	sbc	r28, r14
    1248:	df 09       	sbc	r29, r15
    124a:	a0 0b       	sbc	r26, r16
    124c:	b1 0b       	sbc	r27, r17
    124e:	21 60       	ori	r18, 0x01	; 1
    1250:	1a 94       	dec	r1
    1252:	e1 f6       	brne	.-72     	; 0x120c <__udivmod64+0x28>
    1254:	2e f4       	brtc	.+10     	; 0x1260 <__udivmod64+0x7c>
    1256:	94 01       	movw	r18, r8
    1258:	af 01       	movw	r20, r30
    125a:	be 01       	movw	r22, r28
    125c:	cd 01       	movw	r24, r26
    125e:	00 0c       	add	r0, r0
    1260:	08 95       	ret

00001262 <__adddi3>:
    1262:	2a 0d       	add	r18, r10
    1264:	3b 1d       	adc	r19, r11
    1266:	4c 1d       	adc	r20, r12
    1268:	5d 1d       	adc	r21, r13
    126a:	6e 1d       	adc	r22, r14
    126c:	7f 1d       	adc	r23, r15
    126e:	80 1f       	adc	r24, r16
    1270:	91 1f       	adc	r25, r17
    1272:	08 95       	ret

00001274 <calloc>:
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	86 9f       	mul	r24, r22
    127e:	80 01       	movw	r16, r0
    1280:	87 9f       	mul	r24, r23
    1282:	10 0d       	add	r17, r0
    1284:	96 9f       	mul	r25, r22
    1286:	10 0d       	add	r17, r0
    1288:	11 24       	eor	r1, r1
    128a:	c8 01       	movw	r24, r16
    128c:	0d d0       	rcall	.+26     	; 0x12a8 <malloc>
    128e:	ec 01       	movw	r28, r24
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	21 f0       	breq	.+8      	; 0x129c <calloc+0x28>
    1294:	a8 01       	movw	r20, r16
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	ef d1       	rcall	.+990    	; 0x167a <memset>
    129c:	ce 01       	movw	r24, r28
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	08 95       	ret

000012a8 <malloc>:
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	91 05       	cpc	r25, r1
    12b4:	10 f4       	brcc	.+4      	; 0x12ba <malloc+0x12>
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <__flp>
    12be:	f0 91 5a 02 	lds	r31, 0x025A	; 0x80025a <__flp+0x1>
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	a0 e0       	ldi	r26, 0x00	; 0
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	30 97       	sbiw	r30, 0x00	; 0
    12cc:	19 f1       	breq	.+70     	; 0x1314 <malloc+0x6c>
    12ce:	40 81       	ld	r20, Z
    12d0:	51 81       	ldd	r21, Z+1	; 0x01
    12d2:	02 81       	ldd	r16, Z+2	; 0x02
    12d4:	13 81       	ldd	r17, Z+3	; 0x03
    12d6:	48 17       	cp	r20, r24
    12d8:	59 07       	cpc	r21, r25
    12da:	c8 f0       	brcs	.+50     	; 0x130e <malloc+0x66>
    12dc:	84 17       	cp	r24, r20
    12de:	95 07       	cpc	r25, r21
    12e0:	69 f4       	brne	.+26     	; 0x12fc <malloc+0x54>
    12e2:	10 97       	sbiw	r26, 0x00	; 0
    12e4:	31 f0       	breq	.+12     	; 0x12f2 <malloc+0x4a>
    12e6:	12 96       	adiw	r26, 0x02	; 2
    12e8:	0c 93       	st	X, r16
    12ea:	12 97       	sbiw	r26, 0x02	; 2
    12ec:	13 96       	adiw	r26, 0x03	; 3
    12ee:	1c 93       	st	X, r17
    12f0:	27 c0       	rjmp	.+78     	; 0x1340 <malloc+0x98>
    12f2:	00 93 59 02 	sts	0x0259, r16	; 0x800259 <__flp>
    12f6:	10 93 5a 02 	sts	0x025A, r17	; 0x80025a <__flp+0x1>
    12fa:	22 c0       	rjmp	.+68     	; 0x1340 <malloc+0x98>
    12fc:	21 15       	cp	r18, r1
    12fe:	31 05       	cpc	r19, r1
    1300:	19 f0       	breq	.+6      	; 0x1308 <malloc+0x60>
    1302:	42 17       	cp	r20, r18
    1304:	53 07       	cpc	r21, r19
    1306:	18 f4       	brcc	.+6      	; 0x130e <malloc+0x66>
    1308:	9a 01       	movw	r18, r20
    130a:	bd 01       	movw	r22, r26
    130c:	ef 01       	movw	r28, r30
    130e:	df 01       	movw	r26, r30
    1310:	f8 01       	movw	r30, r16
    1312:	db cf       	rjmp	.-74     	; 0x12ca <malloc+0x22>
    1314:	21 15       	cp	r18, r1
    1316:	31 05       	cpc	r19, r1
    1318:	f9 f0       	breq	.+62     	; 0x1358 <malloc+0xb0>
    131a:	28 1b       	sub	r18, r24
    131c:	39 0b       	sbc	r19, r25
    131e:	24 30       	cpi	r18, 0x04	; 4
    1320:	31 05       	cpc	r19, r1
    1322:	80 f4       	brcc	.+32     	; 0x1344 <malloc+0x9c>
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	9b 81       	ldd	r25, Y+3	; 0x03
    1328:	61 15       	cp	r22, r1
    132a:	71 05       	cpc	r23, r1
    132c:	21 f0       	breq	.+8      	; 0x1336 <malloc+0x8e>
    132e:	fb 01       	movw	r30, r22
    1330:	93 83       	std	Z+3, r25	; 0x03
    1332:	82 83       	std	Z+2, r24	; 0x02
    1334:	04 c0       	rjmp	.+8      	; 0x133e <malloc+0x96>
    1336:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <__flp+0x1>
    133a:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <__flp>
    133e:	fe 01       	movw	r30, r28
    1340:	32 96       	adiw	r30, 0x02	; 2
    1342:	44 c0       	rjmp	.+136    	; 0x13cc <malloc+0x124>
    1344:	fe 01       	movw	r30, r28
    1346:	e2 0f       	add	r30, r18
    1348:	f3 1f       	adc	r31, r19
    134a:	81 93       	st	Z+, r24
    134c:	91 93       	st	Z+, r25
    134e:	22 50       	subi	r18, 0x02	; 2
    1350:	31 09       	sbc	r19, r1
    1352:	39 83       	std	Y+1, r19	; 0x01
    1354:	28 83       	st	Y, r18
    1356:	3a c0       	rjmp	.+116    	; 0x13cc <malloc+0x124>
    1358:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__brkval>
    135c:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__brkval+0x1>
    1360:	23 2b       	or	r18, r19
    1362:	41 f4       	brne	.+16     	; 0x1374 <malloc+0xcc>
    1364:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1368:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    136c:	30 93 58 02 	sts	0x0258, r19	; 0x800258 <__brkval+0x1>
    1370:	20 93 57 02 	sts	0x0257, r18	; 0x800257 <__brkval>
    1374:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    1378:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    137c:	21 15       	cp	r18, r1
    137e:	31 05       	cpc	r19, r1
    1380:	41 f4       	brne	.+16     	; 0x1392 <malloc+0xea>
    1382:	2d b7       	in	r18, 0x3d	; 61
    1384:	3e b7       	in	r19, 0x3e	; 62
    1386:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    138a:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    138e:	24 1b       	sub	r18, r20
    1390:	35 0b       	sbc	r19, r21
    1392:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <__brkval>
    1396:	f0 91 58 02 	lds	r31, 0x0258	; 0x800258 <__brkval+0x1>
    139a:	e2 17       	cp	r30, r18
    139c:	f3 07       	cpc	r31, r19
    139e:	a0 f4       	brcc	.+40     	; 0x13c8 <malloc+0x120>
    13a0:	2e 1b       	sub	r18, r30
    13a2:	3f 0b       	sbc	r19, r31
    13a4:	28 17       	cp	r18, r24
    13a6:	39 07       	cpc	r19, r25
    13a8:	78 f0       	brcs	.+30     	; 0x13c8 <malloc+0x120>
    13aa:	ac 01       	movw	r20, r24
    13ac:	4e 5f       	subi	r20, 0xFE	; 254
    13ae:	5f 4f       	sbci	r21, 0xFF	; 255
    13b0:	24 17       	cp	r18, r20
    13b2:	35 07       	cpc	r19, r21
    13b4:	48 f0       	brcs	.+18     	; 0x13c8 <malloc+0x120>
    13b6:	4e 0f       	add	r20, r30
    13b8:	5f 1f       	adc	r21, r31
    13ba:	50 93 58 02 	sts	0x0258, r21	; 0x800258 <__brkval+0x1>
    13be:	40 93 57 02 	sts	0x0257, r20	; 0x800257 <__brkval>
    13c2:	81 93       	st	Z+, r24
    13c4:	91 93       	st	Z+, r25
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <malloc+0x124>
    13c8:	e0 e0       	ldi	r30, 0x00	; 0
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	cf 01       	movw	r24, r30
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	08 95       	ret

000013d8 <free>:
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	09 f4       	brne	.+2      	; 0x13e2 <free+0xa>
    13e0:	81 c0       	rjmp	.+258    	; 0x14e4 <free+0x10c>
    13e2:	fc 01       	movw	r30, r24
    13e4:	32 97       	sbiw	r30, 0x02	; 2
    13e6:	13 82       	std	Z+3, r1	; 0x03
    13e8:	12 82       	std	Z+2, r1	; 0x02
    13ea:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <__flp>
    13ee:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <__flp+0x1>
    13f2:	10 97       	sbiw	r26, 0x00	; 0
    13f4:	81 f4       	brne	.+32     	; 0x1416 <free+0x3e>
    13f6:	20 81       	ld	r18, Z
    13f8:	31 81       	ldd	r19, Z+1	; 0x01
    13fa:	82 0f       	add	r24, r18
    13fc:	93 1f       	adc	r25, r19
    13fe:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__brkval>
    1402:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__brkval+0x1>
    1406:	28 17       	cp	r18, r24
    1408:	39 07       	cpc	r19, r25
    140a:	51 f5       	brne	.+84     	; 0x1460 <free+0x88>
    140c:	f0 93 58 02 	sts	0x0258, r31	; 0x800258 <__brkval+0x1>
    1410:	e0 93 57 02 	sts	0x0257, r30	; 0x800257 <__brkval>
    1414:	67 c0       	rjmp	.+206    	; 0x14e4 <free+0x10c>
    1416:	ed 01       	movw	r28, r26
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	ce 17       	cp	r28, r30
    141e:	df 07       	cpc	r29, r31
    1420:	40 f4       	brcc	.+16     	; 0x1432 <free+0x5a>
    1422:	4a 81       	ldd	r20, Y+2	; 0x02
    1424:	5b 81       	ldd	r21, Y+3	; 0x03
    1426:	9e 01       	movw	r18, r28
    1428:	41 15       	cp	r20, r1
    142a:	51 05       	cpc	r21, r1
    142c:	f1 f0       	breq	.+60     	; 0x146a <free+0x92>
    142e:	ea 01       	movw	r28, r20
    1430:	f5 cf       	rjmp	.-22     	; 0x141c <free+0x44>
    1432:	d3 83       	std	Z+3, r29	; 0x03
    1434:	c2 83       	std	Z+2, r28	; 0x02
    1436:	40 81       	ld	r20, Z
    1438:	51 81       	ldd	r21, Z+1	; 0x01
    143a:	84 0f       	add	r24, r20
    143c:	95 1f       	adc	r25, r21
    143e:	c8 17       	cp	r28, r24
    1440:	d9 07       	cpc	r29, r25
    1442:	59 f4       	brne	.+22     	; 0x145a <free+0x82>
    1444:	88 81       	ld	r24, Y
    1446:	99 81       	ldd	r25, Y+1	; 0x01
    1448:	84 0f       	add	r24, r20
    144a:	95 1f       	adc	r25, r21
    144c:	02 96       	adiw	r24, 0x02	; 2
    144e:	91 83       	std	Z+1, r25	; 0x01
    1450:	80 83       	st	Z, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	9b 81       	ldd	r25, Y+3	; 0x03
    1456:	93 83       	std	Z+3, r25	; 0x03
    1458:	82 83       	std	Z+2, r24	; 0x02
    145a:	21 15       	cp	r18, r1
    145c:	31 05       	cpc	r19, r1
    145e:	29 f4       	brne	.+10     	; 0x146a <free+0x92>
    1460:	f0 93 5a 02 	sts	0x025A, r31	; 0x80025a <__flp+0x1>
    1464:	e0 93 59 02 	sts	0x0259, r30	; 0x800259 <__flp>
    1468:	3d c0       	rjmp	.+122    	; 0x14e4 <free+0x10c>
    146a:	e9 01       	movw	r28, r18
    146c:	fb 83       	std	Y+3, r31	; 0x03
    146e:	ea 83       	std	Y+2, r30	; 0x02
    1470:	49 91       	ld	r20, Y+
    1472:	59 91       	ld	r21, Y+
    1474:	c4 0f       	add	r28, r20
    1476:	d5 1f       	adc	r29, r21
    1478:	ec 17       	cp	r30, r28
    147a:	fd 07       	cpc	r31, r29
    147c:	61 f4       	brne	.+24     	; 0x1496 <free+0xbe>
    147e:	80 81       	ld	r24, Z
    1480:	91 81       	ldd	r25, Z+1	; 0x01
    1482:	84 0f       	add	r24, r20
    1484:	95 1f       	adc	r25, r21
    1486:	02 96       	adiw	r24, 0x02	; 2
    1488:	e9 01       	movw	r28, r18
    148a:	99 83       	std	Y+1, r25	; 0x01
    148c:	88 83       	st	Y, r24
    148e:	82 81       	ldd	r24, Z+2	; 0x02
    1490:	93 81       	ldd	r25, Z+3	; 0x03
    1492:	9b 83       	std	Y+3, r25	; 0x03
    1494:	8a 83       	std	Y+2, r24	; 0x02
    1496:	e0 e0       	ldi	r30, 0x00	; 0
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	12 96       	adiw	r26, 0x02	; 2
    149c:	8d 91       	ld	r24, X+
    149e:	9c 91       	ld	r25, X
    14a0:	13 97       	sbiw	r26, 0x03	; 3
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	19 f0       	breq	.+6      	; 0x14ac <free+0xd4>
    14a6:	fd 01       	movw	r30, r26
    14a8:	dc 01       	movw	r26, r24
    14aa:	f7 cf       	rjmp	.-18     	; 0x149a <free+0xc2>
    14ac:	8d 91       	ld	r24, X+
    14ae:	9c 91       	ld	r25, X
    14b0:	11 97       	sbiw	r26, 0x01	; 1
    14b2:	9d 01       	movw	r18, r26
    14b4:	2e 5f       	subi	r18, 0xFE	; 254
    14b6:	3f 4f       	sbci	r19, 0xFF	; 255
    14b8:	82 0f       	add	r24, r18
    14ba:	93 1f       	adc	r25, r19
    14bc:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__brkval>
    14c0:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__brkval+0x1>
    14c4:	28 17       	cp	r18, r24
    14c6:	39 07       	cpc	r19, r25
    14c8:	69 f4       	brne	.+26     	; 0x14e4 <free+0x10c>
    14ca:	30 97       	sbiw	r30, 0x00	; 0
    14cc:	29 f4       	brne	.+10     	; 0x14d8 <free+0x100>
    14ce:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <__flp+0x1>
    14d2:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <__flp>
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <free+0x104>
    14d8:	13 82       	std	Z+3, r1	; 0x03
    14da:	12 82       	std	Z+2, r1	; 0x02
    14dc:	b0 93 58 02 	sts	0x0258, r27	; 0x800258 <__brkval+0x1>
    14e0:	a0 93 57 02 	sts	0x0257, r26	; 0x800257 <__brkval>
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <realloc>:
    14ea:	a0 e0       	ldi	r26, 0x00	; 0
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	ea e7       	ldi	r30, 0x7A	; 122
    14f0:	fa e0       	ldi	r31, 0x0A	; 10
    14f2:	d9 c0       	rjmp	.+434    	; 0x16a6 <__prologue_saves__+0x8>
    14f4:	ec 01       	movw	r28, r24
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	19 f4       	brne	.+6      	; 0x1500 <realloc+0x16>
    14fa:	cb 01       	movw	r24, r22
    14fc:	d5 de       	rcall	.-598    	; 0x12a8 <malloc>
    14fe:	b0 c0       	rjmp	.+352    	; 0x1660 <realloc+0x176>
    1500:	fc 01       	movw	r30, r24
    1502:	e6 0f       	add	r30, r22
    1504:	f7 1f       	adc	r31, r23
    1506:	9c 01       	movw	r18, r24
    1508:	22 50       	subi	r18, 0x02	; 2
    150a:	31 09       	sbc	r19, r1
    150c:	e2 17       	cp	r30, r18
    150e:	f3 07       	cpc	r31, r19
    1510:	08 f4       	brcc	.+2      	; 0x1514 <realloc+0x2a>
    1512:	a4 c0       	rjmp	.+328    	; 0x165c <realloc+0x172>
    1514:	d9 01       	movw	r26, r18
    1516:	0d 91       	ld	r16, X+
    1518:	1c 91       	ld	r17, X
    151a:	11 97       	sbiw	r26, 0x01	; 1
    151c:	06 17       	cp	r16, r22
    151e:	17 07       	cpc	r17, r23
    1520:	a8 f0       	brcs	.+42     	; 0x154c <realloc+0x62>
    1522:	05 30       	cpi	r16, 0x05	; 5
    1524:	11 05       	cpc	r17, r1
    1526:	08 f4       	brcc	.+2      	; 0x152a <realloc+0x40>
    1528:	97 c0       	rjmp	.+302    	; 0x1658 <realloc+0x16e>
    152a:	c8 01       	movw	r24, r16
    152c:	04 97       	sbiw	r24, 0x04	; 4
    152e:	86 17       	cp	r24, r22
    1530:	97 07       	cpc	r25, r23
    1532:	08 f4       	brcc	.+2      	; 0x1536 <realloc+0x4c>
    1534:	91 c0       	rjmp	.+290    	; 0x1658 <realloc+0x16e>
    1536:	02 50       	subi	r16, 0x02	; 2
    1538:	11 09       	sbc	r17, r1
    153a:	06 1b       	sub	r16, r22
    153c:	17 0b       	sbc	r17, r23
    153e:	01 93       	st	Z+, r16
    1540:	11 93       	st	Z+, r17
    1542:	6d 93       	st	X+, r22
    1544:	7c 93       	st	X, r23
    1546:	cf 01       	movw	r24, r30
    1548:	47 df       	rcall	.-370    	; 0x13d8 <free>
    154a:	86 c0       	rjmp	.+268    	; 0x1658 <realloc+0x16e>
    154c:	5b 01       	movw	r10, r22
    154e:	a0 1a       	sub	r10, r16
    1550:	b1 0a       	sbc	r11, r17
    1552:	4c 01       	movw	r8, r24
    1554:	80 0e       	add	r8, r16
    1556:	91 1e       	adc	r9, r17
    1558:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <__flp>
    155c:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <__flp+0x1>
    1560:	61 2c       	mov	r6, r1
    1562:	71 2c       	mov	r7, r1
    1564:	e1 2c       	mov	r14, r1
    1566:	f1 2c       	mov	r15, r1
    1568:	10 97       	sbiw	r26, 0x00	; 0
    156a:	09 f4       	brne	.+2      	; 0x156e <realloc+0x84>
    156c:	46 c0       	rjmp	.+140    	; 0x15fa <realloc+0x110>
    156e:	8d 91       	ld	r24, X+
    1570:	9c 91       	ld	r25, X
    1572:	11 97       	sbiw	r26, 0x01	; 1
    1574:	a8 15       	cp	r26, r8
    1576:	b9 05       	cpc	r27, r9
    1578:	b1 f5       	brne	.+108    	; 0x15e6 <realloc+0xfc>
    157a:	6c 01       	movw	r12, r24
    157c:	42 e0       	ldi	r20, 0x02	; 2
    157e:	c4 0e       	add	r12, r20
    1580:	d1 1c       	adc	r13, r1
    1582:	ca 14       	cp	r12, r10
    1584:	db 04       	cpc	r13, r11
    1586:	78 f1       	brcs	.+94     	; 0x15e6 <realloc+0xfc>
    1588:	4c 01       	movw	r8, r24
    158a:	8a 18       	sub	r8, r10
    158c:	9b 08       	sbc	r9, r11
    158e:	64 01       	movw	r12, r8
    1590:	42 e0       	ldi	r20, 0x02	; 2
    1592:	c4 0e       	add	r12, r20
    1594:	d1 1c       	adc	r13, r1
    1596:	12 96       	adiw	r26, 0x02	; 2
    1598:	bc 90       	ld	r11, X
    159a:	12 97       	sbiw	r26, 0x02	; 2
    159c:	13 96       	adiw	r26, 0x03	; 3
    159e:	ac 91       	ld	r26, X
    15a0:	b5 e0       	ldi	r27, 0x05	; 5
    15a2:	cb 16       	cp	r12, r27
    15a4:	d1 04       	cpc	r13, r1
    15a6:	40 f0       	brcs	.+16     	; 0x15b8 <realloc+0xce>
    15a8:	b2 82       	std	Z+2, r11	; 0x02
    15aa:	a3 83       	std	Z+3, r26	; 0x03
    15ac:	91 82       	std	Z+1, r9	; 0x01
    15ae:	80 82       	st	Z, r8
    15b0:	d9 01       	movw	r26, r18
    15b2:	6d 93       	st	X+, r22
    15b4:	7c 93       	st	X, r23
    15b6:	09 c0       	rjmp	.+18     	; 0x15ca <realloc+0xe0>
    15b8:	0e 5f       	subi	r16, 0xFE	; 254
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	80 0f       	add	r24, r16
    15be:	91 1f       	adc	r25, r17
    15c0:	f9 01       	movw	r30, r18
    15c2:	91 83       	std	Z+1, r25	; 0x01
    15c4:	80 83       	st	Z, r24
    15c6:	eb 2d       	mov	r30, r11
    15c8:	fa 2f       	mov	r31, r26
    15ca:	e1 14       	cp	r14, r1
    15cc:	f1 04       	cpc	r15, r1
    15ce:	31 f0       	breq	.+12     	; 0x15dc <realloc+0xf2>
    15d0:	d7 01       	movw	r26, r14
    15d2:	13 96       	adiw	r26, 0x03	; 3
    15d4:	fc 93       	st	X, r31
    15d6:	ee 93       	st	-X, r30
    15d8:	12 97       	sbiw	r26, 0x02	; 2
    15da:	3e c0       	rjmp	.+124    	; 0x1658 <realloc+0x16e>
    15dc:	f0 93 5a 02 	sts	0x025A, r31	; 0x80025a <__flp+0x1>
    15e0:	e0 93 59 02 	sts	0x0259, r30	; 0x800259 <__flp>
    15e4:	39 c0       	rjmp	.+114    	; 0x1658 <realloc+0x16e>
    15e6:	68 16       	cp	r6, r24
    15e8:	79 06       	cpc	r7, r25
    15ea:	08 f4       	brcc	.+2      	; 0x15ee <realloc+0x104>
    15ec:	3c 01       	movw	r6, r24
    15ee:	7d 01       	movw	r14, r26
    15f0:	12 96       	adiw	r26, 0x02	; 2
    15f2:	0d 90       	ld	r0, X+
    15f4:	bc 91       	ld	r27, X
    15f6:	a0 2d       	mov	r26, r0
    15f8:	b7 cf       	rjmp	.-146    	; 0x1568 <realloc+0x7e>
    15fa:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <__brkval>
    15fe:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <__brkval+0x1>
    1602:	88 16       	cp	r8, r24
    1604:	99 06       	cpc	r9, r25
    1606:	e1 f4       	brne	.+56     	; 0x1640 <realloc+0x156>
    1608:	66 16       	cp	r6, r22
    160a:	77 06       	cpc	r7, r23
    160c:	c8 f4       	brcc	.+50     	; 0x1640 <realloc+0x156>
    160e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    1612:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	41 f4       	brne	.+16     	; 0x162a <realloc+0x140>
    161a:	8d b7       	in	r24, 0x3d	; 61
    161c:	9e b7       	in	r25, 0x3e	; 62
    161e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1622:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1626:	84 1b       	sub	r24, r20
    1628:	95 0b       	sbc	r25, r21
    162a:	e8 17       	cp	r30, r24
    162c:	f9 07       	cpc	r31, r25
    162e:	b0 f4       	brcc	.+44     	; 0x165c <realloc+0x172>
    1630:	f0 93 58 02 	sts	0x0258, r31	; 0x800258 <__brkval+0x1>
    1634:	e0 93 57 02 	sts	0x0257, r30	; 0x800257 <__brkval>
    1638:	f9 01       	movw	r30, r18
    163a:	71 83       	std	Z+1, r23	; 0x01
    163c:	60 83       	st	Z, r22
    163e:	0c c0       	rjmp	.+24     	; 0x1658 <realloc+0x16e>
    1640:	cb 01       	movw	r24, r22
    1642:	32 de       	rcall	.-924    	; 0x12a8 <malloc>
    1644:	7c 01       	movw	r14, r24
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	49 f0       	breq	.+18     	; 0x165c <realloc+0x172>
    164a:	a8 01       	movw	r20, r16
    164c:	be 01       	movw	r22, r28
    164e:	0c d0       	rcall	.+24     	; 0x1668 <memcpy>
    1650:	ce 01       	movw	r24, r28
    1652:	c2 de       	rcall	.-636    	; 0x13d8 <free>
    1654:	c7 01       	movw	r24, r14
    1656:	04 c0       	rjmp	.+8      	; 0x1660 <realloc+0x176>
    1658:	ce 01       	movw	r24, r28
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <realloc+0x176>
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	ee e0       	ldi	r30, 0x0E	; 14
    1666:	3b c0       	rjmp	.+118    	; 0x16de <__epilogue_restores__+0x8>

00001668 <memcpy>:
    1668:	fb 01       	movw	r30, r22
    166a:	dc 01       	movw	r26, r24
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <memcpy+0xa>
    166e:	01 90       	ld	r0, Z+
    1670:	0d 92       	st	X+, r0
    1672:	41 50       	subi	r20, 0x01	; 1
    1674:	50 40       	sbci	r21, 0x00	; 0
    1676:	d8 f7       	brcc	.-10     	; 0x166e <memcpy+0x6>
    1678:	08 95       	ret

0000167a <memset>:
    167a:	dc 01       	movw	r26, r24
    167c:	01 c0       	rjmp	.+2      	; 0x1680 <memset+0x6>
    167e:	6d 93       	st	X+, r22
    1680:	41 50       	subi	r20, 0x01	; 1
    1682:	50 40       	sbci	r21, 0x00	; 0
    1684:	e0 f7       	brcc	.-8      	; 0x167e <memset+0x4>
    1686:	08 95       	ret

00001688 <strcat>:
    1688:	fb 01       	movw	r30, r22
    168a:	dc 01       	movw	r26, r24
    168c:	0d 90       	ld	r0, X+
    168e:	00 20       	and	r0, r0
    1690:	e9 f7       	brne	.-6      	; 0x168c <strcat+0x4>
    1692:	11 97       	sbiw	r26, 0x01	; 1
    1694:	01 90       	ld	r0, Z+
    1696:	0d 92       	st	X+, r0
    1698:	00 20       	and	r0, r0
    169a:	e1 f7       	brne	.-8      	; 0x1694 <strcat+0xc>
    169c:	08 95       	ret

0000169e <__prologue_saves__>:
    169e:	2f 92       	push	r2
    16a0:	3f 92       	push	r3
    16a2:	4f 92       	push	r4
    16a4:	5f 92       	push	r5
    16a6:	6f 92       	push	r6
    16a8:	7f 92       	push	r7
    16aa:	8f 92       	push	r8
    16ac:	9f 92       	push	r9
    16ae:	af 92       	push	r10
    16b0:	bf 92       	push	r11
    16b2:	cf 92       	push	r12
    16b4:	df 92       	push	r13
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	ca 1b       	sub	r28, r26
    16c8:	db 0b       	sbc	r29, r27
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	09 94       	ijmp

000016d6 <__epilogue_restores__>:
    16d6:	2a 88       	ldd	r2, Y+18	; 0x12
    16d8:	39 88       	ldd	r3, Y+17	; 0x11
    16da:	48 88       	ldd	r4, Y+16	; 0x10
    16dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    16de:	6e 84       	ldd	r6, Y+14	; 0x0e
    16e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    16e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    16e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    16e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    16e8:	b9 84       	ldd	r11, Y+9	; 0x09
    16ea:	c8 84       	ldd	r12, Y+8	; 0x08
    16ec:	df 80       	ldd	r13, Y+7	; 0x07
    16ee:	ee 80       	ldd	r14, Y+6	; 0x06
    16f0:	fd 80       	ldd	r15, Y+5	; 0x05
    16f2:	0c 81       	ldd	r16, Y+4	; 0x04
    16f4:	1b 81       	ldd	r17, Y+3	; 0x03
    16f6:	aa 81       	ldd	r26, Y+2	; 0x02
    16f8:	b9 81       	ldd	r27, Y+1	; 0x01
    16fa:	ce 0f       	add	r28, r30
    16fc:	d1 1d       	adc	r29, r1
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	ed 01       	movw	r28, r26
    170a:	08 95       	ret

0000170c <_exit>:
    170c:	f8 94       	cli

0000170e <__stop_program>:
    170e:	ff cf       	rjmp	.-2      	; 0x170e <__stop_program>
